
Initial code

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         new_image[i][j] = 0;                                           /*0009*/
         for(k = 0; k <= 2; k += 1)
            for(l = 0; l <= 2; l += 1)
               new_image[i][j] = new_image[i][j]+image[i+k][j+l]+kernel[k][l];         /*0012*/
         new_image[i][j] = new_image[i][j]/9;                           /*0013*/
      }
}

After flattening

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         new_image[i][j] = 0;                                           /*0009*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+0]+kernel[0][0];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+1]+kernel[0][1];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+2]+kernel[0][2];               /*0012*/
         l = 3;
         new_image[i][j] = new_image[i][j]+image[i+1][j+0]+kernel[1][0];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+1][j+1]+kernel[1][1];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+1][j+2]+kernel[1][2];               /*0012*/
         l = 3;
         new_image[i][j] = new_image[i][j]+image[i+2][j+0]+kernel[2][0];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+2][j+1]+kernel[2][1];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+2][j+2]+kernel[2][2];               /*0012*/
         l = 3;
         k = 3;
         new_image[i][j] = new_image[i][j]/9;                           /*0013*/
      }
}

Microcode after scalarization

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         __scalar__0 = __scalar__0+image[i+0][j+0]+kernel[0][0];        /*0012*/
         __scalar__0 = __scalar__0+image[i+0][j+1]+kernel[0][1];        /*0012*/
         __scalar__0 = __scalar__0+image[i+0][j+2]+kernel[0][2];        /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[i+1][j+0]+kernel[1][0];        /*0012*/
         __scalar__0 = __scalar__0+image[i+1][j+1]+kernel[1][1];        /*0012*/
         __scalar__0 = __scalar__0+image[i+1][j+2]+kernel[1][2];        /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[i+2][j+0]+kernel[2][0];        /*0012*/
         __scalar__0 = __scalar__0+image[i+2][j+1]+kernel[2][1];        /*0012*/
         __scalar__0 = __scalar__0+image[i+2][j+2]+kernel[2][2];        /*0012*/
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;                                   /*0013*/
         new_image[i][j] = __scalar__0;
      }
}

Microcode After array conversion

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         __scalar__0 = __scalar__0+image[512*i+j]+kernel[0];            /*0012*/
         __scalar__0 = __scalar__0+image[512*i+j+1]+kernel[1];          /*0012*/
         __scalar__0 = __scalar__0+image[512*i+j+2]+kernel[2];          /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[512*i+512+j]+kernel[3];        /*0012*/
         __scalar__0 = __scalar__0+image[512*i+j+513]+kernel[4];        /*0012*/
         __scalar__0 = __scalar__0+image[512*i+j+514]+kernel[5];        /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[512*i+1024+j]+kernel[6];       /*0012*/
         __scalar__0 = __scalar__0+image[512*i+j+1025]+kernel[7];       /*0012*/
         __scalar__0 = __scalar__0+image[512*i+j+1026]+kernel[8];       /*0012*/
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;                                   /*0013*/
         new_image[512*i+j] = __scalar__0;
      }
}

Microcode after CSE

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = 512*i;
         I_2 = I_1+j;
         __scalar__0 = __scalar__0+image[I_2]+kernel[0];
         __scalar__0 = __scalar__0+image[I_2+1]+kernel[1];
         __scalar__0 = __scalar__0+image[I_2+2]+kernel[2];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+512+j]+kernel[3];
         __scalar__0 = __scalar__0+image[I_2+513]+kernel[4];
         __scalar__0 = __scalar__0+image[I_2+514]+kernel[5];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+1024+j]+kernel[6];
         __scalar__0 = __scalar__0+image[I_2+1025]+kernel[7];
         __scalar__0 = __scalar__0+image[I_2+1026]+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   ;
}

Microcode after ICM

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1+j;
         __scalar__0 = __scalar__0+image[I_2]+kernel[0];
         __scalar__0 = __scalar__0+image[I_2+1]+kernel[1];
         __scalar__0 = __scalar__0+image[I_2+2]+kernel[2];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+512+j]+kernel[3];
         __scalar__0 = __scalar__0+image[I_2+513]+kernel[4];
         __scalar__0 = __scalar__0+image[I_2+514]+kernel[5];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+1024+j]+kernel[6];
         __scalar__0 = __scalar__0+image[I_2+1025]+kernel[7];
         __scalar__0 = __scalar__0+image[I_2+1026]+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Microcode After atomization

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1+j;
         I_52 = __scalar__0+image[I_2];
         __scalar__0 = I_52+kernel[0];
         I_53 = I_2+1;
         I_54 = __scalar__0+image[I_53];
         __scalar__0 = I_54+kernel[1];
         I_55 = I_2+2;
         I_56 = __scalar__0+image[I_55];
         __scalar__0 = I_56+kernel[2];
         l = 3;
         I_57 = I_1+512;
         I_58 = I_57+j;
         I_59 = __scalar__0+image[I_58];
         __scalar__0 = I_59+kernel[3];
         I_60 = I_2+513;
         I_61 = __scalar__0+image[I_60];
         __scalar__0 = I_61+kernel[4];
         I_62 = I_2+514;
         I_63 = __scalar__0+image[I_62];
         __scalar__0 = I_63+kernel[5];
         l = 3;
         I_64 = I_1+1024;
         I_65 = I_64+j;
         I_66 = __scalar__0+image[I_65];
         __scalar__0 = I_66+kernel[6];
         I_67 = I_2+1025;
         I_68 = __scalar__0+image[I_67];
         __scalar__0 = I_68+kernel[7];
         I_69 = I_2+1026;
         I_70 = __scalar__0+image[I_69];
         __scalar__0 = I_70+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Atomized code

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1+j;
         I_52 = __scalar__0+image[I_2];
         __scalar__0 = I_52+kernel[0];
         I_53 = I_2+1;
         I_54 = __scalar__0+image[I_53];
         __scalar__0 = I_54+kernel[1];
         I_55 = I_2+2;
         I_56 = __scalar__0+image[I_55];
         __scalar__0 = I_56+kernel[2];
         l = 3;
         I_57 = I_1+512;
         I_58 = I_57+j;
         I_59 = __scalar__0+image[I_58];
         __scalar__0 = I_59+kernel[3];
         I_60 = I_2+513;
         I_61 = __scalar__0+image[I_60];
         __scalar__0 = I_61+kernel[4];
         I_62 = I_2+514;
         I_63 = __scalar__0+image[I_62];
         __scalar__0 = I_63+kernel[5];
         l = 3;
         I_64 = I_1+1024;
         I_65 = I_64+j;
         I_66 = __scalar__0+image[I_65];
         __scalar__0 = I_66+kernel[6];
         I_67 = I_2+1025;
         I_68 = __scalar__0+image[I_67];
         __scalar__0 = I_68+kernel[7];
         I_69 = I_2+1026;
         I_70 = __scalar__0+image[I_69];
         __scalar__0 = I_70+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Tidy code

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72, I_73, I_74;
   //PIPS generated variable
   short I_75, I_76, I_77, I_78;
   //PIPS generated variable
   int I_79;
   //PIPS generated variable
   short I_80, I_81, I_82, I_83;
   //PIPS generated variable
   int I_84;
   //PIPS generated variable
   short I_85, I_86, I_87, I_88;
   //PIPS generated variable
   int I_89, I_90;
   //PIPS generated variable
   short I_91, I_92, I_93, I_94;
   //PIPS generated variable
   int I_95;
   //PIPS generated variable
   short I_96, I_97, I_98, I_99;
   //PIPS generated variable
   int I_100;
   //PIPS generated variable
   short I_101, I_102, I_103, I_104;
   //PIPS generated variable
   int I_105, I_106;
   //PIPS generated variable
   short I_107, I_108, I_109, I_110;
   //PIPS generated variable
   int I_111;
   //PIPS generated variable
   short I_112, I_113, I_114, I_115;
   //PIPS generated variable
   int I_116;
   //PIPS generated variable
   short I_117, I_118, I_119, I_120;
   //PIPS generated variable
   int I_121;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1+j;
         I_52 = __scalar__0+image[I_2];
         __scalar__0 = I_52+kernel[0];
         I_53 = I_2+1;
         I_54 = __scalar__0+image[I_53];
         __scalar__0 = I_54+kernel[1];
         I_55 = I_2+2;
         I_56 = __scalar__0+image[I_55];
         __scalar__0 = I_56+kernel[2];
         l = 3;
         I_57 = I_1+512;
         I_58 = I_57+j;
         I_59 = __scalar__0+image[I_58];
         __scalar__0 = I_59+kernel[3];
         I_60 = I_2+513;
         I_61 = __scalar__0+image[I_60];
         __scalar__0 = I_61+kernel[4];
         I_62 = I_2+514;
         I_63 = __scalar__0+image[I_62];
         __scalar__0 = I_63+kernel[5];
         l = 3;
         I_64 = I_1+1024;
         I_65 = I_64+j;
         I_66 = __scalar__0+image[I_65];
         __scalar__0 = I_66+kernel[6];
         I_67 = I_2+1025;
         I_68 = __scalar__0+image[I_67];
         __scalar__0 = I_68+kernel[7];
         I_69 = I_2+1026;
         I_70 = __scalar__0+image[I_69];
         __scalar__0 = I_70+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Code in a two adress fashion

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72, I_73, I_74;
   //PIPS generated variable
   short I_75, I_76, I_77, I_78;
   //PIPS generated variable
   int I_79;
   //PIPS generated variable
   short I_80, I_81, I_82, I_83;
   //PIPS generated variable
   int I_84;
   //PIPS generated variable
   short I_85, I_86, I_87, I_88;
   //PIPS generated variable
   int I_89, I_90;
   //PIPS generated variable
   short I_91, I_92, I_93, I_94;
   //PIPS generated variable
   int I_95;
   //PIPS generated variable
   short I_96, I_97, I_98, I_99;
   //PIPS generated variable
   int I_100;
   //PIPS generated variable
   short I_101, I_102, I_103, I_104;
   //PIPS generated variable
   int I_105, I_106;
   //PIPS generated variable
   short I_107, I_108, I_109, I_110;
   //PIPS generated variable
   int I_111;
   //PIPS generated variable
   short I_112, I_113, I_114, I_115;
   //PIPS generated variable
   int I_116;
   //PIPS generated variable
   short I_117, I_118, I_119, I_120;
   //PIPS generated variable
   int I_121;
   I_51 = iter2;
   I_51 = I_51-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512;
      I_50 = I_50*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1;
         I_2 = I_2+j;
         I_52 = __scalar__0;
         I_52 = I_52+image[I_2];
         __scalar__0 = I_52;
         __scalar__0 = __scalar__0+kernel[0];
         I_53 = I_2;
         I_53 = I_53+1;
         I_54 = __scalar__0;
         I_54 = I_54+image[I_53];
         __scalar__0 = I_54;
         __scalar__0 = __scalar__0+kernel[1];
         I_55 = I_2;
         I_55 = I_55+2;
         I_56 = __scalar__0;
         I_56 = I_56+image[I_55];
         __scalar__0 = I_56;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_57 = I_1;
         I_57 = I_57+512;
         I_58 = I_57;
         I_58 = I_58+j;
         I_59 = __scalar__0;
         I_59 = I_59+image[I_58];
         __scalar__0 = I_59;
         __scalar__0 = __scalar__0+kernel[3];
         I_60 = I_2;
         I_60 = I_60+513;
         I_61 = __scalar__0;
         I_61 = I_61+image[I_60];
         __scalar__0 = I_61;
         __scalar__0 = __scalar__0+kernel[4];
         I_62 = I_2;
         I_62 = I_62+514;
         I_63 = __scalar__0;
         I_63 = I_63+image[I_62];
         __scalar__0 = I_63;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_64 = I_1;
         I_64 = I_64+1024;
         I_65 = I_64;
         I_65 = I_65+j;
         I_66 = __scalar__0;
         I_66 = I_66+image[I_65];
         __scalar__0 = I_66;
         __scalar__0 = __scalar__0+kernel[6];
         I_67 = I_2;
         I_67 = I_67+1025;
         I_68 = __scalar__0;
         I_68 = I_68+image[I_67];
         __scalar__0 = I_68;
         __scalar__0 = __scalar__0+kernel[7];
         I_69 = I_2;
         I_69 = I_69+1026;
         I_70 = __scalar__0;
         I_70 = I_70+image[I_69];
         __scalar__0 = I_70;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Code after flattening

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72, I_73, I_74;
   //PIPS generated variable
   short I_75, I_76, I_77, I_78;
   //PIPS generated variable
   int I_79;
   //PIPS generated variable
   short I_80, I_81, I_82, I_83;
   //PIPS generated variable
   int I_84;
   //PIPS generated variable
   short I_85, I_86, I_87, I_88;
   //PIPS generated variable
   int I_89, I_90;
   //PIPS generated variable
   short I_91, I_92, I_93, I_94;
   //PIPS generated variable
   int I_95;
   //PIPS generated variable
   short I_96, I_97, I_98, I_99;
   //PIPS generated variable
   int I_100;
   //PIPS generated variable
   short I_101, I_102, I_103, I_104;
   //PIPS generated variable
   int I_105, I_106;
   //PIPS generated variable
   short I_107, I_108, I_109, I_110;
   //PIPS generated variable
   int I_111;
   //PIPS generated variable
   short I_112, I_113, I_114, I_115;
   //PIPS generated variable
   int I_116;
   //PIPS generated variable
   short I_117, I_118, I_119, I_120;
   //PIPS generated variable
   int I_121;
   I_51 = iter2;
   I_51 = I_51-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512;
      I_50 = I_50*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1;
         I_2 = I_2+j;
         I_52 = __scalar__0;
         I_52 = I_52+image[I_2];
         __scalar__0 = I_52;
         __scalar__0 = __scalar__0+kernel[0];
         I_53 = I_2;
         I_53 = I_53+1;
         I_54 = __scalar__0;
         I_54 = I_54+image[I_53];
         __scalar__0 = I_54;
         __scalar__0 = __scalar__0+kernel[1];
         I_55 = I_2;
         I_55 = I_55+2;
         I_56 = __scalar__0;
         I_56 = I_56+image[I_55];
         __scalar__0 = I_56;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_57 = I_1;
         I_57 = I_57+512;
         I_58 = I_57;
         I_58 = I_58+j;
         I_59 = __scalar__0;
         I_59 = I_59+image[I_58];
         __scalar__0 = I_59;
         __scalar__0 = __scalar__0+kernel[3];
         I_60 = I_2;
         I_60 = I_60+513;
         I_61 = __scalar__0;
         I_61 = I_61+image[I_60];
         __scalar__0 = I_61;
         __scalar__0 = __scalar__0+kernel[4];
         I_62 = I_2;
         I_62 = I_62+514;
         I_63 = __scalar__0;
         I_63 = I_63+image[I_62];
         __scalar__0 = I_63;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_64 = I_1;
         I_64 = I_64+1024;
         I_65 = I_64;
         I_65 = I_65+j;
         I_66 = __scalar__0;
         I_66 = I_66+image[I_65];
         __scalar__0 = I_66;
         __scalar__0 = __scalar__0+kernel[6];
         I_67 = I_2;
         I_67 = I_67+1025;
         I_68 = __scalar__0;
         I_68 = I_68+image[I_67];
         __scalar__0 = I_68;
         __scalar__0 = __scalar__0+kernel[7];
         I_69 = I_2;
         I_69 = I_69+1026;
         I_70 = __scalar__0;
         I_70 = I_70+image[I_69];
         __scalar__0 = I_70;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Code after some cleaning

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0004*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   I_51 = iter2;
   I_51 = I_51-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512;
      I_50 = I_50*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_1 = I_50;
         I_2 = I_1;
         I_2 = I_2+j;
         I_52 = __scalar__0;
         I_52 = I_52+image[I_2];
         __scalar__0 = I_52;
         __scalar__0 = __scalar__0+kernel[0];
         I_53 = I_2;
         I_53 = I_53+1;
         I_54 = __scalar__0;
         I_54 = I_54+image[I_53];
         __scalar__0 = I_54;
         __scalar__0 = __scalar__0+kernel[1];
         I_55 = I_2;
         I_55 = I_55+2;
         I_56 = __scalar__0;
         I_56 = I_56+image[I_55];
         __scalar__0 = I_56;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_57 = I_1;
         I_57 = I_57+512;
         I_58 = I_57;
         I_58 = I_58+j;
         I_59 = __scalar__0;
         I_59 = I_59+image[I_58];
         __scalar__0 = I_59;
         __scalar__0 = __scalar__0+kernel[3];
         I_60 = I_2;
         I_60 = I_60+513;
         I_61 = __scalar__0;
         I_61 = I_61+image[I_60];
         __scalar__0 = I_61;
         __scalar__0 = __scalar__0+kernel[4];
         I_62 = I_2;
         I_62 = I_62+514;
         I_63 = __scalar__0;
         I_63 = I_63+image[I_62];
         __scalar__0 = I_63;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_64 = I_1;
         I_64 = I_64+1024;
         I_65 = I_64;
         I_65 = I_65+j;
         I_66 = __scalar__0;
         I_66 = I_66+image[I_65];
         __scalar__0 = I_66;
         __scalar__0 = __scalar__0+kernel[6];
         I_67 = I_2;
         I_67 = I_67+1025;
         I_68 = __scalar__0;
         I_68 = I_68+image[I_67];
         __scalar__0 = I_68;
         __scalar__0 = __scalar__0+kernel[7];
         I_69 = I_2;
         I_69 = I_69+1026;
         I_70 = __scalar__0;
         I_70 = I_70+image[I_69];
         __scalar__0 = I_70;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_2] = __scalar__0;
      }
   }
   ;
}

Microcode after normalization

image seems a mask
kernel seems a mask
new_image seems a mask
iter1 belongs to a loop bound
parameter iter2 is not valid
void microcode(short *FIFO0, short *FIFO1, short *FIFO2, short iter1, short iter2)
{
   //PIPS generated variable
   short re0;
   //PIPS generated variable
   int re1;
   //PIPS generated variable
   short re2;
   //PIPS generated variable
   int re3;
   //PIPS generated variable
   short re4;
   //PIPS generated variable
   int re5, re6;
   //PIPS generated variable
   short re7;
   //PIPS generated variable
   int re8;
   //PIPS generated variable
   short re9;
   //PIPS generated variable
   int re10;
   //PIPS generated variable
   short re11;
   //PIPS generated variable
   int re12, re13;
   //PIPS generated variable
   short re14;
   //PIPS generated variable
   int re15;
   //PIPS generated variable
   short re16;
   //PIPS generated variable
   int re17;
   //PIPS generated variable
   short re18;
   //PIPS generated variable
   int re19, re20, re21, re22;
   //PIPS generated variable
   short re23;
   //PIPS generated variable
   short re24, re25, re26, re27;
   //PIPS generated variable
   short *im3, *im5, *im7;
   //PIPS generated variable
   int N0 = iter2, N1 = iter1;
   im7 = FIFO2;
   im5 = FIFO1;
   im3 = FIFO0;
   re19 = iter2;
   re19 = re19-1;
   re24 = 1;
   while (re24<=N1) {
      re20 = 512;
      re20 = re20*re24;
      re25 = 1;
      while (re25<=N0) {
         re23 = 0;                                                      /*0009*/
         re22 = re20;
         re21 = re22;
         re21 = re21+re25;
         re18 = re23;
         re18 = re18+im3[re21];
         re23 = re18;
         re23 = re23+im5[0];
         re17 = re21;
         re17 = re17+1;
         re16 = re23;
         re16 = re16+im3[re17];
         re23 = re16;
         re23 = re23+im5[1];
         re15 = re21;
         re15 = re15+2;
         re14 = re23;
         re14 = re14+im3[re15];
         re23 = re14;
         re23 = re23+im5[2];
         re27 = 3;
         re13 = re22;
         re13 = re13+512;
         re12 = re13;
         re12 = re12+re25;
         re11 = re23;
         re11 = re11+im3[re12];
         re23 = re11;
         re23 = re23+im5[3];
         re10 = re21;
         re10 = re10+513;
         re9 = re23;
         re9 = re9+im3[re10];
         re23 = re9;
         re23 = re23+im5[4];
         re8 = re21;
         re8 = re8+514;
         re7 = re23;
         re7 = re7+im3[re8];
         re23 = re7;
         re23 = re23+im5[5];
         re27 = 3;
         re6 = re22;
         re6 = re6+1024;
         re5 = re6;
         re5 = re5+re25;
         re4 = re23;
         re4 = re4+im3[re5];
         re23 = re4;
         re23 = re23+im5[6];
         re3 = re21;
         re3 = re3+1025;
         re2 = re23;
         re2 = re2+im3[re3];
         re23 = re2;
         re23 = re23+im5[7];
         re1 = re21;
         re1 = re1+1026;
         re0 = re23;
         re0 = re0+im3[re1];
         re23 = re0;
         re23 = re23+im5[8];
         re27 = 3;
         re26 = 3;
         re23 = re23/9;
         im7[re21] = re23;
         re25 = 1+re25;
      }
      re24 = 1+re24;
   }
   ;
}

Code after expression substitution

void microcode(short *FIFO0, short *FIFO1, short *FIFO2, short iter1, short iter2)
{
   //PIPS generated variable
   short re0;
   //PIPS generated variable
   int re1;
   //PIPS generated variable
   short re2;
   //PIPS generated variable
   int re3;
   //PIPS generated variable
   short re4;
   //PIPS generated variable
   int re5, re6;
   //PIPS generated variable
   short re7;
   //PIPS generated variable
   int re8;
   //PIPS generated variable
   short re9;
   //PIPS generated variable
   int re10;
   //PIPS generated variable
   short re11;
   //PIPS generated variable
   int re12, re13;
   //PIPS generated variable
   short re14;
   //PIPS generated variable
   int re15;
   //PIPS generated variable
   short re16;
   //PIPS generated variable
   int re17;
   //PIPS generated variable
   short re18;
   //PIPS generated variable
   int re19, re20, re21, re22;
   //PIPS generated variable
   short re23;
   //PIPS generated variable
   short re24, re25, re26, re27;
   //PIPS generated variable
   short *im3, *im5, *im7;
   //PIPS generated variable
   int N0 = iter2, N1 = iter1;
   seti(im7, FIFO2);
   seti(im5, FIFO1);
   seti(im3, FIFO0);
   seti(re19, iter2);
   subf(re19, 1);
   seti(re24, 1);
   while (re24<=N1) {
      seti(re20, 512);
      mulf(re20, re24);
      seti(re25, 1);
      while (re25<=N0) {
         seti(re23, 0);                                                 /*0009*/
         seti(re22, re20);
         seti(re21, re22);
         addf(re21, re25);
         seti(re18, re23);
         addf(re18, im3[re21]);
         seti(re23, re18);
         addf(re23, im5[0]);
         seti(re17, re21);
         addf(re17, 1);
         seti(re16, re23);
         addf(re16, im3[re17]);
         seti(re23, re16);
         addf(re23, im5[1]);
         seti(re15, re21);
         addf(re15, 2);
         seti(re14, re23);
         addf(re14, im3[re15]);
         seti(re23, re14);
         addf(re23, im5[2]);
         seti(re27, 3);
         seti(re13, re22);
         addf(re13, 512);
         seti(re12, re13);
         addf(re12, re25);
         seti(re11, re23);
         addf(re11, im3[re12]);
         seti(re23, re11);
         addf(re23, im5[3]);
         seti(re10, re21);
         addf(re10, 513);
         seti(re9, re23);
         addf(re9, im3[re10]);
         seti(re23, re9);
         addf(re23, im5[4]);
         seti(re8, re21);
         addf(re8, 514);
         seti(re7, re23);
         addf(re7, im3[re8]);
         seti(re23, re7);
         addf(re23, im5[5]);
         seti(re27, 3);
         seti(re6, re22);
         addf(re6, 1024);
         seti(re5, re6);
         addf(re5, re25);
         seti(re4, re23);
         addf(re4, im3[re5]);
         seti(re23, re4);
         addf(re23, im5[6]);
         seti(re3, re21);
         addf(re3, 1025);
         seti(re2, re23);
         addf(re2, im3[re3]);
         seti(re23, re2);
         addf(re23, im5[7]);
         seti(re1, re21);
         addf(re1, 1026);
         seti(re0, re23);
         addf(re0, im3[re1]);
         seti(re23, re0);
         addf(re23, im5[8]);
         seti(re27, 3);
         seti(re26, 3);
         divf(re23, 9);
         seti(im7[re21], re23);
         re25 = 1+re25;
      }
      re24 = 1+re24;
   }
   ;
}

Unsplit resulting code

