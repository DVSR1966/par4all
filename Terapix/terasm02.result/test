
Initial code

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         new_image[i][j] = 0;                                           /*0010*/
         for(k = 0; k <= 2; k += 1)
            for(l = 0; l <= 2; l += 1)
               new_image[i][j] = new_image[i][j]+image[i+k][j+l]+kernel[k][l];         /*0013*/
         new_image[i][j] = new_image[i][j]/9;                           /*0014*/
      }
}

After flattening

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         new_image[i][j] = 0;                                           /*0010*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+0]+kernel[0][0];               /*0013*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+1]+kernel[0][1];               /*0013*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+2]+kernel[0][2];               /*0013*/
         l = 3;
         new_image[i][j] = new_image[i][j]+image[i+1][j+0]+kernel[1][0];               /*0013*/
         new_image[i][j] = new_image[i][j]+image[i+1][j+1]+kernel[1][1];               /*0013*/
         new_image[i][j] = new_image[i][j]+image[i+1][j+2]+kernel[1][2];               /*0013*/
         l = 3;
         new_image[i][j] = new_image[i][j]+image[i+2][j+0]+kernel[2][0];               /*0013*/
         new_image[i][j] = new_image[i][j]+image[i+2][j+1]+kernel[2][1];               /*0013*/
         new_image[i][j] = new_image[i][j]+image[i+2][j+2]+kernel[2][2];               /*0013*/
         l = 3;
         k = 3;
         new_image[i][j] = new_image[i][j]/9;                           /*0014*/
      }
}

Microcode after scalarization

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         __scalar__0 = __scalar__0+image[i+0][j+0]+kernel[0][0];        /*0013*/
         __scalar__0 = __scalar__0+image[i+0][j+1]+kernel[0][1];        /*0013*/
         __scalar__0 = __scalar__0+image[i+0][j+2]+kernel[0][2];        /*0013*/
         l = 3;
         __scalar__0 = __scalar__0+image[i+1][j+0]+kernel[1][0];        /*0013*/
         __scalar__0 = __scalar__0+image[i+1][j+1]+kernel[1][1];        /*0013*/
         __scalar__0 = __scalar__0+image[i+1][j+2]+kernel[1][2];        /*0013*/
         l = 3;
         __scalar__0 = __scalar__0+image[i+2][j+0]+kernel[2][0];        /*0013*/
         __scalar__0 = __scalar__0+image[i+2][j+1]+kernel[2][1];        /*0013*/
         __scalar__0 = __scalar__0+image[i+2][j+2]+kernel[2][2];        /*0013*/
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;                                   /*0014*/
         new_image[i][j] = __scalar__0;
      }
}

Microcode After array conversion

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         __scalar__0 = __scalar__0+image[512*i+j]+kernel[0];            /*0013*/
         __scalar__0 = __scalar__0+image[512*i+j+1]+kernel[1];          /*0013*/
         __scalar__0 = __scalar__0+image[512*i+j+2]+kernel[2];          /*0013*/
         l = 3;
         __scalar__0 = __scalar__0+image[512*i+512+j]+kernel[3];        /*0013*/
         __scalar__0 = __scalar__0+image[512*i+j+513]+kernel[4];        /*0013*/
         __scalar__0 = __scalar__0+image[512*i+j+514]+kernel[5];        /*0013*/
         l = 3;
         __scalar__0 = __scalar__0+image[512*i+1024+j]+kernel[6];       /*0013*/
         __scalar__0 = __scalar__0+image[512*i+j+1025]+kernel[7];       /*0013*/
         __scalar__0 = __scalar__0+image[512*i+j+1026]+kernel[8];       /*0013*/
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;                                   /*0014*/
         new_image[512*i+j] = __scalar__0;
      }
}

Microcode after CSE

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = 512*i;
         I_2 = I_1+j;
         __scalar__0 = __scalar__0+image[I_2]+kernel[0];
         __scalar__0 = __scalar__0+image[I_2+1]+kernel[1];
         __scalar__0 = __scalar__0+image[I_2+2]+kernel[2];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+512+j]+kernel[3];
         __scalar__0 = __scalar__0+image[I_2+513]+kernel[4];
         __scalar__0 = __scalar__0+image[I_2+514]+kernel[5];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+1024+j]+kernel[6];
         __scalar__0 = __scalar__0+image[I_2+1025]+kernel[7];
         __scalar__0 = __scalar__0+image[I_2+1026]+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[512*i+j] = __scalar__0;
      }
   ;
}

Microcode after ICM

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1+j;
         __scalar__0 = __scalar__0+image[I_2]+kernel[0];
         __scalar__0 = __scalar__0+image[I_2+1]+kernel[1];
         __scalar__0 = __scalar__0+image[I_2+2]+kernel[2];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+512+j]+kernel[3];
         __scalar__0 = __scalar__0+image[I_2+513]+kernel[4];
         __scalar__0 = __scalar__0+image[I_2+514]+kernel[5];
         l = 3;
         __scalar__0 = __scalar__0+image[I_1+1024+j]+kernel[6];
         __scalar__0 = __scalar__0+image[I_2+1025]+kernel[7];
         __scalar__0 = __scalar__0+image[I_2+1026]+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[512*i+j] = __scalar__0;
      }
   }
   ;
}

Microcode After atomization

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1+j;
         I_52 = __scalar__0+image[I_2];
         __scalar__0 = I_52+kernel[0];
         I_53 = I_2+1;
         I_54 = __scalar__0+image[I_53];
         __scalar__0 = I_54+kernel[1];
         I_55 = I_2+2;
         I_56 = __scalar__0+image[I_55];
         __scalar__0 = I_56+kernel[2];
         l = 3;
         I_57 = I_1+512;
         I_58 = I_57+j;
         I_59 = __scalar__0+image[I_58];
         __scalar__0 = I_59+kernel[3];
         I_60 = I_2+513;
         I_61 = __scalar__0+image[I_60];
         __scalar__0 = I_61+kernel[4];
         I_62 = I_2+514;
         I_63 = __scalar__0+image[I_62];
         __scalar__0 = I_63+kernel[5];
         l = 3;
         I_64 = I_1+1024;
         I_65 = I_64+j;
         I_66 = __scalar__0+image[I_65];
         __scalar__0 = I_66+kernel[6];
         I_67 = I_2+1025;
         I_68 = __scalar__0+image[I_67];
         __scalar__0 = I_68+kernel[7];
         I_69 = I_2+1026;
         I_70 = __scalar__0+image[I_69];
         __scalar__0 = I_70+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_71 = 512*i;
         I_72 = I_71+j;
         new_image[I_72] = __scalar__0;
      }
   }
   ;
}

Atomized code

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1+j;
         I_52 = __scalar__0+image[I_2];
         __scalar__0 = I_52+kernel[0];
         I_53 = I_2+1;
         I_54 = __scalar__0+image[I_53];
         __scalar__0 = I_54+kernel[1];
         I_55 = I_2+2;
         I_56 = __scalar__0+image[I_55];
         __scalar__0 = I_56+kernel[2];
         l = 3;
         I_57 = I_1+512;
         I_58 = I_57+j;
         I_59 = __scalar__0+image[I_58];
         __scalar__0 = I_59+kernel[3];
         I_60 = I_2+513;
         I_61 = __scalar__0+image[I_60];
         __scalar__0 = I_61+kernel[4];
         I_62 = I_2+514;
         I_63 = __scalar__0+image[I_62];
         __scalar__0 = I_63+kernel[5];
         l = 3;
         I_64 = I_1+1024;
         I_65 = I_64+j;
         I_66 = __scalar__0+image[I_65];
         __scalar__0 = I_66+kernel[6];
         I_67 = I_2+1025;
         I_68 = __scalar__0+image[I_67];
         __scalar__0 = I_68+kernel[7];
         I_69 = I_2+1026;
         I_70 = __scalar__0+image[I_69];
         __scalar__0 = I_70+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_71 = 512*i;
         I_72 = I_71+j;
         new_image[I_72] = __scalar__0;
      }
   }
   ;
}

Tidy code

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72, I_73, I_74, I_75, I_76;
   //PIPS generated variable
   short I_77, I_78, I_79, I_80;
   //PIPS generated variable
   int I_81;
   //PIPS generated variable
   short I_82, I_83, I_84, I_85;
   //PIPS generated variable
   int I_86;
   //PIPS generated variable
   short I_87, I_88, I_89, I_90;
   //PIPS generated variable
   int I_91, I_92;
   //PIPS generated variable
   short I_93, I_94, I_95, I_96;
   //PIPS generated variable
   int I_97;
   //PIPS generated variable
   short I_98, I_99, I_100, I_101;
   //PIPS generated variable
   int I_102;
   //PIPS generated variable
   short I_103, I_104, I_105, I_106;
   //PIPS generated variable
   int I_107, I_108;
   //PIPS generated variable
   short I_109, I_110, I_111, I_112;
   //PIPS generated variable
   int I_113;
   //PIPS generated variable
   short I_114, I_115, I_116, I_117;
   //PIPS generated variable
   int I_118;
   //PIPS generated variable
   short I_119, I_120, I_121, I_122;
   //PIPS generated variable
   int I_123, I_124, I_125, I_126;
   I_51 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512*i;
      I_126 = 512*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1+j;
         I_52 = __scalar__0+image[I_2];
         __scalar__0 = I_52+kernel[0];
         I_53 = I_2+1;
         I_54 = __scalar__0+image[I_53];
         __scalar__0 = I_54+kernel[1];
         I_55 = I_2+2;
         I_56 = __scalar__0+image[I_55];
         __scalar__0 = I_56+kernel[2];
         l = 3;
         I_57 = I_1+512;
         I_58 = I_57+j;
         I_59 = __scalar__0+image[I_58];
         __scalar__0 = I_59+kernel[3];
         I_60 = I_2+513;
         I_61 = __scalar__0+image[I_60];
         __scalar__0 = I_61+kernel[4];
         I_62 = I_2+514;
         I_63 = __scalar__0+image[I_62];
         __scalar__0 = I_63+kernel[5];
         l = 3;
         I_64 = I_1+1024;
         I_65 = I_64+j;
         I_66 = __scalar__0+image[I_65];
         __scalar__0 = I_66+kernel[6];
         I_67 = I_2+1025;
         I_68 = __scalar__0+image[I_67];
         __scalar__0 = I_68+kernel[7];
         I_69 = I_2+1026;
         I_70 = __scalar__0+image[I_69];
         __scalar__0 = I_70+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_71 = I_126;
         I_72 = I_71+j;
         new_image[I_72] = __scalar__0;
      }
   }
   ;
}

Code in a two adress fashion

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72, I_73, I_74, I_75, I_76;
   //PIPS generated variable
   short I_77, I_78, I_79, I_80;
   //PIPS generated variable
   int I_81;
   //PIPS generated variable
   short I_82, I_83, I_84, I_85;
   //PIPS generated variable
   int I_86;
   //PIPS generated variable
   short I_87, I_88, I_89, I_90;
   //PIPS generated variable
   int I_91, I_92;
   //PIPS generated variable
   short I_93, I_94, I_95, I_96;
   //PIPS generated variable
   int I_97;
   //PIPS generated variable
   short I_98, I_99, I_100, I_101;
   //PIPS generated variable
   int I_102;
   //PIPS generated variable
   short I_103, I_104, I_105, I_106;
   //PIPS generated variable
   int I_107, I_108;
   //PIPS generated variable
   short I_109, I_110, I_111, I_112;
   //PIPS generated variable
   int I_113;
   //PIPS generated variable
   short I_114, I_115, I_116, I_117;
   //PIPS generated variable
   int I_118;
   //PIPS generated variable
   short I_119, I_120, I_121, I_122;
   //PIPS generated variable
   int I_123, I_124, I_125, I_126;
   I_51 = iter2;
   I_51 = I_51-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512;
      I_50 = I_50*i;
      I_126 = 512;
      I_126 = I_126*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1;
         I_2 = I_2+j;
         I_52 = __scalar__0;
         I_52 = I_52+image[I_2];
         __scalar__0 = I_52;
         __scalar__0 = __scalar__0+kernel[0];
         I_53 = I_2;
         I_53 = I_53+1;
         I_54 = __scalar__0;
         I_54 = I_54+image[I_53];
         __scalar__0 = I_54;
         __scalar__0 = __scalar__0+kernel[1];
         I_55 = I_2;
         I_55 = I_55+2;
         I_56 = __scalar__0;
         I_56 = I_56+image[I_55];
         __scalar__0 = I_56;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_57 = I_1;
         I_57 = I_57+512;
         I_58 = I_57;
         I_58 = I_58+j;
         I_59 = __scalar__0;
         I_59 = I_59+image[I_58];
         __scalar__0 = I_59;
         __scalar__0 = __scalar__0+kernel[3];
         I_60 = I_2;
         I_60 = I_60+513;
         I_61 = __scalar__0;
         I_61 = I_61+image[I_60];
         __scalar__0 = I_61;
         __scalar__0 = __scalar__0+kernel[4];
         I_62 = I_2;
         I_62 = I_62+514;
         I_63 = __scalar__0;
         I_63 = I_63+image[I_62];
         __scalar__0 = I_63;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_64 = I_1;
         I_64 = I_64+1024;
         I_65 = I_64;
         I_65 = I_65+j;
         I_66 = __scalar__0;
         I_66 = I_66+image[I_65];
         __scalar__0 = I_66;
         __scalar__0 = __scalar__0+kernel[6];
         I_67 = I_2;
         I_67 = I_67+1025;
         I_68 = __scalar__0;
         I_68 = I_68+image[I_67];
         __scalar__0 = I_68;
         __scalar__0 = __scalar__0+kernel[7];
         I_69 = I_2;
         I_69 = I_69+1026;
         I_70 = __scalar__0;
         I_70 = I_70+image[I_69];
         __scalar__0 = I_70;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_71 = I_126;
         I_72 = I_71;
         I_72 = I_72+j;
         new_image[I_72] = __scalar__0;
      }
   }
   ;
}

Code after flattening

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72, I_73, I_74, I_75, I_76;
   //PIPS generated variable
   short I_77, I_78, I_79, I_80;
   //PIPS generated variable
   int I_81;
   //PIPS generated variable
   short I_82, I_83, I_84, I_85;
   //PIPS generated variable
   int I_86;
   //PIPS generated variable
   short I_87, I_88, I_89, I_90;
   //PIPS generated variable
   int I_91, I_92;
   //PIPS generated variable
   short I_93, I_94, I_95, I_96;
   //PIPS generated variable
   int I_97;
   //PIPS generated variable
   short I_98, I_99, I_100, I_101;
   //PIPS generated variable
   int I_102;
   //PIPS generated variable
   short I_103, I_104, I_105, I_106;
   //PIPS generated variable
   int I_107, I_108;
   //PIPS generated variable
   short I_109, I_110, I_111, I_112;
   //PIPS generated variable
   int I_113;
   //PIPS generated variable
   short I_114, I_115, I_116, I_117;
   //PIPS generated variable
   int I_118;
   //PIPS generated variable
   short I_119, I_120, I_121, I_122;
   //PIPS generated variable
   int I_123, I_124, I_125, I_126;
   I_51 = iter2;
   I_51 = I_51-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512;
      I_50 = I_50*i;
      I_126 = 512;
      I_126 = I_126*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1;
         I_2 = I_2+j;
         I_52 = __scalar__0;
         I_52 = I_52+image[I_2];
         __scalar__0 = I_52;
         __scalar__0 = __scalar__0+kernel[0];
         I_53 = I_2;
         I_53 = I_53+1;
         I_54 = __scalar__0;
         I_54 = I_54+image[I_53];
         __scalar__0 = I_54;
         __scalar__0 = __scalar__0+kernel[1];
         I_55 = I_2;
         I_55 = I_55+2;
         I_56 = __scalar__0;
         I_56 = I_56+image[I_55];
         __scalar__0 = I_56;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_57 = I_1;
         I_57 = I_57+512;
         I_58 = I_57;
         I_58 = I_58+j;
         I_59 = __scalar__0;
         I_59 = I_59+image[I_58];
         __scalar__0 = I_59;
         __scalar__0 = __scalar__0+kernel[3];
         I_60 = I_2;
         I_60 = I_60+513;
         I_61 = __scalar__0;
         I_61 = I_61+image[I_60];
         __scalar__0 = I_61;
         __scalar__0 = __scalar__0+kernel[4];
         I_62 = I_2;
         I_62 = I_62+514;
         I_63 = __scalar__0;
         I_63 = I_63+image[I_62];
         __scalar__0 = I_63;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_64 = I_1;
         I_64 = I_64+1024;
         I_65 = I_64;
         I_65 = I_65+j;
         I_66 = __scalar__0;
         I_66 = I_66+image[I_65];
         __scalar__0 = I_66;
         __scalar__0 = __scalar__0+kernel[6];
         I_67 = I_2;
         I_67 = I_67+1025;
         I_68 = __scalar__0;
         I_68 = I_68+image[I_67];
         __scalar__0 = I_68;
         __scalar__0 = __scalar__0+kernel[7];
         I_69 = I_2;
         I_69 = I_69+1026;
         I_70 = __scalar__0;
         I_70 = I_70+image[I_69];
         __scalar__0 = I_70;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_71 = I_126;
         I_72 = I_71;
         I_72 = I_72+j;
         new_image[I_72] = __scalar__0;
      }
   }
   ;
}

Code after some cleaning

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i, j, k, l;                                                    /*0005*/
   //PIPS generated variable
   short __scalar__0;
   //PIPS generated variable
   int I_1, I_2, I_50, I_51;
   //PIPS generated variable
   short I_52;
   //PIPS generated variable
   int I_53;
   //PIPS generated variable
   short I_54;
   //PIPS generated variable
   int I_55;
   //PIPS generated variable
   short I_56;
   //PIPS generated variable
   int I_57, I_58;
   //PIPS generated variable
   short I_59;
   //PIPS generated variable
   int I_60;
   //PIPS generated variable
   short I_61;
   //PIPS generated variable
   int I_62;
   //PIPS generated variable
   short I_63;
   //PIPS generated variable
   int I_64, I_65;
   //PIPS generated variable
   short I_66;
   //PIPS generated variable
   int I_67;
   //PIPS generated variable
   short I_68;
   //PIPS generated variable
   int I_69;
   //PIPS generated variable
   short I_70;
   //PIPS generated variable
   int I_71, I_72;
   //PIPS generated variable
   int I_126;
   I_51 = iter2;
   I_51 = I_51-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_50 = 512;
      I_50 = I_50*i;
      I_126 = 512;
      I_126 = I_126*i;
      for(j = 0; j <= I_51; j += 1) {
         __scalar__0 = 0;                                               /*0010*/
         I_1 = I_50;
         I_2 = I_1;
         I_2 = I_2+j;
         I_52 = __scalar__0;
         I_52 = I_52+image[I_2];
         __scalar__0 = I_52;
         __scalar__0 = __scalar__0+kernel[0];
         I_53 = I_2;
         I_53 = I_53+1;
         I_54 = __scalar__0;
         I_54 = I_54+image[I_53];
         __scalar__0 = I_54;
         __scalar__0 = __scalar__0+kernel[1];
         I_55 = I_2;
         I_55 = I_55+2;
         I_56 = __scalar__0;
         I_56 = I_56+image[I_55];
         __scalar__0 = I_56;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_57 = I_1;
         I_57 = I_57+512;
         I_58 = I_57;
         I_58 = I_58+j;
         I_59 = __scalar__0;
         I_59 = I_59+image[I_58];
         __scalar__0 = I_59;
         __scalar__0 = __scalar__0+kernel[3];
         I_60 = I_2;
         I_60 = I_60+513;
         I_61 = __scalar__0;
         I_61 = I_61+image[I_60];
         __scalar__0 = I_61;
         __scalar__0 = __scalar__0+kernel[4];
         I_62 = I_2;
         I_62 = I_62+514;
         I_63 = __scalar__0;
         I_63 = I_63+image[I_62];
         __scalar__0 = I_63;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_64 = I_1;
         I_64 = I_64+1024;
         I_65 = I_64;
         I_65 = I_65+j;
         I_66 = __scalar__0;
         I_66 = I_66+image[I_65];
         __scalar__0 = I_66;
         __scalar__0 = __scalar__0+kernel[6];
         I_67 = I_2;
         I_67 = I_67+1025;
         I_68 = __scalar__0;
         I_68 = I_68+image[I_67];
         __scalar__0 = I_68;
         __scalar__0 = __scalar__0+kernel[7];
         I_69 = I_2;
         I_69 = I_69+1026;
         I_70 = __scalar__0;
         I_70 = I_70+image[I_69];
         __scalar__0 = I_70;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_71 = I_126;
         I_72 = I_71;
         I_72 = I_72+j;
         new_image[I_72] = __scalar__0;
      }
   }
   ;
}

Microcode after normalization

image seems a mask
kernel seems a mask
new_image seems a mask
iter1 belongs to a loop bound
parameter iter2 is not valid
void microcode(short *FIFO0, short *FIFO1, short *FIFO2, short N1, short N0)
{
   //PIPS generated variable
   int re0, re1, re2;
   //PIPS generated variable
   short re3;
   //PIPS generated variable
   int re4;
   //PIPS generated variable
   short re5;
   //PIPS generated variable
   int re6;
   //PIPS generated variable
   short re7;
   //PIPS generated variable
   int re8, re9;
   //PIPS generated variable
   short re10;
   //PIPS generated variable
   int re11;
   //PIPS generated variable
   short re12;
   //PIPS generated variable
   int re13;
   //PIPS generated variable
   short re14;
   //PIPS generated variable
   int re15, re16;
   //PIPS generated variable
   short re17;
   //PIPS generated variable
   int re18;
   //PIPS generated variable
   short re19;
   //PIPS generated variable
   int re20;
   //PIPS generated variable
   short re21;
   //PIPS generated variable
   int re22, re23, re24, re25;
   //PIPS generated variable
   short re26;
   //PIPS generated variable
   short re27, re28, re29, re30;
   //PIPS generated variable
   short *im0, *im1, *im2;
   im2 = FIFO2;
   im1 = FIFO1;
   im0 = FIFO0;
   re22 = N0;
   re22 = re22-1;
   re27 = 1;
   while (re27<=N1) {
      re23 = 512;
      re23 = re23*re27;
      re0 = 512;
      re0 = re0*re27;
      re28 = 1;
      while (re28<=N0) {
         re26 = 0;                                                      /*0010*/
         re25 = re23;
         re24 = re25;
         re24 = re24+re28;
         re21 = re26;
         re21 = re21+im0[re24];
         re26 = re21;
         re26 = re26+im1[0];
         re20 = re24;
         re20 = re20+1;
         re19 = re26;
         re19 = re19+im0[re20];
         re26 = re19;
         re26 = re26+im1[1];
         re18 = re24;
         re18 = re18+2;
         re17 = re26;
         re17 = re17+im0[re18];
         re26 = re17;
         re26 = re26+im1[2];
         re30 = 3;
         re16 = re25;
         re16 = re16+512;
         re15 = re16;
         re15 = re15+re28;
         re14 = re26;
         re14 = re14+im0[re15];
         re26 = re14;
         re26 = re26+im1[3];
         re13 = re24;
         re13 = re13+513;
         re12 = re26;
         re12 = re12+im0[re13];
         re26 = re12;
         re26 = re26+im1[4];
         re11 = re24;
         re11 = re11+514;
         re10 = re26;
         re10 = re10+im0[re11];
         re26 = re10;
         re26 = re26+im1[5];
         re30 = 3;
         re9 = re25;
         re9 = re9+1024;
         re8 = re9;
         re8 = re8+re28;
         re7 = re26;
         re7 = re7+im0[re8];
         re26 = re7;
         re26 = re26+im1[6];
         re6 = re24;
         re6 = re6+1025;
         re5 = re26;
         re5 = re5+im0[re6];
         re26 = re5;
         re26 = re26+im1[7];
         re4 = re24;
         re4 = re4+1026;
         re3 = re26;
         re3 = re3+im0[re4];
         re26 = re3;
         re26 = re26+im1[8];
         re30 = 3;
         re29 = 3;
         re26 = re26/9;
         re2 = re0;
         re1 = re2;
         re1 = re1+re28;
         im2[re1] = re26;
         re28 = 1+re28;
      }
      re27 = 1+re27;
   }
   ;
}

Code after expression substitution

void microcode(short *FIFO0, short *FIFO1, short *FIFO2, short N1, short N0)
{
   //PIPS generated variable
   int re0, re1, re2;
   //PIPS generated variable
   short re3;
   //PIPS generated variable
   int re4;
   //PIPS generated variable
   short re5;
   //PIPS generated variable
   int re6;
   //PIPS generated variable
   short re7;
   //PIPS generated variable
   int re8, re9;
   //PIPS generated variable
   short re10;
   //PIPS generated variable
   int re11;
   //PIPS generated variable
   short re12;
   //PIPS generated variable
   int re13;
   //PIPS generated variable
   short re14;
   //PIPS generated variable
   int re15, re16;
   //PIPS generated variable
   short re17;
   //PIPS generated variable
   int re18;
   //PIPS generated variable
   short re19;
   //PIPS generated variable
   int re20;
   //PIPS generated variable
   short re21;
   //PIPS generated variable
   int re22, re23, re24, re25;
   //PIPS generated variable
   short re26;
   //PIPS generated variable
   short re27, re28, re29, re30;
   //PIPS generated variable
   short *im0, *im1, *im2;
   seti(im2, FIFO2);
   seti(im1, FIFO1);
   seti(im0, FIFO0);
   seti(re22, N0);
   subf(re22, 1);
   seti(re27, 1);
   while (re27<=N1) {
      seti(re23, 512);
      mulf(re23, re27);
      seti(re0, 512);
      mulf(re0, re27);
      seti(re28, 1);
      while (re28<=N0) {
         seti(re26, 0);                                                 /*0010*/
         seti(re25, re23);
         seti(re24, re25);
         addf(re24, re28);
         seti(re21, re26);
         addf(re21, im0[re24]);
         seti(re26, re21);
         addf(re26, im1[0]);
         seti(re20, re24);
         addf(re20, 1);
         seti(re19, re26);
         addf(re19, im0[re20]);
         seti(re26, re19);
         addf(re26, im1[1]);
         seti(re18, re24);
         addf(re18, 2);
         seti(re17, re26);
         addf(re17, im0[re18]);
         seti(re26, re17);
         addf(re26, im1[2]);
         seti(re30, 3);
         seti(re16, re25);
         addf(re16, 512);
         seti(re15, re16);
         addf(re15, re28);
         seti(re14, re26);
         addf(re14, im0[re15]);
         seti(re26, re14);
         addf(re26, im1[3]);
         seti(re13, re24);
         addf(re13, 513);
         seti(re12, re26);
         addf(re12, im0[re13]);
         seti(re26, re12);
         addf(re26, im1[4]);
         seti(re11, re24);
         addf(re11, 514);
         seti(re10, re26);
         addf(re10, im0[re11]);
         seti(re26, re10);
         addf(re26, im1[5]);
         seti(re30, 3);
         seti(re9, re25);
         addf(re9, 1024);
         seti(re8, re9);
         addf(re8, re28);
         seti(re7, re26);
         addf(re7, im0[re8]);
         seti(re26, re7);
         addf(re26, im1[6]);
         seti(re6, re24);
         addf(re6, 1025);
         seti(re5, re26);
         addf(re5, im0[re6]);
         seti(re26, re5);
         addf(re26, im1[7]);
         seti(re4, re24);
         addf(re4, 1026);
         seti(re3, re26);
         addf(re3, im0[re4]);
         seti(re26, re3);
         addf(re26, im1[8]);
         seti(re30, 3);
         seti(re29, 3);
         divf(re26, 9);
         seti(re2, re0);
         seti(re1, re2);
         addf(re1, re28);
         seti(im2[re1], re26);
         re28 = 1+re28;
      }
      re27 = 1+re27;
   }
   ;
}

Unsplit resulting code

