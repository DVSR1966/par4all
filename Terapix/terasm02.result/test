
Initial code

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   for(i = 0; i <= iter1-1; i += 1)                                     /*0005*/
      for(j = 0; j <= iter2-1; j += 1) {                                /*0007*/
         new_image[i][j] = 0;                                           /*0009*/
         for(k = 0; k <= 2; k += 1)                                     /*0010*/
            for(l = 0; l <= 2; l += 1)                                  /*0011*/
               new_image[i][j] = new_image[i][j]+image[i+k][j+l]+kernel[k][l];         /*0012*/
         new_image[i][j] = new_image[i][j]/9;                           /*0013*/
      }
}

After flattening

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   for(i = 0; i <= iter1-1; i += 1)                                     /*0005*/
      for(j = 0; j <= iter2-1; j += 1) {                                /*0007*/
         new_image[i][j] = 0;                                           /*0009*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+0]+kernel[0][0];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+1]+kernel[0][1];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+0][j+2]+kernel[0][2];               /*0012*/
         l = 3;
         new_image[i][j] = new_image[i][j]+image[i+1][j+0]+kernel[1][0];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+1][j+1]+kernel[1][1];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+1][j+2]+kernel[1][2];               /*0012*/
         l = 3;
         new_image[i][j] = new_image[i][j]+image[i+2][j+0]+kernel[2][0];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+2][j+1]+kernel[2][1];               /*0012*/
         new_image[i][j] = new_image[i][j]+image[i+2][j+2]+kernel[2][2];               /*0012*/
         l = 3;
         k = 3;
         new_image[i][j] = new_image[i][j]/9;                           /*0013*/
      }
}

Microcode after scalarization

void microcode(short image[512][512], short kernel[3][3], short new_image[512][512], short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   for(i = 0; i <= iter1-1; i += 1)                                     /*0005*/
      for(j = 0; j <= iter2-1; j += 1) {                                /*0007*/
         __scalar__0 = 0;                                               /*0009*/
         __scalar__0 = __scalar__0+image[i+0][j+0]+kernel[0][0];        /*0012*/
         __scalar__0 = __scalar__0+image[i+0][j+1]+kernel[0][1];        /*0012*/
         __scalar__0 = __scalar__0+image[i+0][j+2]+kernel[0][2];        /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[i+1][j+0]+kernel[1][0];        /*0012*/
         __scalar__0 = __scalar__0+image[i+1][j+1]+kernel[1][1];        /*0012*/
         __scalar__0 = __scalar__0+image[i+1][j+2]+kernel[1][2];        /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[i+2][j+0]+kernel[2][0];        /*0012*/
         __scalar__0 = __scalar__0+image[i+2][j+1]+kernel[2][1];        /*0012*/
         __scalar__0 = __scalar__0+image[i+2][j+2]+kernel[2][2];        /*0012*/
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;                                   /*0013*/
         new_image[i][j] = __scalar__0;
      }
}

Microcode After array conversion

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   for(i = 0; i <= iter1-1; i += 1)                                     /*0005*/
      for(j = 0; j <= iter2-1; j += 1) {                                /*0007*/
         __scalar__0 = 0;                                               /*0009*/
         __scalar__0 = __scalar__0+image[j+512*i]+kernel[0];            /*0012*/
         __scalar__0 = __scalar__0+image[j+512*i+1]+kernel[1];          /*0012*/
         __scalar__0 = __scalar__0+image[j+512*i+2]+kernel[2];          /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[j+512*i+512]+kernel[3];        /*0012*/
         __scalar__0 = __scalar__0+image[j+512*i+513]+kernel[4];        /*0012*/
         __scalar__0 = __scalar__0+image[j+512*i+514]+kernel[5];        /*0012*/
         l = 3;
         __scalar__0 = __scalar__0+image[j+512*i+1024]+kernel[6];       /*0012*/
         __scalar__0 = __scalar__0+image[j+512*i+1025]+kernel[7];       /*0012*/
         __scalar__0 = __scalar__0+image[j+512*i+1026]+kernel[8];       /*0012*/
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;                                   /*0013*/
         new_image[j+512*i] = __scalar__0;
      }
}

Microcode after CSE

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   for(i = 0; i <= iter1-1; i += 1)
      for(j = 0; j <= iter2-1; j += 1) {                                /*0007*/
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j+512*i;
         __scalar__0 = __scalar__0+image[I_2]+kernel[0];
         __scalar__0 = __scalar__0+image[I_2+1]+kernel[1];
         __scalar__0 = __scalar__0+image[I_2+2]+kernel[2];
         l = 3;
         __scalar__0 = __scalar__0+image[I_2+512]+kernel[3];
         __scalar__0 = __scalar__0+image[I_2+513]+kernel[4];
         __scalar__0 = __scalar__0+image[I_2+514]+kernel[5];
         l = 3;
         __scalar__0 = __scalar__0+image[I_2+1024]+kernel[6];
         __scalar__0 = __scalar__0+image[I_2+1025]+kernel[7];
         __scalar__0 = __scalar__0+image[I_2+1026]+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[j+512*i] = __scalar__0;
      }
   ;
}

Microcode after ICM

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   I_12 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j+I_11;
         __scalar__0 = __scalar__0+image[I_2]+kernel[0];
         __scalar__0 = __scalar__0+image[I_2+1]+kernel[1];
         __scalar__0 = __scalar__0+image[I_2+2]+kernel[2];
         l = 3;
         __scalar__0 = __scalar__0+image[I_2+512]+kernel[3];
         __scalar__0 = __scalar__0+image[I_2+513]+kernel[4];
         __scalar__0 = __scalar__0+image[I_2+514]+kernel[5];
         l = 3;
         __scalar__0 = __scalar__0+image[I_2+1024]+kernel[6];
         __scalar__0 = __scalar__0+image[I_2+1025]+kernel[7];
         __scalar__0 = __scalar__0+image[I_2+1026]+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         new_image[j+512*i] = __scalar__0;
      }
   }
   ;
}

Microcode After atomization

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   short I_13;
   int I_14;
   short I_15;
   int I_16;
   short I_17;
   int I_18;
   short I_19;
   int I_20;
   short I_21;
   int I_22;
   short I_23;
   int I_24;
   short I_25;
   int I_26;
   short I_27;
   int I_28;
   short I_29;
   int I_30;
   int I_31;
   I_12 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j+I_11;
         I_13 = __scalar__0+image[I_2];
         __scalar__0 = I_13+kernel[0];
         I_14 = I_2+1;
         I_15 = __scalar__0+image[I_14];
         __scalar__0 = I_15+kernel[1];
         I_16 = I_2+2;
         I_17 = __scalar__0+image[I_16];
         __scalar__0 = I_17+kernel[2];
         l = 3;
         I_18 = I_2+512;
         I_19 = __scalar__0+image[I_18];
         __scalar__0 = I_19+kernel[3];
         I_20 = I_2+513;
         I_21 = __scalar__0+image[I_20];
         __scalar__0 = I_21+kernel[4];
         I_22 = I_2+514;
         I_23 = __scalar__0+image[I_22];
         __scalar__0 = I_23+kernel[5];
         l = 3;
         I_24 = I_2+1024;
         I_25 = __scalar__0+image[I_24];
         __scalar__0 = I_25+kernel[6];
         I_26 = I_2+1025;
         I_27 = __scalar__0+image[I_26];
         __scalar__0 = I_27+kernel[7];
         I_28 = I_2+1026;
         I_29 = __scalar__0+image[I_28];
         __scalar__0 = I_29+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_30 = 512*i;
         I_31 = j+I_30;
         new_image[I_31] = __scalar__0;
      }
   }
   ;
}

Atomized code

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   short I_13;
   int I_14;
   short I_15;
   int I_16;
   short I_17;
   int I_18;
   short I_19;
   int I_20;
   short I_21;
   int I_22;
   short I_23;
   int I_24;
   short I_25;
   int I_26;
   short I_27;
   int I_28;
   short I_29;
   int I_30;
   int I_31;
   I_12 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j+I_11;
         I_13 = __scalar__0+image[I_2];
         __scalar__0 = I_13+kernel[0];
         I_14 = I_2+1;
         I_15 = __scalar__0+image[I_14];
         __scalar__0 = I_15+kernel[1];
         I_16 = I_2+2;
         I_17 = __scalar__0+image[I_16];
         __scalar__0 = I_17+kernel[2];
         l = 3;
         I_18 = I_2+512;
         I_19 = __scalar__0+image[I_18];
         __scalar__0 = I_19+kernel[3];
         I_20 = I_2+513;
         I_21 = __scalar__0+image[I_20];
         __scalar__0 = I_21+kernel[4];
         I_22 = I_2+514;
         I_23 = __scalar__0+image[I_22];
         __scalar__0 = I_23+kernel[5];
         l = 3;
         I_24 = I_2+1024;
         I_25 = __scalar__0+image[I_24];
         __scalar__0 = I_25+kernel[6];
         I_26 = I_2+1025;
         I_27 = __scalar__0+image[I_26];
         __scalar__0 = I_27+kernel[7];
         I_28 = I_2+1026;
         I_29 = __scalar__0+image[I_28];
         __scalar__0 = I_29+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_30 = 512*i;
         I_31 = j+I_30;
         new_image[I_31] = __scalar__0;
      }
   }
   ;
}

Tidy code

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   short I_13;
   int I_14;
   short I_15;
   int I_16;
   short I_17;
   int I_18;
   short I_19;
   int I_20;
   short I_21;
   int I_22;
   short I_23;
   int I_24;
   short I_25;
   int I_26;
   short I_27;
   int I_28;
   short I_29;
   int I_30;
   int I_31;
   int I_32;
   short *P_18;
   short *P_19;
   int I_33;
   short *P_20;
   short *P_21;
   int I_34;
   short *P_22;
   short *P_23;
   int I_35;
   short *P_24;
   short *P_25;
   int I_36;
   short *P_26;
   short *P_27;
   int I_37;
   short *P_28;
   short *P_29;
   int I_38;
   short *P_30;
   short *P_31;
   int I_39;
   short *P_32;
   short *P_33;
   int I_40;
   short *P_34;
   short *P_35;
   int I_41;
   int I_42;
   int I_43;
   I_12 = iter2-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512*i;
      I_43 = 512*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j+I_11;
         I_13 = __scalar__0+image[I_2];
         __scalar__0 = I_13+kernel[0];
         I_14 = I_2+1;
         I_15 = __scalar__0+image[I_14];
         __scalar__0 = I_15+kernel[1];
         I_16 = I_2+2;
         I_17 = __scalar__0+image[I_16];
         __scalar__0 = I_17+kernel[2];
         l = 3;
         I_18 = I_2+512;
         I_19 = __scalar__0+image[I_18];
         __scalar__0 = I_19+kernel[3];
         I_20 = I_2+513;
         I_21 = __scalar__0+image[I_20];
         __scalar__0 = I_21+kernel[4];
         I_22 = I_2+514;
         I_23 = __scalar__0+image[I_22];
         __scalar__0 = I_23+kernel[5];
         l = 3;
         I_24 = I_2+1024;
         I_25 = __scalar__0+image[I_24];
         __scalar__0 = I_25+kernel[6];
         I_26 = I_2+1025;
         I_27 = __scalar__0+image[I_26];
         __scalar__0 = I_27+kernel[7];
         I_28 = I_2+1026;
         I_29 = __scalar__0+image[I_28];
         __scalar__0 = I_29+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_30 = I_43;
         I_31 = j+I_30;
         new_image[I_31] = __scalar__0;
      }
   }
   ;
}

Code in a two adress fashion

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   short I_13;
   int I_14;
   short I_15;
   int I_16;
   short I_17;
   int I_18;
   short I_19;
   int I_20;
   short I_21;
   int I_22;
   short I_23;
   int I_24;
   short I_25;
   int I_26;
   short I_27;
   int I_28;
   short I_29;
   int I_30;
   int I_31;
   int I_32;
   short *P_18;
   short *P_19;
   int I_33;
   short *P_20;
   short *P_21;
   int I_34;
   short *P_22;
   short *P_23;
   int I_35;
   short *P_24;
   short *P_25;
   int I_36;
   short *P_26;
   short *P_27;
   int I_37;
   short *P_28;
   short *P_29;
   int I_38;
   short *P_30;
   short *P_31;
   int I_39;
   short *P_32;
   short *P_33;
   int I_40;
   short *P_34;
   short *P_35;
   int I_41;
   int I_42;
   int I_43;
   I_12 = iter2;
   I_12 = I_12-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512;
      I_11 = I_11*i;
      I_43 = 512;
      I_43 = I_43*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j;
         I_2 = I_2+I_11;
         I_13 = __scalar__0;
         I_13 = I_13+image[I_2];
         __scalar__0 = I_13;
         __scalar__0 = __scalar__0+kernel[0];
         I_14 = I_2;
         I_14 = I_14+1;
         I_15 = __scalar__0;
         I_15 = I_15+image[I_14];
         __scalar__0 = I_15;
         __scalar__0 = __scalar__0+kernel[1];
         I_16 = I_2;
         I_16 = I_16+2;
         I_17 = __scalar__0;
         I_17 = I_17+image[I_16];
         __scalar__0 = I_17;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_18 = I_2;
         I_18 = I_18+512;
         I_19 = __scalar__0;
         I_19 = I_19+image[I_18];
         __scalar__0 = I_19;
         __scalar__0 = __scalar__0+kernel[3];
         I_20 = I_2;
         I_20 = I_20+513;
         I_21 = __scalar__0;
         I_21 = I_21+image[I_20];
         __scalar__0 = I_21;
         __scalar__0 = __scalar__0+kernel[4];
         I_22 = I_2;
         I_22 = I_22+514;
         I_23 = __scalar__0;
         I_23 = I_23+image[I_22];
         __scalar__0 = I_23;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_24 = I_2;
         I_24 = I_24+1024;
         I_25 = __scalar__0;
         I_25 = I_25+image[I_24];
         __scalar__0 = I_25;
         __scalar__0 = __scalar__0+kernel[6];
         I_26 = I_2;
         I_26 = I_26+1025;
         I_27 = __scalar__0;
         I_27 = I_27+image[I_26];
         __scalar__0 = I_27;
         __scalar__0 = __scalar__0+kernel[7];
         I_28 = I_2;
         I_28 = I_28+1026;
         I_29 = __scalar__0;
         I_29 = I_29+image[I_28];
         __scalar__0 = I_29;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_30 = I_43;
         I_31 = j;
         I_31 = I_31+I_30;
         new_image[I_31] = __scalar__0;
      }
   }
   ;
}

Code after flattening

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   short I_13;
   int I_14;
   short I_15;
   int I_16;
   short I_17;
   int I_18;
   short I_19;
   int I_20;
   short I_21;
   int I_22;
   short I_23;
   int I_24;
   short I_25;
   int I_26;
   short I_27;
   int I_28;
   short I_29;
   int I_30;
   int I_31;
   int I_32;
   short *P_18;
   short *P_19;
   int I_33;
   short *P_20;
   short *P_21;
   int I_34;
   short *P_22;
   short *P_23;
   int I_35;
   short *P_24;
   short *P_25;
   int I_36;
   short *P_26;
   short *P_27;
   int I_37;
   short *P_28;
   short *P_29;
   int I_38;
   short *P_30;
   short *P_31;
   int I_39;
   short *P_32;
   short *P_33;
   int I_40;
   short *P_34;
   short *P_35;
   int I_41;
   int I_42;
   int I_43;
   I_12 = iter2;
   I_12 = I_12-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512;
      I_11 = I_11*i;
      I_43 = 512;
      I_43 = I_43*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j;
         I_2 = I_2+I_11;
         I_13 = __scalar__0;
         I_13 = I_13+image[I_2];
         __scalar__0 = I_13;
         __scalar__0 = __scalar__0+kernel[0];
         I_14 = I_2;
         I_14 = I_14+1;
         I_15 = __scalar__0;
         I_15 = I_15+image[I_14];
         __scalar__0 = I_15;
         __scalar__0 = __scalar__0+kernel[1];
         I_16 = I_2;
         I_16 = I_16+2;
         I_17 = __scalar__0;
         I_17 = I_17+image[I_16];
         __scalar__0 = I_17;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_18 = I_2;
         I_18 = I_18+512;
         I_19 = __scalar__0;
         I_19 = I_19+image[I_18];
         __scalar__0 = I_19;
         __scalar__0 = __scalar__0+kernel[3];
         I_20 = I_2;
         I_20 = I_20+513;
         I_21 = __scalar__0;
         I_21 = I_21+image[I_20];
         __scalar__0 = I_21;
         __scalar__0 = __scalar__0+kernel[4];
         I_22 = I_2;
         I_22 = I_22+514;
         I_23 = __scalar__0;
         I_23 = I_23+image[I_22];
         __scalar__0 = I_23;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_24 = I_2;
         I_24 = I_24+1024;
         I_25 = __scalar__0;
         I_25 = I_25+image[I_24];
         __scalar__0 = I_25;
         __scalar__0 = __scalar__0+kernel[6];
         I_26 = I_2;
         I_26 = I_26+1025;
         I_27 = __scalar__0;
         I_27 = I_27+image[I_26];
         __scalar__0 = I_27;
         __scalar__0 = __scalar__0+kernel[7];
         I_28 = I_2;
         I_28 = I_28+1026;
         I_29 = __scalar__0;
         I_29 = I_29+image[I_28];
         __scalar__0 = I_29;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_30 = I_43;
         I_31 = j;
         I_31 = I_31+I_30;
         new_image[I_31] = __scalar__0;
      }
   }
   ;
}

Code after some cleaning

void microcode(short *image, short *kernel, short *new_image, short iter1, short iter2)
{
   short i;
   short j;
   short k;
   short l;
   short __scalar__0;
   int I_2;
   int I_11;
   int I_12;
   short I_13;
   int I_14;
   short I_15;
   int I_16;
   short I_17;
   int I_18;
   short I_19;
   int I_20;
   short I_21;
   int I_22;
   short I_23;
   int I_24;
   short I_25;
   int I_26;
   short I_27;
   int I_28;
   short I_29;
   int I_30;
   int I_31;
   int I_43;
   I_12 = iter2;
   I_12 = I_12-1;
   for(i = 0; i <= iter1-1; i += 1) {
      I_11 = 512;
      I_11 = I_11*i;
      I_43 = 512;
      I_43 = I_43*i;
      for(j = 0; j <= I_12; j += 1) {
         __scalar__0 = 0;                                               /*0009*/
         I_2 = j;
         I_2 = I_2+I_11;
         I_13 = __scalar__0;
         I_13 = I_13+image[I_2];
         __scalar__0 = I_13;
         __scalar__0 = __scalar__0+kernel[0];
         I_14 = I_2;
         I_14 = I_14+1;
         I_15 = __scalar__0;
         I_15 = I_15+image[I_14];
         __scalar__0 = I_15;
         __scalar__0 = __scalar__0+kernel[1];
         I_16 = I_2;
         I_16 = I_16+2;
         I_17 = __scalar__0;
         I_17 = I_17+image[I_16];
         __scalar__0 = I_17;
         __scalar__0 = __scalar__0+kernel[2];
         l = 3;
         I_18 = I_2;
         I_18 = I_18+512;
         I_19 = __scalar__0;
         I_19 = I_19+image[I_18];
         __scalar__0 = I_19;
         __scalar__0 = __scalar__0+kernel[3];
         I_20 = I_2;
         I_20 = I_20+513;
         I_21 = __scalar__0;
         I_21 = I_21+image[I_20];
         __scalar__0 = I_21;
         __scalar__0 = __scalar__0+kernel[4];
         I_22 = I_2;
         I_22 = I_22+514;
         I_23 = __scalar__0;
         I_23 = I_23+image[I_22];
         __scalar__0 = I_23;
         __scalar__0 = __scalar__0+kernel[5];
         l = 3;
         I_24 = I_2;
         I_24 = I_24+1024;
         I_25 = __scalar__0;
         I_25 = I_25+image[I_24];
         __scalar__0 = I_25;
         __scalar__0 = __scalar__0+kernel[6];
         I_26 = I_2;
         I_26 = I_26+1025;
         I_27 = __scalar__0;
         I_27 = I_27+image[I_26];
         __scalar__0 = I_27;
         __scalar__0 = __scalar__0+kernel[7];
         I_28 = I_2;
         I_28 = I_28+1026;
         I_29 = __scalar__0;
         I_29 = I_29+image[I_28];
         __scalar__0 = I_29;
         __scalar__0 = __scalar__0+kernel[8];
         l = 3;
         k = 3;
         __scalar__0 = __scalar__0/9;
         I_30 = I_43;
         I_31 = j;
         I_31 = I_31+I_30;
         new_image[I_31] = __scalar__0;
      }
   }
   ;
}

Microcode after normalization

image seems a mask
kernel seems a mask
new_image seems a mask
iter1 belongs to a loop bound
parameter iter2 is not valid
void microcode(short *FIFO0, short *FIFO1, short *FIFO2, short iter1, short iter2)
{
   int re0;
   int re1;
   int re2;
   short re3;
   int re4;
   short re5;
   int re6;
   short re7;
   int re8;
   short re9;
   int re10;
   short re11;
   int re12;
   short re13;
   int re14;
   short re15;
   int re16;
   short re17;
   int re18;
   short re19;
   int re20;
   int re21;
   int re22;
   short re23;
   short re30;
   short re31;
   short re32;
   short re33;
   short *im3;
   short *im5;
   short *im7;
   int N0 = iter2;
   int N1 = iter1;
   im7 = FIFO2;
   im5 = FIFO1;
   im3 = FIFO0;
   re20 = iter2;
   re20 = re20-1;
   re30 = 1;
   while (re30<=N1) {
      re21 = 512;
      re21 = re21*re30;
      re0 = 512;
      re0 = re0*re30;
      re31 = 1;
      while (re31<=N0) {
         re23 = 0;                                                      /*0009*/
         re22 = re31;
         re22 = re22+re21;
         re19 = re23;
         re19 = re19+im3[re22];
         re23 = re19;
         re23 = re23+im5[0];
         re18 = re22;
         re18 = re18+1;
         re17 = re23;
         re17 = re17+im3[re18];
         re23 = re17;
         re23 = re23+im5[1];
         re16 = re22;
         re16 = re16+2;
         re15 = re23;
         re15 = re15+im3[re16];
         re23 = re15;
         re23 = re23+im5[2];
         re33 = 3;
         re14 = re22;
         re14 = re14+512;
         re13 = re23;
         re13 = re13+im3[re14];
         re23 = re13;
         re23 = re23+im5[3];
         re12 = re22;
         re12 = re12+513;
         re11 = re23;
         re11 = re11+im3[re12];
         re23 = re11;
         re23 = re23+im5[4];
         re10 = re22;
         re10 = re10+514;
         re9 = re23;
         re9 = re9+im3[re10];
         re23 = re9;
         re23 = re23+im5[5];
         re33 = 3;
         re8 = re22;
         re8 = re8+1024;
         re7 = re23;
         re7 = re7+im3[re8];
         re23 = re7;
         re23 = re23+im5[6];
         re6 = re22;
         re6 = re6+1025;
         re5 = re23;
         re5 = re5+im3[re6];
         re23 = re5;
         re23 = re23+im5[7];
         re4 = re22;
         re4 = re4+1026;
         re3 = re23;
         re3 = re3+im3[re4];
         re23 = re3;
         re23 = re23+im5[8];
         re33 = 3;
         re32 = 3;
         re23 = re23/9;
         re2 = re0;
         re1 = re31;
         re1 = re1+re2;
         im7[re1] = re23;
         re31 = 1+re31;
      }
      re30 = 1+re30;
   }
   ;
}

Code after expression substitution

void microcode(short *FIFO0, short *FIFO1, short *FIFO2, short iter1, short iter2)
{
   int re0;
   int re1;
   int re2;
   short re3;
   int re4;
   short re5;
   int re6;
   short re7;
   int re8;
   short re9;
   int re10;
   short re11;
   int re12;
   short re13;
   int re14;
   short re15;
   int re16;
   short re17;
   int re18;
   short re19;
   int re20;
   int re21;
   int re22;
   short re23;
   short re30;
   short re31;
   short re32;
   short re33;
   short *im3;
   short *im5;
   short *im7;
   int N0 = iter2;
   int N1 = iter1;
   seti(im7, FIFO2);
   seti(im5, FIFO1);
   seti(im3, FIFO0);
   seti(re20, iter2);
   subf(re20, 1);
   seti(re30, 1);
   while (re30<=N1) {
      seti(re21, 512);
      mulf(re21, re30);
      seti(re0, 512);
      mulf(re0, re30);
      seti(re31, 1);
      while (re31<=N0) {
         seti(re23, 0);                                                 /*0009*/
         seti(re22, re31);
         addf(re22, re21);
         seti(re19, re23);
         addf(re19, im3[re22]);
         seti(re23, re19);
         addf(re23, im5[0]);
         seti(re18, re22);
         addf(re18, 1);
         seti(re17, re23);
         addf(re17, im3[re18]);
         seti(re23, re17);
         addf(re23, im5[1]);
         seti(re16, re22);
         addf(re16, 2);
         seti(re15, re23);
         addf(re15, im3[re16]);
         seti(re23, re15);
         addf(re23, im5[2]);
         seti(re33, 3);
         seti(re14, re22);
         addf(re14, 512);
         seti(re13, re23);
         addf(re13, im3[re14]);
         seti(re23, re13);
         addf(re23, im5[3]);
         seti(re12, re22);
         addf(re12, 513);
         seti(re11, re23);
         addf(re11, im3[re12]);
         seti(re23, re11);
         addf(re23, im5[4]);
         seti(re10, re22);
         addf(re10, 514);
         seti(re9, re23);
         addf(re9, im3[re10]);
         seti(re23, re9);
         addf(re23, im5[5]);
         seti(re33, 3);
         seti(re8, re22);
         addf(re8, 1024);
         seti(re7, re23);
         addf(re7, im3[re8]);
         seti(re23, re7);
         addf(re23, im5[6]);
         seti(re6, re22);
         addf(re6, 1025);
         seti(re5, re23);
         addf(re5, im3[re6]);
         seti(re23, re5);
         addf(re23, im5[7]);
         seti(re4, re22);
         addf(re4, 1026);
         seti(re3, re23);
         addf(re3, im3[re4]);
         seti(re23, re3);
         addf(re23, im5[8]);
         seti(re33, 3);
         seti(re32, 3);
         divf(re23, 9);
         seti(re2, re0);
         seti(re1, re31);
         addf(re1, re2);
         seti(im7[re1], re23);
         re31 = 1+re31;
      }
      re30 = 1+re30;
   }
   ;
}

Unsplit resulting code

