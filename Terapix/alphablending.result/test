tidy the code just in case of
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
tiling
isolation
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[128*i_t+i5][8*j_t+i4];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[128*i_t+i3][8*j_t+i2];

l99996:
         for(i = 128*i_t; i <= 128*i_t+127; i += 1)
l99997:
            for(j = 8*j_t; j <= 8*j_t+7; j += 1)
               result0[i-128*i_t][j-8*j_t] = (40*src00[i-128*i_t][j-8*j_t]+60*src10[i-128*i_t][j-8*j_t])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[128*i_t+i1][8*j_t+i0] = result0[i1][i0];
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[128*i_t+i5][8*j_t+i4];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[128*i_t+i3][8*j_t+i2];

l99996:
         for(i = 0; i <= 127; i += 1)
l99997:
            for(j = 0; j <= 7; j += 1)
               result0[i+128*i_t-128*i_t][j+8*j_t-8*j_t] = (40*src00[i+128*i_t-128*i_t][j+8*j_t-8*j_t]+60*src10[i+128*i_t-128*i_t][j+8*j_t-8*j_t])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[128*i_t+i1][8*j_t+i0] = result0[i1][i0];
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[i5+128*i_t][i4+8*j_t];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[i3+128*i_t][i2+8*j_t];

l99996:
         for(i = 0; i <= 127; i += 1)
l99997:
            for(j = 0; j <= 7; j += 1)
               result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[i1+128*i_t][i0+8*j_t] = result0[i1][i0];
      }
}
outlining to launcher
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[i5+128*i_t][i4+8*j_t];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[i3+128*i_t][i2+8*j_t];

l99996:         launcher_0(result0, src00, src10);
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[i1+128*i_t][i0+8*j_t] = result0[i1][i0];
      }
}

//  <result0[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7}>
//  <src00[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7}>
//  <src10[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7}>

void launcher_0(short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int i, j;

//  <result0[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7}>
//  <src00[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7}>
//  <src10[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7}>

l99996:
   for(i = 0; i <= 127; i += 1)

//  <result0[PHI1][PHI2]-W-MAY-{PHI1==i, 0<=PHI2, PHI2<=7, 0<=i,
//    i<=127}>
//  <src00[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=7, 0<=i,
//    i<=127}>
//  <src10[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=7, 0<=i,
//    i<=127}>

l99997:
      for(j = 0; j <= 7; j += 1)

//  <result0[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=127,
//    0<=j, j<=7}>
//  <src00[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=127, 0<=j,
//    j<=7}>
//  <src10[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=127, 0<=j,
//    j<=7}>

         result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
}
outlining to microcode
label: l99997
void launcher_0(short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:      launcher_0_microcode(&result0[i], &src00[i], &src10[i]);
}
void launcher_0_microcode(short (*result00)[8], short (*src000)[8], short (*src100)[8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      (*result00)[j] = (40*(*src000)[j]+60*(*src100)[j])/100;
}
normalize microcode launcher_0_microcode
void launcher_0_microcode(short (*result00)[8], short (*src000)[8], short (*src100)[8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      (*result00)[j] = (40*(*src000)[j]+60*(*src100)[j])/100;
   j = 8;
}
void launcher_0_microcode(short (*result00)[8], short (*src000)[8], short (*src100)[8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      (*result00)[j] = (40*(*src000)[j]+60*(*src100)[j])/100;
   j = 8;
}
void launcher_0_microcode(short **result00, short **src000, short **src100)
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      *result00+j = (40*(*src000+j)+60*(*src100+j))/100;
   j = 8;
}
void launcher_0_microcode(short **result00, short **src000, short **src100)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short *P_0, *P_1, *P_2;
l99997:
   for(j = 0; j <= 7; j += 1) {
      P_0 = *src000+j;
      P_1 = *src100+j;
      P_2 = *result00+j;
      P_2 = (40*P_0+60*P_1)/100;
   }
   j = 8;
}
void launcher_0_microcode(short **result00, short **src000, short **src100)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short *P_0, *P_1, *P_2;
l99997:
   for(j = 0; j <= 7; j += 1) {
      P_0 = src000;
      P_0 = *P_0+j;
      P_1 = src100;
      P_1 = *P_1+j;
      P_2 = result00;
      P_2 = *P_2+j;
      P_2 = 40;
      P_2 = (P_2*P_0+60*P_1)/100;
   }
   j = 8;
}
result00 seems a mask
src000 seems a mask
src100 seems a mask
void launcher_0_microcode(short **FIFO0, short **FIFO1, short **FIFO2)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short *P_0, *P_1, *P_2, *re0, *re1, *re2;
   //PIPS generated variable
   char * re3, re4;
   //PIPS generated variable
   short **result00, **src000, **src100;
   //PIPS generated variable
   unsigned int re5, re6;
   //PIPS generated variable
   short *im0, *im1, *im2, *im3, *im4, *im5;
   //PIPS generated variable
   short **im6, **im7, **im8;
   //PIPS generated variable
   int N0 = 8;
   im8 = FIFO2;
   im7 = FIFO1;
   im6 = FIFO0;
l99997:   ;
   re5 = 1;
   while (re5<=N0) {
      im5 = im7;
      im5 = *im5+re5;
      im4 = im8;
      im4 = *im4+re5;
      im3 = im6;
      im3 = *im3+re5;
      im3 = 40;
      im3 = (im3*im5+60*im4)/100;
      re5 = 1+re5;
   }
   re5 = 8;
}
