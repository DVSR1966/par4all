tidy the code just in case of
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int x, y;
   for(y = 0; y <= n-1; y += 1)
      for(x = 2; x <= n-3; x += 1)
         img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
}
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   for(y = 0; y <= n-1; y += 1)
      for(x = 2; x <= n-3; x += 1)
         img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
}
tiling
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
   for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = 2+MAX(INT((n-3)/__TERAPYPS_HEIGHT-2+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 2; I_1 <= (n-3)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-1, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
            for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
               img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
   for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-3)/__TERAPYPS_HEIGHT-1), 0)+2;
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 2; I_1 <= (n-3)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-1, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+__TERAPYPS_WIDTH-1)
            if (n-3>I_11+__TERAPYPS_HEIGHT-1)
               for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
            else
               for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>I_11+__TERAPYPS_HEIGHT-1)
            for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
            for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
   for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-3)/__TERAPYPS_HEIGHT-1), 0)+2;
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 2; I_1 <= (n-3)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-1, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+__TERAPYPS_WIDTH-1)
            if (n-3>I_11+__TERAPYPS_HEIGHT-1)
               for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
            else
               for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>I_11+__TERAPYPS_HEIGHT-1)
            for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
            for(y = I_6; y <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-3, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
group constants and isolate
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
      I_1 = MAX(INT((n-3)/__TERAPYPS_HEIGHT-1), 0)+2;
      I_6 = 128*I_0;
l99989:
      for(I_1 = 2; I_1 <= (n-3)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-1, I_6+127)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+127)
            if (n-3>I_11+__TERAPYPS_HEIGHT-1)
l99996:
               for(y = I_6; y <= I_6+127; y += 1)
l99997:
                  for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
            else
l99994:
               for(y = I_6; y <= I_6+127; y += 1)
l99995:
                  for(x = I_11; x <= n-3; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>I_11+__TERAPYPS_HEIGHT-1)
l99992:
            for(y = I_6; y <= n-1; y += 1)
l99993:
               for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
l99990:
            for(y = I_6; y <= n-1; y += 1)
l99991:
               for(x = I_11; x <= n-3; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
   __TERAPYPS_HEIGHT = 254;
l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
      I_1 = MAX(INT((n-3)/__TERAPYPS_HEIGHT-1), 0)+2;
      I_6 = 128*I_0;
l99989:
      for(I_1 = 2; I_1 <= (n-3)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-1, I_6+127)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+127)
            if (n-3>I_11+__TERAPYPS_HEIGHT-1)
l99996:
               for(y = I_6; y <= I_6+127; y += 1)
l99997:
                  for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
            else
l99994:
               for(y = I_6; y <= I_6+127; y += 1)
l99995:
                  for(x = I_11; x <= n-3; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>I_11+__TERAPYPS_HEIGHT-1)
l99992:
            for(y = I_6; y <= n-1; y += 1)
l99993:
               for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
l99990:
            for(y = I_6; y <= n-1; y += 1)
l99991:
               for(x = I_11; x <= n-3; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int x, y;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 2; I_1 <= (n-3)/254; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-3>254*I_1+253)
l99996:
               for(y = 128*I_0; y <= 128*I_0+127; y += 1)
l99997:
                  for(x = 254*I_1; x <= 254*I_1+253; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
            else
l99994:
               for(y = 128*I_0; y <= 128*I_0+127; y += 1)
l99995:
                  for(x = 254*I_1; x <= n-3; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>254*I_1+253)
l99992:
            for(y = 128*I_0; y <= n-1; y += 1)
l99993:
               for(x = 254*I_1; x <= 254*I_1+253; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
l99990:
            for(y = 128*I_0; y <= n-1; y += 1)
l99991:
               for(x = 254*I_1; x <= n-3; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
**** check ok ******
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int x, y;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 2; I_1 <= (n-3)/254; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-3>254*I_1+253)
l99996:
               for(y = 128*I_0; y <= 128*I_0+127; y += 1)
l99997:
                  for(x = 254*I_1; x <= 254*I_1+253; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
            else
l99994:
               for(y = 128*I_0; y <= 128*I_0+127; y += 1)
l99995:
                  for(x = 254*I_1; x <= n-3; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>254*I_1+253)
l99992:
            for(y = 128*I_0; y <= n-1; y += 1)
l99993:
               for(x = 254*I_1; x <= 254*I_1+253; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
l99990:
            for(y = 128*I_0; y <= n-1; y += 1)
l99991:
               for(x = 254*I_1; x <= n-3; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int x, y;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 2; I_1 <= (n-3)/254; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-3>254*I_1+253) {
               //PIPS generated variable
               int (*img0)[128][258] = (int (*)[128][258]) 0, (*img_out0)[128][254] = (int (*)[128][254]) 0;
               P4A_accel_malloc((void **) &img_out0, sizeof(int)*32512);
               P4A_accel_malloc((void **) &img0, sizeof(int)*33024);
               P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 258, 128*I_0, 254*I_1-2, &img[0][0], *img0);

l99996:
               for(y = 128*I_0; y <= 128*I_0+127; y += 1)
l99997:
                  for(x = 254*I_1; x <= 254*I_1+253; x += 1)
                     (*img_out0)[y-128*I_0][x-2-(254*I_1-2)] = MIN(MIN(MIN(MIN((*img0)[y-128*I_0][x-2-(254*I_1-2)], (*img0)[y-128*I_0][x-1-(254*I_1-2)]), (*img0)[y-128*I_0][x-(254*I_1-2)]), (*img0)[y-128*I_0][x+1-(254*I_1-2)]), (*img0)[y-128*I_0][x+2-(254*I_1-2)]);
               P4A_copy_from_accel_2d(sizeof(int), n, n-4, 128, 254, 128*I_0, 254*I_1-2, &img_out[0][0], *img_out0);
               P4A_accel_free(img_out0);
               P4A_accel_free(img0);
            }
            else
l99994:
               for(y = 128*I_0; y <= 128*I_0+127; y += 1)
l99995:
                  for(x = 254*I_1; x <= n-3; x += 1)
                     img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else if (n-3>254*I_1+253)
l99992:
            for(y = 128*I_0; y <= n-1; y += 1)
l99993:
               for(x = 254*I_1; x <= 254*I_1+253; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
         else
l99990:
            for(y = 128*I_0; y <= n-1; y += 1)
l99991:
               for(x = 254*I_1; x <= n-3; x += 1)
                  img_out[y][x-2] = MIN(MIN(MIN(MIN(img[y][x-2], img[y][x-1]), img[y][x]), img[y][x+1]), img[y][x+2]);
      }
   }
}
**** check ok ******
outlining to launcher
void runner(int n, int img_out[n][n-4], int img[n][n])
{
   int x, y;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 0; I_1 <= (n-3)/254-2; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-3>254*I_1+761) {
               //PIPS generated variable
               int (*img0)[128][258] = (int (*)[128][258]) 0, (*img_out0)[128][254] = (int (*)[128][254]) 0;
               P4A_accel_malloc((void **) &img_out0, 32512*sizeof(int));
               P4A_accel_malloc((void **) &img0, 33024*sizeof(int));
               P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 258, 128*I_0, 254*I_1+506, &img[0][0], *img0);

l99996:               launcher_0(253+1, *img0, *img_out0);
               P4A_copy_from_accel_2d(sizeof(int), n, n-4, 128, 254, 128*I_0, 254*I_1+506, &img_out[0][0], *img_out0);
               P4A_accel_free(img_out0);
               P4A_accel_free(img0);
            }
            else
l99994:
               for(y = 0; y <= 127; y += 1)
l99995:
                  for(x = 0; x <= n-254*I_1-511; x += 1)
                     img_out[128*I_0+y][254*I_1+x+506] = MIN(MIN(MIN(MIN(img[128*I_0+y][254*I_1+x+506], img[128*I_0+y][254*I_1+x+507]), img[128*I_0+y][254*I_1+x+508]), img[128*I_0+y][254*I_1+x+509]), img[128*I_0+y][254*I_1+x+510]);
         else if (n-3>254*I_1+761)
l99992:
            for(y = 0; y <= n-128*I_0-1; y += 1)
l99993:
               for(x = 0; x <= 253; x += 1)
                  img_out[128*I_0+y][254*I_1+x+506] = MIN(MIN(MIN(MIN(img[128*I_0+y][254*I_1+x+506], img[128*I_0+y][254*I_1+x+507]), img[128*I_0+y][254*I_1+x+508]), img[128*I_0+y][254*I_1+x+509]), img[128*I_0+y][254*I_1+x+510]);
         else
l99990:
            for(y = 0; y <= n-128*I_0-1; y += 1)
l99991:
               for(x = 0; x <= n-254*I_1-511; x += 1)
                  img_out[128*I_0+y][254*I_1+x+506] = MIN(MIN(MIN(MIN(img[128*I_0+y][254*I_1+x+506], img[128*I_0+y][254*I_1+x+507]), img[128*I_0+y][254*I_1+x+508]), img[128*I_0+y][254*I_1+x+509]), img[128*I_0+y][254*I_1+x+510]);
      }
   }
}

//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=257,
//    I_29==254}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=253, I_29==254}>

void launcher_0(int I_29, int img0[128][258], int img_out0[128][254])
{
   //PIPS generated variable
   int x, y;

//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=257,
//    I_29==254}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=253, I_29==254}>

l99996:
   for(y = 0; y <= 127; y += 1)

//  <img0[PHI1][PHI2]-R-EXACT-{PHI1==y, 0<=PHI2, PHI2<=257, I_29==254,
//    0<=y, y<=127}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==y, 0<=PHI2, PHI2<=253,
//    I_29==254, 0<=y, y<=127}>

l99997:
      for(x = 0; x <= I_29-1; x += 1)

//  <img0[PHI1][PHI2]-R-EXACT-{PHI1==y, x<=PHI2, PHI2<=x+4, I_29==254,
//    0<=x, x<=253, 0<=y, y<=127}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==y, PHI2==x, I_29==254, 0<=x,
//    x<=253, 0<=y, y<=127}>

         img_out0[y][x] = MIN(MIN(MIN(MIN(img0[y][x], img0[y][x+1]), img0[y][x+2]), img0[y][x+3]), img0[y][x+4]);
}
outlining to microcode
void launcher_0(int I_29, int img0[128][258], int img_out0[128][254])
{
   //PIPS generated variable
   int x, y;
l99996:
   for(y = 0; y <= 127; y += 1)
l99997:      launcher_0_microcode(I_29, *&img0[y], *&img_out0[y]);
}
void launcher_0_microcode(int I_29, int img00[258], int img_out00[254])
{
   //PIPS generated variable
   int x;
l99997:
   for(x = 0; x <= I_29-1; x += 1)
      img_out00[x] = MIN(MIN(MIN(MIN(img00[x], img00[x+1]), img00[x+2]), img00[x+3]), img00[x+4]);
}
**** check ok ******
refining microcode
void launcher_0_microcode(int I_29, int *img00, int *img_out00)
{
   //PIPS generated variable
   int x;
l99997:
   for(x = 0; x <= I_29-1; x += 1)
      *(img_out00+x) = MIN(MIN(MIN(MIN(*(img00+x), *(img00+x+1)), *(img00+x+2)), *(img00+x+3)), *(img00+x+4));
}
**** check ok ******
void launcher_0_microcode(int I_29, int *img00, int *img_out00)
{
   //PIPS generated variable
   int x;
   //PIPS generated variable
   int *img_out000, *img000, *P_0;
   //PIPS generated variable
   int I_30;
   //PIPS generated variable
   int *P_1;
   //PIPS generated variable
   int I_31;
   //PIPS generated variable
   int *P_2;
   //PIPS generated variable
   int I_32;
   //PIPS generated variable
   int *P_3;
   img000 = img00;
   img_out000 = img_out00;
l99997:
   for(x = 0; x <= I_29-1; x += 1) {
      P_0 = img000+1;
      I_30 = MIN(*img000, *P_0);
      P_1 = img000+2;
      I_31 = MIN(I_30, *P_1);
      P_2 = img000+3;
      I_32 = MIN(I_31, *P_2);
      P_3 = img000+4;
      *img_out000 = MIN(I_32, *P_3);
      img000 = img000+1;
      img_out000 = img_out000+1;
   }
}
**** check ok ******
I_29 belongs to a loop bound
img00 seems an image
img_out00 seems an image
void launcher_0_microcode(int *FIFO1, int *FIFO0, int N0)
{
   //PIPS generated variable
   int *im0;
   //PIPS generated variable
   int re0;
   //PIPS generated variable
   int *im1;
   //PIPS generated variable
   int re1;
   //PIPS generated variable
   int *im2;
   //PIPS generated variable
   int re2;
   //PIPS generated variable
   int *im3, *im4, *im5, *im6, *im7;
   //PIPS generated variable
   int re3;
   im7 = FIFO1;
   im6 = FIFO0;
   im4 = im6;
   im5 = im7;
l99997:
   for(re3 = 0; re3 <= N0; re3 += 1) {
      im3 = im4+1;
      re2 = MIN(*im4, *im3);
      im2 = im4+2;
      re1 = MIN(re2, *im2);
      im1 = im4+3;
      re0 = MIN(re1, *im1);
      im0 = im4+4;
      *im5 = MIN(re0, *im0);
      im4 = im4+1;
      im5 = im5+1;
   }
}
void launcher_0(int I_29, int img0[128][258], int img_out0[128][254])
{
   //PIPS generated variable
   int x, y;
l99996:
   for(y = 0; y <= 127; y += 1)
l99997:      launcher_0_microcode(*&img_out0[y], *&img0[y], I_29);
}
**** check ok ******
void launcher_0_microcode(int *FIFO1, int *FIFO0, int N0)
{
   //PIPS generated variable
   int *im0;
   //PIPS generated variable
   int re0;
   //PIPS generated variable
   int *im1;
   //PIPS generated variable
   int re1;
   //PIPS generated variable
   int *im2;
   //PIPS generated variable
   int re2;
   //PIPS generated variable
   int *im3, *im4, *im5, *im6, *im7;
   //PIPS generated variable
   int re3;
   im7 = FIFO1;
   im6 = FIFO0;
   im4 = im6;
   im5 = im7;
l99997:
   for(re3 = 0; re3 <= N0; re3 += 1) {
      im3 = im4+1;
      re2 = MIN(*im4, *im3);
      im2 = im4+2;
      re1 = MIN(re2, *im2);
      im1 = im4+3;
      re0 = MIN(re1, *im1);
      im0 = im4+4;
      *im5 = MIN(re0, *im0);
      im4 = im4+1;
      im5 = im5+1;
   }
}
sub launcher_0_microcode
im7 = FIFO1
im6 = FIFO0
im4 = im6
im5 = im7
l99997:
                        ||                        ||                        ||         do_N0          ||                        
im3 = im4+1
re2 = MIN(*im4, *im3)
im2 = im4+2
re1 = MIN(re2, *im2)
im1 = im4+3
re0 = MIN(re1, *im1)
im0 = im4+4
*im5 = MIN(re0, *im0)
im4 = im4+1
im5 = im5+1
                        ||                        ||                        ||          loop          ||                        
endsub
