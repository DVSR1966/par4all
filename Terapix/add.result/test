tidy the code just in case of
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int i, j;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         out[i][j] = in0[i][j]+in1[i][j];
}
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int i, j;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         out[i][j] = in0[i][j]+in1[i][j];
}
tiling
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int i, j;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18;
l99998:   ;
   for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         i = I_6+MAX(INT(MIN(n-1, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
            for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
               out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int i, j;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18;
l99998:   ;
   for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         i = I_6+MAX(INT(MIN(n-1, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+__TERAPYPS_WIDTH-1)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
               for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
                  for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
            else
               for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
                  for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
            for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
               for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
            for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
               for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int i, j;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18;
l99998:   ;
   for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         i = I_6+MAX(INT(MIN(n-1, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+__TERAPYPS_WIDTH-1)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
               for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
                  for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
            else
               for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
                  for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
            for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
               for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
            for(i = I_6; i <= MIN(n-1, I_6+__TERAPYPS_WIDTH-1); i += 1)
               for(j = I_11; j <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
group constants and isolate
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   int i, j;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18;
l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = 128*I_0;
l99989:
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         i = I_6+MAX(INT(MIN(n-1, I_6+127)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+127)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99996:
               for(i = I_6; i <= I_6+127; i += 1)
l99997:
                  for(j = I_11; j <= I_11+__TERAPYPS_HEIGHT-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
            else
l99994:
               for(i = I_6; i <= I_6+127; i += 1)
l99995:
                  for(j = I_11; j <= n-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99992:
            for(i = I_6; i <= n-1; i += 1)
l99993:
               for(j = I_11; j <= I_11+__TERAPYPS_HEIGHT-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
l99990:
            for(i = I_6; i <= n-1; i += 1)
l99991:
               for(j = I_11; j <= n-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   int i, j;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18;
   __TERAPYPS_HEIGHT = 170;
l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = 128*I_0;
l99989:
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         i = I_6+MAX(INT(MIN(n-1, I_6+127)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-1>I_6+127)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99996:
               for(i = I_6; i <= I_6+127; i += 1)
l99997:
                  for(j = I_11; j <= I_11+__TERAPYPS_HEIGHT-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
            else
l99994:
               for(i = I_6; i <= I_6+127; i += 1)
l99995:
                  for(j = I_11; j <= n-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99992:
            for(i = I_6; i <= n-1; i += 1)
l99993:
               for(j = I_11; j <= I_11+__TERAPYPS_HEIGHT-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
l99990:
            for(i = I_6; i <= n-1; i += 1)
l99991:
               for(j = I_11; j <= n-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int i, j;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 0; I_1 <= (n-1)/170; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-1>170*I_1+169)
l99996:
               for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99997:
                  for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
            else
l99994:
               for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99995:
                  for(j = 170*I_1; j <= n-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>170*I_1+169)
l99992:
            for(i = 128*I_0; i <= n-1; i += 1)
l99993:
               for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
l99990:
            for(i = 128*I_0; i <= n-1; i += 1)
l99991:
               for(j = 170*I_1; j <= n-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
**** check ok ******
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int i, j;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 0; I_1 <= (n-1)/170; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-1>170*I_1+169)
l99996:
               for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99997:
                  for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
            else
l99994:
               for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99995:
                  for(j = 170*I_1; j <= n-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>170*I_1+169)
l99992:
            for(i = 128*I_0; i <= n-1; i += 1)
l99993:
               for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
l99990:
            for(i = 128*I_0; i <= n-1; i += 1)
l99991:
               for(j = 170*I_1; j <= n-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int i, j;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 0; I_1 <= (n-1)/170; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-1>170*I_1+169) {
               //PIPS generated variable
               int (*in00)[128][170] = (int (*)[128][170]) 0, (*in10)[128][170] = (int (*)[128][170]) 0, (*out0)[128][170] = (int (*)[128][170]) 0;
               P4A_accel_malloc((void **) &out0, sizeof(int)*21760);
               P4A_accel_malloc((void **) &in10, sizeof(int)*21760);
               P4A_accel_malloc((void **) &in00, sizeof(int)*21760);
               P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in1[0][0], *in10);
               P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in0[0][0], *in00);

l99996:
               for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99997:
                  for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                     (*out0)[i-128*I_0][j-170*I_1] = (*in00)[i-128*I_0][j-170*I_1]+(*in10)[i-128*I_0][j-170*I_1];
               P4A_copy_from_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &out[0][0], *out0);
               P4A_accel_free(out0);
               P4A_accel_free(in10);
               P4A_accel_free(in00);
            }
            else
l99994:
               for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99995:
                  for(j = 170*I_1; j <= n-1; j += 1)
                     out[i][j] = in0[i][j]+in1[i][j];
         else if (n-1>170*I_1+169)
l99992:
            for(i = 128*I_0; i <= n-1; i += 1)
l99993:
               for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
         else
l99990:
            for(i = 128*I_0; i <= n-1; i += 1)
l99991:
               for(j = 170*I_1; j <= n-1; j += 1)
                  out[i][j] = in0[i][j]+in1[i][j];
      }
   }
}
**** check ok ******
outlining to launcher
void runner(int n, int out[n][n], int in0[n][n], int in1[n][n])
{
   int i, j;
   //PIPS generated variable
   int I_0, I_1;

l99998:   ;
l99988:
   for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
      for(I_1 = 0; I_1 <= (n-1)/170; I_1 += 1) {


         if (n-1>128*I_0+127)
            if (n-1>170*I_1+169) {
               //PIPS generated variable
               int (*in00)[128][170] = (int (*)[128][170]) 0, (*in10)[128][170] = (int (*)[128][170]) 0, (*out0)[128][170] = (int (*)[128][170]) 0;
               P4A_accel_malloc((void **) &out0, 21760*sizeof(int));
               P4A_accel_malloc((void **) &in10, 21760*sizeof(int));
               P4A_accel_malloc((void **) &in00, 21760*sizeof(int));
               P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in1[0][0], *in10);
               P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in0[0][0], *in00);

l99996:               launcher_0(169+1, *in00, *in10, *out0);
               P4A_copy_from_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &out[0][0], *out0);
               P4A_accel_free(out0);
               P4A_accel_free(in10);
               P4A_accel_free(in00);
            }
            else
l99994:
               for(i = 0; i <= 127; i += 1)
l99995:
                  for(j = 0; j <= n-170*I_1-1; j += 1)
                     out[128*I_0+i][170*I_1+j] = in0[128*I_0+i][170*I_1+j]+in1[128*I_0+i][170*I_1+j];
         else if (n-1>170*I_1+169)
l99992:
            for(i = 0; i <= n-128*I_0-1; i += 1)
l99993:
               for(j = 0; j <= 169; j += 1)
                  out[128*I_0+i][170*I_1+j] = in0[128*I_0+i][170*I_1+j]+in1[128*I_0+i][170*I_1+j];
         else
l99990:
            for(i = 0; i <= n-128*I_0-1; i += 1)
l99991:
               for(j = 0; j <= n-170*I_1-1; j += 1)
                  out[128*I_0+i][170*I_1+j] = in0[128*I_0+i][170*I_1+j]+in1[128*I_0+i][170*I_1+j];
      }
   }
}

//  <in00[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_19==170}>
//  <in10[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_19==170}>
//  <out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_19==170}>

void launcher_0(int I_19, int in00[128][170], int in10[128][170], int out0[128][170])
{
   //PIPS generated variable
   int i, j;

//  <in00[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_19==170}>
//  <in10[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_19==170}>
//  <out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_19==170}>

l99996:
   for(i = 0; i <= 127; i += 1)

//  <in00[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=169, I_19==170,
//    0<=i, i<=127}>
//  <in10[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=169, I_19==170,
//    0<=i, i<=127}>
//  <out0[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=169, I_19==170,
//    0<=i, i<=127}>

l99997:
      for(j = 0; j <= I_19-1; j += 1)

//  <in00[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, I_19==170, 0<=i,
//    i<=127, 0<=j, j<=169}>
//  <in10[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, I_19==170, 0<=i,
//    i<=127, 0<=j, j<=169}>
//  <out0[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, I_19==170, 0<=i,
//    i<=127, 0<=j, j<=169}>

         out0[i][j] = in00[i][j]+in10[i][j];
}
outlining to microcode
void launcher_0(int I_19, int in00[128][170], int in10[128][170], int out0[128][170])
{
   //PIPS generated variable
   int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:      launcher_0_microcode(I_19, *&in00[i], *&in10[i], *&out0[i]);
}
void launcher_0_microcode(int I_19, int in000[170], int in100[170], int out00[170])
{
   //PIPS generated variable
   int j;
l99997:
   for(j = 0; j <= I_19-1; j += 1)
      out00[j] = in000[j]+in100[j];
}
**** check ok ******
refining microcode
void launcher_0_microcode(int I_19, int *in000, int *in100, int *out00)
{
   //PIPS generated variable
   int j;
l99997:
   for(j = 0; j <= I_19-1; j += 1)
      *(out00+j) = *(in000+j)+*(in100+j);
}
**** check ok ******
void launcher_0_microcode(int I_19, int *in000, int *in100, int *out00)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   in1000 = in100;
   in0000 = in000;
   out000 = out00;
l99997:
   for(j = 0; j <= I_19-1; j += 1) {
      *out000 = *in0000+*in1000;
      in1000 = in1000+1;
      in0000 = in0000+1;
      out000 = out000+1;
   }
}
**** check ok ******
I_19 belongs to a loop bound
in000 seems an image
in100 seems an image
out00 seems an image
void launcher_0_microcode(int *FIFO2, int *FIFO1, int *FIFO0, int N0)
{
   //PIPS generated variable
   int *im0, *im1, *im2, *im3, *im4, *im5;
   //PIPS generated variable
   int re0;
   im5 = FIFO2;
   im4 = FIFO1;
   im3 = FIFO0;
   im0 = im4;
   im1 = im3;
   im2 = im5;
l99997:
   for(re0 = 0; re0 <= N0; re0 += 1) {
      *im2 = *im1+*im0;
      im0 = im0+1;
      im1 = im1+1;
      im2 = im2+1;
   }
}
void launcher_0(int I_19, int in00[128][170], int in10[128][170], int out0[128][170])
{
   //PIPS generated variable
   int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:      launcher_0_microcode(*&out0[i], *&in10[i], *&in00[i], I_19);
}
**** check ok ******
void launcher_0_microcode(int *FIFO2, int *FIFO1, int *FIFO0, int N0)
{
   //PIPS generated variable
   int *im0, *im1, *im2, *im3, *im4, *im5;
   //PIPS generated variable
   int re0;
   im5 = FIFO2;
   im4 = FIFO1;
   im3 = FIFO0;
   im0 = im4;
   im1 = im3;
   im2 = im5;
l99997:
   for(re0 = 0; re0 <= N0; re0 += 1) {
      addi(*im2, *im1, *im0);
      im0 = im0+1;
      im1 = im1+1;
      im2 = im2+1;
   }
}
sub launcher_0_microcode
im5 = FIFO2
im4 = FIFO1
im3 = FIFO0
im0 = im4
im1 = im3
im2 = im5
l99997:
                        ||                        ||                        ||         do_N0          ||                        
                        ||                        ||       P,im0=im0        ||                        ||                        
                        ||                        ||      P,im2=P+im1       ||                        ||                        
im0 = im0+1
im1 = im1+1
im2 = im2+1
                        ||                        ||                        ||          loop          ||                        
endsub
