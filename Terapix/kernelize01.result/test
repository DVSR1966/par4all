
Initial code

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   /* compute */
kernel:
   for(i = 0; i <= 99; i += 1)
      c[i] = a[i]+b[i];
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}

Code after kernelization

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   /* compute */
kernel:   run_kernel(a, b, c);
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}
void run_kernel(int a[100], int b[100], int c[100])
{
   int i;
   extern void kernel(int i, int c[100], int b[100], int a[100]);
   /* compute */
kernel:
   for(i = 0; i <= 99; i += 10)
      kernel(a, b, c, i);
}
void kernel(int a[100], int b[100], int c[100], int i)
{
   int i_1;
   for(i_1 = i; i_1 <= MIN(i+9, 99); i_1 += 1)
      c[i_1] = a[i_1]+b[i_1];
}

Code after cleanup

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   /* compute */
   run_kernel(a, b, c);
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
   ;
}

Unsplit resulting code

