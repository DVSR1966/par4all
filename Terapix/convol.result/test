
Inital code

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)
l300:
      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= ksi-1; ki += 1)
l100:
            for(kj = 0; kj <= ksj-1; kj += 1)
               

               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2][j+kj-ksj/2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}

After partial evaluation:

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= 2; ki += 1)
l100:
            for(kj = 0; kj <= 2; kj += 1)
               

               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}

after terapixify

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   {
      int i1;

#pragma omp parallel for private(i,j)
      for(i1 = 0; i1 <= 511; i1 += 1) {
         int j2;
#pragma omp parallel for private(j)
         for(j2 = 0; j2 <= 511; j2 += 1)
            new_image[i1][j2] = image[i1][j2];
      }
   }
#pragma outline_ignore KERNEL_ID
#pragma outline this
   microcode(image, isi, isj, kernel, ksi, ksj, new_image);
   {
      int kj2;
      int ki2;
      int j2;
      int i2;
l99999:
      for(i2 = 384+1; i2 <= 510; i2 += 1)
l99997:
         for(j2 = 1; j2 <= 510; j2 += 1) {
            new_image[i2][j2] = 0.;
l99995:
            for(ki2 = 0; ki2 <= 2; ki2 += 1)
l99993:
               for(kj2 = 0; kj2 <= 2; kj2 += 1)
                  new_image[i2][j2] = new_image[i2][j2]+image[i2+ki2-1][j2+kj2-1]*kernel[ki2][kj2];
            new_image[i2][j2] = new_image[i2][j2]/9;
         }
   }
}
void microcode(float image[isi][isj], int isi, int isj, float kernel[ksi][ksj], int ksi, int ksj, float new_image[isi][isj])
{
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 384; i_12 += 128) {
      i2 = KERNEL_ID()+i_12;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         new_image[i2][j2] = 0.;
         {
            int ki6;
l200:
            for(ki6 = 0; ki6 <= 2; ki6 += 1) {
               int kj7;
l100:
               for(kj7 = 0; kj7 <= 2; kj7 += 1)
                  

                  new_image[i2][j2] = new_image[i2][j2]+image[i2+ki6-1][j2+kj7-1]*kernel[ki6][kj7];
            }
         }
         new_image[i2][j2] = new_image[i2][j2]/9;
      }
   }
}

Microcode after normalization

void microcode(float image[isi][isj], int isi, int isj, float kernel[ksi][ksj], int ksi, int ksj, float new_image[isi][isj])
{
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 384; i_12 += 128) {
      i2 = KERNEL_ID()+i_12;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         new_image[i2][j2] = 0.;
         {
            int ki6;
l200:
            for(ki6 = 0; ki6 <= 2; ki6 += 1) {
               int kj7;
l100:
               for(kj7 = 0; kj7 <= 2; kj7 += 1)
                  

                  new_image[i2][j2] = new_image[i2][j2]+image[i2+ki6-1][j2+kj7-1]*kernel[ki6][kj7];
            }
         }
         new_image[i2][j2] = new_image[i2][j2]/9;
      }
   }
}

Microcode after code cleaning

void microcode(float image[isi][isj], int isi, int isj, float kernel[ksi][ksj], int ksi, int ksj, float new_image[isi][isj])
{
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 3; i_12 += 1) {
      i2 = KERNEL_ID()+-127+128*i_12;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         new_image[i2][j2] = 0.;
         {
            int ki6;
l200:
            for(ki6 = 0; ki6 <= 2; ki6 += 1) {
               int kj7;
l100:
               for(kj7 = 0; kj7 <= 2; kj7 += 1)
                  

                  new_image[i2][j2] = new_image[i2][j2]+image[i2+ki6-1][j2+kj7-1]*kernel[ki6][kj7];
            }
         }
         new_image[i2][j2] = new_image[i2][j2]/9;
      }
   }
   i_12 = 385;
   ;
}

Microcode after double unrolling

void microcode(float image[isi][isj], int isi, int isj, float kernel[ksi][ksj], int ksi, int ksj, float new_image[isi][isj])
{
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 3; i_12 += 1) {
      i2 = KERNEL_ID()+-127+128*i_12;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         new_image[i2][j2] = 0.;
         {
            int ki6;
            {
               int kj7;
l200:               ;
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+0-1][j2+0-1]*kernel[0][0];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+0-1][j2+1-1]*kernel[0][1];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+0-1][j2+2-1]*kernel[0][2];
               kj7 = 3;
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+1-1][j2+0-1]*kernel[1][0];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+1-1][j2+1-1]*kernel[1][1];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+1-1][j2+2-1]*kernel[1][2];
               kj7 = 3;
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+2-1][j2+0-1]*kernel[2][0];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+2-1][j2+1-1]*kernel[2][1];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+2-1][j2+2-1]*kernel[2][2];
               kj7 = 3;
               ki6 = 3;
            }
         }
         new_image[i2][j2] = new_image[i2][j2]/9;
      }
   }
   i_12 = 385;
   ;
}

Microcode after code cleaning

void microcode(float image[isi][isj], int isi, int isj, float kernel[ksi][ksj], int ksi, int ksj, float new_image[isi][isj])
{
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 3; i_12 += 1) {
      i2 = KERNEL_ID()+128*i_12-127;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         new_image[i2][j2] = 0.;
         {
            int ki6;
            {
               int kj7;
l200:               ;
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2-1][j2-1]*kernel[0][0];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2-1][j2]*kernel[0][1];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2-1][j2+1]*kernel[0][2];
               ;
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2][j2-1]*kernel[1][0];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2][j2]*kernel[1][1];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2][j2+1]*kernel[1][2];
               ;
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+1][j2-1]*kernel[2][0];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+1][j2]*kernel[2][1];
               

               new_image[i2][j2] = new_image[i2][j2]+image[i2+1][j2+1]*kernel[2][2];
               ;
               ;
            }
         }
         new_image[i2][j2] = new_image[i2][j2]/9;
      }
   }
   i_12 = 385;
   ;
}
void microcode(float image[isi][isj], int isi, int isj, float kernel[ksi][ksj], int ksi, int ksj, float new_image[isi][isj])
{
   float __scalar__0;
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 3; i_12 += 1) {
      i2 = KERNEL_ID()+128*i_12-127;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         __scalar__0 = 0.;
         {
            int ki6;
            {
               int kj7;
l200:               ;
               

               __scalar__0 = __scalar__0+image[i2-1][j2-1]*kernel[0][0];
               

               __scalar__0 = __scalar__0+image[i2-1][j2]*kernel[0][1];
               

               __scalar__0 = __scalar__0+image[i2-1][j2+1]*kernel[0][2];
               ;
               

               __scalar__0 = __scalar__0+image[i2][j2-1]*kernel[1][0];
               

               __scalar__0 = __scalar__0+image[i2][j2]*kernel[1][1];
               

               __scalar__0 = __scalar__0+image[i2][j2+1]*kernel[1][2];
               ;
               

               __scalar__0 = __scalar__0+image[i2+1][j2-1]*kernel[2][0];
               

               __scalar__0 = __scalar__0+image[i2+1][j2]*kernel[2][1];
               

               __scalar__0 = __scalar__0+image[i2+1][j2+1]*kernel[2][2];
               ;
               ;
            }
         }
         __scalar__0 = __scalar__0/9;
         new_image[i2][j2] = __scalar__0;
      }
   }
   i_12 = 385;
   ;
}

Microcode After array conversion

void microcode(float *image, int isi, int isj, float *kernel, int ksi, int ksj, float *new_image)
{
   float __scalar__0;
   int j2;
   int i_12;
   int i2;

l400:
   for(i_12 = 1; i_12 <= 3; i_12 += 1) {
      i2 = KERNEL_ID()+128*i_12-127;
l300:
      for(j2 = 1; j2 <= 510; j2 += 1) {
         __scalar__0 = 0.;
         {
            int ki6;
            {
               int kj7;
l200:               ;
               

               __scalar__0 = __scalar__0+image[j2-1+isj*(i2-1)]*kernel[0];
               

               __scalar__0 = __scalar__0+image[j2+isj*(i2-1)]*kernel[1];
               

               __scalar__0 = __scalar__0+image[j2+1+isj*(i2-1)]*kernel[2];
               ;
               

               __scalar__0 = __scalar__0+image[j2-1+isj*i2]*kernel[ksj];
               

               __scalar__0 = __scalar__0+image[j2+isj*i2]*kernel[ksj+1];
               

               __scalar__0 = __scalar__0+image[j2+1+isj*i2]*kernel[ksj+2];
               ;
               

               __scalar__0 = __scalar__0+image[j2-1+isj*(i2+1)]*kernel[2*ksj];
               

               __scalar__0 = __scalar__0+image[j2+isj*(i2+1)]*kernel[2*ksj+1];
               

               __scalar__0 = __scalar__0+image[j2+1+isj*(i2+1)]*kernel[2*ksj+2];
               ;
               ;
            }
         }
         __scalar__0 = __scalar__0/9;
         new_image[j2+512*i2] = __scalar__0;
      }
   }
   i_12 = 385;
   ;
}
