
Inital code

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= isi-2; i += 1)
      for(j = 1; j <= isj-2; j += 1)
         run_kernel(i, j, isi, isj, new_image, image, kernel);
}
void run_kernel(int i, int j, int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   int ki, kj;
   new_image[i][j] = 0.;
   for(ki = 0; ki <= 2; ki += 1)
      for(kj = 0; kj <= 2; kj += 1)
         
         
         new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
   new_image[i][j] = new_image[i][j]/(3*3);
}

After Inlining

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= isi-2; i += 1)
      for(j = 1; j <= isj-2; j += 1) {
         {
            int ki, kj;
            new_image[i][j] = 0.;
            for(ki = 0; ki <= 2; ki += 1)
               for(kj = 0; kj <= 2; kj += 1)
                  
                  
                  new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
            new_image[i][j] = new_image[i][j]/(3*3);
         }
      }
}

after Kernelize

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j;
   //PIPS generated variable
   int i_1;

#pragma omp parallel for private(j)
l99997:
   for(i = 0; i <= isi-1; i += 1)
#pragma omp parallel for 
l99998:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l99993:   work(isi, isj, image, kernel, new_image);
}
void work(int isi, int isj, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   //PIPS generated variable
   int i, j;

l99993:
   for(i = 1; i <= isi-2; i += 128)
      microcode(isi, isj, i, image, kernel, new_image);
}
void microcode(int isi, int isj, int i, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   //PIPS generated variable
   int j;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= MIN(i+127, isi-2); i_1 += 1)
l99994:
         for(j = 1; j <= isj-2; j += 1) {
            {
               int ki, kj;
               new_image[i_1][j] = 0.;
l99995:
               for(ki = 0; ki <= 2; ki += 1)
l99996:
                  for(kj = 0; kj <= 2; kj += 1)
                     
                     
                     new_image[i_1][j] = new_image[i_1][j]+image[i_1+ki-3/2][j+kj-3/2]*kernel[ki][kj];
               new_image[i_1][j] = new_image[i_1][j]/(3*3);
            }
         }
   }
}
void microcode(int isi, int isj, int i, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   //PIPS generated variable
   int j;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= MIN(i+127, isi-2); i_1 += 1)
l99994:
         for(j = 1; j <= isj-2; j += 1) {
            {
               int ki, kj;
               new_image[i_1][j] = 0.;
l99995:
               for(ki = 0; ki <= 2; ki += 1)
l99996:
                  for(kj = 0; kj <= 2; kj += 1)
                     
                     
                     new_image[i_1][j] = new_image[i_1][j]+image[i_1+ki-1][j+kj-1]*kernel[ki][kj];
               new_image[i_1][j] = new_image[i_1][j]/9;
            }
         }
   }
   ;
}

Microcode after scalarization

void microcode(int isi, int isj, int i, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   float __scalar__0;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= MIN(i+127, isi-2); i_1 += 1)
l99994:
         for(j = 1; j <= isj-2; j += 1) {
            {
               int ki, kj;
               __scalar__0 = 0.;
l99995:
               for(ki = 0; ki <= 2; ki += 1)
l99996:
                  for(kj = 0; kj <= 2; kj += 1)
                     
                     
                     __scalar__0 = __scalar__0+image[i_1+ki-1][j+kj-1]*kernel[ki][kj];
               __scalar__0 = __scalar__0/9;
            }
            new_image[i_1][j] = __scalar__0;
         }
   }
   ;
}

Microcode After array conversion

void microcode(int isi, int isj, int i, float *image, float *kernel, float *new_image)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   float __scalar__0;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= MIN(i+127, isi-2); i_1 += 1)
l99994:
         for(j = 1; j <= isj-2; j += 1) {
            {
               int ki, kj;
               __scalar__0 = 0.;
l99995:
               for(ki = 0; ki <= 2; ki += 1)
l99996:
                  for(kj = 0; kj <= 2; kj += 1)
                     
                     
                     __scalar__0 = __scalar__0+image[j+kj-1+isj*(i_1+ki-1)]*kernel[3*ki+kj];
               __scalar__0 = __scalar__0/9;
            }
            new_image[j+isj*i_1] = __scalar__0;
         }
   }
   ;
}

Microcode after flattening

void microcode(int isi, int isj, int i, float *image, float *kernel, float *new_image)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   float __scalar__0;
   //PIPS generated variable
   int i_1_0, ki_2, kj_2;
   //PIPS generated variable
   for(i_1_0 = i; i_1_0 <= MIN(i+127, isi-2); i_1_0 += 1)
l99994:
      for(j = 1; j <= isj-2; j += 1) {
         __scalar__0 = 0.;
         
         
         __scalar__0 = __scalar__0+image[j+isj*(i_1_0-1)-1]*kernel[0];
         
         
         __scalar__0 = __scalar__0+image[j+isj*(i_1_0-1)]*kernel[1];
         
         
         __scalar__0 = __scalar__0+image[j+isj*(i_1_0-1)+1]*kernel[2];
         kj_2 = 3;
         
         
         __scalar__0 = __scalar__0+image[j+isj*i_1_0-1]*kernel[3];
         
         
         __scalar__0 = __scalar__0+image[j+isj*i_1_0]*kernel[4];
         
         
         __scalar__0 = __scalar__0+image[j+isj*i_1_0+1]*kernel[5];
         kj_2 = 3;
         
         
         __scalar__0 = __scalar__0+image[j+isj*(i_1_0+1)-1]*kernel[6];
         
         
         __scalar__0 = __scalar__0+image[j+isj*(i_1_0+1)]*kernel[7];
         
         
         __scalar__0 = __scalar__0+image[j+isj*(i_1_0+1)+1]*kernel[8];
         kj_2 = 3;
         ki_2 = 3;
         __scalar__0 = __scalar__0/9;
         new_image[j+isj*i_1_0] = __scalar__0;
      }
   ;
}

Microcode after CSE

void microcode(int isi, int isj, int i, float *image, float *kernel, float *new_image)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   float __scalar__0;
   //PIPS generated variable
   int i_1_0, ki_2, kj_2, I_5;
   //PIPS generated variable
   int I_9;
   //PIPS generated variable
   int I_14;
   //PIPS generated variable
   for(i_1_0 = i; i_1_0 <= MIN(i+127, isi-2); i_1_0 += 1)
l99994:
      for(j = 1; j <= isj-2; j += 1) {
         __scalar__0 = 0.;
         
         
         I_5 = j+isj*(i_1_0-1);
         __scalar__0 = __scalar__0+image[I_5-1]*kernel[0];
         
         
         __scalar__0 = __scalar__0+image[I_5]*kernel[1];
         
         
         __scalar__0 = __scalar__0+image[I_5+1]*kernel[2];
         kj_2 = 3;
         
         
         I_9 = j+isj*i_1_0;
         __scalar__0 = __scalar__0+image[I_9-1]*kernel[3];
         
         
         __scalar__0 = __scalar__0+image[I_9]*kernel[4];
         
         
         __scalar__0 = __scalar__0+image[I_9+1]*kernel[5];
         kj_2 = 3;
         
         
         I_14 = j+isj*(i_1_0+1);
         __scalar__0 = __scalar__0+image[I_14-1]*kernel[6];
         
         
         __scalar__0 = __scalar__0+image[I_14]*kernel[7];
         
         
         __scalar__0 = __scalar__0+image[I_14+1]*kernel[8];
         kj_2 = 3;
         ki_2 = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_9] = __scalar__0;
      }
   ;
}

Microcode after ICM

void microcode(int isi, int isj, int i, float *image, float *kernel, float *new_image)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   float __scalar__0;
   //PIPS generated variable
   int i_1_0, ki_2, kj_2, I_5;
   //PIPS generated variable
   int I_9;
   //PIPS generated variable
   int I_14, I_17;
   //PIPS generated variable
   I_17 = isj-2;
   for(i_1_0 = i; i_1_0 <= MIN(i+127, isi-2); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0.;
         
         
         I_5 = j+isj*(i_1_0-1);
         __scalar__0 = __scalar__0+image[I_5-1]*kernel[0];
         
         
         __scalar__0 = __scalar__0+image[I_5]*kernel[1];
         
         
         __scalar__0 = __scalar__0+image[I_5+1]*kernel[2];
         kj_2 = 3;
         
         
         I_9 = j+isj*i_1_0;
         __scalar__0 = __scalar__0+image[I_9-1]*kernel[3];
         
         
         __scalar__0 = __scalar__0+image[I_9]*kernel[4];
         
         
         __scalar__0 = __scalar__0+image[I_9+1]*kernel[5];
         kj_2 = 3;
         
         
         I_14 = j+isj*(i_1_0+1);
         __scalar__0 = __scalar__0+image[I_14-1]*kernel[6];
         
         
         __scalar__0 = __scalar__0+image[I_14]*kernel[7];
         
         
         __scalar__0 = __scalar__0+image[I_14+1]*kernel[8];
         kj_2 = 3;
         ki_2 = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_9] = __scalar__0;
      }
   ;
}

Microcode After atomization

void microcode(int isi, int isj, int i, float *image, float *kernel, float *new_image)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   float __scalar__0;
   //PIPS generated variable
   int i_1_0, ki_2, kj_2, I_5;
   //PIPS generated variable
   int I_9;
   //PIPS generated variable
   int I_14, I_17, I_18, I_19;
   //PIPS generated variable
   float F_37, F_38, F_39;
   //PIPS generated variable
   int I_20;
   //PIPS generated variable
   float F_40, F_41, F_42;
   //PIPS generated variable
   int I_21, I_22;
   //PIPS generated variable
   float F_43, F_44, F_45;
   //PIPS generated variable
   I_17 = isj-2;
   for(i_1_0 = i; i_1_0 <= MIN(i+127, isi-2); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0.;
         I_18 = i_1_0-1;
         I_19 = isj*I_18;
         
         
         I_5 = j+I_19;
         F_37 = image[I_5-1]*kernel[0];
         __scalar__0 = __scalar__0+F_37;
         F_38 = image[I_5]*kernel[1];
         
         
         __scalar__0 = __scalar__0+F_38;
         F_39 = image[I_5+1]*kernel[2];
         
         
         __scalar__0 = __scalar__0+F_39;
         kj_2 = 3;
         I_20 = isj*i_1_0;
         
         
         I_9 = j+I_20;
         F_40 = image[I_9-1]*kernel[3];
         __scalar__0 = __scalar__0+F_40;
         F_41 = image[I_9]*kernel[4];
         
         
         __scalar__0 = __scalar__0+F_41;
         F_42 = image[I_9+1]*kernel[5];
         
         
         __scalar__0 = __scalar__0+F_42;
         kj_2 = 3;
         I_21 = i_1_0+1;
         I_22 = isj*I_21;
         
         
         I_14 = j+I_22;
         F_43 = image[I_14-1]*kernel[6];
         __scalar__0 = __scalar__0+F_43;
         F_44 = image[I_14]*kernel[7];
         
         
         __scalar__0 = __scalar__0+F_44;
         F_45 = image[I_14+1]*kernel[8];
         
         
         __scalar__0 = __scalar__0+F_45;
         kj_2 = 3;
         ki_2 = 3;
         __scalar__0 = __scalar__0/9;
         new_image[I_9] = __scalar__0;
      }
   ;
}
