tidy the code just in case of
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int x, y;
   for(y = 2; y <= n-3; y += 1)
      for(x = 0; x <= n-1; x += 1)
         img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   for(y = 2; y <= n-3; y += 1)
      for(x = 0; x <= n-1; x += 1)
         img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
tiling
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int x0, I_0;
   I_0 = (__TERAPYPS_WIDTH+n-5)/__TERAPYPS_WIDTH;
l99998:
   for(y = 2; y <= __TERAPYPS_WIDTH*I_0+1; y += 1)
      for(x = 0; x <= n-1; x += 1)
         img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);

}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int x0, I_0, I_1;
   I_1 = (__TERAPYPS_HEIGHT+n-1)/__TERAPYPS_HEIGHT;
   I_0 = (__TERAPYPS_WIDTH+n-5)/__TERAPYPS_WIDTH;
l99998:
   for(y = 2; y <= __TERAPYPS_WIDTH*I_0+1; y += 1)
      for(x = 0; x <= __TERAPYPS_HEIGHT*I_1-1; x += 1)
         img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);

}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int x0, I_0, I_1, yt, xt;
   I_1 = (__TERAPYPS_HEIGHT+n-1)/__TERAPYPS_HEIGHT;
   I_0 = (__TERAPYPS_WIDTH+n-5)/__TERAPYPS_WIDTH;
l99998:
   for(yt = 2; yt <= __TERAPYPS_WIDTH*I_0+1-(__TERAPYPS_WIDTH-1); yt += __TERAPYPS_WIDTH)
#pragma omp parallel for private(x)
      for(xt = 0; xt <= __TERAPYPS_HEIGHT*I_1-1-(__TERAPYPS_HEIGHT-1); xt += __TERAPYPS_HEIGHT)
#pragma omp parallel for 
         for(y = yt; y <= MIN(yt+__TERAPYPS_WIDTH, __TERAPYPS_WIDTH*I_0+1+1)-1; y += 1)
#pragma omp parallel for 
            for(x = xt; x <= MIN(xt+__TERAPYPS_HEIGHT, __TERAPYPS_HEIGHT*I_1-1+1)-1; x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
group constants and isolate
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH = 124, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int x0, I_0, I_1, yt, xt;
   I_1 = (__TERAPYPS_HEIGHT+n-1)/__TERAPYPS_HEIGHT;
   I_0 = (n+119)/124;
l99998:
   for(yt = 2; yt <= 124*I_0-122; yt += 124)
#pragma omp parallel for private(x)
l99993:
      for(xt = 0; xt <= __TERAPYPS_HEIGHT*I_1-__TERAPYPS_HEIGHT; xt += __TERAPYPS_HEIGHT)
#pragma omp parallel for 
l99994:
         for(y = yt; y <= yt+123; y += 1)
#pragma omp parallel for 
l99995:
            for(x = xt; x <= MIN(__TERAPYPS_HEIGHT+xt, __TERAPYPS_HEIGHT*I_1)-1; x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH = 124, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int x0, I_0, I_1, yt, xt;
   __TERAPYPS_HEIGHT = 260;
   I_1 = (__TERAPYPS_HEIGHT+n-1)/__TERAPYPS_HEIGHT;
   I_0 = (n+119)/124;
l99998:
   for(yt = 2; yt <= 124*I_0-122; yt += 124)
#pragma omp parallel for private(x)
l99993:
      for(xt = 0; xt <= __TERAPYPS_HEIGHT*I_1-__TERAPYPS_HEIGHT; xt += __TERAPYPS_HEIGHT)
#pragma omp parallel for 
l99994:
         for(y = yt; y <= yt+123; y += 1)
#pragma omp parallel for 
l99995:
            for(x = xt; x <= MIN(__TERAPYPS_HEIGHT+xt, __TERAPYPS_HEIGHT*I_1)-1; x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int x, y;
   //PIPS generated variable
   int yt, xt;



l99998:
   for(yt = 2; yt <= 124*((n+119)/124)-122; yt += 124)
#pragma omp parallel for private(x)
l99993:
      for(xt = 0; xt <= 260*((n+259)/260)-260; xt += 260)
#pragma omp parallel for 
l99994:
         for(y = yt; y <= yt+123; y += 1)
#pragma omp parallel for 
l99995:
            for(x = xt; x <= xt+259; x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
void runner(int n, int img_out[n+118+1][n+258+1], int img[MIN((127*n-127)/4, n+122)+1][MIN((263*n-263)/4, n+258)+1])
{
   int x, y;
   //PIPS generated variable
   int yt, xt;



l99998:
   for(yt = 2; yt <= 124*((n+119)/124)-122; yt += 124)
#pragma omp parallel for private(x)
l99993:
      for(xt = 0; xt <= 260*((n+259)/260)-260; xt += 260)
#pragma omp parallel for 
l99994:
         for(y = yt; y <= yt+123; y += 1)
#pragma omp parallel for 
l99995:
            for(x = xt; x <= xt+259; x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int out[n+118+1][n+258+1], in[MIN((127*n-127)/4, n+122)+1][MIN((263*n-263)/4, n+258)+1];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in);
   check = 0;
   for(i = 0; i <= n-4-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
**** check ok ******
void runner(int n, int img_out[n+118+1][n+258+1], int img[MIN((127*n-127)/4, n+122)+1][MIN((263*n-263)/4, n+258)+1])
{
   int x, y;
   //PIPS generated variable
   int yt, xt;



l99998:
   for(yt = 2; yt <= 124*((n+119)/124)-122; yt += 124)
#pragma omp parallel for private(x)
l99993:
      for(xt = 0; xt <= 260*((n+259)/260)-260; xt += 260)
#pragma omp parallel for 
l99994:
         for(y = yt; y <= yt+123; y += 1)
#pragma omp parallel for 
l99995:
            for(x = xt; x <= xt+259; x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
void runner(int n, int img_out[n+118+1][n+258+1], int img[MIN((127*n-127)/4, n+122)+1][MIN((263*n-263)/4, n+258)+1])
{
   int x, y;
   //PIPS generated variable
   int yt, xt;



l99998:
   for(yt = 2; yt <= 124*((n+119)/124)-122; yt += 124)
#pragma omp parallel for private(x)
l99993:
      for(xt = 0; xt <= 260*((n+259)/260)-260; xt += 260) {
         //PIPS generated variable
         int (*img0)[128][260] = (int (*)[128][260]) 0, (*img_out0)[124][260] = (int (*)[124][260]) 0;
         P4A_accel_malloc((void **) &img_out0, sizeof(int)*32240);
         P4A_accel_malloc((void **) &img0, sizeof(int)*33280);
         P4A_copy_to_accel_2d(sizeof(int), MIN((127*n-127)/4, n+122)+1, MIN((263*n-263)/4, n+258)+1, 128, 260, yt-2, xt, &img[0][0], *img0);

#pragma omp parallel for 
l99994:
         for(y = yt; y <= yt+123; y += 1)
#pragma omp parallel for 
l99995:
            for(x = xt; x <= xt+259; x += 1)
               (*img_out0)[y-2-(yt-2)][x-xt] = MIN(MIN(MIN(MIN((*img0)[y-2-(yt-2)][x-xt], (*img0)[y-1-(yt-2)][x-xt]), (*img0)[y-(yt-2)][x-xt]), (*img0)[y+1-(yt-2)][x-xt]), (*img0)[y+2-(yt-2)][x-xt]);
         P4A_copy_from_accel_2d(sizeof(int), n+119, n+259, 124, 260, yt-2, xt, &img_out[0][0], *img_out0);
         P4A_accel_free(img_out0);
         P4A_accel_free(img0);
      }
}
outlining to launcher
void runner(int n, int img_out[n+118+1][n+258+1], int img[MIN((127*n-127)/4, n+122)+1][MIN((263*n-263)/4, n+258)+1])
{
   int x, y;
   //PIPS generated variable
   int yt, xt;



l99998:
   for(yt = 0; yt <= (n+119)/124-1; yt += 1)
#pragma omp parallel for 
l99993:
      for(xt = 0; xt <= (n+259)/260-1; xt += 1) {
         //PIPS generated variable
         int (*img0)[128][260] = (int (*)[128][260]) 0, (*img_out0)[124][260] = (int (*)[124][260]) 0;
         P4A_accel_malloc((void **) &img_out0, 32240*sizeof(int));
         P4A_accel_malloc((void **) &img0, 33280*sizeof(int));
         P4A_copy_to_accel_2d(sizeof(int), MIN((127*n-127)/4, n+122)+1, MIN((263*n-263)/4, n+258)+1, 128, 260, 124*yt, 260*xt, &img[0][0], *img0);

l99994:         launcher_0(259+1, *img0, *img_out0);
         P4A_copy_from_accel_2d(sizeof(int), n+119, n+259, 124, 260, 124*yt, 260*xt, &img_out[0][0], *img_out0);
         P4A_accel_free(img_out0);
         P4A_accel_free(img0);
      }
}

//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=259,
//    I_2==260}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=123, 0<=PHI2,
//    PHI2<=259, I_2==260}>

void launcher_0(int I_2, int img0[128][260], int img_out0[124][260])
{
   //PIPS generated variable
   int x, y;

//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=259,
//    I_2==260}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=123, 0<=PHI2,
//    PHI2<=259, I_2==260}>

l99994:
   for(y = 0; y <= 123; y += 1)

//  <img0[PHI1][PHI2]-R-EXACT-{y<=PHI1, PHI1<=y+4, 0<=PHI2, PHI2<=259,
//    I_2==260, 0<=y, y<=123}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==y, 0<=PHI2, PHI2<=259,
//    I_2==260, 0<=y, y<=123}>

l99995:
      for(x = 0; x <= I_2-1; x += 1)

//  <img0[PHI1][PHI2]-R-EXACT-{PHI2==x, y<=PHI1, PHI1<=y+4, I_2==260,
//    0<=x, x<=259, 0<=y, y<=123}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==y, PHI2==x, I_2==260, 0<=x,
//    x<=259, 0<=y, y<=123}>

         img_out0[y][x] = MIN(MIN(MIN(MIN(img0[y][x], img0[y+1][x]), img0[y+2][x]), img0[y+3][x]), img0[y+4][x]);
}
outlining to microcode
void launcher_0(int I_2, int img0[128][260], int img_out0[124][260])
{
   //PIPS generated variable
   int x, y;
l99994:
   for(y = 0; y <= 123; y += 1)
l99995:      launcher_0_microcode(y, I_2, img0, *&img_out0[y]);
}
void launcher_0_microcode(int y, int I_2, int img0[128][260], int img_out00[260])
{
   //PIPS generated variable
   int x;
l99995:
   for(x = 0; x <= I_2-1; x += 1)
      img_out00[x] = MIN(MIN(MIN(MIN(img0[y][x], img0[y+1][x]), img0[y+2][x]), img0[y+3][x]), img0[y+4][x]);
}
**** check ok ******
refining microcode
void launcher_0_microcode(int y, int I_2, int *img0, int *img_out00)
{
   //PIPS generated variable
   int x;
l99995:
   for(x = 0; x <= I_2-1; x += 1)
      *(img_out00+x) = MIN(MIN(MIN(MIN(*(img0+x+260*y), *(img0+x+260*y+260)), *(img0+x+260*y+520)), *(img0+x+260*y+780)), *(img0+x+260*y+1040));
}
**** check ok ******
void launcher_0_microcode(int y, int I_2, int *img0, int *img_out00)
{
   //PIPS generated variable
   int x;
   //PIPS generated variable
   int *img_out000;
   //PIPS generated variable
   int I_3, I_4;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_5, I_6, I_7;
   //PIPS generated variable
   int *P_1;
   //PIPS generated variable
   int I_8, I_9, I_10, I_11;
   //PIPS generated variable
   int *P_2;
   //PIPS generated variable
   int I_12, I_13, I_14, I_15;
   //PIPS generated variable
   int *P_3;
   //PIPS generated variable
   int I_16, I_17, I_18, I_19;
   //PIPS generated variable
   int *P_4;
   img_out000 = img_out00;
l99995:
   for(x = 0; x <= I_2-1; x += 1) {
      I_3 = 260*y;
      I_4 = x+I_3;
      P_0 = img0+I_4;
      I_5 = 260*y;
      I_6 = x+I_5;
      I_7 = I_6+260;
      P_1 = img0+I_7;
      I_8 = MIN(*P_0, *P_1);
      I_9 = 260*y;
      I_10 = x+I_9;
      I_11 = I_10+520;
      P_2 = img0+I_11;
      I_12 = MIN(I_8, *P_2);
      I_13 = 260*y;
      I_14 = x+I_13;
      I_15 = I_14+780;
      P_3 = img0+I_15;
      I_16 = MIN(I_12, *P_3);
      I_17 = 260*y;
      I_18 = x+I_17;
      I_19 = I_18+1040;
      P_4 = img0+I_19;
      *img_out000 = MIN(I_16, *P_4);
      img_out000 = img_out000+1;
   }
}
**** check ok ******
I_2 belongs to a loop bound
img0 seems an image
img_out00 seems an image
void launcher_0_microcode(int *FIFO1, int *FIFO0, int N0, int y)
{
   //PIPS generated variable
   int *im0;
   //PIPS generated variable
   int re0, re1, re2, re3;
   //PIPS generated variable
   int *im1;
   //PIPS generated variable
   int re4, re5, re6, re7;
   //PIPS generated variable
   int *im2;
   //PIPS generated variable
   int re8, re9, re10, re11;
   //PIPS generated variable
   int *im3;
   //PIPS generated variable
   int re12, re13, re14;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   int re15, re16;
   //PIPS generated variable
   int *im5, *im6, *im7;
   //PIPS generated variable
   int re17;
   im7 = FIFO1;
   im6 = FIFO0;
   im5 = im7;
   for(re17 = 0; re17 <= N0; re17 += 1) {
      re16 = 260*y;
      re15 = re17+re16;
      im4 = im6+re15;
      re14 = 260*y;
      re13 = re17+re14;
      re12 = re13+260;
      im3 = im6+re12;
      re11 = MIN(*im4, *im3);
      re10 = 260*y;
      re9 = re17+re10;
      re8 = re9+520;
      im2 = im6+re8;
      re7 = MIN(re11, *im2);
      re6 = 260*y;
      re5 = re17+re6;
      re4 = re5+780;
      im1 = im6+re4;
      re3 = MIN(re7, *im1);
      re2 = 260*y;
      re1 = re17+re2;
      re0 = re1+1040;
      im0 = im6+re0;
      *im5 = MIN(re3, *im0);
      im5 = im5+1;
   }
}
void launcher_0(int I_2, int img0[128][260], int img_out0[124][260])
{
   //PIPS generated variable
   int x, y;
l99994:
   for(y = 0; y <= 123; y += 1)
l99995:      launcher_0_microcode(*&img_out0[y], img0, I_2, y);
}
**** check ok ******
void launcher_0_microcode(int *FIFO1, int *FIFO0, int N0, int y)
{
   //PIPS generated variable
   int *im0;
   //PIPS generated variable
   int re0, re1, re2, re3;
   //PIPS generated variable
   int *im1;
   //PIPS generated variable
   int re4, re5, re6, re7;
   //PIPS generated variable
   int *im2;
   //PIPS generated variable
   int re8, re9, re10, re11;
   //PIPS generated variable
   int *im3;
   //PIPS generated variable
   int re12, re13, re14;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   int re15, re16;
   //PIPS generated variable
   int *im5, *im6, *im7;
   //PIPS generated variable
   int re17;
   im7 = FIFO1;
   im6 = FIFO0;
   im5 = im7;
   for(re17 = 0; re17 <= N0; re17 += 1) {
      re16 = 260*y;
      re15 = re17+re16;
      im4 = im6+re15;
      re14 = 260*y;
      re13 = re17+re14;
      re12 = re13+260;
      im3 = im6+re12;
      re11 = MIN(*im4, *im3);
      re10 = 260*y;
      re9 = re17+re10;
      re8 = re9+520;
      im2 = im6+re8;
      re7 = MIN(re11, *im2);
      re6 = 260*y;
      re5 = re17+re6;
      re4 = re5+780;
      im1 = im6+re4;
      re3 = MIN(re7, *im1);
      re2 = 260*y;
      re1 = re17+re2;
      re0 = re1+1040;
      im0 = im6+re0;
      *im5 = MIN(re3, *im0);
      im5 = im5+1;
   }
}
sub launcher_0_microcode
im7 = FIFO1
im6 = FIFO0
im5 = im7
                        ||                        ||                        ||         do_N0          ||                        
re16 = 260*y
re15 = re17+re16
im4 = im6+re15
re14 = 260*y
re13 = re17+re14
re12 = re13+260
im3 = im6+re12
re11 = MIN(*im4, *im3)
re10 = 260*y
re9 = re17+re10
re8 = re9+520
im2 = im6+re8
re7 = MIN(re11, *im2)
re6 = 260*y
re5 = re17+re6
re4 = re5+780
im1 = im6+re4
re3 = MIN(re7, *im1)
re2 = 260*y
re1 = re17+re2
re0 = re1+1040
im0 = im6+re0
*im5 = MIN(re3, *im0)
im5 = im5+1
                        ||                        ||                        ||          loop          ||                        
endsub
