void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 3/2; i <= isi-3/2-1; i += 1)
      for(j = 3/2; j <= isj-3/2-1; j += 1) {
         new_image[i][j] = 0.;
         new_image[i][j] += image[i+0-3/2][j+0-3/2]*kernel[0][0];
         new_image[i][j] += image[i+0-3/2][j+1-3/2]*kernel[0][1];
         new_image[i][j] += image[i+0-3/2][j+2-3/2]*kernel[0][2];
         new_image[i][j] += image[i+1-3/2][j+0-3/2]*kernel[1][0];
         new_image[i][j] += image[i+1-3/2][j+1-3/2]*kernel[1][1];
         new_image[i][j] += image[i+1-3/2][j+2-3/2]*kernel[1][2];
         new_image[i][j] += image[i+2-3/2][j+0-3/2]*kernel[2][0];
         new_image[i][j] += image[i+2-3/2][j+1-3/2]*kernel[2][1];
         new_image[i][j] += image[i+2-3/2][j+2-3/2]*kernel[2][2];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j;
   //PIPS generated variable
   float F_8;
   //PIPS generated variable
   int i0, i1, j0;
   //SAC generated temporary array
   a4si pdata9 = {9, 9, 9, 9};
   //SAC generated temporary array
   a4sf pdata10 = {0, 0, 0, 0}, pdata11 = {0, 0, 0, 0};
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0, vec50_0, vec60_0, vec70_0, vec80_0, vec90_0, vec100_0, vec110_0, vec120_0, vec130_0, vec140_0, vec150_0, vec160_0, vec170_0, vec180_0, vec190_0, vec200_0, vec210_0, vec220_0, vec230_0, vec240_0, vec250_0, vec260_0, vec270_0, vec290_0, vec310_0, vec330_0, vec350_0, vec370_0, vec390_0, vec410_0, vec430_0, vec450_0, vec460_0, vec470_0, vec480_0, vec490_0, vec500_0, vec510_0, vec520_0;

   for(i0 = 0; i0 <= isi-1; i0 += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i0][j] = image[i0][j];

   SIMD_LOAD_GENERIC_V4SF(vec20_0, kernel[0][0], kernel[0][0], kernel[0][0], kernel[0][0]);
   SIMD_LOAD_GENERIC_V4SF(vec50_0, kernel[0][1], kernel[0][1], kernel[0][1], kernel[0][1]);
   SIMD_LOAD_GENERIC_V4SF(vec80_0, kernel[0][2], kernel[0][2], kernel[0][2], kernel[0][2]);
   SIMD_LOAD_GENERIC_V4SF(vec110_0, kernel[1][0], kernel[1][0], kernel[1][0], kernel[1][0]);
   SIMD_LOAD_GENERIC_V4SF(vec140_0, kernel[1][1], kernel[1][1], kernel[1][1], kernel[1][1]);
   SIMD_LOAD_GENERIC_V4SF(vec170_0, kernel[1][2], kernel[1][2], kernel[1][2], kernel[1][2]);
   SIMD_LOAD_GENERIC_V4SF(vec200_0, kernel[2][0], kernel[2][0], kernel[2][0], kernel[2][0]);
   SIMD_LOAD_GENERIC_V4SF(vec230_0, kernel[2][1], kernel[2][1], kernel[2][1], kernel[2][1]);
   SIMD_LOAD_GENERIC_V4SF(vec260_0, kernel[2][2], kernel[2][2], kernel[2][2], kernel[2][2]);
   SIMD_LOAD_V4SI_TO_V4SF(vec460_0, &pdata9[0]);
   SIMD_LOAD_V4SF(vec490_0, &kernel[0][0]);
   SIMD_LOAD_V4SF(vec520_0, &kernel[1][1]);
   for(i1 = 1; i1 <= isi-2; i1 += 1) {
      for(j0 = 1; j0 <= 4*((isj-2)/4); j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         new_image[i1][j0] = 0.;
         SIMD_LOAD_V4SF(vec10_0, &image[i1-1][j0-1]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_LOAD_V4SF(vec40_0, &image[i1-1][j0]);
         SIMD_MULPS(vec30_0, vec40_0, vec50_0);
         SIMD_LOAD_V4SF(vec70_0, &image[i1-1][1+j0]);
         SIMD_MULPS(vec60_0, vec70_0, vec80_0);
         SIMD_LOAD_V4SF(vec100_0, &image[i1][j0-1]);
         SIMD_MULPS(vec90_0, vec100_0, vec110_0);
         SIMD_LOAD_V4SF(vec130_0, &image[i1][j0]);
         SIMD_MULPS(vec120_0, vec130_0, vec140_0);
         SIMD_LOAD_V4SF(vec160_0, &image[i1][1+j0]);
         SIMD_MULPS(vec150_0, vec160_0, vec170_0);
         SIMD_LOAD_V4SF(vec190_0, &image[1+i1][j0-1]);
         SIMD_MULPS(vec180_0, vec190_0, vec200_0);
         SIMD_LOAD_V4SF(vec220_0, &image[1+i1][j0]);
         SIMD_MULPS(vec210_0, vec220_0, vec230_0);
         SIMD_LOAD_V4SF(vec250_0, &image[1+i1][1+j0]);
         SIMD_MULPS(vec240_0, vec250_0, vec260_0);
         new_image[i1][1+j0] = 0.;
         new_image[i1][2+j0] = 0.;
         new_image[i1][3+j0] = 0.;
         SIMD_LOAD_V4SF(vec270_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec270_0, vec270_0, vec00_0);
         SIMD_STORE_V4SF(vec270_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec290_0, vec270_0, vec30_0);
         SIMD_STORE_V4SF(vec290_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec310_0, vec290_0, vec60_0);
         SIMD_STORE_V4SF(vec310_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec330_0, vec310_0, vec90_0);
         SIMD_STORE_V4SF(vec330_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec350_0, vec330_0, vec120_0);
         SIMD_STORE_V4SF(vec350_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec370_0, vec350_0, vec150_0);
         SIMD_STORE_V4SF(vec370_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec390_0, vec370_0, vec180_0);
         SIMD_STORE_V4SF(vec390_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec410_0, vec390_0, vec210_0);
         SIMD_STORE_V4SF(vec410_0, &new_image[i1][j0]);
         SIMD_ADDPS(vec430_0, vec410_0, vec240_0);
         SIMD_STORE_V4SF(vec430_0, &new_image[i1][j0]);
         SIMD_DIVPS(vec450_0, vec430_0, vec460_0);
         SIMD_STORE_V4SF(vec450_0, &new_image[i1][j0]);
      }
      for(j = 1+4*((isj-2)/4); j <= isj-2; j += 1) {
         //PIPS:SAC generated v4sf vector(s)
         new_image[i1][j] = 0.;
         SIMD_LOAD_GENERIC_V4SF(vec480_0, image[i1-1][j-1], image[i1-1][j], image[i1-1][1+j], image[i1][j-1]);
         SIMD_MULPS(vec470_0, vec480_0, vec490_0);
         SIMD_STORE_V4SF(vec470_0, &pdata10[0]);
         SIMD_LOAD_GENERIC_V4SF(vec510_0, image[i1][j], image[i1][1+j], image[1+i1][j-1], image[1+i1][j]);
         SIMD_MULPS(vec500_0, vec510_0, vec520_0);
         SIMD_STORE_V4SF(vec500_0, &pdata11[0]);
         pdata10[0] = image[i1-1][j-1]*kernel[0][0];
         F_8 = image[1+i1][1+j]*kernel[2][2];
         new_image[i1][j] = new_image[i1][j]+pdata10[0];
         new_image[i1][j] = new_image[i1][j]+pdata10[1];
         new_image[i1][j] = new_image[i1][j]+pdata10[2];
         new_image[i1][j] = new_image[i1][j]+pdata10[3];
         new_image[i1][j] = new_image[i1][j]+pdata11[0];
         new_image[i1][j] = new_image[i1][j]+pdata11[1];
         new_image[i1][j] = new_image[i1][j]+pdata11[2];
         new_image[i1][j] = new_image[i1][j]+pdata11[3];
         new_image[i1][j] = new_image[i1][j]+F_8;
         new_image[i1][j] = new_image[i1][j]/9;
      }
   }
   ;
}
