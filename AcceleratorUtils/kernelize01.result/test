
Initial code

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   /* compute */
kernel:
   for(i = 0; i <= 99; i += 1)
      c[i] = a[i]+b[i];
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}

Code after kernelization

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   /* compute */
kernel:   run_kernel(a, b, c);
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}
void run_kernel(int a[100], int b[100], int c[100])
{
   //PIPS generated variable
   int i;
   /* compute */
kernel:
   for(i = 0; i <= 99; i += 10)
      kernel(a, b, c, i);
}
void kernel(int a[100], int b[100], int c[100], int i)
{
   //PIPS generated variable
   int i_1;
   for(i_1 = i; i_1 <= MIN(i+9, 99); i_1 += 1)
      c[i_1] = a[i_1]+b[i_1];
}
int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   {
      //PIPS generated variable
      int (*c0)[100] = (int (*)[100]) 0, (*b0)[100] = (int (*)[100]) 0, (*a0)[100] = (int (*)[100]) 0;
      P4A_accel_malloc((void **) &a0, sizeof(int)*100);
      P4A_accel_malloc((void **) &b0, sizeof(int)*100);
      P4A_accel_malloc((void **) &c0, sizeof(int)*100);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &a[0], *a0);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &b[0], *b0);

      /* compute */
kernel:      run_kernel((*a0), (*b0), (*c0));
      P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &c[0], *c0);
      P4A_accel_free(a0);
      P4A_accel_free(b0);
      P4A_accel_free(c0);
   }
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}

Code after cleanup

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   {
      //PIPS generated variable
      int (*c0)[100] = (int (*)[100]) 0, (*b0)[100] = (int (*)[100]) 0, (*a0)[100] = (int (*)[100]) 0;
      P4A_accel_malloc((void **) &a0, sizeof(int)*100);
      P4A_accel_malloc((void **) &b0, sizeof(int)*100);
      P4A_accel_malloc((void **) &c0, sizeof(int)*100);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &a[0], *a0);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &b[0], *b0);
      /* compute */
      run_kernel((*a0), (*b0), (*c0));
      P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &c[0], *c0);
      P4A_accel_free(a0);
      P4A_accel_free(b0);
      P4A_accel_free(c0);
   }
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
   ;
}

Unsplit resulting code

