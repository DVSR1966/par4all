
PROPER  EFFECTS 

void whilewhile01()
{
//             <    is written>: i
   int i = 0;
//             <    is read   >: i
   
   // The second internal while is not entered
   while (i<=10) {
//             <    is read   >: i
      while (i<=10&&i>=0)
//             <    is read   >: i
//             <    is written>: i
         i++;
//             <    is read   >: i
      while (i<=10&&i<0)
//             <    is read   >: i
//             <    is written>: i
         i--;
   }
//             <    is written>: i
   
   // The non-termination is not detected, both loops are potentially entered
   i = -1;
//             <    is read   >: i
   while (i<=10)
      if (1) {
//             <    is read   >: i
         while (i<=10&&i>=0)
//             <    is read   >: i
//             <    is written>: i
            i++;
//             <    is read   >: i
         while (i<=10&&i<0)
//             <    is read   >: i
//             <    is written>: i
            i--;
      }
//             <    is written>: i
   
   // This control point is not reachable, but the empty set is over
   // approximated by i==11
   
   // The non-termination is detected, the second inner loop is not
   // entered
   // Note that the inner loops have been exchanged
   i = -1;
//             <    is read   >: i
   while (i<=10)
      if (1) {
//             <    is read   >: i
         while (i<=10&&i<0)
//             <    is read   >: i
//             <    is written>: i
            i--;
//             <    is read   >: i
         while (i<=10&&i>=0)
//             <    is read   >: i
//             <    is written>: i
            i++;
      }

   return;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

void whilewhile01()
{

// Points To: none

   int i = 0;

// Points To: none

   
   // The second internal while is not entered
   while (i<=10) {

// Points To: none

      while (i<=10&&i>=0)

// Points To: none

         i++;

// Points To: none

      while (i<=10&&i<0)

// Points To: none

         i--;
   }

// Points To: none

   
   // The non-termination is not detected, both loops are potentially entered
   i = -1;

// Points To: none

   while (i<=10)

// Points To: none

      if (1) {

// Points To: none

         while (i<=10&&i>=0)

// Points To: none

            i++;

// Points To: none

         while (i<=10&&i<0)

// Points To: none

            i--;
      }

// Points To: none

   
   // This control point is not reachable, but the empty set is over
   // approximated by i==11
   
   // The non-termination is detected, the second inner loop is not
   // entered
   // Note that the inner loops have been exchanged
   i = -1;

// Points To: none

   while (i<=10)

// Points To: none

      if (1) {

// Points To: none

         while (i<=10&&i<0)

// Points To: none

            i--;

// Points To: none

         while (i<=10&&i>=0)

// Points To: none

            i++;
      }

// Points To: none


   return;
}

PROPER  EFFECTS WITH POINTS TO

void whilewhile01()
{
//             <    is written>: i
   int i = 0;
//             <    is read   >: i
   
   // The second internal while is not entered
   while (i<=10) {
//             <    is read   >: i
      while (i<=10&&i>=0)
//             <    is read   >: i
//             <    is written>: i
         i++;
//             <    is read   >: i
      while (i<=10&&i<0)
//             <    is read   >: i
//             <    is written>: i
         i--;
   }
//             <    is written>: i
   
   // The non-termination is not detected, both loops are potentially entered
   i = -1;
//             <    is read   >: i
   while (i<=10)
      if (1) {
//             <    is read   >: i
         while (i<=10&&i>=0)
//             <    is read   >: i
//             <    is written>: i
            i++;
//             <    is read   >: i
         while (i<=10&&i<0)
//             <    is read   >: i
//             <    is written>: i
            i--;
      }
//             <    is written>: i
   
   // This control point is not reachable, but the empty set is over
   // approximated by i==11
   
   // The non-termination is detected, the second inner loop is not
   // entered
   // Note that the inner loops have been exchanged
   i = -1;
//             <    is read   >: i
   while (i<=10)
      if (1) {
//             <    is read   >: i
         while (i<=10&&i<0)
//             <    is read   >: i
//             <    is written>: i
            i--;
//             <    is read   >: i
         while (i<=10&&i>=0)
//             <    is read   >: i
//             <    is written>: i
            i++;
      }

   return;
}

 *********************** Use-Def Chains *********************

	12 --> 15 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	12 --> 16 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	12 --> 17 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	12 --> 18 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	12 --> 19 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	12 --> 23 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
	15 --> 17 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	15 --> 19 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	15 --> 23 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	16 --> 17 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	16 --> 19 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	16 --> 23 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	17 --> 17 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	17 --> 18 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	17 --> 19 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	17 --> 23 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	18 --> 17 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	18 --> 19 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	18 --> 23 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	19 --> 16 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	19 --> 17 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	19 --> 18 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	19 --> 19 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	19 --> 23 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	23 --> 24 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	23 --> 26 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	23 --> 27 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	23 --> 28 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	23 --> 29 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	23 --> 39 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
	24 --> 27 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	24 --> 29 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	24 --> 39 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	26 --> 27 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	26 --> 29 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	26 --> 39 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	27 --> 27 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	27 --> 28 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	27 --> 29 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	27 --> 39 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	28 --> 27 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	28 --> 29 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	28 --> 39 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	29 --> 26 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	29 --> 27 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	29 --> 28 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	29 --> 29 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	29 --> 39 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	39 --> 40 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	39 --> 42 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	39 --> 43 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	39 --> 44 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	39 --> 45 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	40 --> 43 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	40 --> 45 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	42 --> 43 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	42 --> 45 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	43 --> 43 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	43 --> 44 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	43 --> 45 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	44 --> 43 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	44 --> 45 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	45 --> 42 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	45 --> 43 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	45 --> 44 with conflicts
		from <i-W-EXACT> to <i-R-EXACT>
	45 --> 45 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>

****************** End of Dependence Graph ******************
