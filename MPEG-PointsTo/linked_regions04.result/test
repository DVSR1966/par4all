
PROPER  EFFECTS 

int main()
{
   int ii, jj, x0;
   double x1;

//             <    is written>: N
   int N = 100;
   double A[100][100];

   if (1) {
      if (1) {
//             <    is read   >: N
//             <    is written>: ii
         for(ii = 1; ii <= N; ii += 1)
//             <    is read   >: N
//             <    is written>: jj
            for(jj = 1; jj <= N; jj += 1)
//             <    is read   >: N
               if (1) {
//             <    is read   >: N ii jj
//             <    is written>: x0
                  x0 = ii*jj;
//             <    is read   >: N
//             <    is written>: x1
                  x1 = (double) N/2;
//             <    is read   >: N x0 x1
                  if (x0<x1)
//             <    is read   >: N ii jj
//             <    is written>: A[N-ii-1][ii+jj-1]
                     A[N-ii-1][ii+jj-1] = 1.0;
               }
//             <    is read   >: N
//             <    is written>: ii

         for(ii = 1; ii <= N; ii += 1)
//             <    is read   >: N
//             <    is written>: jj
            for(jj = 1; jj <= N; jj += 1)
//             <    is read   >: N
               if (1) {
//             <    is read   >: N ii jj
//             <    is written>: x0
                  x0 = ii*jj;
//             <    is read   >: N
//             <    is written>: x1
                  x1 = (double) N/2;
//             <    is read   >: N x0 x1
                  if (x0<x1)
//             <    is read   >: N ii jj
//             <    is written>: A[ii-1][N-ii-jj-1]
                     A[ii-1][N-ii-jj-1] = 1.0;
               }
      }
//             <    is read   >: N
//             <    is written>: ii

      for(ii = 1; ii <= N; ii += 1)
//             <    is read   >: N
//             <    is written>: jj
         for(jj = 1; jj <= N; jj += 1)
//             <    is read   >: N ii jj
            if (ii==jj)
//             <    is read   >: N ii jj
//             <    is written>: A[ii-1][jj-1]
               A[ii-1][jj-1] = 1.0;
   }
   {
      int i;
//             <    is read   >: N
//             <    is written>: i
      for(i = 0; i <= N-1; i += 1) {
         int j;
//             <    is read   >: N
//             <    is written>: j
         for(j = 0; j <= N-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: A[i][j] N i j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int ii, jj, x0;

// Points To: none

   double x1;


// Points To: none

   int N = 100;

// Points To: none

   double A[100][100];

// Points To: none


   if (1) {

// Points To: none

      if (1) {

// Points To: none

         for(ii = 1; ii <= N; ii += 1)

// Points To: none

            for(jj = 1; jj <= N; jj += 1)

// Points To: none

               if (1) {

// Points To: none

                  x0 = ii*jj;

// Points To: none

                  x1 = (double) N/2;

// Points To: none

                  if (x0<x1)

// Points To: none

                     A[N-ii-1][ii+jj-1] = 1.0;
               }

// Points To: none


         for(ii = 1; ii <= N; ii += 1)

// Points To: none

            for(jj = 1; jj <= N; jj += 1)

// Points To: none

               if (1) {

// Points To: none

                  x0 = ii*jj;

// Points To: none

                  x1 = (double) N/2;

// Points To: none

                  if (x0<x1)

// Points To: none

                     A[ii-1][N-ii-jj-1] = 1.0;
               }
      }

// Points To: none


      for(ii = 1; ii <= N; ii += 1)

// Points To: none

         for(jj = 1; jj <= N; jj += 1)

// Points To: none

            if (ii==jj)

// Points To: none

               A[ii-1][jj-1] = 1.0;
   }
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= N-1; i += 1) {

// Points To: none

         int j;

// Points To: none

         for(j = 0; j <= N-1; j += 1)

// Points To: none

            printf("%f\n", A[i][j]);
      }
   }

// Points To: none

   return 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
   int ii, jj, x0;
   double x1;

//             <    is written>: N
   int N = 100;
   double A[100][100];

   if (1) {
      if (1) {
//             <    is read   >: N
//             <    is written>: ii
         for(ii = 1; ii <= N; ii += 1)
//             <    is read   >: N
//             <    is written>: jj
            for(jj = 1; jj <= N; jj += 1)
//             <    is read   >: N
               if (1) {
//             <    is read   >: N ii jj
//             <    is written>: x0
                  x0 = ii*jj;
//             <    is read   >: N
//             <    is written>: x1
                  x1 = (double) N/2;
//             <    is read   >: N x0 x1
                  if (x0<x1)
//             <    is read   >: N ii jj
//             <    is written>: A[N-ii-1][ii+jj-1]
                     A[N-ii-1][ii+jj-1] = 1.0;
               }
//             <    is read   >: N
//             <    is written>: ii

         for(ii = 1; ii <= N; ii += 1)
//             <    is read   >: N
//             <    is written>: jj
            for(jj = 1; jj <= N; jj += 1)
//             <    is read   >: N
               if (1) {
//             <    is read   >: N ii jj
//             <    is written>: x0
                  x0 = ii*jj;
//             <    is read   >: N
//             <    is written>: x1
                  x1 = (double) N/2;
//             <    is read   >: N x0 x1
                  if (x0<x1)
//             <    is read   >: N ii jj
//             <    is written>: A[ii-1][N-ii-jj-1]
                     A[ii-1][N-ii-jj-1] = 1.0;
               }
      }
//             <    is read   >: N
//             <    is written>: ii

      for(ii = 1; ii <= N; ii += 1)
//             <    is read   >: N
//             <    is written>: jj
         for(jj = 1; jj <= N; jj += 1)
//             <    is read   >: N ii jj
            if (ii==jj)
//             <    is read   >: N ii jj
//             <    is written>: A[ii-1][jj-1]
               A[ii-1][jj-1] = 1.0;
   }
   {
      int i;
//             <    is read   >: N
//             <    is written>: i
      for(i = 0; i <= N-1; i += 1) {
         int j;
//             <    is read   >: N
//             <    is written>: j
         for(j = 0; j <= N-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: A[i][j] N i j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}

 *********************** Use-Def Chains *********************

	71 --> 76 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 77 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 78 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 79 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 80 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 81 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 82 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 86 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 87 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 88 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 89 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 90 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 91 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 92 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 97 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 98 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 99 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 100 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 103 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 104 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	71 --> 105 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	76 --> 86 with conflicts
		from <ii-W-EXACT> to <ii-W-EXACT>
	76 --> 97 with conflicts
		from <ii-W-EXACT> to <ii-W-EXACT>
	77 --> 77 with conflicts
		from <jj-W-EXACT> to <jj-W-EXACT>
	77 --> 87 with conflicts
		from <jj-W-EXACT> to <jj-W-EXACT>
	77 --> 98 with conflicts
		from <jj-W-EXACT> to <jj-W-EXACT>
	79 --> 77 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	79 --> 79 with conflicts
		from <x0-W-EXACT> to <x0-W-EXACT>
	79 --> 81 with conflicts
		from <x0-W-EXACT> to <x0-R-EXACT>
	79 --> 86 with conflicts
		from <ii-R-EXACT> to <ii-W-EXACT>
	79 --> 87 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	79 --> 89 with conflicts
		from <x0-W-EXACT> to <x0-W-EXACT>
	79 --> 97 with conflicts
		from <ii-R-EXACT> to <ii-W-EXACT>
	79 --> 98 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	80 --> 80 with conflicts
		from <x1-W-EXACT> to <x1-W-EXACT>
	80 --> 81 with conflicts
		from <x1-W-EXACT> to <x1-R-EXACT>
	80 --> 90 with conflicts
		from <x1-W-EXACT> to <x1-W-EXACT>
	81 --> 79 with conflicts
		from <x0-R-EXACT> to <x0-W-EXACT>
	81 --> 80 with conflicts
		from <x1-R-EXACT> to <x1-W-EXACT>
	81 --> 89 with conflicts
		from <x0-R-EXACT> to <x0-W-EXACT>
	81 --> 90 with conflicts
		from <x1-R-EXACT> to <x1-W-EXACT>
	82 --> 77 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	82 --> 82 with conflicts
		from <A[N-ii-1][ii+jj-1]-W-EXACT> to <A[N-ii-1][ii+jj-1]-W-EXACT>
	82 --> 86 with conflicts
		from <ii-R-EXACT> to <ii-W-EXACT>
	82 --> 87 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	82 --> 92 with conflicts
		from <A[N-ii-1][ii+jj-1]-W-EXACT> to <A[ii-1][N-ii-jj-1]-W-EXACT>
	82 --> 97 with conflicts
		from <ii-R-EXACT> to <ii-W-EXACT>
	82 --> 98 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	82 --> 100 with conflicts
		from <A[N-ii-1][ii+jj-1]-W-EXACT> to <A[ii-1][jj-1]-W-EXACT>
	82 --> 105 with conflicts
		from <A[N-ii-1][ii+jj-1]-W-EXACT> to <A[i][j]-R-EXACT>
	86 --> 97 with conflicts
		from <ii-W-EXACT> to <ii-W-EXACT>
	87 --> 87 with conflicts
		from <jj-W-EXACT> to <jj-W-EXACT>
	87 --> 98 with conflicts
		from <jj-W-EXACT> to <jj-W-EXACT>
	89 --> 87 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	89 --> 89 with conflicts
		from <x0-W-EXACT> to <x0-W-EXACT>
	89 --> 91 with conflicts
		from <x0-W-EXACT> to <x0-R-EXACT>
	89 --> 97 with conflicts
		from <ii-R-EXACT> to <ii-W-EXACT>
	89 --> 98 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	90 --> 90 with conflicts
		from <x1-W-EXACT> to <x1-W-EXACT>
	90 --> 91 with conflicts
		from <x1-W-EXACT> to <x1-R-EXACT>
	91 --> 89 with conflicts
		from <x0-R-EXACT> to <x0-W-EXACT>
	91 --> 90 with conflicts
		from <x1-R-EXACT> to <x1-W-EXACT>
	92 --> 87 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	92 --> 92 with conflicts
		from <A[ii-1][N-ii-jj-1]-W-EXACT> to <A[ii-1][N-ii-jj-1]-W-EXACT>
	92 --> 97 with conflicts
		from <ii-R-EXACT> to <ii-W-EXACT>
	92 --> 98 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	92 --> 100 with conflicts
		from <A[ii-1][N-ii-jj-1]-W-EXACT> to <A[ii-1][jj-1]-W-EXACT>
	92 --> 105 with conflicts
		from <A[ii-1][N-ii-jj-1]-W-EXACT> to <A[i][j]-R-EXACT>
	98 --> 98 with conflicts
		from <jj-W-EXACT> to <jj-W-EXACT>
	99 --> 98 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	100 --> 98 with conflicts
		from <jj-R-EXACT> to <jj-W-EXACT>
	100 --> 100 with conflicts
		from <A[ii-1][jj-1]-W-EXACT> to <A[ii-1][jj-1]-W-EXACT>
	100 --> 105 with conflicts
		from <A[ii-1][jj-1]-W-EXACT> to <A[i][j]-R-EXACT>
	104 --> 104 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	105 --> 104 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	105 --> 105 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>

****************** End of Dependence Graph ******************
