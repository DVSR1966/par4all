
PROPER  EFFECTS 

int main()
{
//             <    is written>: N
   int N = 100;
   double A[100][100];
   int i, j;
//             <    is read   >: N
//             <    is written>: 0`i

   for(i = 1; i <= N; i += 1)
//             <    is read   >: N
//             <    is written>: 0`j
      for(j = 1; j <= N; j += 1)
//             <    is read   >: N
         //int x0 = (i*j);
         //double x1 = ((double)N / 2);
         if (1) {
//             <    is read   >: N 0`i 0`j
            if (2*i*j<N)
//             <    is read   >: N
               if (1) {
//             <    is read   >: N 0`i 0`j
//             <    is written>: A[N-i-1][i+j-1]
                  A[N-i-1][i+j-1] = 1.0;
//             <    is read   >: N 0`i 0`j
//             <    is written>: A[i-1][N-i-j-1]
                  A[i-1][N-i-j-1] = 1.0;
               }
//             <    is read   >: N 0`i 0`j
            if (i==j)
//             <    is read   >: N 0`i 0`j
//             <    is written>: A[i-1][j-1]
               A[i-1][j-1] = 1.0;
         }
   {
      int i;
//             <    is read   >: N
//             <    is written>: 0`7`i
      for(i = 0; i <= N-1; i += 1) {
         int j;
//             <    is read   >: N
//             <    is written>: 0`7`8`j
         for(j = 0; j <= N-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: A[i][j] N 0`7`i 0`7`8`j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("%f\n", A[i][j]);
      }
   }

   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int N = 100;

// Points To: none

   double A[100][100];

// Points To: none

   int i, j;

// Points To: none


   for(i = 1; i <= N; i += 1)

// Points To: none

      for(j = 1; j <= N; j += 1)

// Points To: none

         //int x0 = (i*j);
         //double x1 = ((double)N / 2);
         if (1) {

// Points To: none

            if (2*i*j<N)

// Points To: none

               if (1) {

// Points To: none

                  A[N-i-1][i+j-1] = 1.0;

// Points To: none

                  A[i-1][N-i-j-1] = 1.0;
               }

// Points To: none

            if (i==j)

// Points To: none

               A[i-1][j-1] = 1.0;
         }
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= N-1; i += 1) {

// Points To: none

         int j;

// Points To: none

         for(j = 0; j <= N-1; j += 1)

// Points To: none

            printf("%f\n", A[i][j]);
      }
   }

// Points To: none


   return 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
//             <    is written>: N
   int N = 100;
   double A[100][100];
   int i, j;
//             <    is read   >: N
//             <    is written>: 0`i

   for(i = 1; i <= N; i += 1)
//             <    is read   >: N
//             <    is written>: 0`j
      for(j = 1; j <= N; j += 1)
//             <    is read   >: N
         //int x0 = (i*j);
         //double x1 = ((double)N / 2);
         if (1) {
//             <    is read   >: N 0`i 0`j
            if (2*i*j<N)
//             <    is read   >: N
               if (1) {
//             <    is read   >: N 0`i 0`j
//             <    is written>: A[N-i-1][i+j-1]
                  A[N-i-1][i+j-1] = 1.0;
//             <    is read   >: N 0`i 0`j
//             <    is written>: A[i-1][N-i-j-1]
                  A[i-1][N-i-j-1] = 1.0;
               }
//             <    is read   >: N 0`i 0`j
            if (i==j)
//             <    is read   >: N 0`i 0`j
//             <    is written>: A[i-1][j-1]
               A[i-1][j-1] = 1.0;
         }
   {
      int i;
//             <    is read   >: N
//             <    is written>: 0`7`i
      for(i = 0; i <= N-1; i += 1) {
         int j;
//             <    is read   >: N
//             <    is written>: 0`7`8`j
         for(j = 0; j <= N-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: A[i][j] N 0`7`i 0`7`8`j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("%f\n", A[i][j]);
      }
   }

   return 0;
}

 *********************** Use-Def Chains *********************

	08 --> 12 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 13 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 16 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 17 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 18 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 19 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 20 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 23 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 24 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 29 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 30 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	08 --> 31 with conflicts
		from <N-W-EXACT> to <N-R-EXACT>
	13 --> 13 with conflicts
		from <0`j-W-EXACT> to <0`j-W-EXACT>
	17 --> 13 with conflicts
		from <0`j-R-EXACT> to <0`j-W-EXACT>
	19 --> 13 with conflicts
		from <0`j-R-EXACT> to <0`j-W-EXACT>
	19 --> 19 with conflicts
		from <A[N-i-1][i+j-1]-W-EXACT> to <A[N-i-1][i+j-1]-W-EXACT>
	19 --> 20 with conflicts
		from <A[N-i-1][i+j-1]-W-EXACT> to <A[i-1][N-i-j-1]-W-EXACT>
	19 --> 24 with conflicts
		from <A[N-i-1][i+j-1]-W-EXACT> to <A[i-1][j-1]-W-EXACT>
	19 --> 31 with conflicts
		from <A[N-i-1][i+j-1]-W-EXACT> to <A[i][j]-R-EXACT>
	20 --> 13 with conflicts
		from <0`j-R-EXACT> to <0`j-W-EXACT>
	20 --> 19 with conflicts
		from <A[i-1][N-i-j-1]-W-EXACT> to <A[N-i-1][i+j-1]-W-EXACT>
	20 --> 20 with conflicts
		from <A[i-1][N-i-j-1]-W-EXACT> to <A[i-1][N-i-j-1]-W-EXACT>
	20 --> 24 with conflicts
		from <A[i-1][N-i-j-1]-W-EXACT> to <A[i-1][j-1]-W-EXACT>
	20 --> 31 with conflicts
		from <A[i-1][N-i-j-1]-W-EXACT> to <A[i][j]-R-EXACT>
	23 --> 13 with conflicts
		from <0`j-R-EXACT> to <0`j-W-EXACT>
	24 --> 13 with conflicts
		from <0`j-R-EXACT> to <0`j-W-EXACT>
	24 --> 19 with conflicts
		from <A[i-1][j-1]-W-EXACT> to <A[N-i-1][i+j-1]-W-EXACT>
	24 --> 20 with conflicts
		from <A[i-1][j-1]-W-EXACT> to <A[i-1][N-i-j-1]-W-EXACT>
	24 --> 24 with conflicts
		from <A[i-1][j-1]-W-EXACT> to <A[i-1][j-1]-W-EXACT>
	24 --> 31 with conflicts
		from <A[i-1][j-1]-W-EXACT> to <A[i][j]-R-EXACT>
	30 --> 30 with conflicts
		from <0`7`8`j-W-EXACT> to <0`7`8`j-W-EXACT>
	31 --> 30 with conflicts
		from <0`7`8`j-R-EXACT> to <0`7`8`j-W-EXACT>
	31 --> 31 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>

****************** End of Dependence Graph ******************
