
PROPER  EFFECTS 

void STAP_Mat_Invert(int ntt, int nsa, Cplfloat mat[ntt][nsa][ntt][nsa], Cplfloat matinv[ntt][nsa][ntt][nsa])
{

   double inv[ntt*nsa+1][2*ntt*nsa+1][3];
   float pivot[3], coef[3];
   float re, im;

//             <    is written>: i1 i2 j 0`j1 j2 k1 k2 l1 l2
   int i, i1 = 0, i2 = 0, j = 0, j1 = 0, j2 = 0, k, k1 = 0, k2 = 0, l, l1 = 0, l2 = 0;
//             <    is written>: k1
   
   // MOTIF
   for(k1 = 1; k1 <= 1; k1 += 1) {
//             <    is read   >: ntt
//             <    is written>: i1
      for(i1 = 0; i1 <= ntt-1; i1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: i2
         for(i2 = 0; i2 <= nsa-1; i2 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: 0`j1
            for(j1 = 0; j1 <= ntt-1; j1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: j2
               for(j2 = 0; j2 <= nsa-1; j2 += 1) {
//             <    is read   >: i1 i2 0`j1 j2 mat[i1][i2][j1][j2].re 
//                               nsa ntt
//             <    is written>: inv[i1*nsa+i2+1][j1*nsa+j2+1][1]
                  inv[i1*nsa+i2+1][j1*nsa+j2+1][1] = mat[i1][i2][j1][j2].re;
//             <    is read   >: i1 i2 0`j1 j2 mat[i1][i2][j1][j2].im 
//                               nsa ntt
//             <    is written>: inv[i1*nsa+i2+1][j1*nsa+j2+1][2]
                  inv[i1*nsa+i2+1][j1*nsa+j2+1][2] = mat[i1][i2][j1][j2].im;
               }
//             <    is read   >: nsa ntt
//             <    is written>: i
      for(i = 1; i <= nsa*ntt+1-1; i += 1)
//             <    is read   >: nsa ntt
//             <    is written>: j
         for(j = 1; j <= nsa*ntt+1-1; j += 1)
//             <    is read   >: i j nsa ntt
            if (i==j) {
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][1]
               inv[i][nsa*ntt+j][1] = 1.0;
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][2]
               inv[i][nsa*ntt+j][2] = 0.0;
            }
            else {
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][1]
               inv[i][nsa*ntt+j][1] = 0.0;
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][2]
               inv[i][nsa*ntt+j][2] = 0.0;
            }
//             <    is read   >: nsa ntt
//             <    is written>: i
      for(i = 1; i <= ntt*nsa+1-1; i += 1) {
//             <    is read   >: i inv[i][i][1] nsa ntt
//             <    is written>: pivot[1]

         pivot[1] = inv[i][i][1];
//             <    is read   >: i inv[i][i][2] nsa ntt
//             <    is written>: pivot[2]
         pivot[2] = inv[i][i][2];
//             <    is read   >: nsa ntt pivot[1]

         if (pivot[1]==0.) {
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: nsa ntt pivot[1] pivot[2] stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("\n Pivot nul re = %f , im = %f\n", pivot[1], pivot[2]);
//             <    is read   >: nsa ntt
            exit(0);
         }
//             <    is read   >: i nsa ntt
//             <    is written>: j
         for(j = i; j <= 2*ntt*nsa+1-1; j += 1) {
//             <    is read   >: i inv[i][j][1] j nsa ntt
//             <    is written>: re
            re = inv[i][j][1];
//             <    is read   >: i inv[i][j][2] j nsa ntt
//             <    is written>: im
            im = inv[i][j][2];
//             <    is read   >: i im j nsa ntt pivot[1] pivot[2] re
//             <    is written>: inv[i][j][1]
            inv[i][j][1] = (re*pivot[1]+im*pivot[2])/(pivot[1]*pivot[1]+pivot[2]*pivot[2]);
//             <    is read   >: i im j nsa ntt pivot[1] pivot[2] re
//             <    is written>: inv[i][j][2]
            inv[i][j][2] = (im*pivot[1]-re*pivot[2])/(pivot[1]*pivot[1]+pivot[2]*pivot[2]);
         }
//             <    is read   >: nsa ntt
//             <    is written>: k
         
         
         for(k = 1; k <= ntt*nsa+1-1; k += 1)
//             <    is read   >: i k nsa ntt
            if (i!=k) {
//             <    is read   >: i inv[k][i][1] k nsa ntt
//             <    is written>: coef[1]
               coef[1] = inv[k][i][1];
//             <    is read   >: i inv[k][i][2] k nsa ntt
//             <    is written>: coef[2]
               coef[2] = inv[k][i][2];
//             <    is read   >: i nsa ntt
//             <    is written>: l

               for(l = i; l <= 2*ntt*nsa+1-1; l += 1) {
//             <    is read   >: coef[1] coef[2] i inv[i][l][1] 
//                               inv[i][l][2] inv[k][l][1] k l nsa ntt
//             <    is written>: inv[k][l][1]
                  inv[k][l][1] -= coef[1]*inv[i][l][1]-coef[2]*inv[i][l][2];
//             <    is read   >: coef[1] coef[2] i inv[i][l][1] 
//                               inv[i][l][2] inv[k][l][2] k l nsa ntt
//             <    is written>: inv[k][l][2]
                  inv[k][l][2] -= coef[1]*inv[i][l][2]+coef[2]*inv[i][l][1];
               }
            }
      }
//             <    is read   >: ntt
//             <    is written>: i1
      
      
      for(i1 = 0; i1 <= ntt-1; i1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: i2
         for(i2 = 0; i2 <= nsa-1; i2 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: 0`j1
            for(j1 = 0; j1 <= ntt-1; j1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: j2
               for(j2 = 0; j2 <= nsa-1; j2 += 1) {
//             <    is read   >: i1 i2 
//                               inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1]
//                               [1] 0`j1 j2 nsa ntt
//             <    is written>: matinv[i1][i2][j1][j2].re
                  matinv[i1][i2][j1][j2].re = (float) inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1];
//             <    is read   >: i1 i2 
//                               inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1]
//                               [2] 0`j1 j2 nsa ntt
//             <    is written>: matinv[i1][i2][j1][j2].im
                  matinv[i1][i2][j1][j2].im = (float) inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2];
               }
   }
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

void STAP_Mat_Invert(int ntt, int nsa, Cplfloat mat[ntt][nsa][ntt][nsa], Cplfloat matinv[ntt][nsa][ntt][nsa])
{


// Points To: none

   double inv[ntt*nsa+1][2*ntt*nsa+1][3];

// Points To: none

   float pivot[3], coef[3];

// Points To: none

   float re, im;


// Points To: none

   int i, i1 = 0, i2 = 0, j = 0, j1 = 0, j2 = 0, k, k1 = 0, k2 = 0, l, l1 = 0, l2 = 0;

// Points To: none

   
   // MOTIF
   for(k1 = 1; k1 <= 1; k1 += 1) {

// Points To: none

      for(i1 = 0; i1 <= ntt-1; i1 += 1)

// Points To: none

         for(i2 = 0; i2 <= nsa-1; i2 += 1)

// Points To: none

            for(j1 = 0; j1 <= ntt-1; j1 += 1)

// Points To: none

               for(j2 = 0; j2 <= nsa-1; j2 += 1) {

// Points To: none

                  inv[i1*nsa+i2+1][j1*nsa+j2+1][1] = mat[i1][i2][j1][j2].re;

// Points To: none

                  inv[i1*nsa+i2+1][j1*nsa+j2+1][2] = mat[i1][i2][j1][j2].im;
               }

// Points To: none

      for(i = 1; i <= nsa*ntt+1-1; i += 1)

// Points To: none

         for(j = 1; j <= nsa*ntt+1-1; j += 1)

// Points To: none

            if (i==j) {

// Points To: none

               inv[i][nsa*ntt+j][1] = 1.0;

// Points To: none

               inv[i][nsa*ntt+j][2] = 0.0;
            }
            else {

// Points To: none

               inv[i][nsa*ntt+j][1] = 0.0;

// Points To: none

               inv[i][nsa*ntt+j][2] = 0.0;
            }

// Points To: none

      for(i = 1; i <= ntt*nsa+1-1; i += 1) {

// Points To: none


         pivot[1] = inv[i][i][1];

// Points To: none

         pivot[2] = inv[i][i][2];

// Points To: none


         if (pivot[1]==0.) {

// Points To: none

            printf("\n Pivot nul re = %f , im = %f\n", pivot[1], pivot[2]);

// Points To: none

            exit(0);
         }

// Points To: none

         for(j = i; j <= 2*ntt*nsa+1-1; j += 1) {

// Points To: none

            re = inv[i][j][1];

// Points To: none

            im = inv[i][j][2];

// Points To: none

            inv[i][j][1] = (re*pivot[1]+im*pivot[2])/(pivot[1]*pivot[1]+pivot[2]*pivot[2]);

// Points To: none

            inv[i][j][2] = (im*pivot[1]-re*pivot[2])/(pivot[1]*pivot[1]+pivot[2]*pivot[2]);
         }

// Points To: none

         
         
         for(k = 1; k <= ntt*nsa+1-1; k += 1)

// Points To: none

            if (i!=k) {

// Points To: none

               coef[1] = inv[k][i][1];

// Points To: none

               coef[2] = inv[k][i][2];

// Points To: none


               for(l = i; l <= 2*ntt*nsa+1-1; l += 1) {

// Points To: none

                  inv[k][l][1] -= coef[1]*inv[i][l][1]-coef[2]*inv[i][l][2];

// Points To: none

                  inv[k][l][2] -= coef[1]*inv[i][l][2]+coef[2]*inv[i][l][1];
               }
            }
      }

// Points To: none

      
      
      for(i1 = 0; i1 <= ntt-1; i1 += 1)

// Points To: none

         for(i2 = 0; i2 <= nsa-1; i2 += 1)

// Points To: none

            for(j1 = 0; j1 <= ntt-1; j1 += 1)

// Points To: none

               for(j2 = 0; j2 <= nsa-1; j2 += 1) {

// Points To: none

                  matinv[i1][i2][j1][j2].re = (float) inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1];

// Points To: none

                  matinv[i1][i2][j1][j2].im = (float) inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2];
               }
   }
}

PROPER  EFFECTS WITH POINTS TO

void STAP_Mat_Invert(int ntt, int nsa, Cplfloat mat[ntt][nsa][ntt][nsa], Cplfloat matinv[ntt][nsa][ntt][nsa])
{

   double inv[ntt*nsa+1][2*ntt*nsa+1][3];
   float pivot[3], coef[3];
   float re, im;

//             <    is written>: i1 i2 j 0`j1 j2 k1 k2 l1 l2
   int i, i1 = 0, i2 = 0, j = 0, j1 = 0, j2 = 0, k, k1 = 0, k2 = 0, l, l1 = 0, l2 = 0;
//             <    is written>: k1
   
   // MOTIF
   for(k1 = 1; k1 <= 1; k1 += 1) {
//             <    is read   >: ntt
//             <    is written>: i1
      for(i1 = 0; i1 <= ntt-1; i1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: i2
         for(i2 = 0; i2 <= nsa-1; i2 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: 0`j1
            for(j1 = 0; j1 <= ntt-1; j1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: j2
               for(j2 = 0; j2 <= nsa-1; j2 += 1) {
//             <    is read   >: i1 i2 0`j1 j2 mat[i1][i2][j1][j2].re 
//                               nsa ntt
//             <    is written>: inv[i1*nsa+i2+1][j1*nsa+j2+1][1]
                  inv[i1*nsa+i2+1][j1*nsa+j2+1][1] = mat[i1][i2][j1][j2].re;
//             <    is read   >: i1 i2 0`j1 j2 mat[i1][i2][j1][j2].im 
//                               nsa ntt
//             <    is written>: inv[i1*nsa+i2+1][j1*nsa+j2+1][2]
                  inv[i1*nsa+i2+1][j1*nsa+j2+1][2] = mat[i1][i2][j1][j2].im;
               }
//             <    is read   >: nsa ntt
//             <    is written>: i
      for(i = 1; i <= nsa*ntt+1-1; i += 1)
//             <    is read   >: nsa ntt
//             <    is written>: j
         for(j = 1; j <= nsa*ntt+1-1; j += 1)
//             <    is read   >: i j nsa ntt
            if (i==j) {
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][1]
               inv[i][nsa*ntt+j][1] = 1.0;
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][2]
               inv[i][nsa*ntt+j][2] = 0.0;
            }
            else {
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][1]
               inv[i][nsa*ntt+j][1] = 0.0;
//             <    is read   >: i j nsa ntt
//             <    is written>: inv[i][nsa*ntt+j][2]
               inv[i][nsa*ntt+j][2] = 0.0;
            }
//             <    is read   >: nsa ntt
//             <    is written>: i
      for(i = 1; i <= ntt*nsa+1-1; i += 1) {
//             <    is read   >: i inv[i][i][1] nsa ntt
//             <    is written>: pivot[1]

         pivot[1] = inv[i][i][1];
//             <    is read   >: i inv[i][i][2] nsa ntt
//             <    is written>: pivot[2]
         pivot[2] = inv[i][i][2];
//             <    is read   >: nsa ntt pivot[1]

         if (pivot[1]==0.) {
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: nsa ntt pivot[1] pivot[2] stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("\n Pivot nul re = %f , im = %f\n", pivot[1], pivot[2]);
//             <    is read   >: nsa ntt
            exit(0);
         }
//             <    is read   >: i nsa ntt
//             <    is written>: j
         for(j = i; j <= 2*ntt*nsa+1-1; j += 1) {
//             <    is read   >: i inv[i][j][1] j nsa ntt
//             <    is written>: re
            re = inv[i][j][1];
//             <    is read   >: i inv[i][j][2] j nsa ntt
//             <    is written>: im
            im = inv[i][j][2];
//             <    is read   >: i im j nsa ntt pivot[1] pivot[2] re
//             <    is written>: inv[i][j][1]
            inv[i][j][1] = (re*pivot[1]+im*pivot[2])/(pivot[1]*pivot[1]+pivot[2]*pivot[2]);
//             <    is read   >: i im j nsa ntt pivot[1] pivot[2] re
//             <    is written>: inv[i][j][2]
            inv[i][j][2] = (im*pivot[1]-re*pivot[2])/(pivot[1]*pivot[1]+pivot[2]*pivot[2]);
         }
//             <    is read   >: nsa ntt
//             <    is written>: k
         
         
         for(k = 1; k <= ntt*nsa+1-1; k += 1)
//             <    is read   >: i k nsa ntt
            if (i!=k) {
//             <    is read   >: i inv[k][i][1] k nsa ntt
//             <    is written>: coef[1]
               coef[1] = inv[k][i][1];
//             <    is read   >: i inv[k][i][2] k nsa ntt
//             <    is written>: coef[2]
               coef[2] = inv[k][i][2];
//             <    is read   >: i nsa ntt
//             <    is written>: l

               for(l = i; l <= 2*ntt*nsa+1-1; l += 1) {
//             <    is read   >: coef[1] coef[2] i inv[i][l][1] 
//                               inv[i][l][2] inv[k][l][1] k l nsa ntt
//             <    is written>: inv[k][l][1]
                  inv[k][l][1] -= coef[1]*inv[i][l][1]-coef[2]*inv[i][l][2];
//             <    is read   >: coef[1] coef[2] i inv[i][l][1] 
//                               inv[i][l][2] inv[k][l][2] k l nsa ntt
//             <    is written>: inv[k][l][2]
                  inv[k][l][2] -= coef[1]*inv[i][l][2]+coef[2]*inv[i][l][1];
               }
            }
      }
//             <    is read   >: ntt
//             <    is written>: i1
      
      
      for(i1 = 0; i1 <= ntt-1; i1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: i2
         for(i2 = 0; i2 <= nsa-1; i2 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: 0`j1
            for(j1 = 0; j1 <= ntt-1; j1 += 1)
//             <    is read   >: nsa ntt
//             <    is written>: j2
               for(j2 = 0; j2 <= nsa-1; j2 += 1) {
//             <    is read   >: i1 i2 
//                               inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1]
//                               [1] 0`j1 j2 nsa ntt
//             <    is written>: matinv[i1][i2][j1][j2].re
                  matinv[i1][i2][j1][j2].re = (float) inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1];
//             <    is read   >: i1 i2 
//                               inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1]
//                               [2] 0`j1 j2 nsa ntt
//             <    is written>: matinv[i1][i2][j1][j2].im
                  matinv[i1][i2][j1][j2].im = (float) inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2];
               }
   }
}

 *********************** Use-Def Chains *********************

	24 --> 27 with conflicts
		from <k1-W-EXACT> to <k1-W-EXACT>
	24 --> 28 with conflicts
		from <i1-W-EXACT> to <i1-W-EXACT>
	24 --> 29 with conflicts
		from <i2-W-EXACT> to <i2-W-EXACT>
	24 --> 30 with conflicts
		from <0`j1-W-EXACT> to <0`j1-W-EXACT>
	24 --> 31 with conflicts
		from <j2-W-EXACT> to <j2-W-EXACT>
	24 --> 39 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	24 --> 60 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	24 --> 82 with conflicts
		from <i1-W-EXACT> to <i1-W-EXACT>
	24 --> 83 with conflicts
		from <i2-W-EXACT> to <i2-W-EXACT>
	24 --> 84 with conflicts
		from <0`j1-W-EXACT> to <0`j1-W-EXACT>
	24 --> 85 with conflicts
		from <j2-W-EXACT> to <j2-W-EXACT>
	28 --> 82 with conflicts
		from <i1-W-EXACT> to <i1-W-EXACT>
	29 --> 29 with conflicts
		from <i2-W-EXACT> to <i2-W-EXACT>
	29 --> 83 with conflicts
		from <i2-W-EXACT> to <i2-W-EXACT>
	30 --> 30 with conflicts
		from <0`j1-W-EXACT> to <0`j1-W-EXACT>
	30 --> 84 with conflicts
		from <0`j1-W-EXACT> to <0`j1-W-EXACT>
	31 --> 31 with conflicts
		from <j2-W-EXACT> to <j2-W-EXACT>
	31 --> 85 with conflicts
		from <j2-W-EXACT> to <j2-W-EXACT>
	32 --> 28 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	32 --> 29 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	32 --> 30 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	32 --> 31 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	32 --> 32 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	32 --> 42 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	32 --> 46 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	32 --> 53 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][i][1]-R-EXACT>
	32 --> 61 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][j][1]-R-EXACT>
	32 --> 63 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][j][1]-W-EXACT>
	32 --> 70 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[k][i][1]-R-EXACT>
	32 --> 74 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[k][l][1]-W-EXACT>
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[k][l][1]-R-EXACT>
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	32 --> 75 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	32 --> 82 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	32 --> 83 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	32 --> 84 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	32 --> 85 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	32 --> 86 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT>
	33 --> 28 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	33 --> 29 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	33 --> 30 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	33 --> 31 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	33 --> 33 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	33 --> 43 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	33 --> 47 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	33 --> 54 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][i][2]-R-EXACT>
	33 --> 62 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][j][2]-R-EXACT>
	33 --> 64 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][j][2]-W-EXACT>
	33 --> 71 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[k][i][2]-R-EXACT>
	33 --> 74 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	33 --> 75 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[k][l][2]-W-EXACT>
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[k][l][2]-R-EXACT>
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	33 --> 82 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	33 --> 83 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	33 --> 84 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	33 --> 85 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	33 --> 87 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT>
	38 --> 51 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
	39 --> 39 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	39 --> 60 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	41 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	41 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	41 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	41 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	42 --> 32 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	42 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	42 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	42 --> 42 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	42 --> 46 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	42 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	42 --> 53 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][i][1]-R-EXACT>
	42 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	42 --> 61 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][j][1]-R-EXACT>
	42 --> 63 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][j][1]-W-EXACT>
	42 --> 70 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[k][i][1]-R-EXACT>
	42 --> 74 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[k][l][1]-W-EXACT>
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[k][l][1]-R-EXACT>
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	42 --> 75 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	42 --> 86 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT>
	43 --> 33 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	43 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	43 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	43 --> 43 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	43 --> 47 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	43 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	43 --> 54 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][i][2]-R-EXACT>
	43 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	43 --> 62 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][j][2]-R-EXACT>
	43 --> 64 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][j][2]-W-EXACT>
	43 --> 71 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[k][i][2]-R-EXACT>
	43 --> 74 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	43 --> 75 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[k][l][2]-W-EXACT>
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[k][l][2]-R-EXACT>
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	43 --> 87 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT>
	46 --> 32 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	46 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	46 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	46 --> 42 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	46 --> 46 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	46 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	46 --> 53 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][i][1]-R-EXACT>
	46 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	46 --> 61 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][j][1]-R-EXACT>
	46 --> 63 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][j][1]-W-EXACT>
	46 --> 70 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[k][i][1]-R-EXACT>
	46 --> 74 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[k][l][1]-W-EXACT>
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[k][l][1]-R-EXACT>
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	46 --> 75 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	46 --> 86 with conflicts
		from <inv[i][nsa*ntt+j][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT>
	47 --> 33 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	47 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	47 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	47 --> 43 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	47 --> 47 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	47 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	47 --> 54 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][i][2]-R-EXACT>
	47 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	47 --> 62 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][j][2]-R-EXACT>
	47 --> 64 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][j][2]-W-EXACT>
	47 --> 71 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[k][i][2]-R-EXACT>
	47 --> 74 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	47 --> 75 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[k][l][2]-W-EXACT>
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[k][l][2]-R-EXACT>
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	47 --> 87 with conflicts
		from <inv[i][nsa*ntt+j][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT>
	51 --> 38 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
	51 --> 51 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
	53 --> 32 with conflicts
		from <inv[i][i][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	53 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	53 --> 42 with conflicts
		from <inv[i][i][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	53 --> 46 with conflicts
		from <inv[i][i][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	53 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	53 --> 53 with conflicts
		from <pivot[1]-W-EXACT> to <pivot[1]-W-EXACT>
	53 --> 56 with conflicts
		from <pivot[1]-W-EXACT> to <pivot[1]-R-EXACT>
	53 --> 57 with conflicts
		from <pivot[1]-W-EXACT> to <pivot[1]-R-EXACT>
	53 --> 63 with conflicts
		from <pivot[1]-W-EXACT> to <pivot[1]-R-EXACT>
		from <inv[i][i][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
	53 --> 64 with conflicts
		from <pivot[1]-W-EXACT> to <pivot[1]-R-EXACT>
	53 --> 74 with conflicts
		from <inv[i][i][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
	54 --> 33 with conflicts
		from <inv[i][i][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	54 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	54 --> 43 with conflicts
		from <inv[i][i][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	54 --> 47 with conflicts
		from <inv[i][i][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	54 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	54 --> 54 with conflicts
		from <pivot[2]-W-EXACT> to <pivot[2]-W-EXACT>
	54 --> 57 with conflicts
		from <pivot[2]-W-EXACT> to <pivot[2]-R-EXACT>
	54 --> 63 with conflicts
		from <pivot[2]-W-EXACT> to <pivot[2]-R-EXACT>
	54 --> 64 with conflicts
		from <pivot[2]-W-EXACT> to <pivot[2]-R-EXACT>
		from <inv[i][i][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
	54 --> 75 with conflicts
		from <inv[i][i][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
	56 --> 53 with conflicts
		from <pivot[1]-R-EXACT> to <pivot[1]-W-EXACT>
	57 --> 53 with conflicts
		from <pivot[1]-R-EXACT> to <pivot[1]-W-EXACT>
	57 --> 54 with conflicts
		from <pivot[2]-R-EXACT> to <pivot[2]-W-EXACT>
	57 --> 57 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	60 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	60 --> 39 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	60 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	60 --> 60 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
	61 --> 32 with conflicts
		from <inv[i][j][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	61 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	61 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	61 --> 42 with conflicts
		from <inv[i][j][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	61 --> 46 with conflicts
		from <inv[i][j][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	61 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	61 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	61 --> 61 with conflicts
		from <re-W-EXACT> to <re-W-EXACT>
	61 --> 63 with conflicts
		from <re-W-EXACT> to <re-R-EXACT>
		from <inv[i][j][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
	61 --> 64 with conflicts
		from <re-W-EXACT> to <re-R-EXACT>
	61 --> 74 with conflicts
		from <inv[i][j][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
	62 --> 33 with conflicts
		from <inv[i][j][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	62 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	62 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	62 --> 43 with conflicts
		from <inv[i][j][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	62 --> 47 with conflicts
		from <inv[i][j][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	62 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	62 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	62 --> 62 with conflicts
		from <im-W-EXACT> to <im-W-EXACT>
	62 --> 63 with conflicts
		from <im-W-EXACT> to <im-R-EXACT>
	62 --> 64 with conflicts
		from <im-W-EXACT> to <im-R-EXACT>
		from <inv[i][j][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
	62 --> 75 with conflicts
		from <inv[i][j][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
	63 --> 32 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	63 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	63 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	63 --> 42 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	63 --> 46 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	63 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	63 --> 53 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i][i][1]-R-EXACT>
		from <pivot[1]-R-EXACT> to <pivot[1]-W-EXACT>
	63 --> 54 with conflicts
		from <pivot[2]-R-EXACT> to <pivot[2]-W-EXACT>
	63 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	63 --> 61 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i][j][1]-R-EXACT>
		from <re-R-EXACT> to <re-W-EXACT>
	63 --> 62 with conflicts
		from <im-R-EXACT> to <im-W-EXACT>
	63 --> 63 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i][j][1]-W-EXACT>
	63 --> 70 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[k][i][1]-R-EXACT>
	63 --> 74 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[k][l][1]-W-EXACT>
		from <inv[i][j][1]-W-EXACT> to <inv[k][l][1]-R-EXACT>
		from <inv[i][j][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	63 --> 75 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
	63 --> 86 with conflicts
		from <inv[i][j][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT>
	64 --> 33 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	64 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	64 --> 39 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	64 --> 43 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	64 --> 47 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	64 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	64 --> 53 with conflicts
		from <pivot[1]-R-EXACT> to <pivot[1]-W-EXACT>
	64 --> 54 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i][i][2]-R-EXACT>
		from <pivot[2]-R-EXACT> to <pivot[2]-W-EXACT>
	64 --> 60 with conflicts
		from <j-R-EXACT> to <j-W-EXACT>
	64 --> 61 with conflicts
		from <re-R-EXACT> to <re-W-EXACT>
	64 --> 62 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i][j][2]-R-EXACT>
		from <im-R-EXACT> to <im-W-EXACT>
	64 --> 64 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i][j][2]-W-EXACT>
	64 --> 71 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[k][i][2]-R-EXACT>
	64 --> 74 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	64 --> 75 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[k][l][2]-W-EXACT>
		from <inv[i][j][2]-W-EXACT> to <inv[k][l][2]-R-EXACT>
		from <inv[i][j][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
	64 --> 87 with conflicts
		from <inv[i][j][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT>
	68 --> 68 with conflicts
		from <k-W-EXACT> to <k-W-EXACT>
	69 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	69 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	69 --> 68 with conflicts
		from <k-R-EXACT> to <k-W-EXACT>
	70 --> 32 with conflicts
		from <inv[k][i][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	70 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	70 --> 42 with conflicts
		from <inv[k][i][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	70 --> 46 with conflicts
		from <inv[k][i][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	70 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	70 --> 63 with conflicts
		from <inv[k][i][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
	70 --> 68 with conflicts
		from <k-R-EXACT> to <k-W-EXACT>
	70 --> 70 with conflicts
		from <coef[1]-W-EXACT> to <coef[1]-W-EXACT>
	70 --> 74 with conflicts
		from <coef[1]-W-EXACT> to <coef[1]-R-EXACT>
		from <inv[k][i][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
	70 --> 75 with conflicts
		from <coef[1]-W-EXACT> to <coef[1]-R-EXACT>
	71 --> 33 with conflicts
		from <inv[k][i][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	71 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	71 --> 43 with conflicts
		from <inv[k][i][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	71 --> 47 with conflicts
		from <inv[k][i][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	71 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	71 --> 64 with conflicts
		from <inv[k][i][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
	71 --> 68 with conflicts
		from <k-R-EXACT> to <k-W-EXACT>
	71 --> 71 with conflicts
		from <coef[2]-W-EXACT> to <coef[2]-W-EXACT>
	71 --> 74 with conflicts
		from <coef[2]-W-EXACT> to <coef[2]-R-EXACT>
	71 --> 75 with conflicts
		from <coef[2]-W-EXACT> to <coef[2]-R-EXACT>
		from <inv[k][i][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
	73 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	73 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	73 --> 73 with conflicts
		from <l-W-EXACT> to <l-W-EXACT>
	74 --> 32 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
		from <inv[k][l][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
		from <inv[i][l][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	74 --> 33 with conflicts
		from <inv[i][l][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	74 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	74 --> 42 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
		from <inv[k][l][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
		from <inv[i][l][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	74 --> 43 with conflicts
		from <inv[i][l][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	74 --> 46 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
		from <inv[k][l][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
		from <inv[i][l][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	74 --> 47 with conflicts
		from <inv[i][l][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	74 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	74 --> 53 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i][i][1]-R-EXACT>
	74 --> 61 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i][j][1]-R-EXACT>
	74 --> 63 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i][j][1]-W-EXACT>
		from <inv[k][l][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
		from <inv[i][l][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
	74 --> 64 with conflicts
		from <inv[i][l][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
	74 --> 68 with conflicts
		from <k-R-EXACT> to <k-W-EXACT>
	74 --> 70 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[k][i][1]-R-EXACT>
		from <coef[1]-R-EXACT> to <coef[1]-W-EXACT>
	74 --> 71 with conflicts
		from <coef[2]-R-EXACT> to <coef[2]-W-EXACT>
	74 --> 73 with conflicts
		from <l-R-EXACT> to <l-W-EXACT>
	74 --> 74 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[k][l][1]-W-EXACT>
		from <inv[k][l][1]-W-EXACT> to <inv[k][l][1]-R-EXACT>
		from <inv[k][l][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
		from <inv[k][l][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
		from <inv[i][l][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
	74 --> 75 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i][l][1]-R-EXACT>
		from <inv[i][l][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
	74 --> 86 with conflicts
		from <inv[k][l][1]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT>
	75 --> 32 with conflicts
		from <inv[i][l][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	75 --> 33 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
		from <inv[k][l][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
		from <inv[i][l][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	75 --> 38 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	75 --> 42 with conflicts
		from <inv[i][l][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	75 --> 43 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
		from <inv[k][l][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
		from <inv[i][l][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	75 --> 46 with conflicts
		from <inv[i][l][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	75 --> 47 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
		from <inv[k][l][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
		from <inv[i][l][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	75 --> 51 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>
	75 --> 54 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i][i][2]-R-EXACT>
	75 --> 62 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i][j][2]-R-EXACT>
	75 --> 63 with conflicts
		from <inv[i][l][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
	75 --> 64 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i][j][2]-W-EXACT>
		from <inv[k][l][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
		from <inv[i][l][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
	75 --> 68 with conflicts
		from <k-R-EXACT> to <k-W-EXACT>
	75 --> 70 with conflicts
		from <coef[1]-R-EXACT> to <coef[1]-W-EXACT>
	75 --> 71 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[k][i][2]-R-EXACT>
		from <coef[2]-R-EXACT> to <coef[2]-W-EXACT>
	75 --> 73 with conflicts
		from <l-R-EXACT> to <l-W-EXACT>
	75 --> 74 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
		from <inv[i][l][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
	75 --> 75 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[k][l][2]-W-EXACT>
		from <inv[k][l][2]-W-EXACT> to <inv[k][l][2]-R-EXACT>
		from <inv[k][l][2]-W-EXACT> to <inv[i][l][2]-R-EXACT>
		from <inv[k][l][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
		from <inv[i][l][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
	75 --> 87 with conflicts
		from <inv[k][l][2]-W-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT>
	82 --> 28 with conflicts
		from <i1-W-EXACT> to <i1-W-EXACT>
	82 --> 82 with conflicts
		from <i1-W-EXACT> to <i1-W-EXACT>
	83 --> 29 with conflicts
		from <i2-W-EXACT> to <i2-W-EXACT>
	83 --> 83 with conflicts
		from <i2-W-EXACT> to <i2-W-EXACT>
	84 --> 30 with conflicts
		from <0`j1-W-EXACT> to <0`j1-W-EXACT>
	84 --> 84 with conflicts
		from <0`j1-W-EXACT> to <0`j1-W-EXACT>
	85 --> 31 with conflicts
		from <j2-W-EXACT> to <j2-W-EXACT>
	85 --> 85 with conflicts
		from <j2-W-EXACT> to <j2-W-EXACT>
	86 --> 28 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	86 --> 29 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	86 --> 30 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	86 --> 31 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	86 --> 32 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][1]-W-EXACT>
	86 --> 42 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	86 --> 46 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT> to <inv[i][nsa*ntt+j][1]-W-EXACT>
	86 --> 63 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT> to <inv[i][j][1]-W-EXACT>
	86 --> 74 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][1]-R-EXACT> to <inv[k][l][1]-W-EXACT>
	86 --> 82 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	86 --> 83 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	86 --> 84 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	86 --> 85 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	86 --> 86 with conflicts
		from <matinv[i1][i2][j1][j2].re-W-EXACT> to <matinv[i1][i2][j1][j2].re-W-EXACT>
	87 --> 28 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	87 --> 29 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	87 --> 30 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	87 --> 31 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	87 --> 33 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT> to <inv[i1*nsa+i2+1][j1*nsa+j2+1][2]-W-EXACT>
	87 --> 43 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	87 --> 47 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT> to <inv[i][nsa*ntt+j][2]-W-EXACT>
	87 --> 64 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT> to <inv[i][j][2]-W-EXACT>
	87 --> 75 with conflicts
		from <inv[i1*nsa+i2+1][j1*nsa+j2+nsa*ntt+1][2]-R-EXACT> to <inv[k][l][2]-W-EXACT>
	87 --> 82 with conflicts
		from <i1-R-EXACT> to <i1-W-EXACT>
	87 --> 83 with conflicts
		from <i2-R-EXACT> to <i2-W-EXACT>
	87 --> 84 with conflicts
		from <0`j1-R-EXACT> to <0`j1-W-EXACT>
	87 --> 85 with conflicts
		from <j2-R-EXACT> to <j2-W-EXACT>
	87 --> 87 with conflicts
		from <matinv[i1][i2][j1][j2].im-W-EXACT> to <matinv[i1][i2][j1][j2].im-W-EXACT>

****************** End of Dependence Graph ******************
