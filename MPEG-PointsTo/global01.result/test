
PROPER  EFFECTS 

int main()
{
   int i;
//             <    is written>: n2
   int n2 = 3;
//             <    is written>: n1
   n1 = 0;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   zero(&i);
//             <    is read   >: n1
//             <    is written>: i
   i = n1;
}
void zero(int *px)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: px
   /* Without points-to information, this should generate a
        transformer "T(n1) {}" but function zero() does not know much
        about its compilation unit and the compilation unit does not know
        much about effects on its variable. There mimght be two ways to
        address the issue:
   
        1) Assume that all variable in the function and its compilation unit
        are potentially toucher and allocate old and intermediate values
        for them unconditionnally and update effects_to_transformer()
   
        2) Postpone the problem and handle the issue when zero
        transformer is translated into the main environment. Use zero's
        effects to fix zero's transformer.
   
        Solution 1 seems to fail because the potential write effect of n2
        by zero is overlooked, even though the effect on n1 can be
        derived from the compilation unit.
   
        Solution 2 generates a buggy transformer for "*px=o;".
    */
   *px = 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i;

// Points To: none

   int n2 = 3;

// Points To: none

   n1 = 0;

// Points To: none

   zero(&i);

// Points To: none

   i = n1;
}

// Points To IN:
// px -> _px_1[0] , EXACT


// Points To OUT:
// px -> _px_1[0] , EXACT

void zero(int *px)
{

// Points To:
// px -> _px_1[0] , EXACT

   /* Without points-to information, this should generate a
        transformer "T(n1) {}" but function zero() does not know much
        about its compilation unit and the compilation unit does not know
        much about effects on its variable. There mimght be two ways to
        address the issue:
   
        1) Assume that all variable in the function and its compilation unit
        are potentially toucher and allocate old and intermediate values
        for them unconditionnally and update effects_to_transformer()
   
        2) Postpone the problem and handle the issue when zero
        transformer is translated into the main environment. Use zero's
        effects to fix zero's transformer.
   
        Solution 1 seems to fail because the potential write effect of n2
        by zero is overlooked, even though the effect on n1 can be
        derived from the compilation unit.
   
        Solution 2 generates a buggy transformer for "*px=o;".
    */
   *px = 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
   int i;
//             <    is written>: n2
   int n2 = 3;
//             <    is written>: n1
   n1 = 0;
//             <    is written>: i
   zero(&i);
//             <    is read   >: n1
//             <    is written>: i
   i = n1;
}
void zero(int *px)
{
//             <    is read   >: px
//             <    is written>: _px_1[0]
   /* Without points-to information, this should generate a
        transformer "T(n1) {}" but function zero() does not know much
        about its compilation unit and the compilation unit does not know
        much about effects on its variable. There mimght be two ways to
        address the issue:
   
        1) Assume that all variable in the function and its compilation unit
        are potentially toucher and allocate old and intermediate values
        for them unconditionnally and update effects_to_transformer()
   
        2) Postpone the problem and handle the issue when zero
        transformer is translated into the main environment. Use zero's
        effects to fix zero's transformer.
   
        Solution 1 seems to fail because the potential write effect of n2
        by zero is overlooked, even though the effect on n1 can be
        derived from the compilation unit.
   
        Solution 2 generates a buggy transformer for "*px=o;".
    */
   *px = 0;
}

 *********************** Use-Def Chains *********************

	35 --> 37 with conflicts
		from <n1-W-EXACT> to <n1-R-EXACT>
	36 --> 37 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>

****************** End of Dependence Graph ******************
