
PROPER  EFFECTS 

int foo()
{
//             <    is written>: x
   int x = 3;
//             <    is read   >: x
   return x*x*x/54;
}
void main()
{
   int x1, y, x2;
//             <    is read   >: x1 x2
   x1<=1&&x2<=1&&x1+x2>=1?(void) 0:__assert_fail("x1<=1 && x2<=1 && x1+x2>=1", "$VDIR/schrammel01.c", 10, (const char *) 0);
//             <    is written>: y
   y = foo();
//             <    is read   >: x1 x2 y
   while (2*x1+x2+y<=6&&x2-y<=2&&0<=y&&y<=1) {
//             <    is read   >: x1 y
//             <    is written>: x1
      x1 = x1+y+1;
//             <    is read   >: x2
//             <    is written>: x2
      x2++;
//             <    is written>: y
      y = foo();
   }
//             <    is read   >: y
//             <    is written>: y
   // Expected result: 1<=x1+x2, x2<=x1+1, x1<=2x2+1, x1<=x2+2, x2<=3, 2x1+x2<=10
   y = y;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int foo()
{

// Points To: none

   int x = 3;

// Points To: none

   return x*x*x/54;
}

// Points To IN: none


// Points To OUT: none

void main()
{

// Points To: none

   int x1, y, x2;

// Points To: none

   x1<=1&&x2<=1&&x1+x2>=1?(void) 0:__assert_fail("x1<=1 && x2<=1 && x1+x2>=1", "$VDIR/schrammel01.c", 10, (const char *) 0);

// Points To: none

   y = foo();

// Points To: none

   while (2*x1+x2+y<=6&&x2-y<=2&&0<=y&&y<=1) {

// Points To: none

      x1 = x1+y+1;

// Points To: none

      x2++;

// Points To: none

      y = foo();
   }

// Points To: none

   // Expected result: 1<=x1+x2, x2<=x1+1, x1<=2x2+1, x1<=x2+2, x2<=3, 2x1+x2<=10
   y = y;
}

PROPER  EFFECTS WITH POINTS TO

int foo()
{
//             <    is written>: x
   int x = 3;
//             <    is read   >: x
   return x*x*x/54;
}
void main()
{
   int x1, y, x2;
//             <    is read   >: x1 x2
   x1<=1&&x2<=1&&x1+x2>=1?(void) 0:__assert_fail("x1<=1 && x2<=1 && x1+x2>=1", "$VDIR/schrammel01.c", 10, (const char *) 0);
//             <    is written>: y
   y = foo();
//             <    is read   >: x1 x2 y
   while (2*x1+x2+y<=6&&x2-y<=2&&0<=y&&y<=1) {
//             <    is read   >: x1 y
//             <    is written>: x1
      x1 = x1+y+1;
//             <    is read   >: x2
//             <    is written>: x2
      x2++;
//             <    is written>: y
      y = foo();
   }
//             <    is read   >: y
//             <    is written>: y
   // Expected result: 1<=x1+x2, x2<=x1+1, x1<=2x2+1, x1<=x2+2, x2<=3, 2x1+x2<=10
   y = y;
}

 *********************** Use-Def Chains *********************

	10 --> 14 with conflicts
		from <x1-R-EXACT> to <x1-W-EXACT>
	10 --> 15 with conflicts
		from <x2-R-EXACT> to <x2-W-EXACT>
	11 --> 12 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	11 --> 14 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	11 --> 16 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
	11 --> 19 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
		from <y-W-EXACT> to <y-R-EXACT>
	12 --> 14 with conflicts
		from <x1-R-EXACT> to <x1-W-EXACT>
	12 --> 15 with conflicts
		from <x2-R-EXACT> to <x2-W-EXACT>
	12 --> 16 with conflicts
		from <y-R-EXACT> to <y-W-EXACT>
	14 --> 14 with conflicts
		from <x1-W-EXACT> to <x1-W-EXACT>
		from <x1-W-EXACT> to <x1-R-EXACT>
		from <x1-R-EXACT> to <x1-W-EXACT>
	14 --> 16 with conflicts
		from <y-R-EXACT> to <y-W-EXACT>
	15 --> 15 with conflicts
		from <x2-W-EXACT> to <x2-W-EXACT>
		from <x2-W-EXACT> to <x2-R-EXACT>
		from <x2-R-EXACT> to <x2-W-EXACT>
	16 --> 14 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	16 --> 16 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
	16 --> 19 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
		from <y-W-EXACT> to <y-R-EXACT>

****************** End of Dependence Graph ******************
