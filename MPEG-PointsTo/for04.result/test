
PROPER  EFFECTS 

int main()
{
   int i, k, j, cpi, cpj;
   // indexes used in loops
   float l[128*128];
   
   // Number of blocks
//             <    is written>: n
   int n = 128/16;
   float tmp[16*16];
   float _tmp1[16*16];
//             <    is written>: cpi

   cpi = 16;
//             <    is written>: cpj
   cpj = 16;
//             <    is written>: cpi

   for(cpi = 0; cpi <= 15; cpi += 1)
//             <    is read   >: cpi
//             <    is written>: cpj
      for(cpj = cpi+1; cpj <= 15; cpj += 1) {
//             <    is read   >: cpi cpj
//             <    is written>: idx1
         unsigned int idx1 = cpi*16+cpj;
//             <    is read   >: cpi cpj
//             <    is written>: idx2
         unsigned int idx2 = cpj*16+cpi;
//             <    is read   >: cpi idx1 idx2 tmp[idx1]
//             <    is written>: _tmp1[idx2]
         _tmp1[idx2] = tmp[idx1];
      }
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: cpi stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("3 cpi=%d\n", cpi);

   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i, k, j, cpi, cpj;
   // indexes used in loops

// Points To: none

   float l[128*128];
   
   // Number of blocks

// Points To: none

   int n = 128/16;

// Points To: none

   float tmp[16*16];

// Points To: none

   float _tmp1[16*16];

// Points To: none


   cpi = 16;

// Points To: none

   cpj = 16;

// Points To: none


   for(cpi = 0; cpi <= 15; cpi += 1)

// Points To: none

      for(cpj = cpi+1; cpj <= 15; cpj += 1) {

// Points To: none

         unsigned int idx1 = cpi*16+cpj;

// Points To: none

         unsigned int idx2 = cpj*16+cpi;

// Points To: none

         _tmp1[idx2] = tmp[idx1];
      }

// Points To: none


   printf("3 cpi=%d\n", cpi);

// Points To: none


   return 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
   int i, k, j, cpi, cpj;
   // indexes used in loops
   float l[128*128];
   
   // Number of blocks
//             <    is written>: n
   int n = 128/16;
   float tmp[16*16];
   float _tmp1[16*16];
//             <    is written>: cpi

   cpi = 16;
//             <    is written>: cpj
   cpj = 16;
//             <    is written>: cpi

   for(cpi = 0; cpi <= 15; cpi += 1)
//             <    is read   >: cpi
//             <    is written>: cpj
      for(cpj = cpi+1; cpj <= 15; cpj += 1) {
//             <    is read   >: cpi cpj
//             <    is written>: idx1
         unsigned int idx1 = cpi*16+cpj;
//             <    is read   >: cpi cpj
//             <    is written>: idx2
         unsigned int idx2 = cpj*16+cpi;
//             <    is read   >: cpi idx1 idx2 tmp[idx1]
//             <    is written>: _tmp1[idx2]
         _tmp1[idx2] = tmp[idx1];
      }
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: cpi stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("3 cpi=%d\n", cpi);

   return 0;
}

 *********************** Use-Def Chains *********************

	18 --> 21 with conflicts
		from <cpi-W-EXACT> to <cpi-W-EXACT>
	18 --> 30 with conflicts
		from <cpi-W-EXACT> to <cpi-R-EXACT>
	19 --> 22 with conflicts
		from <cpj-W-EXACT> to <cpj-W-EXACT>
	21 --> 30 with conflicts
		from <cpi-W-EXACT> to <cpi-R-EXACT>
	22 --> 22 with conflicts
		from <cpj-W-EXACT> to <cpj-W-EXACT>
	23 --> 22 with conflicts
		from <cpj-R-EXACT> to <cpj-W-EXACT>
	23 --> 23 with conflicts
		from <idx1-W-EXACT> to <idx1-W-EXACT>
	23 --> 25 with conflicts
		from <idx1-W-EXACT> to <idx1-R-EXACT>
	24 --> 22 with conflicts
		from <cpj-R-EXACT> to <cpj-W-EXACT>
	24 --> 24 with conflicts
		from <idx2-W-EXACT> to <idx2-W-EXACT>
	24 --> 25 with conflicts
		from <idx2-W-EXACT> to <idx2-R-EXACT>
	25 --> 23 with conflicts
		from <idx1-R-EXACT> to <idx1-W-EXACT>
	25 --> 24 with conflicts
		from <idx2-R-EXACT> to <idx2-W-EXACT>
	25 --> 25 with conflicts
		from <_tmp1[idx2]-W-EXACT> to <_tmp1[idx2]-W-EXACT>

****************** End of Dependence Graph ******************
