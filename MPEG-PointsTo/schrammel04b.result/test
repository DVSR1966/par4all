
PROPER  EFFECTS 

int alea(void)
{
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED
   return rand()%2;
}
int foo()
{
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED
   return rand()%2;
}
void main()
{
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: p x1 x2 _RANDOM_EFFECTS:GEN_SEED
   int x1 = foo(), y, x2 = 2-foo(), p = 1;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: y _RANDOM_EFFECTS:GEN_SEED
   y = foo();
//             <    is read   >: p
   while (p<=20) {
//             <    is read   >: p x1 x2 _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED
      //
      // Expected result by Schrammel/Jeannet (the third inequality is also the
      // second one):
      // 1<=x1+x2, 0<=x2<=1, 0<=x1
      // In fact, 0 <= x2 <=2 because of the first iteration
      
      // Also true: 0<=x1<= ~p/2
      //printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);
      while (2*x1+2*x2<=p&&alea()) {
//             <    is read   >: x1 y
//             <    is written>: x1
         x1 = x1+y+1;
//             <    is read   >: y
//             <    is written>: x2
         x2 = y;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: y _RANDOM_EFFECTS:GEN_SEED
         y = foo();
      }
//             <    is read   >: p
//             <    is written>: p
      p++;
   }
//             <    is read   >: y
//             <    is written>: y

   y = y;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int alea(void)
{

// Points To: none

   return rand()%2;
}

// Points To IN: none


// Points To OUT: none

int foo()
{

// Points To: none

   return rand()%2;
}

// Points To IN: none


// Points To OUT: none

void main()
{

// Points To: none

   int x1 = foo(), y, x2 = 2-foo(), p = 1;

// Points To: none

   y = foo();

// Points To: none

   while (p<=20) {

// Points To: none

      //
      // Expected result by Schrammel/Jeannet (the third inequality is also the
      // second one):
      // 1<=x1+x2, 0<=x2<=1, 0<=x1
      // In fact, 0 <= x2 <=2 because of the first iteration
      
      // Also true: 0<=x1<= ~p/2
      //printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);
      while (2*x1+2*x2<=p&&alea()) {

// Points To: none

         x1 = x1+y+1;

// Points To: none

         x2 = y;

// Points To: none

         y = foo();
      }

// Points To: none

      p++;
   }

// Points To: none


   y = y;
}

PROPER  EFFECTS WITH POINTS TO

int alea(void)
{
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED
   return rand()%2;
}
int foo()
{
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED
   return rand()%2;
}
void main()
{
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: p x1 x2 _RANDOM_EFFECTS:GEN_SEED
   int x1 = foo(), y, x2 = 2-foo(), p = 1;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: y _RANDOM_EFFECTS:GEN_SEED
   y = foo();
//             <    is read   >: p
   while (p<=20) {
//             <    is read   >: p x1 x2 _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED
      //
      // Expected result by Schrammel/Jeannet (the third inequality is also the
      // second one):
      // 1<=x1+x2, 0<=x2<=1, 0<=x1
      // In fact, 0 <= x2 <=2 because of the first iteration
      
      // Also true: 0<=x1<= ~p/2
      //printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);
      while (2*x1+2*x2<=p&&alea()) {
//             <    is read   >: x1 y
//             <    is written>: x1
         x1 = x1+y+1;
//             <    is read   >: y
//             <    is written>: x2
         x2 = y;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: y _RANDOM_EFFECTS:GEN_SEED
         y = foo();
      }
//             <    is read   >: p
//             <    is written>: p
      p++;
   }
//             <    is read   >: y
//             <    is written>: y

   y = y;
}

 *********************** Use-Def Chains *********************

	18 --> 19 with conflicts
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	18 --> 20 with conflicts
		from <p-W-EXACT> to <p-R-EXACT>
	18 --> 29 with conflicts
		from <x2-W-EXACT> to <x2-R-EXACT>
		from <x1-W-EXACT> to <x1-R-EXACT>
		from <p-W-EXACT> to <p-R-EXACT>
	18 --> 30 with conflicts
		from <x1-W-EXACT> to <x1-W-EXACT>
		from <x1-W-EXACT> to <x1-R-EXACT>
	18 --> 31 with conflicts
		from <x2-W-EXACT> to <x2-W-EXACT>
	18 --> 34 with conflicts
		from <p-W-EXACT> to <p-W-EXACT>
		from <p-W-EXACT> to <p-R-EXACT>
	19 --> 29 with conflicts
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	19 --> 30 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	19 --> 31 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	19 --> 32 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	19 --> 37 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
		from <y-W-EXACT> to <y-R-EXACT>
	20 --> 34 with conflicts
		from <p-R-EXACT> to <p-W-EXACT>
	29 --> 29 with conflicts
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	29 --> 30 with conflicts
		from <x1-R-EXACT> to <x1-W-EXACT>
	29 --> 31 with conflicts
		from <x2-R-EXACT> to <x2-W-EXACT>
	29 --> 32 with conflicts
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	29 --> 34 with conflicts
		from <p-R-EXACT> to <p-W-EXACT>
	30 --> 29 with conflicts
		from <x1-W-EXACT> to <x1-R-EXACT>
	30 --> 30 with conflicts
		from <x1-W-EXACT> to <x1-W-EXACT>
		from <x1-W-EXACT> to <x1-R-EXACT>
		from <x1-R-EXACT> to <x1-W-EXACT>
	30 --> 32 with conflicts
		from <y-R-EXACT> to <y-W-EXACT>
	30 --> 37 with conflicts
		from <y-R-EXACT> to <y-W-EXACT>
	31 --> 29 with conflicts
		from <x2-W-EXACT> to <x2-R-EXACT>
	31 --> 31 with conflicts
		from <x2-W-EXACT> to <x2-W-EXACT>
	31 --> 32 with conflicts
		from <y-R-EXACT> to <y-W-EXACT>
	31 --> 37 with conflicts
		from <y-R-EXACT> to <y-W-EXACT>
	32 --> 29 with conflicts
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	32 --> 30 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	32 --> 31 with conflicts
		from <y-W-EXACT> to <y-R-EXACT>
	32 --> 32 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-W-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-R-EXACT>
		from <_RANDOM_EFFECTS:GEN_SEED-R-EXACT> to <_RANDOM_EFFECTS:GEN_SEED-W-EXACT>
	32 --> 37 with conflicts
		from <y-W-EXACT> to <y-W-EXACT>
		from <y-W-EXACT> to <y-R-EXACT>
	34 --> 29 with conflicts
		from <p-W-EXACT> to <p-R-EXACT>
	34 --> 34 with conflicts
		from <p-W-EXACT> to <p-W-EXACT>
		from <p-W-EXACT> to <p-R-EXACT>
		from <p-R-EXACT> to <p-W-EXACT>

****************** End of Dependence Graph ******************
