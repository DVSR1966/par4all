
PROPER  EFFECTS 

int main()
{
//             <    is written>: i k
   int i = 0, j, m, n, k = 0;
//             <    is read   >: i m
//             <    is written>: i j
   
   //assert(m>=1 && n>=1);
   
   // Try first something simpler than a while loop
   if (i++, j = 0, i<m)
//             <    is written>: k
      k = 0;
//             <    is read   >: i m
//             <    is written>: i j

   while (i++, j = 0, i<m)
//             <    is read   >: j n
//             <    is written>: j
      while (j++, j<n)
//             <    is read   >: k
//             <    is written>: k
         k++;
//             <    is read   >: i
//             <    is written>: i
   
   // Check the loop nest postcondition
   i = i;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i = 0, j, m, n, k = 0;

// Points To: none

   
   //assert(m>=1 && n>=1);
   
   // Try first something simpler than a while loop
   if (i++, j = 0, i<m)

// Points To: none

      k = 0;

// Points To: none


   while (i++, j = 0, i<m)

// Points To: none

      while (j++, j<n)

// Points To: none

         k++;

// Points To: none

   
   // Check the loop nest postcondition
   i = i;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
//             <    is written>: i k
   int i = 0, j, m, n, k = 0;
//             <    is read   >: i m
//             <    is written>: i j
   
   //assert(m>=1 && n>=1);
   
   // Try first something simpler than a while loop
   if (i++, j = 0, i<m)
//             <    is written>: k
      k = 0;
//             <    is read   >: i m
//             <    is written>: i j

   while (i++, j = 0, i<m)
//             <    is read   >: j n
//             <    is written>: j
      while (j++, j<n)
//             <    is read   >: k
//             <    is written>: k
         k++;
//             <    is read   >: i
//             <    is written>: i
   
   // Check the loop nest postcondition
   i = i;
}

 *********************** Use-Def Chains *********************

	13 --> 18 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	13 --> 19 with conflicts
		from <k-W-EXACT> to <k-W-EXACT>
	13 --> 22 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	13 --> 27 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	19 --> 24 with conflicts
		from <k-W-EXACT> to <k-W-EXACT>
		from <k-W-EXACT> to <k-R-EXACT>
	22 --> 23 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
		from <j-W-EXACT> to <j-R-EXACT>
	22 --> 27 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
		from <i-R-EXACT> to <i-W-EXACT>
	23 --> 23 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
		from <j-W-EXACT> to <j-R-EXACT>
		from <j-R-EXACT> to <j-W-EXACT>
	24 --> 24 with conflicts
		from <k-W-EXACT> to <k-W-EXACT>
		from <k-W-EXACT> to <k-R-EXACT>
		from <k-R-EXACT> to <k-W-EXACT>

****************** End of Dependence Graph ******************
