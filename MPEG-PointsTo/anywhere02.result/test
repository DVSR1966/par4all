
PROPER  EFFECTS 

void anywhere02(int n, int *p)
{
//             <    is written>: n
   n = 17;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: p
   *p = 19, n = 2;
//             <    is written>: n
   
   /* The write effect on n is absorbed by the unknown write effect
        due to *p =>anymodule:anywhere must imply a write on n */
   
   
   n = 23;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: p
   
   // assuming this is an anywhere write effect (without points-to
   // info), the information on n should be preserved because n is
   // never referenced (i.e. &n does not appear in source code).
   *p = 31;
   
   // n == 23
   
   return;
}

POINTS-TO


// Points To IN:
// p -> _p_2[0] , EXACT


// Points To OUT:
// p -> _p_2[0] , EXACT

void anywhere02(int n, int *p)
{

// Points To:
// p -> _p_2[0] , EXACT

   n = 17;

// Points To:
// p -> _p_2[0] , EXACT

   *p = 19, n = 2;

// Points To:
// p -> _p_2[0] , EXACT

   
   /* The write effect on n is absorbed by the unknown write effect
        due to *p =>anymodule:anywhere must imply a write on n */
   
   
   n = 23;

// Points To:
// p -> _p_2[0] , EXACT

   
   // assuming this is an anywhere write effect (without points-to
   // info), the information on n should be preserved because n is
   // never referenced (i.e. &n does not appear in source code).
   *p = 31;

// Points To:
// p -> _p_2[0] , EXACT

   
   // n == 23
   
   return;
}

PROPER  EFFECTS WITH POINTS TO

void anywhere02(int n, int *p)
{
//             <    is written>: n
   n = 17;
//             <    is read   >: p
//             <    is written>: _p_2[0] n
   *p = 19, n = 2;
//             <    is written>: n
   
   /* The write effect on n is absorbed by the unknown write effect
        due to *p =>anymodule:anywhere must imply a write on n */
   
   
   n = 23;
//             <    is read   >: p
//             <    is written>: _p_2[0]
   
   // assuming this is an anywhere write effect (without points-to
   // info), the information on n should be preserved because n is
   // never referenced (i.e. &n does not appear in source code).
   *p = 31;
   
   // n == 23
   
   return;
}

 *********************** Use-Def Chains *********************

	-1 --> 17 with conflicts
		from <n-W-EXACT> to <n-W-EXACT>
	-1 --> 22 with conflicts
		from <_p_2[0]-W-EXACT> to <_p_2[0]-W-EXACT>
	11 --> -1 with conflicts
		from <n-W-EXACT> to <n-W-EXACT>

****************** End of Dependence Graph ******************
