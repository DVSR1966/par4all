void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)
l300:      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {
         new_image[i][j] = 0.;
l200:         for(ki = 0; ki <= ksi-1; ki += 1)
l100:            for(kj = 0; kj <= ksj-1; kj += 1)
               

               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2-1][j+kj-ksj/2-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}
int main()
{
   float image[512][512];
   float new_image[512][512];
   float kernel[3][3];
   int i;
   int j;
   int n;

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         kernel[i][j] = 1;
   
   // read *, image
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         image[i][j] = 1.;
   

   for(n = 0; n <= 19; n += 1)

      convol(512, 512, new_image, image, 3, 3, kernel);
   
   // print *, new_image
   // print *, new_image (512/2, 512/2)

   return 1;
}

//  P() {isi==512, isj==512, ksi==3, ksj==3}

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

//  P() {isi==512, isj==512, ksi==3, ksj==3}


   for(i = 0; i <= isi-1; i += 1)

//  P(i,j) {isi==512, isj==512, ksi==3, ksj==3, 0<=i, i<=511}

      for(j = 0; j <= isj-1; j += 1)

//  P(i,j) {isi==512, isj==512, ksi==3, ksj==3, 0<=i, i<=511, 0<=j,
//    j<=511}

         new_image[i][j] = image[i][j];

//  P(i,j) {i==512, isi==512, isj==512, j==512, ksi==3, ksj==3}


l400:   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3}

l300:      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3}

         new_image[i][j] = 0.;

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3}

l200:         for(ki = 0; ki <= ksi-1; ki += 1)

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3, 0<=ki, ki<=2}

l100:            for(kj = 0; kj <= ksj-1; kj += 1)

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3, 0<=ki, ki<=2,
//    0<=kj, kj<=2}

               

               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2-1][j+kj-ksj/2-1]*kernel[ki][kj];

//  P(i,j,ki,kj) {isi==512, isj==512, ki==3, kj==3, ksi==3, ksj==3}

         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(i = 1; i <= 510; i += 1)
l300:      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         for(ki = 0; ki <= 2; ki += 1)
l100:            for(kj = 0; kj <= 2; kj += 1)
               

               new_image[i][j] = new_image[i][j]+image[i+ki-2][j+kj-2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(i = 1; i <= 510; i += 1)
l300:      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+0-2]*kernel[0][0];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+1-2]*kernel[0][1];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+2-2]*kernel[0][2];
         kj = 3;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+0-2]*kernel[1][0];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+1-2]*kernel[1][1];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+2-2]*kernel[1][2];
         kj = 3;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+0-2]*kernel[2][0];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+1-2]*kernel[2][1];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+2-2]*kernel[2][2];
         kj = 3;
         ki = 3;
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(i = 1; i <= 510; i += 1)
l300:      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+0-2]*kernel[0][0];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+1-2]*kernel[0][1];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+2-2]*kernel[0][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+0-2]*kernel[1][0];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+1-2]*kernel[1][1];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+2-2]*kernel[1][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+0-2]*kernel[2][0];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+1-2]*kernel[2][1];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+2-2]*kernel[2][2];
         ;
         ;
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(i = 1; i <= 510; i += 1)
l300:      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i-2][j-2]*kernel[0][0];
         

         new_image[i][j] = new_image[i][j]+image[i-2][j-1]*kernel[0][1];
         

         new_image[i][j] = new_image[i][j]+image[i-2][j]*kernel[0][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i-1][j-2]*kernel[1][0];
         

         new_image[i][j] = new_image[i][j]+image[i-1][j-1]*kernel[1][1];
         

         new_image[i][j] = new_image[i][j]+image[i-1][j]*kernel[1][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i][j-2]*kernel[2][0];
         

         new_image[i][j] = new_image[i][j]+image[i][j-1]*kernel[2][1];
         

         new_image[i][j] = new_image[i][j]+image[i][j]*kernel[2][2];
         ;
         ;
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(ip = 1; ip <= 510; ip += 1)
l300:      for(jp = 1; jp <= 510; jp += 1) {
         new_image[jp][ip] = 0.;
l200:         ;
         ;
         

         new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-2+ip]*kernel[0][0];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-1+ip]*kernel[0][1];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][ip]*kernel[0][2];
         ;
         ;
         

         new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-2+ip]*kernel[1][0];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-1+ip]*kernel[1][1];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][ip]*kernel[1][2];
         ;
         ;
         

         new_image[jp][ip] = new_image[jp][ip]+image[jp][-2+ip]*kernel[2][0];
         

         new_image[jp][ip] = new_image[jp][ip]+image[jp][-1+ip]*kernel[2][1];
         

         new_image[jp][ip] = new_image[jp][ip]+image[jp][ip]*kernel[2][2];
         ;
         ;
         new_image[jp][ip] = new_image[jp][ip]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:   for(ip_t = 0; ip_t <= 50; ip_t += 1)
      for(jp_t = 0; jp_t <= 50; jp_t += 1)

l400:         for(ip = 1+10*ip_t; ip <= 10+10*ip_t; ip += 1)
l300:            for(jp = 1+10*jp_t; jp <= 10+10*jp_t; jp += 1) {
               new_image[jp][ip] = 0.;
l200:               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-2+ip]*kernel[0][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-1+ip]*kernel[0][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][ip]*kernel[0][2];
               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-2+ip]*kernel[1][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-1+ip]*kernel[1][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][ip]*kernel[1][2];
               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-2+ip]*kernel[2][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-1+ip]*kernel[2][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][ip]*kernel[2][2];
               ;
               ;
               new_image[jp][ip] = new_image[jp][ip]/9;
            }
}
