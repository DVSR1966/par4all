void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)
l300:
      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= ksi-1; ki += 1)
l100:
            for(kj = 0; kj <= ksj-1; kj += 1)
               

               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2-1][j+kj-ksj/2-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}
int main()
{
   float image[512][512];
   float new_image[512][512];
   float kernel[3][3];
   int i;
   int j;
   int n;

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         kernel[i][j] = 1;
   
   // read *, image
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         image[i][j] = 1.;
   

   for(n = 0; n <= 19; n += 1)

      convol(512, 512, new_image, image, 3, 3, kernel);
   
   // print *, new_image
   // print *, new_image (512/2, 512/2)

   return 1;
}

//  P() {isi==512, isj==512, ksi==3, ksj==3}

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

//  P() {isi==512, isj==512, ksi==3, ksj==3}


   for(i = 0; i <= isi-1; i += 1)

//  P(i,j) {isi==512, isj==512, ksi==3, ksj==3, 0<=i, i<=511}

      for(j = 0; j <= isj-1; j += 1)

//  P(i,j) {isi==512, isj==512, ksi==3, ksj==3, 0<=i, i<=511, 0<=j,
//    j<=511}

         new_image[i][j] = image[i][j];

//  P(i,j) {i==512, isi==512, isj==512, j==512, ksi==3, ksj==3}


l400:
   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3}

l300:
      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3}

         new_image[i][j] = 0.;

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3}

l200:
         for(ki = 0; ki <= ksi-1; ki += 1)

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3, 0<=ki, ki<=2}

l100:
            for(kj = 0; kj <= ksj-1; kj += 1)

//  P(i,j,ki,kj) {isi==512, isj==512, ksi==3, ksj==3, 0<=ki, ki<=2,
//    0<=kj, kj<=2}

               

               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2-1][j+kj-ksj/2-1]*kernel[ki][kj];

//  P(i,j,ki,kj) {isi==512, isj==512, ki==3, kj==3, ksi==3, ksj==3}

         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= 2; ki += 1)
l100:
            for(kj = 0; kj <= 2; kj += 1)
               

               new_image[i][j] = new_image[i][j]+image[i+ki-2][j+kj-2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+0-2]*kernel[0][0];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+1-2]*kernel[0][1];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+2-2]*kernel[0][2];
         kj = 3;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+0-2]*kernel[1][0];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+1-2]*kernel[1][1];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+2-2]*kernel[1][2];
         kj = 3;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+0-2]*kernel[2][0];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+1-2]*kernel[2][1];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+2-2]*kernel[2][2];
         kj = 3;
         ki = 3;
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+0-2]*kernel[0][0];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+1-2]*kernel[0][1];
         

         new_image[i][j] = new_image[i][j]+image[i+0-2][j+2-2]*kernel[0][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+0-2]*kernel[1][0];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+1-2]*kernel[1][1];
         

         new_image[i][j] = new_image[i][j]+image[i+1-2][j+2-2]*kernel[1][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+0-2]*kernel[2][0];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+1-2]*kernel[2][1];
         

         new_image[i][j] = new_image[i][j]+image[i+2-2][j+2-2]*kernel[2][2];
         ;
         ;
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i-2][j-2]*kernel[0][0];
         

         new_image[i][j] = new_image[i][j]+image[i-2][j-1]*kernel[0][1];
         

         new_image[i][j] = new_image[i][j]+image[i-2][j]*kernel[0][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i-1][j-2]*kernel[1][0];
         

         new_image[i][j] = new_image[i][j]+image[i-1][j-1]*kernel[1][1];
         

         new_image[i][j] = new_image[i][j]+image[i-1][j]*kernel[1][2];
         ;
         ;
         

         new_image[i][j] = new_image[i][j]+image[i][j-2]*kernel[2][0];
         

         new_image[i][j] = new_image[i][j]+image[i][j-1]*kernel[2][1];
         

         new_image[i][j] = new_image[i][j]+image[i][j]*kernel[2][2];
         ;
         ;
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int jp;
   int ip;
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(ip = 1; ip <= 510; ip += 1)
      for(jp = 1; jp <= 510; jp += 1) {
         new_image[jp][ip] = 0.;
l200:         ;
         ;
         

         new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-2+ip]*kernel[0][0];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-1+ip]*kernel[0][1];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][ip]*kernel[0][2];
         ;
         ;
         

         new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-2+ip]*kernel[1][0];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-1+ip]*kernel[1][1];
         

         new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][ip]*kernel[1][2];
         ;
         ;
         

         new_image[jp][ip] = new_image[jp][ip]+image[jp][-2+ip]*kernel[2][0];
         

         new_image[jp][ip] = new_image[jp][ip]+image[jp][-1+ip]*kernel[2][1];
         

         new_image[jp][ip] = new_image[jp][ip]+image[jp][ip]*kernel[2][2];
         ;
         ;
         new_image[jp][ip] = new_image[jp][ip]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int jp_t;
   int ip_t;
   int jp;
   int ip;
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(ip_t = 0; ip_t <= 50; ip_t += 1)
      for(jp_t = 0; jp_t <= 50; jp_t += 1)

         for(ip = 1+10*ip_t; ip <= 10+10*ip_t; ip += 1)
            for(jp = 1+10*jp_t; jp <= 10+10*jp_t; jp += 1) {
               new_image[jp][ip] = 0.;
l200:               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-2+ip]*kernel[0][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-1+ip]*kernel[0][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][ip]*kernel[0][2];
               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-2+ip]*kernel[1][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-1+ip]*kernel[1][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][ip]*kernel[1][2];
               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-2+ip]*kernel[2][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-1+ip]*kernel[2][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][ip]*kernel[2][2];
               ;
               ;
               new_image[jp][ip] = new_image[jp][ip]/9;
            }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{

//  <i-PRIVATE-EXACT-{}>
//  <ip-PRIVATE-EXACT-{}>
//  <ip_t-PRIVATE-EXACT-{}>
//  <j-PRIVATE-EXACT-{}>
//  <jp-PRIVATE-EXACT-{}>
//  <jp_t-PRIVATE-EXACT-{}>
//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{0<=PHI1, PHI1<=511, 0<=PHI2,
//    PHI2<=511, isi==512, isj==512, ksi==3, ksj==3}>

   // BEGIN BLOCK
   int jp_t;
   int ip_t;
   int jp;
   int ip;
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)

//  <j-PRIVATE-EXACT-{}>
//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{PHI1==i, 0<=PHI2, PHI2<=511,
//    isi==512, isj==512, ksi==3, ksj==3, 0<=i, i<=511}>

      for(j = 0; j <= 511; j += 1)
      PRIVATE i,j,new_image[isi][isj]
         PRIVATE j,new_image[isi][isj]

//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{PHI1==i, PHI2==j, isi==512,
//    isj==512, ksi==3, ksj==3, 0<=i, i<=511, 0<=j, j<=511}>

         new_image[i][j] = image[i][j];

l400:
   for(ip_t = 0; ip_t <= 50; ip_t += 1)

//  <ip-PRIVATE-EXACT-{}>
//  <jp-PRIVATE-EXACT-{}>
//  <jp_t-PRIVATE-EXACT-{}>
//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{1<=PHI1, PHI1<=510,
//    1+10ip_t<=PHI2, PHI2<=10+10ip_t, i==512, isi==512, isj==512,
//    j==512, ksi==3, ksj==3, 0<=ip_t, ip_t<=50}>

      for(jp_t = 0; jp_t <= 50; jp_t += 1)

//  <ip-PRIVATE-EXACT-{}>
//  <jp-PRIVATE-EXACT-{}>
//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{1+10jp_t<=PHI1,
//    PHI1<=10+10jp_t, 1+10ip_t<=PHI2, PHI2<=10+10ip_t, i==512,
//    isi==512, isj==512, j==512, ksi==3, ksj==3, 0<=ip_t, ip_t<=50,
//    0<=jp_t, jp_t<=50}>


         for(ip = 1+10*ip_t; ip <= 10+10*ip_t; ip += 1)

//  <jp-PRIVATE-EXACT-{}>
//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{PHI2==ip, 1+10jp_t<=PHI1,
//    PHI1<=10+10jp_t, i==512, isi==512, isj==512, j==512, ksi==3,
//    ksj==3, 1+10ip_t<=ip, ip<=10+10ip_t, 0<=ip_t, ip_t<=50, 0<=jp_t,
//    jp_t<=50}>

            // BEGIN BLOCK
      PRIVATE ip,ip_t,jp,jp_t,new_image[isi][isj]
         PRIVATE ip,jp,jp_t,new_image[isi][isj]
            PRIVATE ip,jp,new_image[isi][isj]
            for(jp = 1+10*jp_t; jp <= 10+10*jp_t; jp += 1) {

//  <new_image[PHI1][PHI2]-PRIVATE-EXACT-{PHI1==jp, PHI2==ip, i==512,
//    isi==512, isj==512, j==512, ksi==3, ksj==3, 1+10ip_t<=ip,
//    ip<=10+10ip_t, 0<=ip_t, ip_t<=50, 1+10jp_t<=jp, jp<=10+10jp_t,
//    0<=jp_t, jp_t<=50}>

               // BEGIN BLOCK
               PRIVATE jp,new_image[isi][isj]
               new_image[jp][ip] = 0.;
               // BEGIN BLOCK
               // BEGIN BLOCK
l200:               ;
               // END BLOCK
               // BEGIN BLOCK
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-2+ip]*kernel[0][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-1+ip]*kernel[0][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][ip]*kernel[0][2];
               ;
               // END BLOCK
               // BEGIN BLOCK
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-2+ip]*kernel[1][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-1+ip]*kernel[1][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][ip]*kernel[1][2];
               ;
               // END BLOCK
               // BEGIN BLOCK
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-2+ip]*kernel[2][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-1+ip]*kernel[2][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][ip]*kernel[2][2];
               ;
               // END BLOCK
               ;
               // END BLOCK
               new_image[jp][ip] = new_image[jp][ip]/9;
               // END BLOCK
            }
            // END BLOCK
   // END BLOCK
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int jp_t;
   int ip_t;
   int jp;
   int ip;
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(ip_t = 0; ip_t <= 50; ip_t += 1)
      for(jp_t = 0; jp_t <= 50; jp_t += 1)

         for(ip = 1+10*ip_t; ip <= 10+10*ip_t; ip += 1)
            for(jp = 1+10*jp_t; jp <= 10+10*jp_t; jp += 1) {
               new_image[jp][ip] = 0.;
l200:               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-2+ip]*kernel[0][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][-1+ip]*kernel[0][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-2+jp][ip]*kernel[0][2];
               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-2+ip]*kernel[1][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][-1+ip]*kernel[1][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[-1+jp][ip]*kernel[1][2];
               ;
               ;
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-2+ip]*kernel[2][0];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][-1+ip]*kernel[2][1];
               

               new_image[jp][ip] = new_image[jp][ip]+image[jp][ip]*kernel[2][2];
               ;
               ;
               new_image[jp][ip] = new_image[jp][ip]/9;
            }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   float F_36;
   float F_35;
   float F_34;
   float F_33;
   float F_32;
   float F_31;
   float F_30;
   float F_29;
   float F_28;
   int I_15;
   float F_27;
   float F_26;
   float F_25;
   float F_24;
   int I_14;
   float F_23;
   float F_22;
   float F_21;
   float F_20;
   int I_13;
   float F_19;
   float F_18;
   float F_17;
   float F_16;
   int I_12;
   int I_11;
   float F_15;
   float F_14;
   float F_13;
   float F_12;
   int I_10;
   int I_9;
   float F_11;
   float F_10;
   float F_9;
   float F_8;
   int I_8;
   float F_7;
   float F_6;
   float F_5;
   float F_4;
   int I_7;
   int I_6;
   float F_3;
   float F_2;
   float F_1;
   float F_0;
   int I_5;
   int I_4;
   int I_3;
   int I_2;
   int I_1;
   int I_0;
   int jp_t;
   int ip_t;
   int jp;
   int ip;
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(ip_t = 0; ip_t <= 50; ip_t += 1)
      for(jp_t = 0; jp_t <= 50; jp_t += 1) {
         I_0 = 10*ip_t;
         I_1 = 10*ip_t;

         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            I_2 = 10*jp_t;
            I_3 = 10*jp_t;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               new_image[jp][ip] = 0.;
l200:               ;
               ;
               I_4 = -2+jp;
               I_5 = -2+ip;
               F_0 = image[I_4][I_5];
               F_1 = kernel[0][0];
               F_2 = new_image[jp][ip];
               F_3 = F_0*F_1;
               

               new_image[jp][ip] = F_2+F_3;
               I_6 = -2+jp;
               I_7 = -1+ip;
               F_4 = image[I_6][I_7];
               F_5 = kernel[0][1];
               F_6 = new_image[jp][ip];
               F_7 = F_4*F_5;
               

               new_image[jp][ip] = F_6+F_7;
               I_8 = -2+jp;
               F_8 = image[I_8][ip];
               F_9 = kernel[0][2];
               F_10 = new_image[jp][ip];
               F_11 = F_8*F_9;
               

               new_image[jp][ip] = F_10+F_11;
               ;
               ;
               I_9 = -1+jp;
               I_10 = -2+ip;
               F_12 = image[I_9][I_10];
               F_13 = kernel[1][0];
               F_14 = new_image[jp][ip];
               F_15 = F_12*F_13;
               

               new_image[jp][ip] = F_14+F_15;
               I_11 = -1+jp;
               I_12 = -1+ip;
               F_16 = image[I_11][I_12];
               F_17 = kernel[1][1];
               F_18 = new_image[jp][ip];
               F_19 = F_16*F_17;
               

               new_image[jp][ip] = F_18+F_19;
               I_13 = -1+jp;
               F_20 = image[I_13][ip];
               F_21 = kernel[1][2];
               F_22 = new_image[jp][ip];
               F_23 = F_20*F_21;
               

               new_image[jp][ip] = F_22+F_23;
               ;
               ;
               I_14 = -2+ip;
               F_24 = image[jp][I_14];
               F_25 = kernel[2][0];
               F_26 = new_image[jp][ip];
               F_27 = F_24*F_25;
               

               new_image[jp][ip] = F_26+F_27;
               I_15 = -1+ip;
               F_28 = image[jp][I_15];
               F_29 = kernel[2][1];
               F_30 = new_image[jp][ip];
               F_31 = F_28*F_29;
               

               new_image[jp][ip] = F_30+F_31;
               F_32 = image[jp][ip];
               F_33 = kernel[2][2];
               F_34 = new_image[jp][ip];
               F_35 = F_32*F_33;
               

               new_image[jp][ip] = F_34+F_35;
               ;
               ;
               F_36 = new_image[jp][ip];
               new_image[jp][ip] = F_36/9;
            }
         }
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   float F_36;
   float F_35;
   float F_34;
   float F_33;
   float F_32;
   float F_31;
   float F_30;
   float F_29;
   float F_28;
   int I_15;
   float F_27;
   float F_26;
   float F_25;
   float F_24;
   int I_14;
   float F_23;
   float F_22;
   float F_21;
   float F_20;
   int I_13;
   float F_19;
   float F_18;
   float F_17;
   float F_16;
   int I_12;
   int I_11;
   float F_15;
   float F_14;
   float F_13;
   float F_12;
   int I_10;
   int I_9;
   float F_11;
   float F_10;
   float F_9;
   float F_8;
   int I_8;
   float F_7;
   float F_6;
   float F_5;
   float F_4;
   int I_7;
   int I_6;
   float F_3;
   float F_2;
   float F_1;
   float F_0;
   int I_5;
   int I_4;
   int I_3;
   int I_2;
   int I_1;
   int I_0;
   int jp_t;
   int ip_t;
   int jp;
   int ip;
   int i;
   int j;
   int ki;
   int kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(ip_t = 0; ip_t <= 50; ip_t += 1) {
      jp_t = 51;
      I_0 = 10*ip_t;
      jp_t = 51;
      I_1 = 10*ip_t;
      for(jp_t = 0; jp_t <= 50; jp_t += 1) {
         ip = I_0+11;
         I_2 = 10*jp_t;
         ip = I_0+11;
         I_3 = 10*jp_t;
         ip = I_0+11;
         jp = I_2+11;
         F_33 = kernel[2][2];
         ip = I_0+11;
         jp = I_2+11;
         F_29 = kernel[2][1];
         ip = I_0+11;
         jp = I_2+11;
         F_25 = kernel[2][0];
         ip = I_0+11;
         jp = I_2+11;
         F_21 = kernel[1][2];
         ip = I_0+11;
         jp = I_2+11;
         F_17 = kernel[1][1];
         ip = I_0+11;
         jp = I_2+11;
         F_13 = kernel[1][0];
         ip = I_0+11;
         jp = I_2+11;
         F_9 = kernel[0][2];
         ip = I_0+11;
         jp = I_2+11;
         F_5 = kernel[0][1];
         ip = I_0+11;
         jp = I_2+11;
         F_1 = kernel[0][0];
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1)
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1)
               new_image[jp][ip] = 0.;
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            jp = I_2+11;
            I_5 = -2+ip;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               I_4 = -2+jp;
               F_0 = image[I_4][I_5];
               F_3 = F_0*F_1;
               F_2 = new_image[jp][ip];
               

               new_image[jp][ip] = F_2+F_3;
            }
         }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            jp = I_2+11;
            I_7 = -1+ip;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               I_6 = -2+jp;
               F_4 = image[I_6][I_7];
               F_7 = F_4*F_5;
               F_6 = new_image[jp][ip];
               

               new_image[jp][ip] = F_6+F_7;
            }
         }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1)
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               I_8 = -2+jp;
               F_8 = image[I_8][ip];
               F_11 = F_8*F_9;
               F_10 = new_image[jp][ip];
               

               new_image[jp][ip] = F_10+F_11;
            }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            jp = I_2+11;
            I_10 = -2+ip;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               I_9 = -1+jp;
               F_12 = image[I_9][I_10];
               F_15 = F_12*F_13;
               F_14 = new_image[jp][ip];
               

               new_image[jp][ip] = F_14+F_15;
            }
         }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            jp = I_2+11;
            I_12 = -1+ip;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               I_11 = -1+jp;
               F_16 = image[I_11][I_12];
               F_19 = F_16*F_17;
               F_18 = new_image[jp][ip];
               

               new_image[jp][ip] = F_18+F_19;
            }
         }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1)
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               I_13 = -1+jp;
               F_20 = image[I_13][ip];
               F_23 = F_20*F_21;
               F_22 = new_image[jp][ip];
               

               new_image[jp][ip] = F_22+F_23;
            }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            jp = I_2+11;
            I_14 = -2+ip;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               F_24 = image[jp][I_14];
               F_27 = F_24*F_25;
               F_26 = new_image[jp][ip];
               

               new_image[jp][ip] = F_26+F_27;
            }
         }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1) {
            jp = I_2+11;
            I_15 = -1+ip;
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               F_28 = image[jp][I_15];
               F_31 = F_28*F_29;
               F_30 = new_image[jp][ip];
               

               new_image[jp][ip] = F_30+F_31;
            }
         }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1)
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               F_32 = image[jp][ip];
               F_35 = F_32*F_33;
               F_34 = new_image[jp][ip];
               

               new_image[jp][ip] = F_34+F_35;
            }
         for(ip = 1+I_0; ip <= 10+I_1; ip += 1)
            for(jp = 1+I_2; jp <= 10+I_3; jp += 1) {
               F_36 = new_image[jp][ip];
               new_image[jp][ip] = F_36/9;
            }
      }
   }
}
