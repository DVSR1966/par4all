
Symbol tables

Possible bug in CCOmpilationUnitMemoryAllocation() for "block_scope01!"
block_scope01!

Declarations for module block_scope01! with type () -> unknow
Variable list:

Declared entity TOP-LEVEL:*STATIC*	with type area with size 0
Declared entity TOP-LEVEL:foo	with type functional INTEGER*4 -> void
Declared entity TOP-LEVEL:main	with type functional  () -> INTEGER*4
Declared entity TOP-LEVEL:x	with type variable INTEGER*4
Declared entity block_scope01!:*DYNAMIC*	with type area with size 0
Declared entity block_scope01!:*HEAP*	with type area with size 0
Declared entity block_scope01!:*STACK*	with type area with size 0
Declared entity block_scope01!:*STATIC*	with type area with size 0

Layouts for areas (commons):

Layout for common /TOP-LEVEL:*STATIC*/ of size 0:
	External VariableTOP-LEVEL:x	offset = UNKNOWN,	size = 4


Layout for common /block_scope01!:*DYNAMIC*/ of size 0:
	* empty area *


Layout for common /block_scope01!:*HEAP*/ of size 0:
	* empty area *


Layout for common /block_scope01!:*STACK*/ of size 0:
	* empty area *


Layout for common /block_scope01!:*STATIC*/ of size 0:
	* empty area *

End of declarations for module block_scope01!

main

Declarations for module main with type () -> INTEGER*4
Variable list:

Declared entity TOP-LEVEL:*STATIC*	with type area with size 0
Declared entity block_scope01!:*HEAP*	with type area with size 0
Declared entity block_scope01!:*STATIC*	with type area with size 0
Declared entity main:*DYNAMIC*	with type area with size 8
Declared entity main:*STACK*	with type area with size 0
Declared entity main:*STATIC*	with type area with size 0
Declared entity main:0`1`x	with type variable INTEGER*4
Declared entity main:0`x	with type variable INTEGER*4

Layouts for areas (commons):

Layout for common /TOP-LEVEL:*STATIC*/ of size 0:
	External VariableTOP-LEVEL:x	offset = UNKNOWN,	size = 4


Layout for common /block_scope01!:*HEAP*/ of size 0:
	* empty area *


Layout for common /block_scope01!:*STATIC*/ of size 0:
	* empty area *


Layout for common /main:*DYNAMIC*/ of size 8:
	Variable main:0`x	offset = 0	size = 4
	Variable main:0`1`x	offset = 4	size = 4


Layout for common /main:*STACK*/ of size 0:
	* empty area *


Layout for common /main:*STATIC*/ of size 0:
	* empty area *

End of declarations for module main

foo

Declarations for module foo with typeINTEGER*4 -> void
Variable list:

Declared entity TOP-LEVEL:*STATIC*	with type area with size 0
Declared entity block_scope01!:*HEAP*	with type area with size 0
Declared entity block_scope01!:*STATIC*	with type area with size 0
Declared entity foo:*DYNAMIC*	with type area with size 24
Declared entity foo:*STACK*	with type area with size 0
Declared entity foo:*STATIC*	with type area with size 0
Declared entity foo:0`1`x	with type variable INTEGER*4
Declared entity foo:0`2`x	with type variable INTEGER*4
Declared entity foo:0`3`x	with type variable INTEGER*4
Declared entity foo:0`4`y	with type variable INTEGER*4
Declared entity foo:0`x	with type variable INTEGER*4
Declared entity foo:0`y	with type variable INTEGER*4
Declared entity foo:x	with type variable INTEGER*4

Layouts for formal parameters:

	Variable foo:x	offset = 1
Layouts for areas (commons):

Layout for common /TOP-LEVEL:*STATIC*/ of size 0:
	External VariableTOP-LEVEL:x	offset = UNKNOWN,	size = 4


Layout for common /block_scope01!:*HEAP*/ of size 0:
	* empty area *


Layout for common /block_scope01!:*STATIC*/ of size 0:
	* empty area *


Layout for common /foo:*DYNAMIC*/ of size 24:
	Variable foo:0`x	offset = 0	size = 4
	Variable foo:0`y	offset = 4	size = 4
	Variable foo:0`1`x	offset = 8	size = 4
	Variable foo:0`2`x	offset = 12	size = 4
	Variable foo:0`3`x	offset = 16	size = 4
	Variable foo:0`4`y	offset = 20	size = 4


Layout for common /foo:*STACK*/ of size 0:
	* empty area *


Layout for common /foo:*STATIC*/ of size 0:
	* empty area *

End of declarations for module foo


Parsed printed files

extern int main();
int x = 1;
extern void foo(int );
int main()
{
   int x = 6;
   {
      int x = 7;
   }
   return x;
}
void foo(int x)
{
   int x;
   int y;
   if (x>1) {
      int x;
   }
   if (y>1) {
      int x;
   }
}

Printed files

extern int main();
int x = 1;
extern void foo(int );
int main()
{
   int x = 6;
   return x;
}
void foo(int x)
{
   int x;
   int y;
   if (x>1) {
      int x;
   }
   if (y>1) {
      int x;
   }
}

