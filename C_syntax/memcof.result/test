
Printed file for 'memcof!' 

union PIPS_UNION_1 {
   extern unsigned char __c[8];
   extern double __d;
};
static union PIPS_UNION_1 __huge_val = {{0, 0, 0, 0, 0, 0, 0xf0, 0x7f}};
extern double acos(double );
extern double __acos(double );
extern double asin(double );
extern double __asin(double );
extern double atan(double );
extern double __atan(double );
extern double atan2(double ,double );
extern double __atan2(double ,double );
extern double cos(double );
extern double __cos(double );
extern double sin(double );
extern double __sin(double );
extern double tan(double );
extern double __tan(double );
extern double cosh(double );
extern double __cosh(double );
extern double sinh(double );
extern double __sinh(double );
extern double tanh(double );
extern double __tanh(double );
extern double exp(double );
extern double __exp(double );
extern double frexp(double ,int *);
extern double __frexp(double ,int *);
extern double ldexp(double ,int );
extern double __ldexp(double ,int );
extern double log(double );
extern double __log(double );
extern double log10(double );
extern double __log10(double );
extern double modf(double ,double *);
extern double __modf(double ,double *);
extern double pow(double ,double );
extern double __pow(double ,double );
extern double sqrt(double );
extern double __sqrt(double );
extern double ceil(double );
extern double __ceil(double );
extern double fabs(double );
extern double __fabs(double );
extern double floor(double );
extern double __floor(double );
extern double fmod(double ,double );
extern double __fmod(double ,double );
extern int __isinf(double );
extern int __finite(double );
extern int __isnan(double );
static float sqrarg;
extern void memcof();

Unsplit 

/*
 * file for memcof.c
 */
union PIPS_UNION_1 {
   extern unsigned char __c[8];
   extern double __d;
};
static union PIPS_UNION_1 __huge_val = {{0, 0, 0, 0, 0, 0, 0xf0, 0x7f}};
extern double acos(double );
extern double __acos(double );
extern double asin(double );
extern double __asin(double );
extern double atan(double );
extern double __atan(double );
extern double atan2(double ,double );
extern double __atan2(double ,double );
extern double cos(double );
extern double __cos(double );
extern double sin(double );
extern double __sin(double );
extern double tan(double );
extern double __tan(double );
extern double cosh(double );
extern double __cosh(double );
extern double sinh(double );
extern double __sinh(double );
extern double tanh(double );
extern double __tanh(double );
extern double exp(double );
extern double __exp(double );
extern double frexp(double ,int *);
extern double __frexp(double ,int *);
extern double ldexp(double ,int );
extern double __ldexp(double ,int );
extern double log(double );
extern double __log(double );
extern double log10(double );
extern double __log10(double );
extern double modf(double ,double *);
extern double __modf(double ,double *);
extern double pow(double ,double );
extern double __pow(double ,double );
extern double sqrt(double );
extern double __sqrt(double );
extern double ceil(double );
extern double __ceil(double );
extern double fabs(double );
extern double __fabs(double );
extern double floor(double );
extern double __floor(double );
extern double fmod(double ,double );
extern double __fmod(double ,double );
extern int __isinf(double );
extern int __finite(double );
extern int __isnan(double );
static float sqrarg;
extern void memcof();
void memcof(float data[],int n,int m,float *pm,float cof[])
{
   int k;
   int j;
   int i;
   float p = 0.0;
   float *wk1;
   float *wk2;
   float *wkm;
   float *vector();
   void free_vector();

   wk1 = vector(1, n);
   wk2 = vector(1, n);
   wkm = vector(1, m);
   for (j = 1;j<=n;j++)
      p += (sqrarg = data[j],sqrarg*sqrarg);
    *pm = p/n;
   wk1[1] = data[1];
   wk2[n-1] = data[n];
   for (j = 2;j<=n-1;j++) {
      wk1[j] = data[j];
      wk2[j-1] = data[j];
   }
   for (k = 1;k<=m;k++) {
      float num = 0.0;
      float denom = 0.0;
      for (j = 1;j<=n-k;j++) {
         num += wk1[j]*wk2[j];
         denom += (sqrarg = wk1[j],sqrarg*sqrarg)+(sqrarg = wk2[j],sqrarg*sqrarg);
      }
      cof[k] = 2.0*num/denom;
       *pm *= 1.0-(sqrarg = cof[k],sqrarg*sqrarg);
      if (k!=1)
         for (i = 1;i<=k-1;i++)
            cof[i] = wkm[i]-cof[k]*wkm[k-i];
      if (k==m) {
         free_vector(wkm, 1, m);
         free_vector(wk2, 1, n);
         free_vector(wk1, 1, n);
         return;
      }
      for (i = 1;i<=k;i++)
         wkm[i] = cof[i];
      for (j = 1;j<=n-k-1;j++) {
         wk1[j] -= wkm[k]*wk2[j];
         wk2[j] = wk2[j+1]-wkm[k]*wk1[j+1];
      }
   }
}
