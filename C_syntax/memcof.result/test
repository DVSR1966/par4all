
Printed file for 'memcof!' 

typedef union {unsigned char __c[8]; double __d;} __huge_val_t;
static __huge_val_t __huge_val = {{0, 0, 0, 0, 0, 0, 0xf0, 0x7f}};
extern double acos(double __x);
extern double __acos(double __x);
extern double asin(double __x);
extern double __asin(double __x);
extern double atan(double __x);
extern double __atan(double __x);
extern double atan2(double __y, double __x);
extern double __atan2(double __y, double __x);
extern double cos(double __x);
extern double __cos(double __x);
extern double sin(double __x);
extern double __sin(double __x);
extern double tan(double __x);
extern double __tan(double __x);
extern double cosh(double __x);
extern double __cosh(double __x);
extern double sinh(double __x);
extern double __sinh(double __x);
extern double tanh(double __x);
extern double __tanh(double __x);
extern double exp(double __x);
extern double __exp(double __x);
extern double frexp(double __x, int *__exponent);
extern double __frexp(double __x, int *__exponent);
extern double ldexp(double __x, int __exponent);
extern double __ldexp(double __x, int __exponent);
extern double log(double __x);
extern double __log(double __x);
extern double log10(double __x);
extern double __log10(double __x);
extern double modf(double __x, double *__iptr);
extern double __modf(double __x, double *__iptr);
extern double pow(double __x, double __y);
extern double __pow(double __x, double __y);
extern double sqrt(double __x);
extern double __sqrt(double __x);
extern double ceil(double __x);
extern double __ceil(double __x);
extern double fabs(double __x);
extern double __fabs(double __x);
extern double floor(double __x);
extern double __floor(double __x);
extern double fmod(double __x, double __y);
extern double __fmod(double __x, double __y);
extern int __isinf(double __value);
extern int __finite(double __value);
extern int __isnan(double __value);
static float sqrarg;
extern void memcof();

Unsplit 

/*
 * file for memcof.c
 */
typedef union {unsigned char __c[8]; double __d;} __huge_val_t;
static __huge_val_t __huge_val = {{0, 0, 0, 0, 0, 0, 0xf0, 0x7f}};
extern double acos(double __x);
extern double __acos(double __x);
extern double asin(double __x);
extern double __asin(double __x);
extern double atan(double __x);
extern double __atan(double __x);
extern double atan2(double __y, double __x);
extern double __atan2(double __y, double __x);
extern double cos(double __x);
extern double __cos(double __x);
extern double sin(double __x);
extern double __sin(double __x);
extern double tan(double __x);
extern double __tan(double __x);
extern double cosh(double __x);
extern double __cosh(double __x);
extern double sinh(double __x);
extern double __sinh(double __x);
extern double tanh(double __x);
extern double __tanh(double __x);
extern double exp(double __x);
extern double __exp(double __x);
extern double frexp(double __x, int *__exponent);
extern double __frexp(double __x, int *__exponent);
extern double ldexp(double __x, int __exponent);
extern double __ldexp(double __x, int __exponent);
extern double log(double __x);
extern double __log(double __x);
extern double log10(double __x);
extern double __log10(double __x);
extern double modf(double __x, double *__iptr);
extern double __modf(double __x, double *__iptr);
extern double pow(double __x, double __y);
extern double __pow(double __x, double __y);
extern double sqrt(double __x);
extern double __sqrt(double __x);
extern double ceil(double __x);
extern double __ceil(double __x);
extern double fabs(double __x);
extern double __fabs(double __x);
extern double floor(double __x);
extern double __floor(double __x);
extern double fmod(double __x, double __y);
extern double __fmod(double __x, double __y);
extern int __isinf(double __value);
extern int __finite(double __value);
extern int __isnan(double __value);
static float sqrarg;
extern void memcof();
void memcof(float data[], int n, int m, float *pm, float cof[])
{
   int k;
   int j;
   int i;
   float p = 0.0;
   float *wk1;
   float *wk2;
   float *wkm;
   float *vector(int, int);
   void free_vector(float *, int, int);

   wk1 = vector(1, n);
   wk2 = vector(1, n);
   wkm = vector(1, m);
   for (j = 1;j<=n;j++)
      p += (sqrarg = data[j], sqrarg*sqrarg);
   *pm = p/n;
   wk1[1] = data[1];
   wk2[n-1] = data[n];
   for (j = 2;j<=n-1;j++) {
      wk1[j] = data[j];
      wk2[j-1] = data[j];
   }
   for (k = 1;k<=m;k++) {
      float num = 0.0;
      float denom = 0.0;
      for (j = 1;j<=n-k;j++) {
         num += wk1[j]*wk2[j];
         denom += (sqrarg = wk1[j], sqrarg*sqrarg)+(sqrarg = wk2[j], sqrarg*sqrarg);
      }
      cof[k] = 2.0*num/denom;
      *pm *= 1.0-(sqrarg = cof[k], sqrarg*sqrarg);
      if (k!=1)
         for (i = 1;i<=k-1;i++)
            cof[i] = wkm[i]-cof[k]*wkm[k-i];
      if (k==m) {
         free_vector(wkm, 1, m);
         free_vector(wk2, 1, n);
         free_vector(wk1, 1, n);
         return;
      }
      for (i = 1;i<=k;i++)
         wkm[i] = cof[i];
      for (j = 1;j<=n-k-1;j++) {
         wk1[j] -= wkm[k]*wk2[j];
         wk2[j] = wk2[j+1]-wkm[k]*wk1[j+1];
      }
   }
}
