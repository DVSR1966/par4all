
Controlizer output

void parallel03()
{
   double x[10];
   double y[10];
   int i;

   y[0] = 0.;
   for(i = 1; i <= 9; i += 1) {
      x[i] = (double) i;
      y[i] = y[i-1]+x[i];
   }
}

Preconditions


//  P() {}

void parallel03()
{
   double x[10];
   double y[10];
   int i;

//  P() {}


   y[0] = 0.;

//  P() {}

   for(i = 1; i <= 9; i += 1) {

//  P(i) {1<=i, i<=9}

      x[i] = (double) i;

//  P(i) {1<=i, i<=9}

      y[i] = y[i-1]+x[i];
   }
}

Parallelization

void parallel03()
{
   double x[10];
   double y[10];
   int i;

   y[0] = 0.;
#pragma omp parallel for 
   for(i = 1; i <= 9; i += 1)
      x[i] = (double) i;
   for(i = 1; i <= 9; i += 1)
      y[i] = y[i-1]+x[i];
}

Parallelization in Fortran (if one of the resources can be made obsolete)

      SUBROUTINE parallel03
      INTEGER i
      REAL*8 x(0:10-1), y(0:10-1)
      CHARACTER*11 __func__
      CHARACTER*11 __FUNCTION__

      y(0) = 0.

!$OMP PARALLEL DO 
      DO i = 1, 9
         x(i) = (REAL*8()) i
      ENDDO
      DO i = 1, 9
         y(i) = y(i-1)+x(i)
      ENDDO
      END

