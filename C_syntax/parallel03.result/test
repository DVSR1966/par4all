
Controlizer output

void parallel03()
{
   double x[10];
   double y[10];
   int i;

   y[0] = 0.;
   for(i = 1; i <= 9; i += 1) {
      x[i] = (double) i;
      y[i] = y[i-1]+x[i];
   }
}

Preconditions


//  P() {}

void parallel03()
{
   double x[10];
   double y[10];
   int i;

//  P() {}


   y[0] = 0.;

//  P() {}

   for(i = 1; i <= 9; i += 1) {

//  P(0`i) {1<=0`i, 0`i<=9}

      x[i] = (double) i;

//  P(0`i) {1<=0`i, 0`i<=9}

      y[i] = y[i-1]+x[i];
   }
}

Parallelization

void parallel03()
{
   double x[10];
   double y[10];
   int i;

   y[0] = 0.;
#pragma omp parallel for 
   for(i = 1; i <= 9; i += 1)
      x[i] = (double) i;
   for(i = 1; i <= 9; i += 1)
      y[i] = y[i-1]+x[i];
}

Parallelization in Fortran (if one of the resources can be made obsolete)

void parallel03()
{
   double x[10];
   double y[10];
   int i;

   y[0] = 0.;
#pragma omp parallel for 
   for(i = 1; i <= 9; i += 1)
      x[i] = (double) i;
   for(i = 1; i <= 9; i += 1)
      y[i] = y[i-1]+x[i];
}

