
Controlizer output

void parallel03()
{
   double x[10];
   double y[10];
   int i;
   
   y[0] = 0.;
   for(i = 1; i <= 9; i += 1) {
      x[i] = (double )i;
      y[i] = y[i-1]+x[i];
   }
}

Preconditions


//  P() {}

void parallel03()
{
   double x[10];
   double y[10];
   int i;

//  P() {}

   
   y[0] = 0.;

//  P() {}

   for(i = 1; i <= 9; i += 1) {

//  P(i) {1<=i, i<=9}

      x[i] = (double )i;

//  P(i) {1<=i, i<=9}

      y[i] = y[i-1]+x[i];
   }
}

Dependence graph


 ******** Whole Dependence Graph with Dependence Cones ******

	11 (0, 6) at 0x8397c60: ASSIGN 
 --> 11 (0, 6) at 0x8397c60: ASSIGN 
 with conflicts
		from <y[i]-W-MUST> to <y[i-1]-R-MUST> at levels  1
Generating system:
1 Vertex 
(1)
End of generating system ****

	10 (0, 5) at 0x8393460: ASSIGN 
 --> 11 (0, 6) at 0x8397c60: ASSIGN 
 with conflicts
		from <x[i]-W-MUST> to <x[i]-R-MUST> at levels  2

	8 (0, 2) at 0x8392670: ASSIGN 
 --> 11 (0, 6) at 0x8397c60: ASSIGN 
 with conflicts
		from <y[0]-W-MUST> to <y[i-1]-R-MUST>
		from <y[0]-W-MUST> to <y[i]-W-MUST>

****************** End of Dependence Graph ******************

Parallelization

void parallel03()
{
   double x[10];
   double y[10];
   int i;
   
   y[0] = 0.;

#pragma omp    parallel for 
   for(i = 1; i <= 9; i += 1)
      x[i] = (double )i;
   for(i = 1; i <= 9; i += 1)
      y[i] = y[i-1]+x[i];
}

Parallelization in Fortran (if one of the resources can be made obsolete)

void parallel03()
{
   double x[10];
   double y[10];
   int i;
   
   y[0] = 0.;

#pragma omp    parallel for 
   for(i = 1; i <= 9; i += 1)
      x[i] = (double )i;
   for(i = 1; i <= 9; i += 1)
      y[i] = y[i-1]+x[i];
}

