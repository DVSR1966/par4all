externalloc03!

Declarations for module externalloc03! with type () -> unknow
Variable list:

Declared entity TOP-LEVEL:*STATIC*	with type area with size 4
Declared entity TOP-LEVEL:i	with type variable INTEGER*4
Declared entity TOP-LEVEL:main	with type functional INTEGER*4 x INTEGER*1* -> INTEGER*4
Declared entity externalloc03!:*DYNAMIC*	with type area with size 0
Declared entity externalloc03!:*STACK*	with type area with size 0
Declared entity externalloc03!:*STATIC*	with type area with size 0

Layouts for areas (commons):

Layout for common /TOP-LEVEL:*STATIC*/ of size 4:
	Variable TOP-LEVEL:i	offset = 0	size = 4


Layout for common /externalloc03!:*DYNAMIC*/ of size 0:
	* empty area *


Layout for common /externalloc03!:*STACK*/ of size 0:
	* empty area *


Layout for common /externalloc03!:*STATIC*/ of size 0:
	* empty area *

End of declarations for module externalloc03!

main

Declarations for module main with typeINTEGER*4 x INTEGER*1* -> INTEGER*4
Variable list:

Declared entity TOP-LEVEL:*STATIC*	with type area with size 4
Declared entity TOP-LEVEL:i	with type variable INTEGER*4
Declared entity externalloc03!:*STATIC*	with type area with size 0
Declared entity main:*DYNAMIC*	with type area with size 4
Declared entity main:*STACK*	with type area with size 0
Declared entity main:*STATIC*	with type area with size 0
Declared entity main:argc	with type variable INTEGER*4
Declared entity main:argv	with type variable INTEGER*1*
Declared entity main:i	with type variable INTEGER*4

Layouts for formal parameters:

	Variable main:argc	offset = 1	Variable main:argv	offset = 2
Layouts for areas (commons):

Layout for common /TOP-LEVEL:*STATIC*/ of size 4:
	Variable TOP-LEVEL:i	offset = 0	size = 4


Layout for common /externalloc03!:*STATIC*/ of size 0:
	* empty area *


Layout for common /main:*DYNAMIC*/ of size 4:
	Variable main:i	offset = 0	size = 4


Layout for common /main:*STACK*/ of size 0:
	* empty area *


Layout for common /main:*STATIC*/ of size 0:
	* empty area *

End of declarations for module main

   int i = 1;
   extern int main(int ,char *[]);
int main(int argc,char *argv[])
{
   int i = 2;
   extern int i;
   printf("%d\n", i);
   return 0;
}
