   typedef unsigned int size_t;
   typedef unsigned char __u_char;
   typedef unsigned short __u_short;
   typedef unsigned int __u_int;
   typedef unsigned long __u_long;
   typedef signed char __int8_t;
   typedef unsigned char __uint8_t;
   typedef signed short __int16_t;
   typedef unsigned short __uint16_t;
   typedef signed int __int32_t;
   typedef unsigned int __uint32_t;
   struct PIPS_STRUCT_1 {
      long __val[2];
   };
   typedef struct PIPS_STRUCT_1 __quad_t;
   struct PIPS_STRUCT_2 {
      __u_long __val[2];
   };
   typedef struct PIPS_STRUCT_2 __u_quad_t;
   typedef unsigned long long __dev_t;
   typedef unsigned int __uid_t;
   typedef unsigned int __gid_t;
   typedef unsigned long __ino_t;
   typedef unsigned long long __ino64_t;
   typedef unsigned int __mode_t;
   typedef unsigned int __nlink_t;
   typedef long __off_t;
   typedef long long __off64_t;
   typedef int __pid_t;
   struct PIPS_STRUCT_3 {
      int __val[2];
   };
   typedef struct PIPS_STRUCT_3 __fsid_t;
   typedef long __clock_t;
   typedef unsigned long __rlim_t;
   typedef unsigned long long __rlim64_t;
   typedef unsigned int __id_t;
   typedef long __time_t;
   typedef unsigned int __useconds_t;
   typedef long __suseconds_t;
   typedef int __daddr_t;
   typedef long __swblk_t;
   typedef int __key_t;
   typedef int __clockid_t;
   typedef int __timer_t;
   typedef long __blksize_t;
   typedef long __blkcnt_t;
   typedef long long __blkcnt64_t;
   typedef unsigned long __fsblkcnt_t;
   typedef unsigned long long __fsblkcnt64_t;
   typedef unsigned long __fsfilcnt_t;
   typedef unsigned long long __fsfilcnt64_t;
   typedef int __ssize_t;
   typedef __off64_t __loff_t;
   typedef __quad_t *__qaddr_t;
   typedef char *__caddr_t;
   typedef int __intptr_t;
   typedef unsigned int __socklen_t;
   typedef struct _IO_FILE FILE;
   typedef struct _IO_FILE __FILE;
   typedef long wchar_t;
   typedef unsigned int wint_t;
   union PIPS_UNION_5 {
      wint_t __wch;
      char __wchb[4];
   };
   struct PIPS_STRUCT_4 {
      int __count;
      union PIPS_UNION_5 __value;
   };
   typedef struct PIPS_STRUCT_4 __mbstate_t;
   struct PIPS_STRUCT_6 {
      __off_t __pos;
      __mbstate_t __state;
   };
   typedef struct PIPS_STRUCT_6 _G_fpos_t;
   struct PIPS_STRUCT_7 {
      __off64_t __pos;
      __mbstate_t __state;
   };
   typedef struct PIPS_STRUCT_7 _G_fpos64_t;
   enum PIPS_ENUM_8 {__GCONV_OK, __GCONV_NOCONV, __GCONV_NODB, __GCONV_NOMEM, __GCONV_EMPTY_INPUT, __GCONV_FULL_OUTPUT, __GCONV_ILLEGAL_INPUT, __GCONV_INCOMPLETE_INPUT, __GCONV_ILLEGAL_DESCRIPTOR, __GCONV_INTERNAL_ERROR};
   enum PIPS_ENUM_9 {__GCONV_IS_LAST=0x0001, __GCONV_IGNORE_ERRORS};
   typedef static int (*__gconv_fct)(struct __gconv_step *,struct __gconv_step_data *,const unsigned char **,const unsigned char *,unsigned char **,unsigned int *,int ,int );
   typedef static wint_t (*__gconv_btowc_fct)(struct __gconv_step *,unsigned char );
   typedef static int (*__gconv_init_fct)(struct __gconv_step *);
   typedef static void (*__gconv_end_fct)(struct __gconv_step *);
   typedef static int (*__gconv_trans_fct)(struct __gconv_step *,struct __gconv_step_data *,void *,const unsigned char *,const unsigned char **,const unsigned char *,unsigned char **,unsigned int *);
   typedef static int (*__gconv_trans_context_fct)(void *,const unsigned char *,const unsigned char *,unsigned char *,unsigned char *);
   typedef static int (*__gconv_trans_query_fct)(const char *,const char ***,unsigned int *);
   typedef static int (*__gconv_trans_init_fct)(void **,const char *);
   typedef static void (*__gconv_trans_end_fct)(void *);
   struct __gconv_trans_data {
      __gconv_trans_fct __trans_fct;
      __gconv_trans_context_fct __trans_context_fct;
      __gconv_trans_end_fct __trans_end_fct;
      void *__data;
      struct __gconv_trans_data *__next;
   };
   struct __gconv_step {
      struct __gconv_loaded_object *__shlib_handle;
      char *__modname;
      int __counter;
      char *__from_name;
      char *__to_name;
      __gconv_fct __fct;
      __gconv_btowc_fct __btowc_fct;
      __gconv_init_fct __init_fct;
      __gconv_end_fct __end_fct;
      int __min_needed_from;
      int __max_needed_from;
      int __min_needed_to;
      int __max_needed_to;
      int __stateful;
      void *__data;
   };
   struct __gconv_step_data {
      unsigned char *__outbuf;
      unsigned char *__outbufend;
      int __flags;
      int __invocation_counter;
      int __internal_use;
      __mbstate_t *__statep;
      __mbstate_t __state;
      struct __gconv_trans_data *__trans;
   };
   struct __gconv_info {
      size_t __nsteps;
      struct __gconv_step *__steps;
      struct __gconv_step_data __data[1];
   };
   typedef struct __gconv_info *__gconv_t;
   struct PIPS_STRUCT_11 {
      struct __gconv_info __cd;
      struct __gconv_step_data __data;
   };
   union PIPS_UNION_10 {
      struct __gconv_info __cd;
      struct PIPS_STRUCT_11 __combined;
   };
   typedef union PIPS_UNION_10 _G_iconv_t;
   typedef int _G_int16_t;
   typedef int _G_int32_t;
   typedef unsigned int _G_uint16_t;
   typedef unsigned int _G_uint32_t;
   typedef __builtin_va_list __gnuc_va_list;
   typedef void _IO_lock_t;
   struct _IO_marker {
      struct _IO_marker *_next;
      struct _IO_FILE *_sbuf;
      int _pos;
   };
   enum __codecvt_result {__codecvt_ok, __codecvt_partial, __codecvt_error, __codecvt_noconv};
   struct _IO_FILE {
      int _flags;
      char *_IO_read_ptr;
      char *_IO_read_end;
      char *_IO_read_base;
      char *_IO_write_base;
      char *_IO_write_ptr;
      char *_IO_write_end;
      char *_IO_buf_base;
      char *_IO_buf_end;
      char *_IO_save_base;
      char *_IO_backup_base;
      char *_IO_save_end;
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
      int _flags2;
      __off_t _old_offset;
      unsigned short _cur_column;
      signed char _vtable_offset;
      char _shortbuf[1];
      _IO_lock_t *_lock;
      __off64_t _offset;
      void *__pad1;
      void *__pad2;
      int _mode;
      char _unused2[15*sizeof(int )-2*sizeof(void *)-1+1];
   };
   typedef struct _IO_FILE _IO_FILE;
   extern struct _IO_FILE_plus _IO_2_1_stdin_;
   extern struct _IO_FILE_plus _IO_2_1_stdout_;
   extern struct _IO_FILE_plus _IO_2_1_stderr_;
   typedef static __ssize_t __io_read_fn(void *,char *,unsigned int );
   typedef static __ssize_t __io_write_fn(void *,const char *,unsigned int );
   typedef static int __io_seek_fn(void *,long long *,int );
   typedef static int __io_close_fn(void *);
   extern int __underflow(_IO_FILE *);
   extern int __uflow(_IO_FILE *);
   extern int __overflow(_IO_FILE *,int );
   extern wint_t __wunderflow(_IO_FILE *);
   extern wint_t __wuflow(_IO_FILE *);
   extern wint_t __woverflow(_IO_FILE *,wint_t );
   extern int _IO_getc(_IO_FILE *);
   extern int _IO_putc(int ,_IO_FILE *);
   extern int _IO_feof(_IO_FILE *);
   extern int _IO_ferror(_IO_FILE *);
   extern int _IO_peekc_locked(_IO_FILE *);
   extern void _IO_flockfile(_IO_FILE *);
   extern void _IO_funlockfile(_IO_FILE *);
   extern int _IO_ftrylockfile(_IO_FILE *);
   extern int _IO_vfscanf(_IO_FILE *,const char *,__gnuc_va_list ,int *);
   extern int _IO_vfprintf(_IO_FILE *,const char *,__gnuc_va_list );
   extern __ssize_t _IO_padn(_IO_FILE *,int ,__ssize_t );
   extern size_t _IO_sgetn(_IO_FILE *,void *,size_t );
   extern __off64_t _IO_seekoff(_IO_FILE *,__off64_t ,int ,int );
   extern __off64_t _IO_seekpos(_IO_FILE *,__off64_t ,int );
   extern void _IO_free_backup_area(_IO_FILE *);
   typedef _G_fpos_t fpos_t;
   extern struct _IO_FILE *stdin;
   extern struct _IO_FILE *stdout;
   extern struct _IO_FILE *stderr;
   extern int remove(const char *);
   extern int rename(const char *,const char *);
   extern FILE *tmpfile(void );
   extern char *tmpnam(char *);
   extern char *tmpnam_r(char *);
   extern char *tempnam(const char *,const char *);
   extern int fclose(FILE *);
   extern int fflush(FILE *);
   extern int fflush_unlocked(FILE *);
   extern FILE *fopen(const char *,const char *);
   extern FILE *freopen(const char *,const char *,FILE *);
   extern FILE *fdopen(int ,const char *);
   extern void setbuf(FILE *,char *);
   extern int setvbuf(FILE *,char *,int ,size_t );
   extern void setbuffer(FILE *,char *,size_t );
   extern void setlinebuf(FILE *);
   extern int fprintf(FILE *,const char *,...);
   extern int printf(const char *,...);
   extern int sprintf(char *,const char *,...);
   extern int vfprintf(FILE *,const char *,__gnuc_va_list );
   extern int vprintf(const char *,__gnuc_va_list );
   extern int vsprintf(char *,const char *,__gnuc_va_list );
   extern int snprintf(char *,size_t ,const char *,...);
   extern int vsnprintf(char *,size_t ,const char *,__gnuc_va_list );
   extern int fscanf(FILE *,const char *,...);
   extern int scanf(const char *,...);
   extern int sscanf(const char *,const char *,...);
   extern int fgetc(FILE *);
   extern int getc(FILE *);
   extern int getchar(void );
   extern int getc_unlocked(FILE *);
   extern int getchar_unlocked(void );
   extern int fgetc_unlocked(FILE *);
   extern int fputc(int ,FILE *);
   extern int putc(int ,FILE *);
   extern int putchar(int );
   extern int fputc_unlocked(int ,FILE *);
   extern int putc_unlocked(int ,FILE *);
   extern int putchar_unlocked(int );
   extern int getw(FILE *);
   extern int putw(int ,FILE *);
   extern char *fgets(char *,int ,FILE *);
   extern char *gets(char *);
   extern int fputs(const char *,FILE *);
   extern int puts(const char *);
   extern int ungetc(int ,FILE *);
   extern size_t fread(void *,size_t ,size_t ,FILE *);
   extern size_t fwrite(void *,size_t ,size_t ,FILE *);
   extern size_t fread_unlocked(void *,size_t ,size_t ,FILE *);
   extern size_t fwrite_unlocked(void *,size_t ,size_t ,FILE *);
   extern int fseek(FILE *,long ,int );
   extern long ftell(FILE *);
   extern void rewind(FILE *);
   extern int fgetpos(FILE *,fpos_t *);
   extern int fsetpos(FILE *,const fpos_t *);
   extern void clearerr(FILE *);
   extern int feof(FILE *);
   extern int ferror(FILE *);
   extern void clearerr_unlocked(FILE *);
   extern int feof_unlocked(FILE *);
   extern int ferror_unlocked(FILE *);
   extern void perror(const char *);
   extern int sys_nerr;
   extern const char *sys_errlist[];
   extern int fileno(FILE *);
   extern int fileno_unlocked(FILE *);
   extern FILE *popen(const char *,const char *);
   extern int pclose(FILE *);
   extern char *ctermid(char *);
   extern void flockfile(FILE *);
   extern int ftrylockfile(FILE *);
   extern void funlockfile(FILE *);
   extern main();
main()
{
   int i = 0;
   printf("Hello, world %d\n", i);
}
