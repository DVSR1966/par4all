date : 1/12/2010
Author : Stéphanie Even

For OpenCL, it would be nice to add some variable descriptor for the argument
in the kernel like __global. We will need __local to.
What about the __shared__ in Cuda ?

Many forms are possible for the kernel argument to
P4A_call_accel_kernel_2d: kernel file name, kernel name or kernel
source. They all are char *. Any problème of interface with PIPS ? It
was not the case with CUDA and OpenMP, as it was the function name
that was passed as argument.

Is it better to have the kernel in a separate file or in the same file
as the main program but in a string form ?

The kernel file (.cl) as the same name as the kernel_wrapper but with
the extension .cl.

A p4a_accel-opencl.mk was created, separately from 
p4a_accel.mk for CUDA. Any problem ? Is it used with PIPS ?
Have to fusion the two files ?

date : 2/12/2010
Author : Stéphanie Even

The kernel must contain the definition of 
#define P4A_accel_kernel inline void
#define P4A_accel_kernel_wrapper __kernel void
and eventually variable prefixes.

Adding address space qualifiers like
       P4A_accel_global_address, 
       P4A_accel_constant_address 
       P4A_accel_local_address 
for OpenCL and thus CUDA and OpenMP versions.

The functions oclErrorString or oclLoadProgSource, specific to NVIDIA,
must be rewritten later.

9/12/2010 :
Author : Stéphanie Even

The actual P4A_CL_ITEM_MAX 512 suits for CUDA architecture. What for AMD/ATI ? ....

10/12/2010 :
Author : Stéphanie Even

Attention : argument of the kernel launcher are passed as adresses.
	  1) setKernelArg ask for the reference
	  2) this simplifies the argument recuperation. They all are of
	     cl_mem type.

	  Resolved and seems to work!

Quid if kernels were externalised for every option OpenMP, CUDA and OpenCL ?
     Because for automated Hyantes, this an abostacle.


15/12/2010 :
	   p4_accel.h : enum { P4A_vp_dim_max = 3 }; 
	   p4a_accel-CUDA.h et p4a_accel_OpenMP.h :
	    extern __thread int P4A_vp_coordinate[P4A_vp_dim_max];
	    Seulement besoin dans p4a_accel_OpenMP.h.