\documentstyle[12pt]{article}
\input{/usr/share/local/lib/tex/macroslocales/Dimensions.tex}

\newcommand{\titre}{PROJET PIPS \\
		LISTE DES TRANSFORMATIONS 
}

\newcommand{\auteur}{
        	Franc,ois IRIGOIN \\
        	Pierre JOUVELOT \\
\vspace{0.5cm}
{\it Le pre'sent document a e'te' e'tabli en exe'cution du contrat
No.~88.017.01 passe' par la Direction des Recherches, Etudes et
Techniques (De'le'gation Ge'ne'rale pour l'Armement)}
}
\newcommand{\docdate}{De'cembre 1990}
\newcommand{\numero}{E141}

\begin{document}
\input{/usr/share/local/lib/tex/macroslocales/PageTitre.tex}

{\it Le pre'sent document a e'te' e'tabli en exe'cution du contrat
No.~88.017.01 passe' par la Direction des Recherches, Etudes et
Techniques (De'le'gation Ge'ne'rale pour l'Armement)}

\vspace{2cm}

\tableofcontents

\newpage

\section*{Introduction}

L'objectif essentiel du contrat PIPS est d'e'tudier la paralle'lisation
interproce'durale et la de'tection du paralle'lisme maximal, sans
prendre en compte son exploitation effective sur une machine cible
particulie`re. En conse'quence, les transformations qui ne visent pas a`
augmenter le paralle'lisme en supprimant des de'pendances ou qui n'ont
pas un potentiel inte'ressant pour des programmes re'els comme les
programmes tests fournis par l'ONERA n'ont pas de place
dans le projet puisque nous ne disposons pas de crite`res pour les
appliquer.

La plupart des transformations pre'vues lors de la re'daction du contrat,
qu'elles entrent dans le cadre des transformations sur les scalaires ou
des transformations sur les boucles sont dans ce cas. L'inte're^t, ou
l'absence d'inte're^t, de chaque transformation est rapidement pre'sente'.

\section{Transformations sur les scalaires}

Trois transformations sur les scalaires ont e'te' e'tudie'es: la
substitution en avant, l'expansion de scalaire et la transformation des
variables inductives.

\subsection{Substitution en avant}

La substitution en avant permet de remplacer une re'fe'rence a` une
valeur par une expression dont l'e'valuation produit la me^me valeur.
Les conditions ne'cessaires a` la connaissance d'une telle expression
par un outil automatique en limitent l'utilisation a` des cas ou` la
privatisation produit le me^me effet positif sans avoir les effets
secondaires nocifs de la substitution en avant, l'e'valuation multiple
de la me^me expression.

\subsection{Expansion en tableau}

De la me^me manie`re, il a semble' pre'fe'rable de remplacer l'ancienne
transformation qu'est l'expansion de scalaire en un tableau
monodimensionnel par une transformation plus re'cente, la privatisation.

La privatisation permet d'une part d'e'tendre le champ d'application de
l'expansion a` des boucles imbrique'es et a` des boucles dont les bornes
sont symboliques et d'autre part d'e'viter la consommation d'espace
me'moire propre a` l'expansion puisqu'il n'est pas ne'cessaire d'allouer
plus de copies de la variable privatise'e qu'on n'a de processeurs physiques.

\subsection{Transformation des variables inductives}

Les variables inductives qui peuvent e^tre transforme'es sont uniquement
les variables scalaires entie`res. Leur de'tection est donc du ressort
de la phase d'analyse se'mantique. Il s'est ave're' que l'ide'e originale
propose'e par Re'mi Triolet pour e'viter cette transformation de
programme en utilisant les pre'dicats ne s'est ave're'e qu'a` moitie'
vraie.

Les tests de de'pendance qui portent sur des re'fe'rences dont les
expressions d'indice contiennent des variables inductives et qui peuvent
effectivement profiter des pre'dicats donnant la relation existant entre
la ou les variable(s) inductive(s), ne ne'cessitent effectivement pas le
remplacement de ces variables inductives par des expressions line'aires
des indices de boucles. Mais les de'pendances portant sur les variables
inductives elles-me^mes subsistent.

\subsection{Privatisation}

La privatisation est la transformation de programme que nous avons
ajoute' a` la liste initiale des transformations scalaires a`
imple'menter. Elle nous a permis tout a` la fois de diminuer le volume
de codage a` effectuer et d'augmenter le paralle'lisme.

\section{Transformation des boucles}

Six transformations de boucles ont e'te' e'tudie'es comme pre'vu: la
conversion des IFs, l'e'change de boucle, la distribution de boucle, le
de'roulage de boucle et le blocage de boucle. Un septie`me type de
transformation a e'te' ajoute' sous le nom de {\em transformation
unimodulaire}. La me'thode hyperplane et l'e'change de boucles en sont
des cas particuliers.

\subsection{Traitement des IFs}

Les tests posent, ou pluto^t ont pose', un proble`me pour les machines
purement vectorielles. En effet, elles ne doivent pas exe'cuter exactement
le me^me code sur tous les e'le'ments d'un vecteur et la notion de
branchement vectoriel n'a pas de sens. 

L'utilisation d'instructions vectorielles conditionnelles implique une
e'tude du graphe de contro^le et la conversion des de'pendances de
contro^le en des de'pendances de donne'es ({\em If conversion} d'Allen
\& Kennedy).  Ces de'pendances de donne'es se traduisent ensuite par des
instructions de type {\em WHERE}, comme il en existe en Fortran 90.

Cependant, cette transformation n'augmente en rien le paralle'lisme
intrinse`que d'un programme et n'a a` avoir lieu qu'au regard d'une
machine cible particulie`re, non de'finie pour le projet PIPS. La
de'tection de paralle'lisme MIMD n'e'tant pas perturbe'e par les tests,
leur pre'sence dans un corps de boucle interne conduit simplement a` la
de'tection d'une boucle DOALL, MIMD.

\subsection{Echange de boucles}

L'e'change de boucle n'apporte pas non plus de paralle'lisme. Il permet
simplement d'exploiter plus ou moins bien celui qui existe en mettant
une boucle paralle`le en position interne pour disposer d'une boucle
vectorielle ou bien en position externe pour disposer de ta^ches aussi
grosses que possible pour les exe'cuter sur des processeurs diffe'rents.

L'e'change de boucle traditionnel ne concerne que deux boucles adjacentes.
Il a e'te' ge'ne'ralise' par Franc,ois Irigoin a` des boucles quelconques
et a` des directions quelconques sous le nom de {transformation unimodulaire}.
C'est cette dernie`re transformation qui a e'te' imple'mente'e a` la place
de l'e'change de boucle.

\subsection{Distribution de boucle}

La distribution de boucle est tre`s importante pour la de'tection du
paralle'lisme maximal, c'est pourquoi elle est souvent inte'gre'e dans le
processus de de'tection du paralle'lisme lui-me^me. C'est le cas avec
avec l'algorithme d'Allen \& Kennedy qui a e'te' utilise' dans PIPS.

Une version particulie`re de cet algorithme a e'te' developpe'e pour
pouvoir effectuer uniquement la distribution de boucles, afin de pouvoir
ulte'rieurement en be'ne'ficier pour d'autres algorithmes de
paralle'lisation ne l'incluant pas, comme la paralle'lisation globale de
nids de boucle propose'e par Franc,ois Irigoin.

\subsection{Fusion de boucles}

La fusion de boucles, la transformation inverse de la distribution de
boucle, n'apporte qu'une e'ventuelle de'gradation du paralle'lisme d'un
programme ce qui n'est pas e'tonnant vu les caracte'ristiques favorables
de la distribution. Ses objectifs sont la diminution de l'overhead de
contro^le de boucle et l'ame'lioration de la localite' temporelle des
re'fe'rences. Son utilite' s'est ave're'e nulle dans le cadre du projet
PIPS, ou` il vaudrait mieux pouvoir disposer d'un algorithme ne faisant
pas de distribution inutile ou me^me, pas de distribution du tout.

\subsection{De'roulage de boucle}

Le de'roulage de boucle ne modifie en rien l'exe'cution d'un programme.
Il n'introduit donc aucun paralle'lisme.
Son inte're^t re'side en une diminution de l'overhead de contro^le de
boucle et dans une meilleure utilisation des registres, si la phase
d'allocation de registres du compilateur est bonne.

Cette transformation a de plus l'inconve'nient d'alourdir le code et de
le rendre illisible. Elle ne peut donc pas e^tre applique'e
automatiquement, surtout dans un paralle'liseur source a` source comme PIPS.

Enfin, elle est maintenant de'passe'e par la technique du {\em software
pipelining}. Elle n'a donc pas e'te' imple'mente'e.

\subsection{Blocage de boucle}

Le blocage de boucle est une technique similaire a` la pre'ce'dente,
introduite initialement pour prendre en compte les registres vectoriels.
Elle peut aussi servir pour ame'liorer l'utilisation des caches quand
elle est utilise'e en combinaison avec l'e'change de boucles, mais elle
produit alors des re'sultats moins ge'ne'raux que les techniques de
partitionnement de'veloppe'es par Franc,ois Irigoin, l'{\em hyperplane
partitioning} et le {\em supernode partitioning} ainsi que leur ge'ne'ralisation.

Son inte're^t est nul en l'absence d'une machine cible. Les proble`mes
de localite' ne sont pas mentionne's parmi les objectifs de PIPS. Cette
me'thode ne fait donc pas partie non plus des transformations propose'es.

\subsection{Transformations unimodulaires}

Les transformations unimodulaires sont supporte'es au niveau bibliothe`que
mais non inte'gre'es dans PIPS. Faute de machine cible, il est en effet
impossible d'en choisir une particulie`re a` l'aide d'une fonction de cou^t.

Pour en montrer l'existence, deux programmes principaux ont e'te' de'veloppe's.
L'un permettait d'appliquer la me'thode hyperplane mais il e'tait tre`s
difficile a` l'utilisateur de choisir une direction d'ite'ration
inte'ressante. Cela n'a pas permis d'ame'liorer les re'sultats obtenus
sur les programmes tests de l'ONERA.

Le second programme permet d'e'changer des boucles quelconques en en
donnant les e'tiquettes, ce qui est plus facile. Mais cela ne cre'e
aucun paralle'lisme et il a donc semble' pre'fe'rable de ne pas
l'inte'grer dans le paralle'liseur PIPS.

\section{Conclusion}

La vitesse a` laquelle les techniques de compilation ont e'volue' au
cours des quatre anne'es qui ont se'pare' la re'daction initiale de
l'annexe technique du contrat PIPS et sa terminaison a partiellement
rendu caduc la liste de transformations pre'vues.

Il s'est ave're' au cours de l'e'tude que certaines d'entre elles
e'taient sans objet vis-a`-vis des objectifs poursuivis en matie`re de
paralle'lisme interproce'dural. D'autres sont devenues obsole`tes sans
que le volume de travail ne'cessaire a` l'imple'mentation de tous leurs
remplac,ants ait bien su^r e'te' pre'vu. Il a e'te' ne'anmoins possible
d'imple'menter certaines de ces nouvelles techniques, parmi lesquelles
la principale est la privatisation de variables scalaires.
Une ge'ne'ralisation de l'e'change de boucles a aussi e'te' re'alise'e.

Ainsi, toutes les transformations qui permettent
d'augmenter le paralle'lisme qui peut e^tre mis en e'vidence dans les
programmes tests de l'ONERA ont e'te' imple'mente'es avec succe`s, qu'il
s'agisse des transformations initialement pre'vues ou de celles qui les
remplacent maintenant.

\end{document}
