\documentstyle[12pt]{article}
\input{/usr/share/local/lib/tex/macroslocales/Dimensions.tex}

\newcommand{\titre}{
   PROPOSITION DE CONVENTION DRET-AR\-MI\-NES \\
   R\'EALISATION D'UN PARALL\'ELISEUR POUR CRAY-YMP/8
   }

\newcommand{\auteur}{Franc,ois IRIGOIN, Michel LENCI}

\newcommand{\docdate}{11 avril 1991}

\newcommand{\numero}{E153}

\setlength{\parindent}{0cm}

\begin{document}
\input{/usr/share/local/lib/tex/macroslocales/PageTitre.tex}

\section*{Introduction}

Cette proposition concernant la paralle'lisation automatique, nous
pre'sentons d'abord l'e'tat de l'art dans ce domaine, puis les
re'sultats obtenus lors du projet PIPS qui a e'te' finance' avec l'aide
de la DRET de 1988 a` 1990, et enfin les objectifs vise's, les
motivations et de'tails financiers.

\section{La paralle'lisation automatique. Etat de l'art}

Les contraintes mate'rielles ont pousse' tous les constructeurs de
superordinateurs a` construire des machines comportant de plus en plus
de processeurs. Par exemple, le Cray~1 n'existait qu'en une version
monoprocesseur. Son successeur, le Cray~X-MP pouvait avoir de un a`
quatre processeurs. Et enfin, le mode`le actuel peut avoir jusqu'a` huit
processeurs (tout comme le Cray-2). Il est pre'vu que les mode`les
suivants aient jusqu'a` 16 processeurs alors que le Cray~3 pourrait en
avoir 64.

Les constructeurs concurrents, ainsi que les constructeurs de Crayettes,
ont suivi la me^me voie. Par exemple, Alliant est passe' d'une machine
a` 8 processeurs a` une machine a` 28 processeurs.

Cette e'volution mate'rielle a e'te' double'e d'une e'volution
logicielle. S'il e'tait possible de pre'tendre utiliser un petit nombre
de processeurs en utilisant uniquement la multiprogrammation, ceci n'est
plus possible quand le nombre de ces derniers de'passe quatre et quand les
utilisateurs comparent les performances qu'ils obtiennent avec les
capacite's cre^tes de la machine.

Apre`s une premie`re pe'riode ou` des primitives spe'ciales ont e'te'
mises a` la disposition des utilisateurs de'sireux de profiter du
paralle'lisme des multiprocesseurs, il a fallu envisager la de'tection
automatique du paralle'lisme et son insertion dans les logiciels de
compilation.

Ce domaine n'a pas encore la maturite' de la vectorisation automatique,
mais les premiers produits ont maintenant fait leur apparition tandis
que les travaux se poursuivent dans les laboratoires.

\subsection{Le paralle'liseur d'Alliant}

Le paralle'liseur d'Alliant est un produit d'origine Pacific Sierra. Il
est apparu le premier sur le marche' parce que l'architecture des
machines d'Alliant ne'cessite un paralle'liseur. Profitant de la
synchronisation et du scheduler ca^ble', le compilateur ge'ne'rait
initialement du paralle'lisme de grain fin a` partir de boucles internes
qui auraient pu servir a` ge'ne'rer du code vectoriel. Les instructions
vectorielles ne'cessaires a` chaque processeur e'taient obtenues en
effectuant un {\em strip-mining} de ces boucles internes. Des deux
nouvelles boucles paralle`les obtenues, la boucle externe est exploite'e
en paralle`le par les processeurs tandis que la boucle interne est
traduite en instruction vectorielle.

\subsection{Le paralle'liseur de Cray}

Le compilateur Fortran de Cray est un vectoriseur. La de'tection
automatique du paralle'lisme est faite par un pre'processeur, FPP,
de'veloppe' par Pacific Sierra. Ce pre'processeur effectue une analyse
fine du paralle'lisme intraproce'dural (prise en compte des bornes de
boucles, de'tection de re'ductions sur les tableaux) mais la pre'sence
d'appels de proce'dures provoque l'arre^t des analyses.

\subsection{Le paralle'liseur de Convex}

CONVEX a re'cemment annonce' le premier paralle'liseur interproce'dural
du marche'. Nous n'avons pu obtenir aucune information pre'cise sur
les fonctionnalite's propose'es.

\subsection{Le projet PTRAN}

Le projet PTRAN (Parallel Translation) a e'te' mene' dans le laboratoire
de recherche d'IBM situe' a` Hawthorne (Yorktown Heights). Les machines
cibles sont les 3090 multiprocesseurs (devenus se'rie 9000) et le prototype
RP3. Les points forts du projet sont:
\begin{itemize}
  \item la recherche du paralle'lisme entre instructions ou blocs
d'instructions aussi bien qu'entre ite'rations de boucles;
  \item la prise en compte de graphes de contro^le complique's gra^ce au
{\em Program Dependence Graph};
  \item la production de Parallel Fortran, un produit IBM, et sans doute
a` terme de PCF Fortran;
  \item une efficacite' et une robustesse suffisantes pour traiter
les programmes du PerfectClub.
\end{itemize}
L'interproce'duralite' ne fait pas partie des points forts du projet.

\subsection{Le projet CEDAR}

Le CSRD est si important que de nombreux projets ont vu le jour
dans le cadre du projet CEDAR. Rappelons que l'architecture CEDAR est un
multi-multiprocesseur vectoriel avec une me'moire hie'rarchise'e a`
plusieurs niveaux. Le niveau de complexite' est tel que le CSRD a
pre'fe're' commencer par de'finir un langage, CEDAR FORTRAN, permettant
au programmeur de placer lui-me^me ses variables au niveau me'moire qu'il
souhaitait ainsi que de choisir pour chaque boucle paralle`le le niveau
du paralle'lisme (vectoriel, intra-cluster, inter-cluster).

Trois projets de compilateur ont e'te' mene' en paralle`le. Le premier
visait a` passer automatiquement de Fortran a` CEDAR Fortran. Nous
n'avons pas d'information sur les re'sultats obtenus, mais
l'interproce'duralite' ne fait pas partie des proble`mes. Le second
projet est Parafrase-2. Il s'agissait de reconstruire Parafrase, le
paralle'liseur qui avait e'te' de'veloppe' dans les anne'es 70 et
progressivement enrichi par des travaux d'e'tudiants. Parafrase n'e'tait
plus maintenable. Il fallait donc le reprendre a` la base. A l'heure
actuelle, aucun re'sultat nouveau n'a e'te' publie' a` propos de
Parafrase-2. Le troisie`me projet, PARCEL, est plus novateur. Il s'agit de
fournir un unique paralle'liseur permettant de traiter aussi bien LISP, que
C et Fortran. Ici encore, les proble`mes interproce'duraux ne sont pas
dominants.

\subsection{Le projet Parascope}

Le projet Parascope regroupe un grand nombre de sous-projets de'rive's
de l'Universite' Rice a` Houston. Tous les aspects de la
paralle'lisation, des interfaces d'environnement de programmation aux
tests de de'pendance, et toutes les architectures de machines, a`
me'moire globale ou re'partie, sont concerne's.

De nombreux travaux ont e'te' mene's a` propos de l'analyse
interproce'durale (propagation de constante, aliasing, analyse
incre'mentale) et de la paralle'lisation interproce'durale (plusieurs
variantes de la me'thode des re'gions propose'e par Re'mi Triolet). Ces
travaux n'ont pas tous e'te' imple'mente's et des expe'riences ont
encore cours pour en mesurer l'inte're^t et pour de'finir de nouvelles
directions de recherche. L'imple'mentation actuelle de l'analyse
se'mantique interproce'durale de PIPS est plus de'veloppe'e.

\subsection{Le projet SUIF}

Le projet SUIF est une tentative de normalisation de la repre'sentation
interme'diaire utilise'e par diffe'rents projets pour fournir des outils
de programmation. Tous ces projets ont pour machine cible un
multiprocesseur Silicon Graphics et des multi-multiprocesseurs qui
pourraient en e^tre de'rive's. Les travaux concernent aussi bien les
aspects mate'riels que les aspects logiciels. Co^te' compilation, la
ge'ne'ration de code est plus prioritaire que l'analyse des programmes
ou leur paralle'lisation.

\subsection{Travaux effectue's en France}

~\newline
Plusieurs e'quipes en France poursuivent des travaux dans le domaine des
compilateurs pour machines a` me'moire globale. A l'INRIA, l'e'quipe de
Martin Jourdan participe au projet ESPRIT COMPAR qui vise a` produire
des ge'ne'rateurs de compilateurs pour machines paralle`les. Il ne
s'agit pas seulement de ge'ne'rer l'analyse syntaxique, ce qu'on sait
faire depuis longtemps, mais aussi le ge'ne'rateur de code et le
paralle'liseur. Le ge'ne'rateur COMPAR prendrait donc en entre'e une
description du langage et une description de la machine cible et
ge'ne'rerait un compilateur-paralle'liseur-optimiseur. Ce projet semble
un peu futuriste puisque des langages fonctionnels doivent e^tre traite's
aussi bien que des langages impe'ratifs. De plus l'accent est mis
pluto^t sur la parame'trisation de l'outil que sur des ame'liorations en
paralle'lisation: le paralle'liseur sera base' sur VATIL.

A l'IRISA, l'e'quipe de William Jalby concentre ses efforts sur les
proble`mes de ge'ne'ration de code pour machines superscalaires. La
paralle'lisation proprement dite est effectue'e a` l'aide d'un prototype
de recherche ame'ricain, SIGMACS qui est de'veloppe' a` l'Universite'
d'Indiana par Dennis Gannon. Ce prototype n'a pas e'te' pre'sente'
auparavant parce qu'il n'a pas donne' lieu a` de nombreuses
publications. La ge'ne'ration de code pour machines superscalaires peut
se faire a` partir d'un paralle'liseur/vectoriseur simple ne traitant
que les boucles internes. Les aspects interproce'duraux ne sont pas
primordiaux. 

A l'universite' Paris 6, l'e'quipe du Pr. Feautrier e'tudie de nombreux
proble`mes de compilation pour machines paralle`les a` me'moire
distribue'e ou non. Ces travaux sont extre^mement expe'rimentaux et ne
peuvent pas e^tre applique's a` des programmes d'une taille
significative. L'interproce'duralite' n'est pas une the`me prioritaire.

\subsection{Place de l'interproce'duralite'}

En conclusion, seule l'e'quipe de Rice aborde les proble'mes d'analyse
et de paralle'lisation interproce'durale qui sont les deux points forts
du projet PIPS que nous pre'sentons maintenant.

\section{Le Projet PIPS}

\subsection{Pre'sentation}

L'e'quipe {\em Paralle'lisation} du Centre de Recherche en Informatique
de l'Ecole des Mines de Paris a de'veloppe' en 2 ans un prototype de
Paralle'liseur Interproce'dural de Programmes Scientifiques (projet
PIPS). Ce de'veloppement a e'te' partiellement finance' par la DRET dans
le cadre de la convention DRET- AR\-MI\-NES No 87017 (bon de commande No
8801701).


L'objectif du projet PIPS est l'adaptation automatique de programmes
scientifiques aux calculateurs paralle`les. Il s'agit de transformer ces
programmes de fac,on a` ce que l'exe'cution sur des super-calculateurs
de la version paralle`le soit plus rapide que celle de la version
originale.

\subsection{Architecture}

L'approche choisie dans le projet PIPS est diffe'rente de celle des
paralle'liseurs existants. PIPS se compose d'une collection de phases
d'analyse et de phases de transformation de programmes organise'es
autour d'une {\em base de programmes}. La vie d'un programme Fortran
dans cette base commence avec la phase d'initialisation qui en effectue
l'analyse syntaxique et inse`re dans la base les repre'sentations
internes des ses diffe'rents modules.


Le programme e'volue ensuite en fonction des phases qui lui sont
applique'es. Les phases d'analyse de'corent la repre'sentation interne
avec des informations sur le comportement du programme; les objets
de'core's peuvent e^tre des modules, des instructions ou des boucles.
Les phases de transformation utilisent ces de'corations pour de'tecter
les portions de programme de'pendantes les unes des autres et tenter de
casser ces de'pendances pour aboutir a` des repre'sentations internes
contenant du paralle'lisme. Les informations calcule'es par les phases
d'analyse sont partiellement perdues apre`s une phase de transformation,
ce qui explique que phases d'analyse et phases de transformation soient
applique'es alternativement jusqu'a` aboutir a` une version paralle`le
satisfaisante.


A tout moment, la phase de pretty-print peut e^tre applique'e pour
produire une repre'sen\-ta\-tion textuelle, en Fortran-8X, de cette version
paralle`le (cf. figure \ref{interp}).

\subsection{Phases d'analyse}

La concision de la repre'sentation interne des modules et la grande
richesse des outils de manipulation de cette repre'sentation ont permis
a` l'e'quipe de de'velopper un grand nombre de phases d'analyse et de
phases de transformation.


La liste des de'corations calculables par PIPS est assez longue: graphe
de contro^le structure' d'un module, graphe des appels de proce'dure du
programme, effets des instructions d'un module sur les variables du
programme, effets des appels de proce'dure sur les variables du
programme, pre'-conditions des instructions d'un module, pre'-conditions
des modules du programme, graphe de de'pendances entre instructions d'un
module.


La liste des transformations exe'cutables par PIPS est elle aussi assez
longue: privatisation des variables scalaires, de'tection des
re'ductions ge'ne'ralise'es, de'tection et substitution en avant des
variables inductives, blocage de boucle, de'roulage de boucle,
paralle'lisation de boucle, distribution de boucle, vectorisation de
boucle, e'change de boucles.

\subsection{Interface utilisateur}

Les phases sont applique'es a` un programme sur la demande de
l'utilisateur en fonction des transformations qu'il souhaite effectuer
sur son programme. Ceci est fait a` travers une interface
multi-fene^tres de'veloppe'e sous X-Windows qui permet de visualiser le
programme en temps re'el au fur et a` mesure que les transformations lui
sont applique'es (cf. figure \ref{interf}).

\begin{figure}
\rule{\textwidth}{.2mm}
\vspace*{20cm}
\caption{Interface Utilisateur de PIPS}
\label{interf}
\rule{\textwidth}{.2mm}
\end{figure}

 
Comme les diffe'rentes phases ne sont pas inde'pendantes les unes des
autres (nous avons vu que les transformations ont besoin des re'sultats
des analyses) et qu'il n'est pas possible d'imposer a` l'utilisateur la
connaissance de ces relations de de'pendances entre phases, l'interface
utilisateur calcule l'ordre d'application des phases en fonction du
travail demande'.

\subsection{Avantages}

PIPS incorpore plusieurs fonctionnalite's originales de'veloppe'es par
les chercheurs du CRI: calcul du graphe de contro^le structure',
de'tection des re'ductions ge'ne'ralise'es, analyse dataflow par
re'gions, calcul de pre'-conditions, etc.


La plus importante de ces fonctionnalite's est que PIPS est totalement
{\em interproce'dural}, ce qui signifie que tous les calculs et
transformations de programme que nous avons pre'sente's peuvent e^tre
effectue's sur un programme compose' de plusieurs modules sans perte
excessive d'efficacite' et de qualite' des re'sultats. PIPS est
notamment capable de paralle'liser des boucles comportant des appels de
procedure (cf. figure \ref{interp})

\begin{figure}
\sloppy
\rule{\textwidth}{.2mm}
\begin{verbatim}
C     
C     PRODUIT DE MATRICES - VERSION AVEC APPEL A SAXPY
C     
C     ANALYSE DATA FLOW INTERPROCEDURALE
C     RESUME DES EFFETS D'UNE PROCEDURE
C     PARALLELISATION DE BOUCLES COMPORTANT DES APPELS DE PROCEDURE
C     
      SUBROUTINE MM03(N, A, B, C)
C     
      REAL*8 A(N,N), B(N,N), C(N,N), XAUX(0:127)
C     
      DOALL I = 1,N,1
         PRIVATE J
         DOALL J = 1,N,1
            C(I,J) = 0.0                                              19
         ENDDO
      ENDDO
C     
      DOALL J = 1,N,1
         PRIVATE K
         DO K = 1,N,1
            CALL SAXPY(N, C(1,J), A(1,K), B(K,J))                     24
         ENDDO
      ENDDO
      RETURN
      END
\end{verbatim}
\caption{Paralle'lisation Interproce'durale}
\label{interp}
\rule{\textwidth}{.2mm}
\end{figure}

\section{Le projet PIPS-CRAY}

\subsection{Objectif}

PIPS n'a pas e'te' conc,u pour une machine cible particulie`re mais pour
toute la classe des multi-processeurs vectoriels a` me'moire partage'e.
Ceci est du^, d'une part, au fait que l'architecture des cibles
potentielles\footnote{Projet MARIE de CIMSA-SINTRA et projet ISIS de
BULL.} n'e'tait pas tout a` fait connue au de'marrage du projet PIPS,
et, d'autre part, au fait qu'il semblait plus inte'ressant de de'velopper
un paralle'liseur ge'ne'rique dont on pourrait de'river un
paralle'liseur spe'cialise' pour chaque architecture.


Le projet PIPS-CRAY consiste donc a` spe'cialiser la version actuelle de
PIPS pour le CRAY-YMP/8. 

\subsection{Motivations}

Les motivations sont multiples. D'une part, la version actuelle de PIPS
est d'un inte're^t limite' si le projet devait e^tre abandonne'.  En
effet, les programmes produits par PIPS ne sont pas adapte's a` une
architecture particulie`re, ce qui implique qu'ils ont peu de chance de
s'exe'cuter efficacement quelle que soit la machine cible. Il e'tait
d'ailleurs clairement entendu que la convention de 2 ans devait e^tre
impe'rativement prolonge'e d'au moins 1 an pour obtenir des re'sultats
d'exe'cution inte'ressants.


D'autre part, les scientifiques franc,ais utilisent des
super-calculateurs bien que les projets franc,ais n'aient pas donne'
tous les re'sultats escompte's. Les super-calculateurs favoris semblent
e^tre ceux construits par CRAY, ce qui n'est pas e'tonnant e'tant donne'
leurs tre`s grandes performances et leur nombre: le CRAY-YMP/8 est a`
l'heure actuelle le plus puissant de tous les super-calculteurs a` usage
ge'ne'ral.


Par exemple, les scientifiques du CEA a` qui PIPS a e'te' pre'sente' ont
favorablement accueilli cet outil et ont su de'tecter l'inte're^t qu'ils
auraient a` disposer d'une version spe'cialise'e pour le CRAY-YMP/8
attendu prochainement au CEA. Ils ont particulie`rement appre'cie' ses
capacite's interproce'durales et son interface utilisateur.


Enfin, le CRAY-YMP/8 offre un environnement ide'al pour une version
spe'cialise'e de PIPS. En effet, son syste`me UNICOS est compatible avec
UNIX et propose X-Windows. Il offre en outre un compilateur Fortran
sachant compiler les boucles vectorielles et les boucles paralle`les a`
la condition que l'utilisateur ou l'outil CRAY FPP\footnote{Fortran
Parallel Preprocessor} les lui indique en inse'rant des directives de
compilation; il suffit donc a` PIPS de jouer le me^me ro^le que FPP, en
offrant en plus l'interproce'duralite' et l'interactivite'.


La disponibilite' du syste`me X-Windows permettra au coeur de PIPS
d'e^tre exe'cute' sur le CRAY-YMP/8 tout en ayant l'interface graphique
utilisateur sur une station de travail connecte'e a` distance via un
re'seau. Les grandes performances du CRAY sont donc un atout
supple'mentaire puisqu'elles permettent d'utiliser au sein de PIPS les
algorithmes les plus complexes, notamment pour le calcul du graphe de
de'pendances a` partir des pre'dicats et des re'gions.

\subsection{Travaux}

Les travaux a` effectuer pour re'aliser une version spe'cialise'e de
Pips pour CRAY-YMP/8 sont les suivants.

\subsubsection{Etude de FPP}

FPP a e'te' de'rive' de VAST par la socie'te' Pacific Sierra
en coope'ration avec les inge'nieurs de CRAY. FPP n'est pas
interproce'dural, il ne calcule pas de pre'dicats et n'est pas
interactif; de plus le test de de'pendance utilise' est sans aucun doute
moins e'volue' que celui de PIPS.


Il nous sera ne'ammoins tre`s utile d'e'tudier les transformations qu'il
effectue pour s'en inspirer car elles ont tre`s certainement e'te'
de'cide'es en partie par les concepteurs de la machine. Cela e'vitera
l'e'tude des me'canismes d'allocation de registres de CFT.

\subsubsection{Portage de PIPS}

La premie`re ta^che a` re'aliser sera de porter PIPS sous UNICOS, le
syste`me d'exploitation des ordinateurs CRAY. Seul le coeur de PIPS
devra e^tre porte', l'interface graphique continuant a` s'exe'cuter sur
une station de travail pour profiter de l'e'cran bit-mapped et des
possibilite's graphiques qui en de'coulent.

\subsubsection{Spe'cialisation de PIPS}

Chaque phase de transformation de programme devra e^tre adapte'e au
CRAY-YMP/8. Certaines adaptations sont faciles car elles se rame`nent a`
la fixation de la valeur de constantes: taux de de'roulage des boucles,
facteur de blocage des boucles, etc. 


D'autres sont beaucoup plus complexes.  Ainsi, l'algorithme de Kennedy
pour distribuer, vectoriser et paralle'liser les boucles devra e^tre
modifie' pour ne ge'ne'rer a` chaque fois qu'une boucle paralle`le
externe et une boucle vectorielle interne. Il faut noter que cet
algorithme a de'ja` e'te' modifie' dans PIPS pour prendre en compte les
variables prive'es. 


Enfin, d'autres transformations devront e^tre imple'mente'es, comme par
exemple le tronc,on\-na\-ge de boucles qui permet de saturer tous les
processeurs lorsque seule une boucle vectorielle a pu e^tre de'tecte'e.

\subsubsection{Production de Fortran CRAY}

Un nouveau pretty-printer devra e^tre re'alise' pour produire du Fortran
CRAY, c'est-a`-dire du Fortran-77 de'core' avec les directives de
compilation de CFT-77. 

\subsubsection{Tests sur CRAY-YMP/8}

Il sera ne'cessaire d'exe'cuter les programmes produits par PIPS-CRAY
sur un calculateur CRAY-YMP/8 pour valider ou invalider les choix faits
au niveau de la spe'cialisation des transformations. L'Ecole des Mines
n'ayant pas a` ce jour d'acce`s a` une telle machine, ces exe'cutions
devront e^tre effectue'es en coope'ration avec un partenaire. Le CEA
montre un vif inte're^t aux travaux du CRI, et pourra nous
accueillir pour ces tests.


L'aboutissement du projet sera de faire les me^mes tests, mais en vraie
grandeur sur les benchmarks de l'ONERA et sur ceux du CEA.

\subsubsection{Autres actions}


Dans le cadre de cette convention, le logiciel PIPS sera installe' au CEA
et a` l'ONERA, de fac,on a` faire be'ne'ficier ces organismes de
l'utilisation du paralle'liseur. Re'ciproquement, le CRI be'ne'ficiera
du retour des expe'riences re'alise'es avec PIPS par ces deux organismes
afin d'ame'liorer ses fonctionnalite's.


L'installation incluera les journe'es de formation ne'cessaire.

\subsubsection{Calendrier des travaux}

Le projet PIPS-CRAY ne'cessite la participation de 2 personnes: un
chercheur confirme' pendant 10 mois, et un e'le`ve chercheur pendant 10
mois. Voici la re'partition des mois-hommes selon les travaux:

\begin{center}
\begin{tabular}{|l|c|}
\hline
\multicolumn{1}{|c|}{\bf Travaux}	& {\bf Dure'e} \\
					& {\bf (en mois/homme)} \\ \hline
Etude de FPP				& 4  \\
Portage de PIPS sous UNICOS		& 1 \\
Spe'cialisation de PIPS			& 9 \\
Production de Fortran CRAY		& 2  \\
Tests sur CRAY-YMP/8			& 4 \\ \hline
Total					& 20 \\ \hline
\end{tabular}
\end{center}

\subsection{Financement}

\subsubsection{Justification du financement consenti par la DRET}

\paragraph{Dure'e d'exe'cution}

La dure'e d'exe'cution du projet est fixe'e a` 12 mois a` compter de la
date de notification du contrat.

\paragraph{Allocation forfaitaire}

Le montant de l'allocation forfaitaire est fixe'e a` 40.000 F. soit 8\%
du montant total hors taxes. Cette allocation sera verse'e en totalite'
a` AR\-MI\-NES pour frais ge'ne'raux et frais d'administration de la
convention.

\paragraph{De'penses de personnel}

AR\-MI\-NES affecte a` ce projet un chercheur confirme' a` temps plein
dont le salaire, les charges et les frais de laboratoire seront pris en
charge par la DRET.


La DRET affecte a` ce projet un scientifique du contingent qui
effectuera les travaux re'serve's a` l'e'le`ve chercheur. Les frais de
laboratoire et les frais de mission relatifs a` ce scientifique seront
inte'gralement pris en charge par AR\-MI\-NES. 


Le montant de la participation DRET aux de'penses de personnel est
donne' dans le tableau ci-dessous.

\begin{center}
\begin{tabular}{|l|r|}
\hline
\multicolumn{1}{|c|}{\bf Frais}	& {\bf Participation DRET} \\
				& \multicolumn{1}{|c|}{(en francs)} \\ \hline
Chercheur confirme' (10 mois)		& \\
~~~Salaire + charges		& 375.000 \\
~~~Frais de Laboratoire		& 125.000  \\
 				& \\
Total HT			& 500.000 \\ \hline
\end{tabular}
\end{center}

\paragraph{De'penses de sous-traitance}

AR\-MI\-NES n'ayant pas acce`s a` un CRAY-YMP/8, les tests devront e^tre
effectue's sur une machine du CEA, qui, manifestant ainsi son inte're^t
pour le projet, met a` la disposition d'ARMINES les heures de calcul
ne'cessaires. 

\paragraph{Frais de de'placement}

Les frais de de'placement relatifs a` ce projet sont inte'gralement pris
en charge par AR\-MI\-NES.

\paragraph{Frais de mate'riel}

Les frais de mate'riel relatifs a` ce projet sont inte'gralement pris
en charge par AR\-MI\-NES.

\paragraph{Autres de'penses}

Nous ne pre'voyons aucune de'pense dans cette rubrique.

\paragraph{Re'capitulation}

Les montants totaux des de'penses par rubrique sont reporte's dans le
tableau suivant:
 
\begin{center}
\begin{tabular}{|l|r|}
\hline
\multicolumn{1}{|c|}{\bf Frais}	& {\bf Participation DRET} \\
				& \multicolumn{1}{|c|}{(en francs)} \\ \hline
Allocation Forfaitaire		&  40.000 \\
De'penses de personnel		& 500.000 \\
De'penses de sous-traitance	& a` pre'ciser \\
 				& \\
Total HT			& 540.000 \\
TVA (18.6\%)			& 100.440 \\ \hline
Total TTC			& 640.440 \\ \hline
\end{tabular}
\end{center}
 
\begin{center}
\begin{tabular}{|l|r|}
\hline
\multicolumn{1}{|c|}{\bf Frais}	& {\bf Participation du CEA} \\
				& \multicolumn{1}{|c|}{(en francs)} \\ \hline
Allocation Forfaitaire		&  \\
De'penses de personnel		& \\
De'penses de sous-traitance	& 400.000 \\
 				& \\
Total HT			& 400.000 \\
TVA (18.6\%)			& N.A. \\ \hline
Total TTC			& 400.000 \\ \hline
\end{tabular}
\end{center}

\subsubsection{Justification du financement consenti par AR\-MI\-NES}

\paragraph{De'penses de personnel}

AR\-MI\-NES prend a` sa charge les frais d'accueil du scientifique du
contingent mis a` sa disposition par la DRET. Nous e'valuons a` 75.000
F. les frais d'accueil d'un e'le`ve-chercheur pendant 10 mois.

\paragraph{Frais de de'placement}

Les frais de de'placement relatifs au projet sont inte'gralement pris
en charge par AR\-MI\-NES. Ils s'agit de de'placement en re'gion parisienne
pour aller effectuer des tests sur l'ordinateur du CEA. 


Nous comptons effectuer environ 30 de'placements (2 par semaine pendant
4 mois), soit une de'pense de 9000 F. environ.

\paragraph{Frais de mate'riel}

Les frais de mate'riel relatifs a` ce projet sont inte'gralement pris
en charge par AR\-MI\-NES. Il s'agit des frais de maintenance de deux
des quatre stations de travail achete'es par la DRET et mises a`
disposition d'AR\-MI\-NES pour le contrat PIPS (bon de commande No~8801701).
Cette de'pense s'e'le`ve a` 50.000 F. pour la dure'e totale du contrat.

\paragraph{Re'capitulation}

Les montants totaux des de'penses par rubrique sont reporte's dans le
tableau suivant:
 
\begin{center}
\begin{tabular}{|l|r|}
\hline
\multicolumn{1}{|c|}{\bf Frais}	& {\bf Participation AR\-MI\-NES} \\
				& \multicolumn{1}{|c|}{(en francs)} \\ \hline
De'penses de personnel		& 75.000 \\
Frais de de'placement		&  9.000 \\
Frais de mate'riel		& 50.000 \\
 				& \\
Total HT			& 134.000 \\
TVA (18.6\%)			&  24.924 \\ \hline
Total TTC			& 158.924 \\ \hline
\end{tabular}
\end{center}

\subsubsection{Calendrier des de'penses}

Le paiement de l'allocation forfaitaire sera effectue' a` la
notification du contrat. Le paiement des autres de'penses sera
effectue' par trimestre. Ceci nous donne l'e'che'ancier suivant, ou`
tous les montants sont exprime's en francs toutes taxes comprises.

\begin{center}
\begin{tabular}{|c|r|r|r|r|}
\hline
{\bf Versement Initial}	&
\multicolumn{4}{|c|}{\bf Versements Trimestriels} \\ \cline{2-5}
			& \multicolumn{1}{|c|}{\bf Trim. 1} &
\multicolumn{1}{|c|}{\bf Trim. 2} & \multicolumn{1}{|c|}{\bf Trim. 3} &
\multicolumn{1}{|c|}{\bf Trim. 4} \\ \hline
47.440			& 148.250 & 148.250 & 148.250 & 148.250 \\
\hline
\end{tabular}
\end{center}

\end{document}
\end
