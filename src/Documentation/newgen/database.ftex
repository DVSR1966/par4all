%% 
%% $Id$
%% 
%% $Log: database.ftex,v $
%% Revision 1.5  1997/09/19 12:17:00  coelho
%% hop !
%%
%% Revision 1.4  1997/09/19 11:49:48  coelho
%% hop !
%%
%%
%%
%% newgen domain for pips detabase management.
%%

\documentclass[a4paper]{article}

\usepackage{newgen_domain}

\title{Pips Database Manager}

\begin{document}

\maketitle

\section{Old database structures}

\domain{Database = name:string x directory:string x resources:resource*}
{ Le domaine {\tt database} est utilise' par pips-db pour de'crire
l'e'tat d'un programme utilisateur. Ce domaine contient son nom ({\tt
name}), le re'pertoire dans lequel il a e'te' cre'e', et les
informations qui ont e'te' calcule'es pour les diffe'rents modules ({\tt
resources}). En fait, le nom de la base et le nom de la directory
utilise'e sont directement lie', en pratique. Le nom de la directory est
le nom de la base suffise' par \verb+database+.

Un e'le'ment de type {\tt resource} est ajoute' a` la liste {\tt resources}
pour chaque objet calcule' pour ce programme par les phases d'analyse ou
de transformation de Pips. 

La bibliothe`que qui exploite cette structure de donne'es est
\verb+pipsdbm+.  Elle devrait e^tre nomme'e \verb+database-util+ si une
re`gle de nommage e'tait observe'e.

}

\domain{Resource = name:string x owner\_name:string x status x time:int x file\_time:int}
{ Le domaine {\tt resource} est utilise' par pips-db pour de'crire l'une
des informations suceptibles d'e^tre calcule'es par Pips pour un module
ou un programme. Pour chaque information, il faut connai^tre son nom
({\tt name}), savoir qui elle de'core ({\tt owner\_name}), savoir si elle
est pre'sente en me'moire ou range'e dans un fichier ({\tt status}),
connaitre sa date de cre'ation logique ({\tt time}), et eventuellement
la date (Unix) de cre'ation du fichier correspondant ({\tt file\_time}).

Le {\tt name} de la ressource est en fait un type et aurait pu e^tre
de'fini comme un type e'nume're'. C'est par souci de simplicite' et
ge'ne'ricite' de pipsdbm que nous avons choisi de le de'finir comme par
une chaine de caracte`res. C'est ce {\tt name} qui permet notamment a`
pipsdbm de choisir la fonction pour lire, e'crire ou libe'rer une
ressource.

A un moment donne', chaque ressource est identifie'e demanie`re unique
par son nom, \verb+name+, et le nom de son {\em owner}, \verb+owner_name+.

Nous avons longement discute de l'utilite' d'avoir un owner\_type pour
preciser ce que de'core la ressource: un programme (cas des entite's),
un module (cas de toutes les autres ressources), une boucle, une
instruction, etc. Nous y avons renonce' car à l'heure actuelle, nous
n'avons que des ressources attachables a` des programmes ou a` des
modules, et que cette information peut e^tre de'duite du {\tt name} de
la ressource. En fait, nous n'avons qu'une ressource attachable a` un
programme, ce sont les entite's (et les \verb/user_file/, mais ils sont
largement maltraités pour le moment).}

\domain{Status = memory:string + file:string}
{ Le domaine {\tt status} est utilise' par pips-db pour savoir si la
ressource concerne'e peut re'sider en me'moire, auxquel cas elle peut se
trouver soit en me'moire, si elle a e'te' re'clame'e par un processus,
soit sur disque, ou bien si elle est constitue'e d'un fichier, qui n'est
a priori jamais charge'e en me'moire. Dans
ce dernier cas, le sous-domaine {\tt file} donne le nom de ce fichier.
Le nom du fichier doit e^tre relatif au workspace, s'il se trouve dans
le workspace, et doit e^tre absolu, s'il se trouve hors du workspace, de
sorte qu'on puisse faire des \verb+mv+ et des \verb+cp -pr+ sur le workspace.
Si la ressource est en me'moire, le sous-domaine {\tt memory} contient
un pointeur vers cette ressource.

How resources in a file a and file resources differ? It cannot be seen
from this description! The list of the laters is explicitely managed
somewhere in pipsdbm! 
}

\end{document}

