\documentstyle{article}

\input{/usr/share/local/lib/tex/macroslocales/Dimensions.tex}

\title{PIPS: Me'canisme de gestion de la cohe'rence et d'enchai^nement
automatique des phases (pipsmake)}
\author{Franc,ois Irigoin \\
    Pierre Jouvelot \\
    Re'mi Triolet\\
\\
    CAI, Ecole des Mines de Paris}

\newcommand{\domain}[2]{\paragraph{{#1}}\paragraph{}{\em #2}}
\begin{document}
\maketitle
\sloppy

\section*{Introduction}

L'interproce'duralite' et l'interactivite' de PIPS rendent ne'cessaire
la gestion d'informations partielles, lie'es a` un module particulier
et a` une phase particulie`re, qui peuvent e^tre re'utilise'es dans
diffe'rents calculs et lors de plusieurs sessions successives.

L'enchai^nement des calculs de ces informations et les tests de cohe'rence
auraient pu e^tre re'parties dans chacune des phases et analyses de PIPS.
Il a semble' pre'fe'rable de centraliser dans une bibliothe`que la gestion
des de'pendances entre phases et le maintien de la cohe'rence entre
informations.

La bibliothe`que {\tt pipsmake} offre deux points d'entr'e principaux:
{\tt make} et {\tt apply}. Le premier permet d'obtenir une information
particulie`re sans avoir a` se pre'occuper de calculer toutes les
informations qui sont ne'cessaires a` son calcul. Le second permet
l'e'valuation d'une re`gle particulie`re.

Quand plusieurs re`gles permettent de calculer un objet particulier,
un me'canisme d'activation permet de de'finir celle qui doit e^tre
utilise'e. Ceci est indispensable pour pouvoir traiter les appels
re'cursifs qu'entrai^nent les enchai^nements de re`gles sans avoir a`
demander trop d'informations de parame'trage a` l'utilisateur.

Un jeu de re`gles et de ressources particulie`res peuvent e^tre de'finis
statiquement dans un fichier de nom {\tt pipsmake.rc}. La bibliothe`que
{\tt pipsmake} contient des modules permettant de lire un tel fichier
pour initialiser un ensemble de re`gles en me'moire et d'e'crire sur
disque un ensemble de re`gles dans un format compatible avec leur
relecture.

Par de'fault, la premie`re r`egle produisant une ressource quelconque
est active'e. Lorsque plusieurs r`egles sont disponibles pour produire
une me^me ressource, il faut que cette ressource soit l'unique produite
par cette re`gle. Ainsi est-il cohe'rent de changer dynamiquement de
re`gles actives.

Ceci est automatiquement rendu possible par certains interfaces
interactifs  de pips, a` condition que les re`gles disponibles comme
alternatives ainsi que leur ressource produite aient un nom d'alias.

Nous pre'sentons successivement les structures de donne'es utilise'es
pour stocker en m'emoire un ensemble de re'gles
de de'rivation, des re'gles de de'rivation, des ressources virtuelles
et des ressources re'elles.

\section{Ensemble des re`gles de de'rivation}

\domain{Makefile = rules:rule* x active\_phases:string*}
{Le domaine {\tt makefile} est utilise' par le driver de haut niveau
pour de'crire les de'pendances entre les diffe'rentes phases de Pips. Un
{\tt Makefile} est une liste de re`gles ({\tt rule}), chaque re`gle
de'crivant une des phases de Pips. En outre, le {\tt Makefile} donne la
liste des phases qui sont actives a` l'instant pre'sent {\tt
active\_phases}. Rappelons que chaque type de ressources peut
e'ventuellement e^tre produit par diffe'rentes phases, mais qu'une seule
phase est utilisable a` un instant donne'.

Attention, les nouvelles fonctionalite's de production de resources
multiples impliquent une ambiguite' sur la notion de re`gle active;
les re`gles actives pouvant e^tre actives pour un sous-ensemble des
re`gles qu'elles produisent (en particulier dans le cas de re`gles
partiellement cycliques). }

\section{De'finition d'une re`gle particulie`re}

\domain{Rule = phase:string x required:virtual\_resource* x produced:virtual\_resource* x preserved:virtual\_resource* x modified:virtual\_resource* x pre\_transformation:virtual\_resource*}
{Le domaine {\tt rule} permet de de'crire les actions des phases de
  Pips sur les ressources ge're'es par pips-db. Chaque phase
  ne'cessite que certaines ressources soient disponibles ({\tt
    required}), elle commence par effectuer d'e'ventuelles
  transformations ({\tt pre_transformation}), puis produit une ou
  plusieurs ressources ({\tt produced}), et en modifie d'autres ({\tt
    modified}). La diffe'rence entre les ressources produites et
  celles modifie'es permet au driver d'enchainer les phases dans le
  bon ordre.

Les phases de transformation agissent sur le code des modules ce qui
implique ge'ne'ralement que les informations qui de'corent ce module
sont perdues. Pourtant, certaines d'entre-elles font des transformations
si mineures que certaines de'corations sont pre'serve'es ({\tt
preserved}). C'est notamment le cas de la privatisation qui pre'servent
toutes les de'corations. Voici la liste des phases de Pips.
\begin{description}
\item[parser] analyse syntaxique et calcul du graphe de contro^le,
\item[linker] e'dition des liens,
\item[proper-effects] calculs des effets propres des instructions,
\item[cumulated-effects] calculs des effets cumule's des instructions,
\item[usedef] calcul des used-def chains et des def-use chains,
\item[privatizer] privatisation des variables,
\item[dgkennedy] calcul du graphe de de'pendances avec les {\em niveaux de
Kennedy}, 
\item[dgwolfe] calcul du graphe de de'pendances avec les {\em vecteurs
de direction de Wolfe},
\end{description}
}

\section{De'finition d'une ressource virtuelle}

Les ressources virtuelles sont des variables pouvant e^tre instantie'es
en une ressource re'elle ou en une liste de ressource re'elle.

\domain{Virtual\_resource = name:string x owner }
{Le domaine {\tt virtual\_resource} permet de de'signer une ressource
lue ou modifie'e par une phase en pre'cisant en plus de la nature de la
ressource ({\tt datum}) si la ressource acce'de'e est celle attache'e au
module, au programme, aux modules appele's par le module auquel la phase
est applique'e ou a` celui qui l'appelle ({\tt owner}). Voici la liste
de toutes les ressources calculables par Pips.
\begin{description}
\item[source] fichier source Fortran d'un module; re'sultat de
l`initialisation;
\item[code] code d'un module avec graphe de contro^le structure';
re'sultat du controlizer et du parser;
\item[entities] entites du programme; re'sultat de l`initialisation, du
parser et du linker;
\item[callees] modules appele's directement par un module; re'sultat du
linker; 
\item[proper-effects] effets propres des instructions pour un module; le
terme {\em propre} signifie que les effets des blocs des instructions
compose'es (boucles, tests, ...) ne sont pas comptabilise's; re'sultat
de proper-effects; 
\item[cumulated-effects] effets cumule's des instructions pour un
module; le terme {\em cumule'} signifie que les effets des blocs des
instructions compose'es (boucles, tests, ...) sont comptabilise's;
re'sultat de cumulated-effects; 
\item[sdfi] {\em summary data flow information} d'un module; c'est un
re'sume' des effets cumule's de l'instruction bloc du module; re'sumer
les effets consiste a` e'liminer les effets sur les variables locales du
module et, dans le cas des tableaux, a` globaliser chaque effet en y
supprimant les expressions d'indices; re'sultat de cumulated-effects;
\item[chains] {\em use-def} et {\em def-use chains} d'un module;
re'sultat de usedef;
\item[dgkennedy] graphe de de'pendances avec les {\em niveaux de
Kennedy}; 
\item[dgwolfe] graphe de de'pendances avec les {\em vecteurs de direction de
Wolfe};
\end{description}
}

\domain{Owner = \{ program , module , main , callees , callers , all , select \}}
{Le domaine {\tt owner} permet de pre'ciser dans une re`gle de
de'pendances a quels modules sont rattache'es les ressources lues,
e'crites, produites ou pre'serve'es. Ce peut e^tre le module lui-me^me
({\tt module}), les modules appele's par le module auquel la phase est
applique'e ({\tt callees}) ou a` ceux qui l'appelle ({\tt caller}), ou
bien tous les modules du programme conside're' ({\tt all}). Le programme
({\tt program}) lui-me^me caracte`rise en fait un espace de travail
particulier et donc indirectement l'ensemble des modules sur lesquels on
souhaite travailler. Le nom d'un programme n'est ge'ne'ralement pas
de'rive' automatiquement du code source parce qu'on peut tre`s bien
souhaiter de'river plusieurs versions d'un me^me code se'quentiel
original et donner a` chaque version un nom diffe'rent.

Cet attribut supple'mentaire des de'pendances
permet au top-level driver de ge'rer les appels multiples rendus
ne'cessaires par l'interproce'duralite' de Pips et d'e'liminer
l'auto-re'cursion du gestionnaire de la base de donne'es.

\verb+select+ is a fake owner, to be used to select (or activate) rules
from other pipsmake rules. Should only be used with the bang rules?
}

\section{Ressources re'elles}

Les ressources re'elles correspondent a` un ensemble de donne'es particulier
qui a e'te' produit pour un module ou un programme particulier par une
phase particulie`re. Les ressources virtuelles prennent leurs valeurs
parmi ces ressources re'elles, mais les re`gles de de'rivation de
pipsmake sont toujours ge'ne'riques et donc toujours de'finies en terme
de ressources virtuelles.

\domain{Real\_resource = resource\_name:string x owner\_name:string}
{Le domaine {\tt real\_resource} est un domaine prive' pour pipsmake qui
sert a` concre'tiser un ensemble de ressources virtuelles pour un
programme et un module donne's.}

\end{document}
\end
