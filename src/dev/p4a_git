#! /bin/bash

# Script to deal with Par4All repositories

# Display help
function usage()
{
  local status="$1" msg="$2"
  if [[ $msg ]]
  then
    echo -e "message: $msg\n" >&2
  fi
  if [[ $status == 0 || $status == 1 ]]
  then
    echo -e \
      "$script [options] ...\n" \
        "options (displayed in a logical sequential order to apply):\n" \
        "  -h|--help: display the usual help message\n" \
        "  -v|--verbose: be verbose (repeat for more, over 2 is debug)\n" \
        "  -n|--build-new-p4a: chain most following phases to have\n" \
        "     a new p4a source version.\n" \
        "     This option override any other behaviour\n" \
        "  -u|--update-git-svn: update the PIPS git-svn gateways that are\n" \
        "     into \$P4A_TOP/CRI-git-svn\n" \
        "  -g|--recursive-git-svn ...: apply a git command to all the git\n" \
        "     working copies inside the current directory. If no argument\n" \
        "     is given, a git svn rebase is done\n" \
        "  -f|--fetch-remote-git: fetch the objects from the remote git\n" \
        "     repositories (the PIPS git-svn gateways and the polylib git)\n" \
        "  -p|--pull-remote-git: pull the objects from the remote git\n" \
        "     repositories into their respective branches and update the\n" \
        "     p4a branch infrastructure\n" \
        "  -m|--aggregate-branches [<to-prefix> [<origin-prefix>]] : merge\n" \
        "     all the p4a-like branch infrastructure into the <to-prefix> branch\n" \
        "     architecture. If <to-prefix> is null, work into p4a default\n" \
        "     branch infrastructure. If <origin-prefix> is null,\n" \
        "     use the same as <to-prefix>, that means we aggregate\n" \
        "     the <to-prefix> branch infrastructure without using\n" \
        "     external branches. If the <to-prefix> branch infrastructure\n" \
        "     does not exist, it is created from the <origin-prefix> branch\n" \
        "     infrastructure\n" \
        "  -b|--branch-action-name <branch-prefix> args+:\n" \
        "     apply a shell-script to a branch hierarchy with name starting\n" \
        "     with <branch-prefix>. The branch name is available\n" \
        "     in the \$branch variable and the suffix available in\n" \
        "     the \$suffix variable. Do not forget to escape special\n" \
        "     shell characters in the final shell\n" \
        "  -a|--branch-action args+: same as --branch-action-name p4a ...\n" \
        "     to deal with default p4a branch hierarchy\n" \
        "  --add-remotes: create the remotes pointing\n" \
        "      into $P4A_CRI_GIT_SVN and on the polylib" \
        "  -r|--root <directory-name>: create a git repository of this name\n" \
        "     instead of 'par4all'"
  fi
  exit ${status:-1}
}


function enforce_P4A_TOP() {
    if [[ -z "$P4A_TOP" ]] ; then
        cat <<EOF
The P4A_TOP variable is not set.
It should contain the directory name with the Par4All git repository
working copies in it:
- par4all at least
and according to what you want to do, also:
- par4all-priv
- CRI-git-svn/linear
- CRI-git-svn/newgen
- CRI-git-svn/nlpmake
- CRI-git-svn/pips
- CRI-git-svn/validation
EOF
        exit 1
    fi

    # To be changed when the global installation infrastructure is more
    # stable. Be aware that enforce_P4A_TOP may be called more than once
    # and thus this source too...
    if [[ -n $P4A_ETC && -r $P4A_ETC/p4a_git_lib.bash ]]; then
        source $P4A_ETC/p4a_git_lib.bash
    else
        # Try this backup:
        source $P4A_TOP/par4all/src/dev/p4a_git_lib.bash
    fi
}

enforce_P4A_TOP

if [ $# == 0 ]; then
    usage 1 "You should specify an option"
fi

# Get options:
while [ "$1" ] ; do
  opt=$1
  case $opt in
      --) shift ; break ;; # end of option
      -*) shift ;; # one option, processed by next "case"
      *) break ;; # must be an argument, stop option processing...
  esac

  case $opt in
      -h|--help) usage 0 ;;
      -v|--verbose) let verb++ ;;
      # This option override any other behaviour:
      -n|--build-new-p4a) build_new_p4a=1 ;;
      -u|--update-git-svn) update_git_svn=1 ;;
      -g|--recursive-git-svn) recursive_git_action=1 ;;
      -f|--fetch-remote-git) fetch_remote_git=1 ;;
      -p|--pull-remote-git) pull_remote_git=1 ;;
      -m|--aggregate-branches) aggregate_branches=1 ; merge_to_prefix_branches="$1" ; shift ; merge_remote_git_prefix="$2" ; shift ;;
      -a|--branch-action) branch_action_name=p4a ; branch_action="$@" ; break;;
      -b|--branch-action-name) branch_action_name="$1" ; shift; branch_action="$@" ; break;;
      --add-remotes) add_remotes=1 ;;
      -r|--root) P4A_ROOT="$1" ; shift ;;
      # error
      *) usage 1 "unexpected option: $opt"
  esac
done


if (( verb >= 2 )) ; then
    # Put shell tracing on:
    set -vx
fi

if [[ -z "$P4A_ROOT" ]] ; then
    echo "The P4A_ROOT environment variable is not set or you have not use"
    echo "the -r/--root option"
    exit 3
fi

if [[ $build_new_p4a ]]; then
    do_update_CRI_git_svn
    do_fetch_remote_git
    do_pull_remote_git
    do_aggregate_branches
else

    if [[ $update_git_svn ]]; then
        do_update_CRI_git_svn
    fi

    if [[ $fetch_remote_git ]]; then
        do_fetch_remote_git
    fi

    if [[ $pull_remote_git ]]; then
        do_pull_remote_git
    fi

    if [[ $aggregate_branches ]]; then
        do_aggregate_branches $merge_to_prefix_branches $merge_remote_git_prefix
    fi

    if [[ $recursive_git_action ]]; then
        do_recursive_git $@
    fi

   if [[ -n $branch_action_name ]]; then
        do_branch_action_name "$branch_action_name" "$branch_action"
    fi

    if [[ $add_remotes ]]; then
        do_add_remotes
    fi

fi

# Some Emacs stuff:
### Local Variables:
### mode: sh
### mode: flyspell
### ispell-local-dictionary: "american"
### End:
