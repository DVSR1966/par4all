#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Par4All Frontend/Helper Script
'''

import string, sys, os, re, optparse, shutil
#import optparse, subprocess, string, random, shutil, time, pyps
#import p4a_config
from p4a_util import *
from p4a_processor import *

def main():
	'''The function called when this program is executed by its own'''

	global verbosity

	parser = optparse.OptionParser(description = __doc__, usage = "%prog [options] [<files>]", version = "$Id")

	main_group = optparse.OptionGroup(parser, "General Options")

	main_group.add_option("-p", "--project", dest = "project", metavar = "NAME",
		help = "Name for the project (and for the program database). If you do not specify the project, a random name will be used, and the program database will be removed after script execution (unless you say --keep-after).")

	main_group.add_option("--keep", "--keep-after", dest = "keep_after", action = "store_true", default = False,
		help = "Keep database after processing. Useful only when --project is not specified.")

	main_group.add_option("--remove", "--remove-after", dest = "remove_after", action = "store_true", default = False,
		help = "Remove database directory after processing. Cancels --keep-after.")

	main_group.add_option("--remove-first", dest = "remove_first", action = "store_true", default = False,
		help = "Remove existing database if it already exists. Remove existing output files if they already exist, prior to processing.")

	main_group.add_option("--copy", dest = "copy", action = "store_true", default = True,
		help = "Copy output files from database to source files directory, using the \"_p4a\" suffix (default).")

	main_group.add_option("--nocopy", dest = "copy", action = "store_false",
		help = "Cancels --copy.")

	main_group.add_option("--accel", dest = "accel", action = "store_true", default = False,
		help = "Parallelize with output using the Par4All accel run-time that can execute code for various hardware accelerators such as GPU or even OpenMP emulation.")

	main_group.add_option("--cuda", dest = "cuda", action = "store_true", default = False,
		help = "Enable CUDA generation. Implies --accel.")

	main_group.add_option("--include-modules", dest="filter_include", metavar = "REGULAR-EXPRESSION",
		help = "Parallelize only the modules which names match the regular expression.")

	main_group.add_option("--exclude-modules", dest="filter_exclude", metavar = "REGULAR-EXPRESSION",
		help = "Exclude the modules matching the regular expression from the parallelization.")

	main_group.add_option("--openmp", dest = "openmp", action = "store_true", default = False,
		help = "Parallelize with OpenMP output. If combined with the --accel option, generate Par4All accel run-time call with OpenMP implementation instead of native OpenMP output. If --cuda is not specified, this option is set by default.")

	main_group.add_option("--simple", dest = "simple", action = "store_true", default = False,
		help = "This cancels --openmp and --cuda and does a simple transformation (no parallelization): simply parse the code and regenerate it.")

	main_group.add_option("--fine", dest = "fine", action = "store_true", default = False,
		help = "Use a fine-grained parallelization algorithm.")

	main_group.add_option("--coarse", dest = "fine", action = "store_false",
		help = "Use a coarse-grained parallelization algorithm (default).")

	parser.add_option_group(main_group)

	cpp_group = optparse.OptionGroup(parser, "Preprocessing Options")

	cpp_group.add_option("-I", "--include-dir", dest="include_dirs", action = "append", metavar = "DIR", default = [],
		help = "Add an include search directory. Same as the compiler -I option.")

	cpp_group.add_option("-D", "--define", dest="defines", action = "append", metavar = "NAME[=VALUE]", default = [],
		help = "Add a preprocessor define. Same as passing the preprocessor a -D option.")

	cpp_group.add_option("-U", "--undefine", dest="undefines", action = "append", metavar = "NAME", default = [],
		help = "Remove a preprocessor define. Same as passing the preprocessor a -U option.")

	cpp_group.add_option("-f", "--cppflags", dest="cppflags", metavar = "FLAGS", default = "",
		help = "Add other flags for the C preprocessor.")

	parser.add_option_group(cpp_group)

	compile_group = optparse.OptionGroup(parser, "Compilation Options")

	compile_group.add_option("-c", "--compile", "--build", dest = "build", action = "store_true", default = False,
		help = "Compile a simple executable after generation using GCC, unless you specify --cmake. In this case, after the CMakeLists.txt is generated, the project will be built using CMake.")

	compile_group.add_option("-o", "--output-file", dest="output_file", metavar = "FILE", default = "",
		help = "Output file (compiler -o option; defaults to project name in current directory).")

	default_cflags = "-O2"
	compile_group.add_option("--cflags", dest="cflags", metavar = "FLAGS", default = default_cflags,
		help = "Specify flags to pass to the C compiler (default: " + default_cflags + ").")

	compile_group.add_option("--cc", dest="cc", metavar = "COMPILER", default = "",
		help = "C compiler to use (default: gcc or nvcc depending on --cuda).")

	compile_group.add_option("-a", "--extra-file", dest="extra_files", action = "append", metavar = "FILE", default = "",
		help = "Add an additional file for compilation.")

	compile_group.add_option("--link", dest="link", action = "store_true", default = True,
		help = "Call the linker (default).")

	compile_group.add_option("--nolink", dest="link", action = "store_false", default = True,
		help = "Cancels --link.")

	compile_group.add_option("-L", "--lib-dir", dest="lib_dirs", action = "append", metavar = "DIR", default = [],
		help = "Add a library search directory. Same as the linker -L option.")

	compile_group.add_option("-l", "--lib", dest="libs", action = "append", metavar = "LIB", default = [],
		help = "Specify an input library to link against. Same as the linker -l option.")

	default_ldflags = ""
	compile_group.add_option("--ldflags", dest="ldflags", metavar = "FLAGS", default = default_ldflags,
		help = "Specify flags to pass to the linker (default: " + default_ldflags + ").")

	compile_group.add_option("--cmake", dest = "cmake", action = "store_true", default = False,
		help = "Generate a CMakeLists.txt in current directory for compiling the output files.")

	compile_group.add_option("--generator", dest="generator", metavar = "GENERATOR",
		help = "Specify CMake generator to use (-G options for cmake).")

	compile_group.add_option("--exe", dest = "exe", action = "store_true", default = False,
		help = "The CMakeLists.txt should generate an executable binary (default).")

	compile_group.add_option("--noexe", dest = "exe", action = "store_false",
		help = "The CMakeLists.txt should not generate an executable binary.")

	compile_group.add_option("--shared", dest = "shared", action = "store_true", default = False,
		help = "The CMakeLists.txt should generate a shared library.")

	compile_group.add_option("--static", dest = "static", action = "store_true", default = False,
		help = "The CMakeLists.txt should generate a static library.")

	parser.add_option_group(compile_group)

	debug_group = optparse.OptionGroup(parser, "Debugging, Reporting and Internal Options")

	debug_group.add_option("-v", "--verbose", action = "count",
						   dest = "verbosity", default = verbosity,
						   help = "Run in verbose mode (you can have several -v, such as -vvv which will display the most debugging information).")

	debug_group.add_option("-r", "--report", action = "count",
						   dest = "report", default = 0,
						   help = "Display a processing report.")

	debug_group.add_option("--here", dest = "here", action = "store_true", default = False,
		help = "Do not spawn a process to run PIPS and be able to filter out its output, run it here.")

	debug_group.add_option("--nocommand", dest = "nocommand", action = "store_true", default = False,
		help = "Do not execute external commands.")

	#debug_group.add_option("--log", dest = "log", metavar = "FILE",
	#	help = "Log all output to FILE.")

	parser.add_option_group(debug_group)

	(options, args) = parser.parse_args()

	verbosity = options.verbosity

	# Preliminary check.
	if not os.path.exists(os.environ["P4A_ROOT"]) or not os.path.exists(os.environ["P4A_ACCEL_DIR"]):
		die("invalid P4A_* environment variables -- Have you run \"source .../par4all-rc.sh\"?")

	# Check options.
	if len(args) == 0:
		die("missing input files")
	if options.remove_after and options.keep_after:
		die("cannot --remove-after and --keep-after at the same time")
	if options.simple and (options.cuda or options.openmp):
		die("cannot combine --simple with --cuda and/or --openmp")
	
	# Set up defaults.
	if not options.simple and not options.cuda and not options.openmp:
		info("defaulting to --openmp")
		options.openmp = True
	if options.cuda and not options.accel:
		info("enabling --accel")
		options.accel = True

	files = []
	# Make all paths absolute.
	for file in args:
		abs_file = os.path.abspath(file)
		files.append(abs_file)
		info("input file: " + abs_file)

	# Generate C preprocessor flags.
	cppflags = ""
	for i in options.cppflags:
		cppflags += i + " "
	for i in options.include_dirs:
		cppflags += "-I" + i + " "
	for i in options.defines:
		cppflags += "-D" + i + " "
	for i in options.undefines:
		cppflags += "-U" + i + " "
	info("CPP flags: " + cppflags)
	
	processor = p4a_processor(files = files, project_name = options.project, verbose = (verbosity != 0), cppflags = cppflags, 
		filter_include = options.filter_include, filter_exclude = options.filter_exclude, accel = options.accel)
	
	processor.parallelize(options.fine)
	
	if options.cuda:
		processor.gpuify()
	if options.openmp:
		processor.ompify()

	processor.save()

if __name__ == "__main__":
	main()

# Some Emacs stuff:
### Local Variables:
### mode: python
### mode: flyspell
### ispell-local-dictionary: "american"
### tab-width: 4
### End:
