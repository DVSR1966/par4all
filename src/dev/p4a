#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Par4All Frontend/Helper Script
'''

import string, sys, os, re, optparse, shutil
#import optparse, subprocess, string, random, shutil, time, pyps
#import p4a_config
from p4a_util import *
from p4a_processor import *

def main():
	'''The function called when this program is executed by its own'''

	parser = optparse.OptionParser(description = __doc__, usage = "%prog [options] [<files>]", version = "$Id")

	main_group = optparse.OptionGroup(parser, "General Options")

	main_group.add_option("--project-name", "--project", "-p", metavar = "NAME", default = None,
		help = "Name for the project (and for the program database). If you do not specify the project, a random name will be used.")

	main_group.add_option("--keep-database", "--keep", "-k", action = "store_true", default = False,
		help = "Keep database directory after processing.")

	main_group.add_option("--remove-first", "--remove", "-r", action = "store_true", default = False,
		help = "Remove existing database and output files if they already exists.")

	main_group.add_option("--verbose", "-v", action = "count", default = get_verbosity(),
		help = "Run in verbose mode (you can have several -v, such as -vvv which will display the most debugging information).")

	parser.add_option_group(main_group)
	
	proc_group = optparse.OptionGroup(parser, "Processing Options")

	proc_group.add_option("--accel", "-A", action = "store_true", default = False,
		help = "Parallelize with output using the Par4All accel run-time that can execute code for various hardware accelerators such as GPU or even OpenMP emulation.")

	proc_group.add_option("--cuda", "-C", action = "store_true", default = False,
		help = "Enable CUDA generation. Implies --accel.")

	proc_group.add_option("--openmp", "-O", action = "store_true", default = False,
		help = "Parallelize with OpenMP output. If combined with the --accel option, generate Par4All accel run-time call with OpenMP implementation instead of native OpenMP output. If --cuda is not specified, this option is set by default.")

	proc_group.add_option("--simple", "-S", dest = "simple", action = "store_true", default = False,
		help = "This cancels --openmp and --cuda and does a simple transformation (no parallelization): simply parse the code and regenerate it.")

	proc_group.add_option("--fine", "-F", action = "store_true", default = False,
		help = "Use a fine-grained parallelization algorithm instead of a coarse-grained one.")

	proc_group.add_option("--include-modules", metavar = "REGEXP", default = None,
		help = "Process only the modules which names match the regular expression.")

	proc_group.add_option("--exclude-modules", metavar = "REGEXP", default = None,
		help = "Exclude the modules matching the regular expression from the parallelization.")

	parser.add_option_group(proc_group)

	cpp_group = optparse.OptionGroup(parser, "Preprocessing Options")

	cpp_group.add_option("-I", dest="include_dirs", action = "append", metavar = "DIR", default = [],
		help = "Add an include search directory. Same as the compiler -I option.")

	cpp_group.add_option("-D", dest="defines", action = "append", metavar = "NAME[=VALUE]", default = [],
		help = "Add a preprocessor define. Same as passing the preprocessor a -D option.")

	cpp_group.add_option("-U", dest="undefines", action = "append", metavar = "NAME", default = [],
		help = "Remove a preprocessor define. Same as passing the preprocessor a -U option.")

	cpp_group.add_option("--cppflags", metavar = "FLAGS", default = "",
		help = "Add other flags for the C preprocessor.")

	parser.add_option_group(cpp_group)

	(options, args) = parser.parse_args()

	set_verbosity(options.verbose)

	# Preliminary check.
	if not os.path.exists(os.environ["P4A_ROOT"]) or not os.path.exists(os.environ["P4A_ACCEL_DIR"]):
		die("invalid P4A_* environment variables -- Have you run \"source .../par4all-rc.sh\"?")

	# Check options and set up defaults.
	if len(args) == 0:
		die("missing input files")
	if options.simple and (options.cuda or options.openmp):
		die("cannot combine --simple with --cuda and/or --openmp")
	if not options.simple and not options.cuda and not options.openmp:
		info("defaulting to --openmp")
		options.openmp = True
	if options.cuda and not options.accel:
		info("enabling --accel")
		options.accel = True

	files = []
	# Make all paths absolute.
	for file in args:
		abs_file = os.path.abspath(file)
		files.append(abs_file)
		debug("input file: " + abs_file)

	# Generate C preprocessor flags.
	cppflags = ""
	for i in options.cppflags:
		cppflags += i + " "
	for i in options.include_dirs:
		cppflags += "-I" + i + " "
	for i in options.defines:
		cppflags += "-D" + i + " "
	for i in options.undefines:
		cppflags += "-U" + i + " "
	info("CPP flags: " + cppflags)
	
	processor = p4a_processor(files = files, project_name = options.project_name, verbose = (verbosity != 0), cppflags = cppflags, 
		filter_include = options.include_modules, filter_exclude = options.exclude_modules, accel = options.accel)

	processor.parallelize(options.fine)
	
	if options.cuda:
		processor.gpuify()
	if options.openmp:
		processor.ompify()

	processor.save()
	
	if not options.keep_database:
		database_dir = os.path.abspath(processor.workspace.dir())
		debug("removing " + database_dir)
		shutil.rmtree(database_dir)

if __name__ == "__main__":
	main()

# Some Emacs stuff:
### Local Variables:
### mode: python
### mode: flyspell
### ispell-local-dictionary: "american"
### tab-width: 4
### End:
