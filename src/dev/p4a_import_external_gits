#! /bin/bash -vx

# Add remotes for git instances:
# - the SVN PIPS-related repositories from Mines ParisTech/CRI
# - the PolyLib library from Strasbourg University/ICPS

# Display help
function usage()
{
  local status=$1 msg=$2
  if [[ $msg ]]
  then
    echo -e "message: $msg\n" >&2
  fi
  if [[ $status == 0 || $status == 1 ]]
  then
    echo -e \
      "$script [options] ...\n" \
	"options (displayed in a logical sequential order to apply):\n" \
	"  -r|--root <directory-name>: create a git repository of this name\n" \
	"     instead of 'par4all'"
  fi
  exit ${status:-1}
}

function enforce_P4A_TOP() {
    if [[ -z "$P4A_TOP" ]] ; then
	cat <<EOF
The P4A_TOP variable is not set.
It should contain the directory name with the Par4All git repository
working copies in it:
- par4all at least
and according to what you want to do, also:
- par4all-priv
- CRI-git-svn/linear
- CRI-git-svn/newgen
- CRI-git-svn/nlpmake
- CRI-git-svn/pips
- CRI-git-svn/validation
EOF
	exit 1
    fi
    # To be change when the global installation infrastructure is more stable:
    if [[ -n $P4A_ETC/p4a_git_lib.bash ]]; then
	source $P4A_ETC/p4a_git_lib.bash
    else
	source $P4A_TOP/par4all/src/dev/p4a_git_lib.bash
    fi
}

enforce_P4A_TOP


# Get options:
while [ "$1" ] ; do
  opt=$1
  case $opt in
      --) shift ; break ;; # end of option
      -*) shift ;; # one option, processed by next "case"
      *) break ;; # must be an argument, stop option processing...
  esac

  case $opt in
      -h|--help) usage 0 ;;
      -v|--verbose) let verb++ ;;
      -r|--root) P4A_ROOT=$1 ; shift ;;
      # error
      *) usage 1 "unexpected option: $opt"
  esac
done

# Since everything is touchy, stop if anything fails:
stop_on_error

if (( $verb >= 2 )) ; then
    # Put shell tracing on:
    set -vx
fi

cd $P4A_ROOT

COMMIT_MESSAGE_FILE=`mktemp`

# Create the remote/CRI/<repository>
function import_git() {
    # Get the function parameters:
    MODULE=$1
    TRACKING_BRANCH=$2
    REMOTE_NAME=$3
    REMOTE_GIT_URL=$4
    TARGET_LOCAL_DIR=$5
    BRANCH_TO_IMPORT=import

    # Save the branch we are into:
    get_current_git_branch

    # Create a branch with a reflog representing the remote component by
    # its own directly into the "initial" branch that should point to the
    # first commit of the Par4All git repository:
    git branch -l p4a-$MODULE initial

    echo Add the git svn as remote git repository:
    git remote add $REMOTE_NAME $REMOTE_GIT_URL

    echo Fetch the history:
    git fetch $REMOTE_NAME

    echo Create the tracking branches:
    git branch $TRACKING_BRANCH $REMOTE_NAME/master
    git branch $TRACKING_BRANCH-$BRANCH_TO_IMPORT $REMOTE_NAME/$BRANCH_TO_IMPORT

    # Jump into the reserved branch to this module:
    git checkout p4a-$MODULE

    echo Extract a copy of the files of the remote repository into the local
    echo repository at packages/PIPS, merge it and update the files in the work
    echo tree:
    git read-tree --prefix=$TARGET_LOCAL_DIR -u $TRACKING_BRANCH-$BRANCH_TO_IMPORT

    # Build the merging message:
    echo "Merging from git-svn remotes/$REMOTE_NAME into $TARGET_LOCAL_DIR that is:" > $COMMIT_MESSAGE_FILE

    # Get the last commit message from the remote to branch from:
    git log -n 1 remotes/$REMOTE_NAME/$BRANCH_TO_IMPORT >> $COMMIT_MESSAGE_FILE

    # Commit with the built merging message:
    git commit --file=$COMMIT_MESSAGE_FILE

    echo Connect the SVN history to this one by fetching it and merging it with
    echo "the 'ours' strategy (since what we want is what we've just built up"
    echo  above into something like packages/PIPS and not also at the top level
    echo " as each individual svn repository):"
    git pull --strategy=ours $REMOTE_NAME $BRANCH_TO_IMPORT

    rm $COMMIT_MESSAGE_FILE

    # This first import is indeed the Par4All 0.1-alpha component:
    git branch p4a-0.1-alpha-$MODULE p4a-$MODULE

    # Revert to previous branch
    revert_current_git_branch
}


# Create the remote/CRI/<repository> from <repository> given as parameter:
function import_PIPS_git_svn() {
    # Import from $P4A_CRI_GIT_SVN/<repository> URL as remote name
    # CRI/<repository> into packages/PIPS/<repository> local directory
    if [ $1 = nlpmake ]; then
	# nlpmake has a more chaotic story since at the beginning it was a
	# flat SVN repository and later it was reorganized as trunk,
	# branches and tags. So first import the first part:
	import_git $1 CRI-$1-all CRI/$1-all $P4A_CRI_GIT_SVN/$1-all packages/PIPS/$1
	# Then add the trunk story of nlpmake:
	MODULE=$1
	TRACKING_BRANCH=CRI-$1
	REMOTE_NAME=CRI/$1
	REMOTE_GIT_URL=$P4A_CRI_GIT_SVN/$1
	TARGET_LOCAL_DIR=packages/PIPS/$1
	BRANCH_TO_IMPORT=import

        # Save the branch we are into:
	get_current_git_branch

	echo Add the git svn as remote git repository:
	git remote add $REMOTE_NAME $REMOTE_GIT_URL

	echo Fetch the history:
	git fetch $REMOTE_NAME

	echo Create the tracking branches:
	git branch $TRACKING_BRANCH $REMOTE_NAME/master
	git branch $TRACKING_BRANCH-$BRANCH_TO_IMPORT $REMOTE_NAME/$BRANCH_TO_IMPORT

        # Jump into the reserved branch to this module:
	git checkout p4a-$MODULE
	# There are conflicts if we merge with a recent version, so we
	# first merge the nlpmake trunk just after the move into the
	# trunk:
	git pull --log --strategy=subtree $REMOTE_NAME trunk
	# And the merge the recent part of the nlpmake history:
	git merge --log --strategy=subtree $TRACKING_BRANCH-$BRANCH_TO_IMPORT
        # This first import is indeed the Par4All 0.1-alpha
        # component. Override the branch done by the previous import_git:
	git branch -f p4a-0.1-alpha-$MODULE p4a-$MODULE
    else
        # Put the import and merge in a specific branch
	import_git $1 CRI-$1 CRI/$1 $P4A_CRI_GIT_SVN/$1 packages/PIPS/$1
    fi
}

### To import a branch from PIPS :
# import_git CRI/pips-gfc ../CRI-git-svn/roosz-pips-gfc packages/pips-gfc/gcc/fortran

# Add the PIPS git svn repositories to Par4All:
for i in $PIPS_MODULES; do
    import_PIPS_git_svn $i
done

# http://icps.u-strasbg.fr/polylib
# Create a branch pointing to the polylib import:
# Add the PolyLib git repository to Par4All in the packages/polylib
# directory as the polylib remote:
#import_git polylib git://repo.or.cz/polylib.git packages/polylib
import_git polylib ICPS-polylib ICPS/polylib $P4A_TOP/polylib packages/polylib

echo 'Do not forget to use "merge -s subtree" when getting new CRI stuff later'
echo "For example you can get the last upstream version with:"
for i in $SVN_REPOSITORIES; do
    echo "    git fetch CRI/$i"
    echo "    git merge -s subtree CRI/$i/master"
done
echo "    git fetch polylib"
echo "    git merge -s subtree polylib/master"
echo "or better use the p4a_git scripts"

# Some Emacs stuff:
### Local Variables:
### mode: sh
### mode: flyspell
### ispell-local-dictionary: "american"
### End:
