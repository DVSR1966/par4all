#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Authors:
# - Grégoire Péan <gregoire.pean@hpc-project.com>
#

'''

Par4All setup script.

XXX: on Ubuntu/Debian you need to have these packages installed for building:

sudo aptitude install libc6 python libncurses5 libreadline5 subversion cproto build-essential bison flex libreadline5-dev libtool autoconf \
libmcrypt-dev libmcrypt4 cproto indent gfortran fort77 tex4ht texlive-latex-extra swig git-core python-ply \
automake python-dev libgmp3-dev libmpfr-dev

# For non working GUIs...: emacs23 tk8.5 sun-java6-jdk 

And for running:
sudo aptitude install libc6 libncurses5 libreadline5 python python-ply libmcrypt4 build-essential gfortran fort77

'''

import string, sys, os, re, optparse, tempfile, shutil
from p4a_util import *
from p4a_rc import *
from git import *

actual_script = os.path.abspath(os.path.realpath(os.path.expanduser(__file__)))
script_dir = os.path.split(actual_script)[0]

default_root = ""
if os.path.split(script_dir)[1] == "bin":
	default_root = os.path.normpath(os.path.join(script_dir, ".."))
else:
	default_root = os.path.normpath(os.path.join(script_dir, "..", ".."))


def build_package():
	pass
	

def main():
	'''The function called when this program is executed by its own.'''

	parser = optparse.OptionParser(description = __doc__, usage = "%prog [options] [<files>]", version = guess_file_revision(__file__))

	main_group = optparse.OptionGroup(parser, "General Options")

	main_group.add_option("--update", "-u", action = "store_true", default = False,
		help = "Simply update the external packages (you can see this as a 'git pull' or 'svn update').")
	
	main_group.add_option("--build", "-b", action = "store_true", default = False,
		help = "Simply build the packages, do not update them/check them out.")

	main_group.add_option("--install", "-i", action = "store_true", default = False,
		help = "Install the local scripts and external packages binaries in the destination directory (see --install-dir).")

	main_group.add_option("--skip-polylib", "--sp", action = "store_true", default = False,
		help = "Skip the polylib library in the process or updating and building.")

	main_group.add_option("--skip-newgen", "--sn", action = "store_true", default = False,
		help = "Skip the newgen library in the process or updating and building.")

	main_group.add_option("--skip-linear", "--sl", action = "store_true", default = False,
		help = "Skip the linear library in the process or updating and building.")
	
	main_group.add_option("--skip-pips", "--sP", action = "store_true", default = False,
		help = "Skip PIPS in the process or updating and building.")
	
	global default_root
	main_group.add_option("--root", "-r", metavar = "DIR", default = None,
		help = "Specify the directory for the Par4All source tree. If the P4A_ROOT environment variable is currently defined, it will be used. Otherwise, the default is to use the source tree from which this script comes: " + default_root)
	
	main_group.add_option("--install-dir", "-I", metavar = "DIR", default = None,
		help = "Specify the installation directory. By default, it is <root>/run.")
	
	main_group.add_option("--prefix", "-p", metavar = "DIR", default = None,
		help = "Specify the prefix used to configure the packages. By default, it is the same as --install-dir.")
	
	main_group.add_option("--verbose", "-v", action = "count", default = get_verbosity(),
		help = "Run in verbose mode (you can have several -v, such as -vvv which will display the most debugging information).")
	
	parser.add_option_group(main_group)

	(options, args) = parser.parse_args()

	set_verbosity(options.verbose)
	
	if not options.update and not options.build and not options.install:
		warn("defaulting to --update --build --install")
	
	root = ""
	if options.root:
		root = options.root
	elif "P4A_ROOT" in os.environ:
		root = os.environ["P4A_ROOT"]
	else:
		root = default_root
	if not os.path.isdir(root):
		die("invalid root directory: " + root)
	info("Par4All source root (P4A_ROOT): " + root)
	
	install_dir = ""
	if options.install_dir:
		install_dir = options.install_dir
	else:
		install_dir = os.path.join(root, "run")
	if not os.path.isdir(install_dir):
		debug("create install dir: " + install_dir)
		os.makedirs(install_dir)
	info("install dir: " + install_dir)
	
	prefix = ""
	if options.prefix:
		prefix = options.prefix
	else:
		prefix = install_dir
	info("prefix: " + install_dir)
	if prefix != install_dir:
		warn("prefix and install dir are different, make sure the final installation directory is " + prefix)
	
	build_dir = os.path.join(root, "build")
	info("build dir: " + build_dir)
	
	pips_src_dir = os.path.join(root, "packages/PIPS/pips")
	info("pips src dir: " + pips_src_dir)
	
	nlpmake_src_dir = os.path.join(root, "packages/PIPS/nlpmake")
	info("nplmake src dir: " + nlpmake_src_dir)
	
	if options.update:
		pass
	
	
	if options.build:
		if os.path.isdir(install_dir):
			rmtree(build_dir)
		os.makedirs(build_dir)
	
	if options.install:
		info("creating dirs")
		install_dir_bin = os.path.join(install_dir, "bin")
		os.makedirs(install_dir_bin)
		install_dir_etc = os.path.join(install_dir, "etc")
		os.makedirs(install_dir_etc)
		install_dir_lib = os.path.join(install_dir, "lib")
		os.makedirs(install_dir_lib)
		install_dir_share = os.path.join(install_dir, "share/p4a_accel")
		os.makedirs(install_dir_share)
		install_dir_makes = os.path.join(install_dir, "makes")
		os.makedirs(install_dir_makes)
		
		info("installing scripts")
		for file in [ "src/dev/p4a_git", "src/dev/p4a_valgrind", 
			"src/simple_tools/p4a",
			"src/postprocessor/p4a_recover_includes",
			"src/validation/p4a_validate", "src/validation/p4a_validation",
			"src/p4a_accel/p4a_post_processor.py" ]:
			debug(os.path.join(root, file) + " -> " + install_dir_bin)
			shutil.copy(os.path.join(root, file), install_dir_bin)
		for file in [ "src/dev/p4a_git_lib.bash" ]:
			debug(os.path.join(root, file) + " -> " + install_dir_etc)
			shutil.copy(os.path.join(root, file), install_dir_etc)
		
		info("installing accel files")
		debug(run2([ "cp", "-av", os.path.join(root, "src/p4a_accel/*.{h,c,cu,f,mk}"), install_dir_share ])[0])
		
		info("copying python libs")
		debug(run2([ "cp", "-av", os.path.join(root, "src/simple_tools/*.{py,tpl}"), install_dir_lib ])[0])
		
		info("installing pips scripts")
		# Stuff still lacking from PIPS install:
		debug(run2([ "cp", "-av", os.path.join(pips_dir, "src/Scripts/validation/pips*"), install_dir_bin ])[0])
		debug(run2([ "cp", "-av", os.path.join(pips_dir, "src/Scripts/misc/logfile_to_tpips"), install_dir_bin ])[0])
		
		info("fix validation")
		debug(run2([ "cp", "-av", os.path.join(nlpmake_src_dir, "makes/{arch.sh,version.sh}"), install_dir_makes ])[0])
		
		info("writing shell rc files")
		# XXX: fortran
		p4a_write_rc(install_dir_etc, dict(root = root, dist = install_dir, accel = os.path.join(root, "src/p4a_accel"), fortran = "gfortran"))		
		
		info("writing version file")
		dump(os.path.join(install_dir, "lib", "p4a_version"), guess_file_revision(root))
		

if __name__ == "__main__":
	main()

# Some Emacs stuff:
### Local Variables:
### mode: python
### mode: flyspell
### ispell-local-dictionary: "american"
### tab-width: 4
### End:
