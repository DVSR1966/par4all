

add[3] {
	simd_add8: 8,8;
	simd_add4: 4,16;
	simd_add2: 2,32;
}

multiply[3] {
	simd_mul8: 8,8;
	simd_mul4: 4,16;
	simd_mul2: 2,32;
}

divide[3] {
	simd_div8: 8,8;
	simd_div4: 4,16;
	simd_div2: 2,32;
}

substract[3] {
	simd_sub8: 8,8;
	simd_sub4: 4,16;
	simd_sub2: 2,32;
}

assign[2] {
	simd_mov: 8,8;
	simd_mov: 4,16;
	simd_mov: 2,32;
}

oppose[2] {
	simd_opp8: 8,8;
	simd_opp4: 4,16;
	simd_opp2: 2,32;
}


add: = REFERENCE + REFERENCE REFERENCE ;
add: = REFERENCE + REFERENCE CONSTANT ;
add: = REFERENCE + CONSTANT REFERENCE ;
add: = REFERENCE REFERENCE : ,,0 ;

multiply: = REFERENCE * REFERENCE REFERENCE ;
multiply: = REFERENCE * CONSTANT REFERENCE ;
multiply: = REFERENCE * REFERENCE CONSTANT ;
multiply: = REFERENCE REFERENCE : ,,1 ;

divide: = REFERENCE / REFERENCE REFERENCE ;
divide: = REFERENCE / REFERENCE CONSTANT ;
divide: = REFERENCE / CONSTANT REFERENCE ;
divide: = REFERENCE INVERSE REFERENCE : ,1, ;
divide: = REFERENCE REFERENCE : ,,1 ;

substract: = REFERENCE - REFERENCE REFERENCE ;
substract: = REFERENCE - REFERENCE CONSTANT ;
substract: = REFERENCE - CONSTANT REFERENCE ;
substract: = REFERENCE UNARY_MINUS REFERENCE : ,0, ;
substract: = REFERENCE REFERENCE : ,,0 ;

assign: = REFERENCE REFERENCE ;

oppose: = REFERENCE UNARY_MINUS REFERENCE ;
