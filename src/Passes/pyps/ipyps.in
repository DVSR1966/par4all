#! @PYTHON@
# -*- coding: utf-8 -*-


"""iPyPS -- An enhanced Interactive Python front-end to PIPS

This is inspired by the ipython script to lauch iPyPs instead of iPython

Ronan.Keryell@hpc-project.com
"""

# Load IPython:
from IPython.Shell import IPShellEmbed
import IPython.ipapi

import sys

# Load PyPS:
from pyps import *



# Inject line arguments to set the default prompt to something with iPyPS:
sys.argv[1:1] = [ '-prompt_in1', 'iPyPS [\#]: ']
#print sys.argv

banner = """Welcome to iPyPS, the interactive Python PIPS environment shell

?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object'. ?object also works, ?? prints more.

workspace -> the method to start with a PIPS workspace,
              a program database to work on;
module    -> to manipulate a PIPS module (a function, a procedure);
modules   -> to manipulate a set of PIPS modules.
%load     -> load and execute a PyPS file
"""

# Create an embedded shell to inherit pyps current namespace into the
# interactive one. I guess there is a more direct way...
ipshell = IPShellEmbed(banner = banner)

def load_pyps(self, filename):
    "Load and execute a PyPS file"

    try:
        exec(open(filename).read())
    # To avoid crashing iPython if something goes wrong:
    except Exception, e:
        # Display the error message:
        print e

# Add a new magic function:
ip = IPython.ipapi.get()

ip.expose_magic('load', load_pyps)

# Call the iPython shell itself:
ipshell()
