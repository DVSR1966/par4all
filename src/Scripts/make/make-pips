#! /bin/sh -x
#! /bin/sh -vx
#
# SCCS stuff:
# $RCSfile: make-pips,v $ ($Date: 1995/10/09 10:46:28 $, )
# version $Revision$
# got on %D%, %T%
#

umask 2

# make-pips: global remake of PIPS libraries and passes to be used after
# changes in data structures or global installation of sources.
#
# recompile-pips replaced by make-pips -r (bb, 16.10.91)

# Options are available:
#  -n: do nothing but show what would be done
#  -p: take care of Production (default)
#  -d: take care of Development
#  -a: do everything (Production + Development)
#  -r: recompile (for global installation of sources)

# X, Francois Irigoin, Corinne Ancourt

# Modifications:
#  - variable FAILURES is added to check the happy ending (FI, 18/07/92)

USAGE="Usage: $0 [-p|d|a|r] [-n] [-o]"

MAKE_OPTION=""
DEVELOPMENT=""
PRODUCTION=TRUE
RECOMPILE=""
FAILURES=""
KEEP_STDOUT=""

while getopts odnpar opt
do
	case $opt in
	o)	KEEP_STDOUT=TRUE;;
	d)	DEVELOPMENT=TRUE
		PRODUCTION="";;
	n)	MAKE_OPTION="-n";;
	p)	PRODUCTION=TRUE
		DEVELOPMENT="";;
	a)	DEVELOPMENT=TRUE
		PRODUCTION=TRUE;;
	r)	RECOMPILE=TRUE;;
	\?)	echo $USAGE >&2
		exit 2;;
	esac
done

#echo PRODUCTION="$PRODUCTION"
#echo DEVELOPMENT="$DEVELOPMENT"
#echo MAKE_OPTION="$MAKE_OPTION"

# Prepare file redirections
if [ -n "$KEEP_STDOUT" ]
then
	REDIRECT=""
else
	REDIRECT=" > /dev/null"
fi

# Pips project passes
# Explicit definition of passes to avoid obsolete ones

PASSES=${PIPS_PASSES}

# Pips project libraries:
# Libs have to be topologically ordered to generate header files before
# they are needed; 
# Library order does usualy not matter. In order not to forget any:
# GO : ordering allow making of the .h files - if there where no cycles ... :-(
#
#LIBS=`(cd $PIPS_LIBSRCDIR; echo [!M]*)`

echo analyzing libraries ...
#analyze_libraries -p

echo ordering libraries ...
order_libraries -b

#build a regexp to avoid passes in libs

AVOID_PASSES='(^'
for lib in $PASSES ; do
	AVOID_PASSES="${AVOID_PASSES}${lib}\$|^"
done
AVOID_PASSES="${AVOID_PASSES}\$)"

#echo AVOID_PASSES=${AVOID_PASSES}

# Get the lib list
LIBS=`sed 's/^lib//;s/.a$//' ${PIPS_TEMPDIR}/libs.b | egrep -v ${AVOID_PASSES}`

echo LIBS=$LIBS

# build internal representation
# echo "Making internal representation"
# (cd ${INCLUDEDIR} ; make internal_representation)

# build .a file for all libraries in Production
if [ -n "$PRODUCTION" ]
then

if [ -n "$RECOMPILE" ]
then
	echo Cleaning libraries ...
	for lib in $LIBS ; do
		(cd ${PIPS_LIBSRCDIR}/${lib}; 
			eval make $MAKE_OPTION clean $REDIRECT
			eval make $MAKE_OPTION depend $REDIRECT)
		if [ $? -ne 0 ] ; then
			echo "Failed in cleaning library $lib in Production"
			FAILURES="$FAILURES $lib (clean - P),"
		fi
	done
fi

for lib in $LIBS ; do
	echo
	(echo cd ${PIPS_LIBSRCDIR}/${lib} ; cd ${PIPS_LIBSRCDIR}/${lib}; 
		echo "Making ${PIPS_LIBDIR}/lib${lib}.a"
		eval make $MAKE_OPTION recompile $REDIRECT)
	if [ $? -ne 0 ] ; then
		echo "Failed in building library $lib in Production"
		FAILURES="$FAILURES $lib (P),"
	fi
done

fi

# build .a file for all libraries in Development
if [ -n "$DEVELOPMENT" ]
then
for lib in $LIBS ; do
	echo; echo
	(echo cd ${PIPS_DEVEDIR}/Lib/${lib}; cd ${PIPS_DEVEDIR}/Lib/${lib}; 
		echo "Making lib${lib}.a"
		eval make $MAKE_OPTION recompile $REDIRECT)
	if [ $? -ne 0 ] ; then
		echo "Failed in building library $lib in Development"
		FAILURES="$FAILURES $lib (D),"
	fi
done
fi

# build passes
if [ -n "$PRODUCTION" ]
then
	if test ! -d ${PIPS_BINDIR}
	then
		mkdir ${PIPS_BINDIR}
	fi
	if [ -n "$RECOMPILE" ]
	then
		echo Cleaning passes...
		for pass in $PASSES ; do
			(cd ${PIPS_BINSRCDIR}/${pass}; 
				eval make $MAKE_OPTION clean $REDIRECT
				eval make $MAKE_OPTION depend $REDIRECT)
			if [ $? -ne 0 ] ; then
				echo " Failed in building ${PIPS_BINDIR}/${pass}"
				FAILURES="$FAILURES $pass (clean - P),"
			fi
		done
	fi

	for pass in $PASSES ; do
		echo; echo
		(echo cd ${PIPS_BINSRCDIR}/${pass}; cd ${PIPS_BINSRCDIR}/${pass}; 
			echo "Making ${PIPS_BINDIR}/${pass}"
			eval make $MAKE_OPTION recompile $REDIRECT)
		if [ $? -ne 0 ] ; then
			echo " Failed in building ${PIPS_BINDIR}/${pass}"
			FAILURES="$FAILURES $pass (P),"
		fi
	done
fi

# build passes
if [ -n "$DEVELOPMENT" ]
then
for pass in $PASSES ; do
	echo; echo
	(echo cd ${PIPS_DEVEDIR}/Passes/${pass} ; cd ${PIPS_DEVEDIR}/Passes/${pass};
		echo "Making ${pass}"
		eval make $MAKE_OPTION recompile $REDIRECT)
	if [ $? -ne 0 ] ; then
		echo " Failed in building pass $pass in Development"
		FAILURES="$FAILURES $pass (D),"
	fi
done
fi

echo Failures: $FAILURES

