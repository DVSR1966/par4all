#! /bin/sh
#
# $RCSfile: make_pips_release,v $ (version $Revision$)
# $Date: 1997/03/27 15:14:40 $, 
#
# (c) Fabien COELHO 1996

unset pack what dotar dozip zip name tostrip strip install addpublic

tar=${PIPS_TAR:-gtar}
taropt=cf
zip=${PIPS_ZIP:-"gzip -v9"}
verb=:
cwd=`pwd`

verbose()
{ echo "$RCSfile: make_pips_release,v $: $@" >&2;}

error()
{ ret=$1; shift; verbose "$@"; exit $ret;}

usage()
{
    ret=$1
    shift
    cat <<-EOF
	$RCSfile: make_pips_release,v $ (version $Revision$): $@
	usage: $RCSfile: make_pips_release,v $ [options] name
	  misc:
	    -h: this help
	    -v: verbose
	    -r: add proper installation and readme files in the root
	    -s: strip binaries
	    -t: tar
	    -z: tar and zip
	    -w: additional options for make_release
	        (e.g. -w -e to enable manual editing of the list of files)
	  release content:
	    -C: common (Share Doc Examples)
	    -S: add sources (Include, Src [but not Public], Utils)
	    -D dir: add directory dir (Validation?)
	    -B arch: add binaries for arch (Runtime Bin/arch)
	    -L arch: add libraries for arch (Lib/arch)
	  software:
	    -p: Pips
	    -n: Newgen
	    -l: Linear
	    -e: Extern (other softs...)
	    -P: Public (daVinci, toolpack)
	  name: target (a date & content-dependent default is provided)
	EOF
    exit $ret
}

#
# get options

while getopts hvrstzw:CSB:L:D:pnleP opt
do
    case $opt in
	h) usage 0 some help ;;
	v) verb=verbose ; what="$what -v" ; taropt=cvf ;;
	r) install='1' ;;
	s) strip='strip' ;;
	t) dotar=1 ;;
	z) dotar=1 ; dozip=1 ;;
	w) what="$what $OPTARG" ;;
	C) what="$what -d Share -d Doc -d Examples" ;
	   name="${name}C" ;;
	S) what="$what -s Src -d Include -d Utils" ; 
	   name="${name}S" ;;
	B) what="$what  -d Runtime -d Bin/$OPTARG" ;
	   name="${name}B$OPTARG" ;
	   tostrip="$tostrip Bin/$OPTARG" ;;
	L) what="$what -d Lib/$OPTARG" ; name="${name}L$OPTARG" ;;
	D) what="$what -d $OPTARG"  ; name="${name}D" ;;
	p) pack="$pack PIPS" ; name="${name}p" ;;
	n) pack="$pack NEWGEN" ; name="${name}n" ;;
	l) pack="$pack LINEAR" ; name="${name}l" ;;
	e) pack="$pack EXTERN" ; name="${name}e" ;;
	P) addpublic="$TOOLPACK_DIR $DAVINCIHOME" ; name="${name}P" ;;
	*) usage 1 "invalid option -$opt" ;;
    esac
done

shift `expr $OPTIND - 1 `

# default: //"%H""%M""%S"
name=${1:-pips_${name}_`date +"%y""%m""%d"`}

$verb "target release name: $name"

test -d $name || mkdir $name || error 2 "cannot create directory $name"

#
# get the files

$verb getting ${pack}:
for p in $pack
do
    #
    # set the parameters
    case $p in
	PIPS)   root=$PIPS_ROOT   ; trg=$cwd/$name/Pips   ;;
	NEWGEN) root=$NEWGEN_ROOT ; trg=$cwd/$name/Newgen ;;
	LINEAR) root=$LINEAR_ROOT ; trg=$cwd/$name/Linear ;;
	EXTERN) root=$EXTERN_ROOT ; trg=$cwd/$name/Extern ;;
	TOOLPACK) root=$TOOLPACK_DIR ; trg=$cwd/$name/Toolpack ;;
    esac

    #
    # copy directories
    $verb "packing for $p ($root) in $trg:"
    $verb "what=$what"
    make_release -v -r $root -t $trg $what || 
	error 3 "make_release returned $?"

    #
    # strip if required
    test "$tostrip" -a "$strip" &&
    {
	$verb stripping binaries
	for d in $tostrip ; do $strip $trg/$d/* ; done
    }
done


#
# Get public directory in a raw fashion, unstripped any way:
$verb getting raw ${addpublic}:
for p in ${addpublic}
do
    (cd `dirname $p`; gtar cf - `basename $p`) | (cd $cwd/$name; gtar xf -)
done

#
# installation

test "$install" &&
{
    $verb "copying installation software and doc"
    cp ${PIPS_ROOT}/Utils/install_pips $cwd/$name/install_pips
    cp ${PIPS_ROOT}/Utils/install.README $cwd/$name/README
    cp ${PIPS_ROOT}/Utils/install.INSTALL $cwd/$name/INSTALL
}

#
# tar and zip if required

[ "$dotar" ] && 
{
    cd $cwd
    $verb "taring ($tar $taropt)..."
    $tar $taropt $name.tar $name || error 3 "$tar returned $?"
    rm -rf $name || error 4 "rm returned $?"
    [ "$dozip" ] && 
    {
	$verb "zipping ($zip)..."
	$zip $name.tar || error 5 "$zip returned $?"
    }
}

# end of $RCSfile: make_pips_release,v $
#
