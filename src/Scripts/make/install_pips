#! /bin/sh
#
# $RCSfile: install_pips,v $ (version $Revision$)
# $Date: 1997/03/29 10:56:26 $, 
#
# installation for pips softwares and automatic generation of pipsrc
#

unset archdir


## Whether we have a working echo -n

if [ "`echo -n foo`" = foo ] 
then
  echon="echo -n"
else
  echon="echo"
fi

################################################################# FUNCTIONS

error()
{
    ret=$1 ; 
    shift ; 
    echo "$RCSfile: install_pips,v $:" "$@" >&2 ; 
    exit $ret ; 
}

# question mesg
question()
{
    echo
    $echon "$RCSfile: install_pips,v $:" "$@" "(y/n) [y]: "
    read answer
    if [ ${answer:-y} = n ]
    then
	return 1
    else
	return 0
    fi
}

# query VAR mesg
query() 
{
    var=$1
    shift
    echo "$RCSfile: install_pips,v $:" "$@"
    read $var
}

verb()
{
    echo "$RCSfile: install_pips,v $:" "$@"
}

verbn()
{
    $echon "$RCSfile: install_pips,v $:" "$@"
}

warning()
{
    echo "$@" ""
}

# executable foo what-for what-if-not-there
executable()
{
    exe=$1
    comment=$2
    shift 2
    verbn "looking for $exe ($comment): "
    if test "`type $exe | grep 'not found'`"
    then
	warning "not found!"
	verb "--" "$@"
    else
	echo "ok!"
    fi
}

# check for environment variables
environment()
{
    var=$1
    comment=$2
    shift 2
    verbn "looking for ""$""$var ($comment): "
    # Hum... echo -n "" print '-n'!
    if test "." = "`eval echo .\\$$var`"
    then
	echo "ok!"
    else
	warning "not set!"
	verb "--" "$@"
    fi
}

mksubdirs()
{
    dir=$1
    for d in Bin Lib Share Utils Include Html Doc Runtime Examples Validation;
    do
	test -d $dir/$d || { echo creating $dir/$d ; mkdir $dir/$d ; }
    done;
}

checksubdir()
{
    verbn "looking for $1: "
    if test -d ./$1
    then
	echo found
	mksubdirs ./$1
    else
	warning "not found!"
    fi
}

################################################################## SOFTWARES

pwd=`pwd`

checksubdir Extern
checksubdir Newgen
checksubdir Linear
checksubdir Pips

if test -d ./Pips 
then
    PIPS_ROOT=$pwd/Pips
    test -d $PIPS_ROOT/Lib && archdir=$PIPS_ROOT/Lib
    test -d $PIPS_ROOT/Bin && archdir=$PIPS_ROOT/Bin

    # cleans pipsrc files...
    test -d $PIPS_ROOT/Share && {
	share=$PIPS_ROOT/Share
	mv $share/pipsrc.sh $share/pipsrc.sh.old
	mv $share/pipsrc.csh $share/pipsrc.csh.old
    }
fi

verbn "looking for a version of daVinci "
d=`echo daVinci*`
$echon "($d): "
if test $d != 'daVinci*'
then
    echo found
    addavincihome="DAVINCIHOME=\${SOFT_ROOT}/$d"
    eval $addavincihome
    adddavincipath="PATH=\${PATH}:\$DAVINCIHOME"
else
    warning "not found!"
    addavincihome=""
    adddavincipath=""
fi

verbn "looking for a version of Toolpack "
d=`echo toolpack*`
$echon "($d): "
if test $d != 'toolpack*'
then
    echo found
    addtoolpackdir="TOOLPACK_DIR=\${SOFT_ROOT}/$d"
else
    warning "not found!"
    addtoolpackdir=""
    eval $addtoolpackdir
fi

verbn "default PIPS_ARCH: "
if test "$archdir" -a -d $archdir/.
then
    for d in $archdir/*
    do
	test -d $d && ARCH=`basename $d`
    done
fi

ARCH=${ARCH:-GNU}

echo $ARCH

##################################################################### PIPSRC

cat > pipsrc.tmp <<EOF
#
# Environment variables for PIPS.
#
# Softwares common root:
# just edit this setting if you move the pips softwares globally
SOFT_ROOT=$pwd
#
# Pips root directory
PIPS_ROOT="\${SOFT_ROOT}/Pips"
#
# Newgen root directory
NEWGEN_ROOT="\${SOFT_ROOT}/Newgen"
#
# Linear root directory
LINEAR_ROOT="\${SOFT_ROOT}/Linear"
#
# Extern root directory
# external libraries and so expected for building tpips
EXTERN_ROOT="\${SOFT_ROOT}/Extern"
#
# PATH and MANPATH updates
PATH="\${EXTERN_ROOT}/Share:\${EXTERN_ROOT}/Bin/\${PIPS_ARCH}:\${PATH}"
PATH="\${PIPS_ROOT}/Share:\${PIPS_ROOT}/Bin/\${PIPS_ARCH}:\${PIPS_ROOT}/Utils:\${PATH}"
MANPATH="\${PIPS_ROOT}/Doc:\${MANPATH}"
#
# Other variables of interest (and their default):
#
# PIPS_COSTDIR (\${PIPS_ROOT}/Share/complexity_cost_tables)
# PIPS_TAR (gtar)
# PIPS_ZIP (gzip -v9)
# PIPS_MAKE (gmake)
# PIPS_VALIDDIR (\${PIPS_ROOT}/Validation)
# PIPS_HOSTS (\`hostname\`) [:-separated list]
# PIPS_PING (ping)
# PIPS_DIFF (diff) [gdiff?]
# PIPS_MORE (less) [more, cat]
#
# EPIPS_EMACS (emacs)
# EPIPS_LISP (\${PIPS_ROOT}/Share/epips.el)
#
# HPFC_RUNTIME (\${PIPS_ROOT}/Runtime/hpfc)
# HPFC_SED (gsed)
# HPFC_TR (tr)
# HPFC_MAKE (gmake)
# HPFC_M4 (gm4)
#
# XPOMP_RUNTIME (\${PIPS_ROOT}/Runtime/xpomp)
# WP65_RUNTIME (\${PIPS_ROOT}/Runtime/wp65)
#
# External sofwares:
# TOOLPACK_DIR (???/Toolpack/toolpack1.2) (pips: stf transformation)
$addtoolpackdir
# X11_ROOT (xpomp)
# DAVINCIHOME (davinci)
$addavincihome
$adddavincipath
# OPENWINHOME/xview (wpips)
EOF

verb "generating pipsrc.sh"
{
    echo "# automatically generated pipsrc.sh:"
    echo "PIPS_ARCH=\${PIPS_ARCH:-$ARCH}"
    echo "export PIPS_ARCH"
    cat pipsrc.tmp
    sed -n 's,^[ 	]*\([-A-Za-z0-9_]*\)=.*,export \1,p;' pipsrc.tmp |
	sort -u
} > pipsrc.sh

verb "generating pipsrc.csh"
{
    echo "# automatically generated pipsrc.csh:"
    echo 'if ( $?PIPS_ARCH == 0 ) setenv PIPS_ARCH' $ARCH
    sed  's,\(.*\)=\(.*\),setenv \1 \2,;' pipsrc.tmp
} > pipsrc.csh

rm -f pipsrc.tmp

# source the just created environment!
. ./pipsrc.sh

##################################################################### CHECKS

free="freeware - see http://www.cri.ensmp.fr/pips/distribution.html"
unix="should be available on any UN*X"

test -d ./Pips &&
{
    question "do you plan to run PIPS? -- should be yes!" &&
    {
	executable /bin/sh "mandatory" $unix
	# executable fsplit "mandatory" $free
	executable perl "very very useful" $free
	executable /bin/csh "alas useful" $unix
	environment TOOLPACK_DIR "useful" $free
    }

    question "do you plan to run WPIPS?" &&
    {
	executable xtree "useful" $free
	executable daVinci "nice" $free
	environment DAVINCIHOME "nice" 
    }

    question "do you plan to run EPIPS?" &&
    {
	executable emacs "mandatory" $free
    }

    question "do you plan to run HPFC?" &&
    {
	executable gsed "GNU sed! mandatory" $free
    }

    question "do you plan to run HPFC generated codes?" &&
    {
	executable pvm "mandatory" $free
	environment PVM_ROOT "mandatory" 
	environment PVM_ARCH "mandatory" 
	executable gm4 "GNU m4 -- mandatory" $free
	executable gmake "GNU make -- mandatory" $free
	executable egrep "Extended GREP -- mandatory" $unix
    }
}

test -d ./Pips/Src &&
{
    question "do you plan to compile HPFC runtime?" &&
    {
	environment PVM_ROOT "mandatory" 
	environment PVM_ARCH "mandatory" 
	executable gm4 "GNU m4 -- mandatory" $free
	executable gmake "GNU make -- mandatory" $free
    }
}

test -d ./Pips/Src -o -d ./Newgen/Src -o -d ./Linear/Src &&
{
    question "do you plan to compile PIPS, NEWGEN or LINEAR?" &&
    {
	# compile
	executable gmake "mandatory" $free
	executable cproto "mandatory?" $free
	executable flex "GNU Fast lex -- mandatory?" $free
	executable bison "GNU yacc -- not mandatory" $free
	executable gcc "GNU cc -- useful" $free
	executable g77 "GNU f77 -- nice" $free

	# doc
	executable latex "useful" $free
	executable makeindex "useful" $free
	executable bibtex "useful" $free
	executable latex2html "useful" $free
	executable rman "useful" $free

	# misc
	executable awk "useful" $unix
    }

test -d ./Pips/Src &&
{
    question "do you plan to compile wpips?" &&
    {
	# externals
	environment OPENWINHOME "mandatory for wpips" "???"
    }
}

}

#
# done

echo
verb "if some required or useful softwares are not available,"
verb "you can look for sources/pointers from the PIPS web page"
verb "    http://www.cri.ensmp.fr/pips"
echo
warning "Source pipsrc.{sh,csh} as appropriate to your shell!"
