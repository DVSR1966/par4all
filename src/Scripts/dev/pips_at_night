#! /bin/sh
#
# $RCSfile: pips_at_night,v $ version $Revision$
# ($Date: 1996/07/20 17:26:06 $, )
# (c) Fabien COELHO July 1996
# 
# what to do at night...
#

# source environment if needed (as from cron)
test -r $HOME/.profile && . $HOME/.profile
test "$PIPS_DIR" || . /projects/Pips/pipsrc.sh

unset no_cleaning no_newgen no_linear no_pips no_validation

# use this mail (not /bin/mail...)
mail=/usr/openwin/bin/mail
test -x $mail || mail=mail

arch=.
user=`whoami`
email=${REPLYTO:-$user}
script=`basename $0`
verbose=:

verb()
{
    echo "$script: $@" >&2
}

usage()
{
    ret=$1
    shift
    cat <<-EOF
	$script (version $Revision$) - $@
	  -h: this help
	  -v: verbose
	  -c arch: compile for arch (may be a list, default is .)
	  -a email: address to report (default: \$REPLYTO else \`whoami\`)
	  -C: skip cleaning
	  -N: skip newgen
	  -L: skip linear
	  -P: skip pips
	  -V: skip validation
EOF
    exit $ret
}

# compile n|l|p(=what) name file(=report) arch...
# compile "what" for all architectures.
# the detailed report is sent only on failures
compile()
{
    what=$1; name=$2; report=$3; shift 3

    detailed=$report.detailed
    summary=$report.summary

    {
      make-pips -$what -o $summary clean 
      for a in "$@"; do
	make-pips -$what -o $summary -m $a ARCH=$a clean-compiled recompile
      done 
    } > $detailed 2>&1
    
    cat $summary >> $report

    # send the detailed report if some failures occured
    grep 'failed$' $summary > /dev/null 2>&1 &&
	$mail -s "$script: $name recompile report" $email \
	< $detailed > /dev/null 2>&1

    rm -f $detailed $summary
}

while getopts hvCNLPVc:a: OPT
do
    case $OPT in
	h) usage 0 "some help" ;;
	a) email=$OPTARG ;;
	c) arch="$OPTARG" ;;
	v) verbose=verb ;;
	C) no_cleaning=1 ;;
	N) no_newgen=1 ;;
	L) no_linear=1 ;;
	P) no_pips=1 ;;
	V) no_validation=1 ;;
	*) usage 2 "invalid option" ;;
    esac
done

report=/tmp/${script}.${user}.$$
rm -f ${report}*

#
# do the job

{
    $verbose starting $script for $email 
    $verbose date: `date`
    
    #
    # CLEANING

    test "$no_cleaning" ||
    {
	$verbose deleting old workspaces...
	$verbose date: `date`
	find ${PIPS_HOME}/Pips -name '*.database' -type d -mtime +7 -print | 
	    xargs ${PIPS_UTILDIR}/Delete
	    
	$verbose removing core files older than one week
	find ${PIPS_HOME}/Pips -name core -mtime +7 -print | 
	xargs rm -f
    }

    #
    # COMPILE
    msg=""

    # 1: NEWGEN
    test "$no_newgen" ||
    {
	$verbose recompiling NEWGEN - Production
	$verbose date: `date`
	msg="${msg} newgen"
	compile n newgen $report $arch
    }
    
    # 2: LINEAR
    test "$no_linear" ||
    {
	$verbose recompiling LINEAR - Production
	$verbose date: `date`
	msg="${msg} linear"
	compile l linear $report $arch
    }

    # 3: PIPS
    test "$no_pips" ||
    {
	$verbose recompiling PIPS - Production
	$verbose date: `date`
	msg="${msg} pips"
	compile p pips $report $arch
    }

    # 4: SUMMARY
    test "$no_newgen$no_linear$no_pips" -eq 111 ||
    {
	$verbose generating recompile summary
	$verbose date: `date`
	summary=SUCCEEDED
	grep 'failed$' $report > $report.failed && summary=FAILED
	$mail -s "$script: recompile${msg}: ${summary}" $email \
	    < $report.failed > /dev/null 2>&1
	rm -f $report*
    }

    #
    # VALIDATE Pips
    test "$no_validation" || 
    {
	$verbose Validating PIPS
	$verbose date: `date` 
	Validate -vti 50 -a ${email}
    }

    $verbose end of  $script for $email 
    $verbose date: `date`
} 2>&1 | $mail -s "$script: night report" ${email}
