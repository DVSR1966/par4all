#! /bin/sh
# for debug, try: /bin/sh -vx
#
# $RCSfile: pips-makemake,v $ ($Date: 1996/08/11 21:59:49 $, )
# version $Revision$
#
# Automatic generation of Makefile for the PIPS project
#
# Remi Triolet, Bruno Baron
# Fabien Coelho, 08/95
#

SCRIPT=`basename $0`
USAGE="$SCRIPT [-h (HELP!)] [-l|p|s|r|i|n] [-D|P] [-c|a] (default -c)"
VERBOSE=':'

MAKEFILE=Makefile
CONFIG_FILE=config.makefile

PIPSMKMK_OPTION=''

help()
{
  cat <<-END_OF_HELP
	$USAGE
	version $Revision$
	Builds $MAKEFILE from $CONFIG_FILE for PIPS.
	  -l|p|s|r|i|n: libraries|passes|scripts|runtime|linear|newgen
	  -D|P: for Development|Production directories
	  -c|a: for the current|all directory(ies)
	  -h: this help
	  -v: verbose
	  contextual defaults for first and second options.
	Usefull macros in $CONFIG_FILE: DOCS and
	 - libraries: LIB_{CFILES,HEADERS,OBJECTS}
	   and maybe DERIVED_{HEADERS,CFILES,FILES}
	 - passes: idem.
	 - scripts: SCRIPTS, FILES, SFILES, RFILES
	 - runtime: SOURCES, INSTALL_{FILES,LIBS,EXE}
	 - c3/linear: 
	 - newgen:
	Many default macros are defined and may be overwritten.
	Many rules are also defined.
	END_OF_HELP
}

verbose()
{
    echo "$SCRIPT" "$@"
}

usage()
{
  echo "usage: $USAGE" >&2
  [ "$2" ] && echo "error: $2" >&2
  exit ${1:-1}
}

warning()
{
  echo "$SCRIPT: warning, $@" >&2 
}

#
# what is to be done...

DIRSIDE=''
DIRTYPE=''
DIRS='.'
ALL=''
ALL_RULE_TARGET=''

while getopts lpsrinDPcahv opt
do
  case $opt in
    l) DIRTYPE='Lib';
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -l" ;;
    p) DIRTYPE='Passes';
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -p" ;;
    s) DIRTYPE='Scripts';
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -s" ;;
    r) DIRTYPE='Runtime';
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -r" ;;
    i) DIRTYPE='Linear';
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -i" ;;
    n) DIRTYPE='Newgen';
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -n" ;;
    D) DIRSIDE="$PIPS_DEVEDIR" ;
       unset production ;
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -D" ;;
    P) DIRSIDE="$PIPS_SRCDIR"; 
       production='yes' ;
       PIPSMKMK_OPTION="$PIPSMKMK_OPTION -P" ;;
    c) DIRS='.';;
    a) ALL='1' ;;
    h) help ; exit 0 ;;
    v) VERBOSE=verbose ;;
    *) usage 2 "invalid option ($opt)" ;;
  esac
done
shift `expr $OPTIND - 1`

[ $# -eq 0 ] || usage 3 "$# remaining parameters"

current_directory=`pwd`
cd_dirname=`dirname $current_directory`

# set defaults if necessary

[ "${DIRTYPE}" ] || DIRTYPE=`basename $cd_dirname`
[ "${DIRSIDE}" ] || 
{
  if [ "`echo $cd_dirname | sed 's,^.*/Production/.*$,,'`" ]
  then
    DIRSIDE="$PIPS_DEVEDIR" ;
  else
    production='yes' ;
    DIRSIDE="$PIPS_SRCDIR" ;
  fi
}

# delayed here to ensure that DIRTYPE is available

[ "$ALL" ] && DIRS=${DIRSIDE}/${DIRTYPE}/*

# directories for quick-install:
#
# install_file_dir for usual files
# install_lib_dir for library files
# install_exe_dir for executable files

PART=PIPS
install_file_dir='$(PIPS_INCLUDEDIR)'
install_lib_dir='$(PIPS_LIBDIR)'
install_exe_dir='$(PIPS_BINDIR)'
install_src_dir="$(PIPS_SRCDIR)/${DIRTYPE}"

[ $DIRTYPE = 'Src' ] && DIRTYPE='Newgen'

case $DIRTYPE in
  Lib) ALL_RULE_TARGET='$(ARCH)/lib$(TARGET).a' ;;
  Passes)  ALL_RULE_TARGET='$(ARCH)/$(TARGET)' ;;
  Scripts) ALL_RULE_TARGET='.runable' ;
           install_file_dir='$(PIPS_UTILDIR)' ;
           install_lib_dir='$(PIPS_UTILDIR)' ;
           install_exe_dir='$(PIPS_UTILDIR)' ;;
  Runtime) ALL_RULE_TARGET='' ;
           install_file_dir='$(PIPS_EXTEDIR)' ;
           install_exe_dir='$(PIPS_EXTEDIR)' ;
           install_lib_dir='$(PIPS_EXTEDIR)' ;;
  Linear)  ALL_RULE_TARGET='$(ARCH)/lib$(TARGET).a' ;
           PART=LINEAR ;
	   install_src_dir='$(LINEAR_SRCDIR)';
           install_file_dir='$(LINEAR_INCLUDEDIR)' ;
           install_exe_dir='$(LINEAR_BINDIR)' ;
           install_lib_dir='$(LINEAR_LIBDIR)' ;;
  Newgen)  ALL_RULE_TARGET='' ;
	   PART=NEWGEN ;
	   install_src_dir='$(NEWGEN_SRCDIR)';
           install_file_dir='$(NEWGEN_INCLUDEDIR)' ;
           install_exe_dir='$(NEWGEN_BINDIR)' ;
           install_lib_dir='$(NEWGEN_LIBDIR)' ;;
  *) usage 5 "unexpected directory type $DIRTYPE"
esac

$VERBOSE "PART: ${PART}"
$VERBOSE "DIRS: ${DIRS}"

### main loop
for dir in $DIRS
do
  [ -d $dir ] || continue
  cd $current_directory
  cd $dir
  
  [ -f $CONFIG_FILE ] || usage 6 "no $CONFIG_FILE in $dir" ;

  # needed because of f.. - in directory names...
  dir_real_name=`basename \`pwd\``
  dir_simple_name=`echo $dir_real_name | tr '-' '_'`
    
  echo making $DIRTYPE $MAKEFILE in $dir_real_name

  rm -f $MAKEFILE

##############################################################################

    $VERBOSE "common part"

    cat >> $MAKEFILE <<%
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
#				    WARNING
#
#		  This makefile has been automatically generated
#
#                        ($RCSfile: pips-makemake,v $ version $Revision$)
#
#			       Do not modify it
#
#        You can modify the file $CONFIG_FILE in the same directory
#
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
# Copyright (C) Ecole des Mines De Paris
#               Centre d'Automatique et Informatique
#               Section Informatique
#
# This file is part of PIPS
#
# PIPS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY.  No author or distributor accepts responsibility to anyone for
# the consequences of using it or for whether it serves any particular
# purpose or works at all, unless he says so in writing.
#
# DEFAULTS, may be overwritten by the $CONFIG_FILE content.
#
TARGET=		${dir_real_name}
TARGET_DIR=	${install_src_dir}/$(TARGET)
#
# installation directories for quick-install
#
#
ARCH=		$(PIPS_ARCH)
#
INSTALL_FILE_DIR= ${install_file_dir}
INSTALL_LIB_DIR=  ${install_lib_dir}/$(ARCH)
INSTALL_SHR_DIR=  ${install_exe_dir}
INSTALL_EXE_DIR=  ${install_exe_dir}/$(ARCH)
# (obsolete?)
MAIN=		main
#
# 
#
CONFIG_FILE=	${CONFIG_FILE}
MAKEFILE=	${MAKEFILE}
SHELL	=	/bin/sh
COPY	=	cp
MOVE	=	mv -f
GMKNODIR=	--no-print-directory
#
# default targets...
all: generate_makefile_if_necessary_and_possible
all: $(ARCH) $ALL_RULE_TARGET
#
recompile: depend header all
recompile: generate_makefile_if_necessary_and_possible
#
full-clean: clean clean-all-compiled
clean-all-compiled: 
	-for d in $(PIPS_ALL_ARCH) ; do \\
	  test -d \$\$d && { \\
	    echo "cleaning \$\$d"; \\
	    $(RM) \$\$d/*.[oa] \$\$d/*pips Makefile.depend.\$\$d; \\
	    test "\`ls -A \$\$d\`" || rmdir \$\$d; } ; \\
	done
#
OLD:; mkdir OLD
SCCS:; mkdir SCCS
get:; sccs get SCCS
# .PHONY is a gnu extension...
.PHONY: install all depend header recompile clobber count info delta
.PHONY: generate_makefile_if_necessary_and_possible
# to override SUN's default rule
.SCCS_GET:
# .INIT is a SUN extension...
.INIT: 
check_install:
# is this appropriate?
# .DEFAULT:; @echo "$MAKEFILE [$(FWD_ROOT)] *** no rule for target $@!" >&2
#
$(ARCH):; mkdir $(ARCH)
#
include $(${PART}_INCLUDEDIR)/makefile_macros.$(ARCH)
include $CONFIG_FILE
#
# prefixed objects:
LIB_OBJECTS:=$(addprefix $(ARCH)/, $(LIB_OBJECTS))
#
# {C,CPP,LD,L,Y}opt macros allow to *add* things from the command line
# as gmake CPPopt="-DFOO=bar" ... that will be added to the defaults
# a typical interesting example is to put -pg in {C,LD}opt
#
PREPROC=	$(CC) -E $(CPPFLAGS) $(CPPopt) $(TARGET_ARCH)
COMPILE=	$(CC) $(CFLAGS) $(Copt) $(CPPFLAGS) $(CPPopt) $(TARGET_ARCH) -c
LINK=		$(LD) $(LDFLAGS) $(LDopt) -o
SCAN=		$(LEX) $(LFLAGS) $(Lopt) -t
TYPECHECK=      $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(LINT_LIBS)
PARSE=		$(YACC) $(YFLAGS) $(Yopt)
ARCHIVE=	$(AR) $(ARFLAGS)
# struct _iobuf -> FILE for sun headers that would not look nice.
PROTOIZE=	$(PROTO) $(PRFLAGS) -E "$(PREPROC)"
#
# Default rules
#
$(ARCH)/%.o:	%.c 
	$(COMPILE) \$< -o \$@
#
%



##############################################################################

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' -o $DIRTYPE = 'Linear' ] && 
cat >> $MAKEFILE <<% 
#
LIB_TARGET=	$(ARCH)/lib$(TARGET).a
BIN_TARGET=	$(ARCH)/$(TARGET)
INC_TARGET=	$(TARGET).h
#
INSTALL_FILE+=	$(INC_TARGET)
INSTALL_LIB+=	$(LIB_TARGET)
INSTALL_SHR+=	
INSTALL_EXE+=	`if [ $DIRTYPE = 'Passes' ] ; then echo '$(BIN_TARGET)' ; fi`
#

.PRECIOUS: $(LIB_TARGET) $(BIN_TARGET)

# .INIT is a SUN extention...
# .INIT: check_os

check_install:
	@if test \`echo *.a | wc -w\` -gt 1 ; \\
	then \\
	  echo "install failed: additional local libraries prevent it" >&2;\\
	  exit 1;\\
	fi

$(LIB_TARGET): $(INC_TARGET) $(DERIVED_CFILES) $(DERIVED_HEADERS)

$(LIB_TARGET): $(LIB_OBJECTS) $(TARGET_OBJECTS)
	$(RM) $(LIB_TARGET)
	$(ARCHIVE) $(LIB_TARGET) $(LIB_OBJECTS) $(TARGET_OBJECTS)
	-$(RANLIB) $(LIB_TARGET)

%



##############################################################################

[ $DIRTYPE = 'Scripts' ] && cat >> $MAKEFILE <<%

all: $(RFILES)

SOURCES+=	$(SCRIPTS) $(FILES) $(SFILES) $(CONFIG_FILE) $(DOCS)
INSTALL_FILE+=	$(FILES)
INSTALL_LIB+=
INSTALL_SHR+=	$(SCRIPTS)
INSTALL_EXE+=	$(RFILES)

.runable: $(SCRIPTS)
	-[ "$(SCRIPTS)" ] && chmod a+x $(SCRIPTS)
	touch .runable

.quick-install: .runable $(RFILES)

clean-compiled:
clean-all-compiled:

clean:
	-$(RM) *~ core

%



##############################################################################

[ $DIRTYPE = 'Linear' ] && cat >> $MAKEFILE <<% 

CFILES=		$(LIB_CFILES)
OBJECTS=	$(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES+= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES) $(DOCS)
#

%


##############################################################################

[ $DIRTYPE = 'Lib' ] && cat >> $MAKEFILE <<% 
#
CFILES=		$(MAIN).c $(LIB_CFILES)
OBJECTS=	$(MAIN).o $(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES+= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES) $(DOCS)
#

test: all
	$(LINK) $(ARCH)/pips -lpips $(PIPS_LIBS) 
	@test $(ARCH) -eq . || ln -sf $(ARCH)/pips
	@echo 

wtest: all
	$(LINK) $(ARCH)/wpips $(WPIPS_ADDED_LDFLAGS) -lwpips \\
		$(PIPS_LIBS) $(WPIPS_ADDED_LIBS)
	@test $(ARCH) -eq . || ln -sf $(ARCH)/wpips
	@echo 

ttest: all
	$(LINK) $(ARCH)/tpips -ltpips \\
		$(PIPS_LIBS) $(TPIPS_ADDED_LIBS)
	@test $(ARCH) -eq . || ln -sf $(ARCH)/tpips
	@echo 

# obsolete rule I guess. test is better. FC.
$(BIN_TARGET): $(LIB_TARGET) $(ARCH)/$(MAIN).o
	$(LINK) $(BIN_TARGET) $(ARCH)/$(MAIN).o \\
		$(LIB_TARGET) $(PIPS_LIBS)
	@echo 

clobber: clean
	-Delete *.database

%

#############################################################################

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Linear' ] && cat >> $MAKEFILE <<% 
#

clean-compiled:
	$(RM) $(OBJECTS) $(LIB_TARGET) $(BIN_TARGET) pips tpips wpips

clean: generate_makefile_if_necessary_and_possible clean-compiled
	-$(RM) TAGS $(BIN_TARGET) $(DERIVED_HEADERS) $(DERIVED_CFILES) \\
		$(DERIVED_FILES) *.~[0-9]~ $(LIB_IFILES) $(INC_TARGET) core

INC_CFILES += $(LIB_CFILES)

%




##############################################################################

[ $DIRTYPE = 'Passes' ] && cat >> $MAKEFILE <<% 
#
# a little bit rough...
#
$(TARGET): $(PIPS_LIBDIR)/$(ARCH)/*.a
$(TARGET): $(LINEAR_LIBDIR)/$(ARCH)/*.a
$(TARGET): $(NEWGEN_LIBDIR)/$(ARCH)/*.a
#
CFILES=		$(LIB_CFILES)
OBJECTS=	$(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES+= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES) $(DOCS)
#

$(PIPS_BINDIR):
	mkdir $(PIPS_BINDIR)

$(BIN_TARGET): $(INC_TARGET) $(LIB_TARGET)
	$(LINK) $(BIN_TARGET) $(LIB_TARGET) $(TARGET_LIBS)
	@echo 

clean-compiled:
	$(RM) $(OBJECTS) $(LIB_TARGET) $(BIN_TARGET) 

clean: clean-compiled
	-$(RM) TAGS $(INC_TARGET) $(DERIVED_HEADERS) $(DERIVED_CFILES) \\
		$(DERIVED_FILES) *.~[0-9]~ core

INC_CFILES += $(LIB_CFILES)

%



##############################################################################

[ \( $DIRTYPE = 'Passes' -o $DIRTYPE = 'Lib' -o $DIRTYPE = 'Linear' \) -a "$production" ] &&
cat >> $MAKEFILE <<%

.PRECIOUS: $(${PART}_LIBDIR)/$(LIB_TARGET) $(${PART}_BINDIR)/$(BIN_TARGET)

$(${PART}_INCLUDEDIR)/$(TARGET).h: header
	@pips_install_file -f $(${PART}_INCLUDEDIR) $(TARGET).h

$(${PART}_LIBDIR)/$(LIB_TARGET): $(LIB_TARGET) 
	@pips_install_file -r $(RANLIB) $(${PART}_LIBDIR)/$(ARCH) $(LIB_TARGET)

$(LIB_OBJECTS): $(TARGET).h

recompile: $(${PART}_INCLUDEDIR)/$(TARGET).h $(${PART}_LIBDIR)/$(LIB_TARGET) 

%



##############################################################################

[ $DIRTYPE = 'Passes' -a $DIRSIDE = $PIPS_SRCDIR ] &&
cat >> $MAKEFILE <<%

$(TARGET_OBJECTS): $(TARGET).h

$(PIPS_BINDIR)/$(ARCH):
	mkdir \$@

$(PIPS_BINDIR)/$(BIN_TARGET): $(BIN_TARGET) $(PIPS_BINDIR)/$(ARCH)
	@pips_install_file -x $(PIPS_BINDIR)/$(ARCH) $(BIN_TARGET)

recompile: $(PIPS_BINDIR)/$(BIN_TARGET)

%



##############################################################################
#
# Common to all: installation and Makefile generation
#

cat >> $MAKEFILE <<%

$(TARGET_DIR):
	mkdir $(TARGET_DIR)

check_os:
	@if test -n "$(PIPS_CHECK_OS)"; \\
	then echo "Cannot run make under this OS release"; \\
	     echo "$(PIPS_CHECK_OS)"; exit 1; \\
	fi

.quick-install: $(INSTALL_FILE) $(INSTALL_LIB) $(INSTALL_EXE) $(INSTALL_SHR)
	@pips_install_file -f $(INSTALL_FILE_DIR) $(INSTALL_FILE)
	@pips_install_file -r $(RANLIB) $(INSTALL_LIB_DIR) $(INSTALL_LIB)
	@pips_install_file -x $(INSTALL_SHR_DIR) $(INSTALL_SHR)
	@pips_install_file -x $(INSTALL_EXE_DIR) $(INSTALL_EXE)
	touch .quick-install

tar:
	$(TAR) cf $(TARGET).tar $(SOURCES) Makefile
	$(ZIP) $(TARGET).tar

quick-install: .quick-install

.makefile: $(PIPS_UTILDIR)/pips-makemake
	$(PIPS_UTILDIR)/pips-makemake ${PIPSMKMK_OPTION}
	touch .makefile

generate_makefile_if_necessary_and_possible:
	-@[ -x $(PIPS_UTILDIR)/pips-makemake ] && \\
		$(MAKE) $(GMKNODIR)  .makefile 

count:
	@wc -l $(SOURCES)

#
# some quick entries for SCCS:
info:
	@sccs info

# try to delta all checked out files
delta:
	@test ! "\`sccs tell\`" || sccs delget \`sccs tell\`

%



##############################################################################
#

[ "$production" ] && cat >> $MAKEFILE <<EOF
#
# print out the files for a release...
FWD_ROOT=.
RELEASE+= $(SOURCES) $(DEDUCED_CFILES) $(DEDUCED_HEADERS) Makefile

release:
	@for f in $(RELEASE) ; do echo $(FWD_ROOT)/\$\$f ; done
	    
EOF

##############################################################################
#
# partie specifique a Development
#

[ ! "$production" ] && cat >> $MAKEFILE <<%

check_sccs:
	@[ ! "\`sccs tell\`" ] || \\
	{ echo; echo "sccs files being edited, cannot install"; echo; \\
	  exit 1;}

# install installs sources, so depends on sources. FC
# to insure the library is compiled before hand, a make is added.
.install: $(SOURCES) check_install check_sccs
	$(MAKE) $(GMKNODIR) all $(TARGET_DIR) 
	@echo ""; echo; echo -n "Description of changes: " ; \\
	read comments ; \\
	install_pips_sources \\
		-rv -s \`pwd\` -t $(TARGET_DIR) -y "\$\$comments" \\
		$(SOURCES)
	-@cd $(TARGET_DIR) ; pips-makemake $PIPSMKMK_OPTION -P
	touch .install
	$(MAKE) quick-install

install:  .install

#
# diff between dev and prod sources:

diff:
	-@for f in $(SOURCES) ; \\
	do \\
	  echo "DIFFERENCES BETWEEN DEV AND PROD FOR \$\$f:" ; \\
	  $(DIFF) \$\$f $(TARGET_DIR)/\$\$f ; \\
	done

%



##############################################################################
#
# La partie commune aux bibliotheques et aux passes :

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' -o $DIRTYPE = 'Linear' ] && 
cat >> $MAKEFILE <<%
#

$(${PART}_LIBDIR):
	mkdir $(${PART}_LIBDIR)

lint:
	$(TYPECHECK) $(CFILES) | 
		sed '/possible pointer alignment/d;/gen_alloc/d'

TAGS: $(INCLUDES) $(CFILES)
	etags $(INCLUDES) $(CFILES)
	ctags $(INCLUDES) $(CFILES)

$(TARGET)-local.h:
	[ -f $(TARGET)-local.h ] || touch $(TARGET)-local.h

# headers are not generated automatically, bacause it should be
# done each time a c file is touched, which is too much...
# thus it does depend only of the -local.h.
# header file reconstruction should be required explicitely
# with the header rule.
# some filtering is performed to avoid variations that depends on
# includes...

build-header-file:
	@$(COPY) $(TARGET)-local.h $(INC_TARGET);
	{ \\
	echo "/* header file built by $(PROTO) */";\\
	echo "#ifndef ${dir_simple_name}_header_included";\\
	echo "#define ${dir_simple_name}_header_included";\\
	cat $(TARGET)-local.h;\\
	$(PROTOIZE) $(INC_CFILES) | \\
	  sed 's/struct _iobuf/FILE/g;s/__const/const/g;/_BUFFER_STATE/d;' ;\\
	echo "#endif /* ${dir_simple_name}_header_included */";\\
	} > $(INC_TARGET).tmp
	$(MOVE) $(INC_TARGET).tmp $(INC_TARGET)

# .header carrie all dependencies for INC_TARGET:
.header: $(TARGET)-local.h $(DERIVED_HEADERS) $(INC_CFILES) 
	$(MAKE) $(GMKNODIR) build-header-file
	touch .header

# checks for the header file, and build if necessary...

# header: checks for INC_TARGET dependencies (.header) and for
# INC_TARGET existance !
header: .header $(INC_TARGET)

$(INC_TARGET): $(TARGET)-local.h 
	$(RM) .header
	$(MAKE) $(GMKNODIR) .header

%



##############################################################################

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' -o $DIRTYPE = 'Newgen' -o $DIRTYPE = 'Linear' ] && cat >> $MAKEFILE <<%
#

# indirect depend bacause I do not trust make for the inclusion of
# Makefile.depend if that very file does not exist.

.depend: $(CFILES) $(DERIVED_CFILES) $MAKEFILE.depend.$(ARCH)
	touch \$@

depend: .depend

# default rule if the dependence file is not there...
# forces the regeneration:
# - the dependences' generation needs the headers
# - the headers are generated thru the Makefile.
# - the Makefile needs the dependences.
# how to get out of this?
$MAKEFILE.depend.$(ARCH):
	# creates an empty dependence file, it is ok for going on and
	# will prevent any recursion for generating the same dependences.
	touch \$@ 
	# the headers are needed. 
	test ! "$(INC_TARGET)" -o -f "$(INC_TARGET)" || \\
	    $(MAKE) $(GMKNODIR) $(INC_TARGET)
	# may need the derived files
	test ! "$(DERIVED_CFILES)" || $(MAKE) $(GMKNODIR) $(DERIVED_CFILES)
	# now it's okay fo building all the dependences.
	test ! "$(CFILES)$(DERIVED_CFILES)" || \\
	        $(PREPROC) -M $(CFILES) $(DERIVED_CFILES) |\\
		sed 's,^\(.*\.o:\),\$\$(ARCH)/\1,' > \$@

#
# dependences are stored in another file which is simply included.
# the file differs for each "architectures"
include $MAKEFILE.depend.$(ARCH)
%



##############################################################################

touch .makefile

### force dependence list generation
rm -f $MAKEFILE.depend* .depend
$PIPS_MAKE depend

### end good case
echo

### end main loop
done

# end of $RCSfile: pips-makemake,v $
#
