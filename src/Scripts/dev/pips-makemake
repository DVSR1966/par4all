#! /bin/sh
# for debug, try: /bin/sh -vx
#
# $Id$
# $Log: pips-makemake,v $
# Revision 1.292  1997/08/18 08:21:54  coelho
# forgotten Pass link.
#
# Revision 1.291  1997/08/18 07:45:26  coelho
# ftest/fpips additions.
#
# Revision 1.289  1997/06/23 09:02:53  coelho
# info entry for rlog improved.
#
# Revision 1.276  1997/03/28 07:13:52  coelho
# SOFT_ARCH better defined?
#
# Revision 1.275  1997/03/26 13:49:18  coelho
# $(ECHO) in comments interpretaed on AIX.
#
# Revision 1.274  1997/03/19 17:25:47  coelho
# again rlog -LR -> rlog -L -R...
#
# Revision 1.273  1997/03/19 17:07:30  coelho
# RCS checking of locked files should work as expected now.
#
# Revision 1.272  1997/03/19 16:58:06  coelho
# rlog options cannot be collated
#
# Revision 1.271  1997/03/11 19:11:30  coelho
# RCS and SCCS compatible as a transition...
#
#
# Automatic generation of Makefile for the PIPS project
#
# Remi Triolet, Bruno Baron
# Fabien Coelho, 08/95
#

script=`basename $0`
USAGE="$script [-hv] [-L|N|P] [-l|p|c|d] [-D|S]"
verbose=':'

MAKEFILE=Makefile
CONFIG_FILE=config.makefile

PIPSMKMK_OPTION=''

help()
{
  cat <<-END_OF_HELP
	$USAGE
	version $Revision$
	Builds $MAKEFILE using $CONFIG_FILE for the PIPS softwares.
	The $CONFIG_FILE can define macros and additional rules. It is
	simply included by the $MAKEFILE. Automatically generated makefiles
	allow to provide an homogeneous programming environment all over the
	PIPS softwares. The very same targets are available everywhere.
	Customizing the makefiles for the different directories is obtained
	by defining standard macros within the configuration part as described
	bellow. 
	Options:
	  -L|N|P:   part is Linear, Newgen or Pips. (default is automagic:-)
	    The part is just the software for which the makefile is to be
	    generated. The impact is to use the corresponding _ROOT and _ARCH
	    variables for finding includes libraries and so. Within the 
	    makefile, the ARCH and ROOT macros holds the expected values.
	    The definition of ARCH first relies on the part's _ARCH variable
	    (for instance \$NEWGEN_ARCH), then if not set the \$PIPS_ARCH
	    variable is used, and finally . (dot) is used as a default.
	    The ROOT and ARCH macros are used for installing files: for 
	    instance libraires are installed to \$(ROOT)/Lib/\$(ARCH).
	  -l|p|c|d: type is library|pass|compile|default
	  -D|S:     side is Development|Source
	  contextual defaults for all these first options...
	  -h: this help
	  -v: verbose
	Useful macros in $CONFIG_FILE: 
	 - libraries/passes: LIB_{CFILES,HEADERS,OBJECTS,MAIN}
	   and maybe DERIVED_{HEADERS,CFILES,FILES}
	 - default:
	   SOURCES (config.makefile need not be included)
	   SCRIPTS (runable files as shell scripts that must be chmoded)
	   INSTALL_{INC,LIB,BIN,RTM,DOC,HTM,SHR,UTL} files to be installed
	Many default macros are defined and may be overwritten.
	Many rules are also defined.
	END_OF_HELP
}

verb()
{ echo "$script" "$@";}

usage()
{
  echo "usage: $USAGE" >&2
  [ "$2" ] && echo "error: $2" >&2
  exit ${1:-1}
}

warning()
{ echo "$script: warning, $@" >&2 ;}

#
# what is to be done...

DIRSIDE=''
DIRTYPE=''
PART=''
ALL=''
ALL_RULE_TARGET=''

while getopts PLNlpcdDShv opt
do
  PIPSMKMK_OPTION="$PIPSMKMK_OPTION -$opt"
  case $opt in
    P) PART=PIPS ;;
    L) PART=LINEAR ;;
    N) PART=NEWGEN ;;
    l) DIRTYPE='Libs' ;;
    p) DIRTYPE='Passes' ;;
    c) DIRTYPE='Compiled' ;;
    d) DIRTYPE='Default' ;;
    D) unset production ;;
    S) production='yes' ;;
    h) help ; exit 0 ;;
    v) verbose=verb ;;
    *) usage 2 "invalid option ($opt)" ;;
  esac
done
shift `expr $OPTIND - 1`

[ $# -eq 0 ] || usage 3 "$# remaining parameters"

current_directory=`pwd`
cd_dirname=`dirname $current_directory`

# set defaults if necessary

[ "${PART}" ] ||
{
    PART=PIPS
    [ "`echo $current_directory | grep Linear`" ] && PART=LINEAR 
    [ "`echo $current_directory | grep Newgen`" ] && PART=NEWGEN
    $verbose "default PART computed: $PART"
}

[ "${DIRTYPE}" ] || 
{
    DIRTYPE=Default

    if [ $PART = LINEAR ] ;
    then 
	DIRTYPE=Libs ;
    else
        for f in Libs Passes ; do
	    [ "`echo $current_directory | grep $f`" ] && DIRTYPE=$f
        done
    fi

    $verbose "defaults DIRTYPE computed: $DIRTYPE"
}

$verbose "defining vars..."

case $DIRTYPE in
  Libs) ALL_RULE_TARGET='$(ARCH)/lib$(TARGET).a' ;;
  Passes)  ALL_RULE_TARGET='$(ARCH)/$(TARGET)' ;;
  Compiled) ALL_RULE_TARGET='' ;;
  Default) ALL_RULE_TARGET='.runable';;
  *) usage 5 "unexpected directory type $DIRTYPE"
esac

#
# Where to install files:

install_inc_dir='$(ROOT)/Include';
install_lib_dir='$(ROOT)/Lib';
install_bin_dir='$(ROOT)/Bin';
install_src_dir='$(ROOT)/Src';
install_shr_dir='$(ROOT)/Share';
install_doc_dir='$(ROOT)/Doc';
install_htm_dir='$(ROOT)/Html';
install_rtm_dir='$(ROOT)/Runtime' ;
install_utl_dir='$(ROOT)/Utils';

case $PART in
  PIPS) ;;
  NEWGEN) ;;
  LINEAR) ;;
  *) usage 6 "unexpected PART=$PART" ;;
esac

[ "${DIRSIDE}" ] || 
{
  if [ "`echo $current_directory | grep Development`" ]
  then
    DIRSIDE=`eval echo '$'"${PART}_DEVEDIR"` ;
    SIDE=Deve
  else
    production='yes' ;
    DIRSIDE=`eval echo '$'"${PART}_ROOT/Src"`;
    SIDE=Prod
  fi
  $verbose "default DIRSIDE computed: $DIRSIDE"
}

$verbose "PART: ${PART}"
$verbose "DIRSIDE: $DIRSIDE"
$verbose "DIRTYPE: $DIRTYPE"
$verbose "pwd: $current_directory"

[ -f $CONFIG_FILE ] || usage 6 "no $CONFIG_FILE in $current_directory" ;

# needed because of f.. - in directory names...
dir_real_name=`basename $current_directory`
dir_simple_name=`echo $dir_real_name | tr '-' '_'`

# type sed
target_dir=`echo "$current_directory" | 
    sed 's,.*/Development/,,;s,.*/Src/,,;'`

echo "Making $DIRTYPE $PART $MAKEFILE in $dir_real_name ($DIRSIDE $target_dir)"

rm -f $MAKEFILE


##############################################################################

$verbose "common part"

cat >> $MAKEFILE <<%
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
#				    WARNING
#
#		  This makefile has been automatically generated
#
#			       Do not modify it
#
#        You can modify the file $CONFIG_FILE in the same directory
#
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
# Copyright (C) Ecole des Mines De Paris
#               Centre de Recherche en Informatique
#
# This file is part of PIPS
#
# $Id$
#
# PIPS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY.  No author or distributor accepts responsibility to anyone for
# the consequences of using it or for whether it serves any particular
# purpose or works at all, unless he/she says so in writing.
#
# DEFAULTS, may be overwritten by the $CONFIG_FILE content.
#
# the root file of the soft which is being compiled
ROOT= \$(${PART}_ROOT)
#
TARGET=		${dir_real_name}
TARGET_DIR=	${install_src_dir}/${target_dir}
#
# default architecture is taken from ${PART}_ARCH then from PIPS_ARCH 
# environment variable, else the default is "." (dot). 
ifdef ${PART}_ARCH
ARCH =	\$(${PART}_ARCH)
else
ifdef PIPS_ARCH
ARCH =	\$(PIPS_ARCH)
else
ARCH =	.
endif
endif
#
# installation directories for quick-install
#
INSTALL_INC_DIR= ${install_inc_dir}
INSTALL_SHR_DIR= ${install_shr_dir}
INSTALL_DOC_DIR= ${install_doc_dir}
INSTALL_HTM_DIR= ${install_htm_dir}
INSTALL_UTL_DIR= ${install_utl_dir}
INSTALL_RTM_DIR= ${install_rtm_dir}
INSTALL_LIB_DIR= ${install_lib_dir}/\$(ARCH)
INSTALL_BIN_DIR= ${install_bin_dir}/\$(ARCH)
# (obsolete?)
# MAIN=		main
#
# 
#
CONFIG	= ${CONFIG_FILE}
MAKEFILE= ${MAKEFILE}
SHELL	= /bin/sh
COPY	= cp
MOVE	= mv -f
GMKNODIR= --no-print-directory
INSTALL = pips_install_file
INSTSRC = install_pips_sources
TMPFILE = .tmp
DEPFILE = \$(TMPFILE)
#
# default targets...
all: generate_makefile_if_necessary_and_possible
all: \$(ARCH) $ALL_RULE_TARGET
#
recompile: depend header all
recompile: generate_makefile_if_necessary_and_possible
#
full-clean: clean clean-all-compiled
clean-all-compiled: 
	-for d in \`echo \$(ROOT)/Include/makefile_macros.* | \\
		sed 's,[-_a-zA-z0-9/]*/makefile_macros\.,,g'\`; do \\
	  test -d \$\$d && { \\
	    echo "cleaning \$\$d"; \\
	    \$(RM) \$\$d/*.[oa] \$\$d/*pips Makefile.depend.\$\$d; \\
	    test "\`ls -A \$\$d\`" || rmdir \$\$d; } ; \\
	done
#
OLD:; mkdir OLD
RCS:; mkdir RCS
# .PHONY is a gnu extension...
.PHONY: install all depend header recompile clobber count info delta
.PHONY: generate_makefile_if_necessary_and_possible
# to override SUN/GNU default rule
.SCCS_GET:
# %:SCCS/s.%:
.SUFFIXED: .tex .dvi .ps .c .h .o .w .a .html .ftex .newgen .m4h .m4c .m4f
# .INIT is a SUN extension...
.INIT: 
check_install:
# is this appropriate?
# .DEFAULT:; @echo "$MAKEFILE [\$(FWD_ROOT)] *** no rule for target $@!" >&2
#
# Directory redirection to \$(PIPS_DIRECTORY_FOR_\$(ARCH)_BINARIES)
# if defined: a link is created there... enabling to store binaries
# somewhere else even if it looks like a local subdirectory.
# else the default is simply to make a subdir.
#
PIPS_DIRECTORY_FOR_BINARIES=\$(PIPS_DIRECTORY_FOR_\$(ARCH)_BINARIES)
ifneq (\$(PIPS_DIRECTORY_FOR_BINARIES),)
\$(ARCH):
	# creating remote \$(ARCH) directory...
	rdir=\$(PIPS_DIRECTORY_FOR_BINARIES)/${SIDE}/${PART}/${target_dir};\\
	test -d \$\$rdir || mkdir \$\$rdir ; \\
	ln -s \$\$rdir \$(ARCH);
else
\$(ARCH):; test -d \$(ARCH) || mkdir \$(ARCH)
endif
#
include \$(ROOT)/Include/define_libraries.make
include \$(ROOT)/Include/makefile_macros.\$(ARCH)
include \$(CONFIG)
#
# The software architecture (compilers and options...) used.
CPPFLAGS += -DSOFT_ARCH='"\$(ARCH)"'
#
# {C,CPP,LD,L,Y}OPT macros allow to *add* things from the command line
# as gmake CPPOPT="-DFOO=bar" ... that will be added to the defaults
# a typical interesting example is to put -pg in {C,LD}OPT
#
PREPROC=  \$(CC) -E \$(CANSI) \$(CPPFLAGS) \$(CPPOPT)
COMPILE=  \$(CC) \$(CANSI) \$(CFLAGS) \$(COPT) \$(CPPFLAGS) \$(CPPOPT) -c
F77COMPILE=\$(FC) \$(FFLAGS) \$(FOPT) -c
LINK=	  \$(LD) \$(LDFLAGS) \$(LDOPT) -o
SCAN=	  \$(LEX) \$(LFLAGS) \$(LOPT) -t
TYPECHECK=\$(LINT) \$(LINTFLAGS) \$(CPPFLAGS) \$(LINT_LIBS)
PARSE=	  \$(YACC) \$(YFLAGS) \$(YOPT)
ARCHIVE=  \$(AR) \$(ARFLAGS)
PROTOIZE= \$(PROTO) \$(PRFLAGS) -E "\$(PREPROC)"
M4FILTER= \$(M4) \$(M4OPT) \$(M4FLAGS)
MAKEDEP=  \$(CC) \$(CMKDEP) \$(CANSI) \$(CPPFLAGS) \$(CPPOPT) \$(CFLAGS) \$(COPT)
#
# for easy debugging... e.g. gmake ECHO='something' echo
echo:; @echo \$(ECHO)
#
# Default rules
ifneq (\$(ARCH),.)
%: \$(ARCH)/%
%.o: \$(ARCH)/%.o
%.a: \$(ARCH)/%.a
endif
# C:
\$(ARCH)/%.o: %.c ; \$(COMPILE) \$< -o \$@
# Fortran 77:
\$(ARCH)/%.o: %.f ; \$(F77COMPILE) \$< -o \$@

# if LATEX, MAKEIDX, LX2HTML, DVIPS RMAN and so are not avaible, 
# the following rules would not prevent compilation...
%.tex: %.ftex
	# building \$@ from \$<
	sed -f \$(PIPS_ROOT)/Utils/accent.sed \$< > \$@
#
%.dvi: %.tex
	# building \$@ from \$<
	-grep '\\\\makeindex' \$*.tex && touch \$*.ind
	\$(LATEX) \$<
	-grep '\\\\bibdata{' \$*.aux && { \$(BIBTEX) \$* ; \$(LATEX) \$< ;}
	test ! -f \$*.idx || { \$(MAKEIDX) \$*.idx ; \$(LATEX) \$< ;}
	\$(LATEX) \$<
	touch \$@
#
%.ps: %.dvi
	# building \$@ from \$<
	\$(DVIPS) -o \$@ \$<
	touch \$@
#
%.html: %.l
	# building \$@ from \$<
	\$(NROFF) -man \$< | \$(RMAN) -f html > \$@
	touch \$@
#
%.ps: %.l
	# building \$@ from \$<
	\$(GROFF) -tpe -man \$< > \$@
#
# Add the PIPS icon in the background of every page:
#?cd \$*; for f in *.html ; do \\
# sed 's,^<BODY,<BODY background="http://www.cri.ensmp.fr/pips/images/logo-pips-embossed-bright-small.jpg" ,' $$f > $$f.bg; \\
# mv $$f.bg $$f; done
# the .html file is not a real one, it is just used as a dependency.
%.html: %.tex
	# building \$@ from \$<
	\$(RM) -r \$* \$@ ; \
	mkdir \$* ;\
	\$(LX2HTML) \$(L2HFLAGS) \$< ;\
	# Does not removed the .pl files since it is used
	# for cross-referencing between HTML articles:
	\$(RM) \$*/*.aux \$*/*.idx \$*/*.log \$*/*.tex \$*/*.css \
	    \$*/.[A-Z]* ;
	# local .ps.gz if available
	test ! -f \$*.ps || { cp \$*.ps \$* ; \$(ZIP) \$*/\$*.ps ; }
	# index.html
	{ cd \$* ; \
	  ln -s \$@ index.html ; \
	  chmod -R a+r-wx * ; \
	  chmod a+rx,ug+w,o-w . ; } 
	touch \$@
#
%.newgen: %.tex
	# building \$@ from \$<
	\$(RM) \$@
	remove-latex-comments \$<
	chmod a-w \$@
#
%.o: %.f
	\$(F77COMPILE) \$< -o \$@
#
%.f: %.m4f
	# building \$@ from \$<
	\$(M4FILTER) \$(M4FOPT) \$< > \$@
#
%.c: %.m4c
	# building \$@ from \$<
	\$(M4FILTER) \$(M4COPT) \$< > \$@
#
%.h: %.m4h
	# building \$@ from \$<
	\$(M4FILTER) \$(M4HOPT) \$< > \$@
# MISC
.runable: \$(SCRIPTS)
	# protected because only the owner can chmod files
	-[ ! "\$(SCRIPTS)" ] || chmod a+rx \$(SCRIPTS)
	touch .runable
#
quick-install: .runable
#
%



##############################################################################

$verbose "common to Libs and Passes"

[ $DIRTYPE = 'Libs' -o $DIRTYPE = 'Passes' ] && 
cat >> $MAKEFILE <<% 
#
# prefixed objects:
LIB_OBJECTS:=\$(addprefix \$(ARCH)/, \$(LIB_OBJECTS))
#
LIB_TARGET=	\$(ARCH)/lib\$(TARGET).a
BIN_TARGET=	\$(ARCH)/\$(TARGET)
INC_TARGET=	\$(TARGET).h
#
INSTALL_INC+=	\$(INC_TARGET)
INSTALL_LIB+=	\$(LIB_TARGET)
INSTALL_BIN+=	`if [ $DIRTYPE = 'Passes' ] ; then echo '\$(BIN_TARGET)' ; fi`
#

.PRECIOUS: \$(LIB_TARGET) \$(BIN_TARGET)

# .INIT is a SUN extention...
# .INIT: check_os

check_install:
	@if test \`echo *.a | wc -w\` -gt 1 ; \\
	then \\
	  echo "install failed: additional local libraries prevented it" >&2;\\
	  exit 1;\\
	fi

\$(LIB_TARGET): \$(INC_TARGET) \$(DERIVED_CFILES) \$(DERIVED_HEADERS)

\$(LIB_TARGET): \$(LIB_OBJECTS) \$(TARGET_OBJECTS)
	\$(RM) \$(LIB_TARGET)
	\$(ARCHIVE) \$(LIB_TARGET) \$(LIB_OBJECTS) \$(TARGET_OBJECTS)
	-\$(RANLIB) \$(LIB_TARGET)

%


##############################################################################

$verbose "specific to Libs"

[ $DIRTYPE = 'Libs' ] && cat >> $MAKEFILE <<% 

CFILES=		\$(LIB_CFILES)
OBJECTS=	\$(LIB_OBJECTS)
INCLUDES=	\$(LIB_HEADERS)
SOURCES+= 	\$(INCLUDES) \$(CFILES) \$(DOCS) \$(LIB_MAIN)
#

clean-compiled:
	\$(RM) \$(OBJECTS) \$(LIB_TARGET) \$(BIN_TARGET)  \$(LIB_MAIN:.c=.o) \\
		\$(ARCH)/pips \$(ARCH)/[tw]pips

clean: generate_makefile_if_necessary_and_possible clean-compiled
	-\$(RM) TAGS \$(BIN_TARGET) \$(DERIVED_HEADERS) \$(DERIVED_CFILES) \\
		\$(DERIVED_FILES) *.~[0-9]~ \$(LIB_IFILES) \$(INC_TARGET) core

INC_CFILES += \$(LIB_CFILES)

%


##############################################################################

$verbose "specific to Libs for PIPS"

[ $DIRTYPE = 'Libs' -a $PART = PIPS ] && cat >> $MAKEFILE <<% 
#
# CFILES+=	\$(MAIN).c 
# OBJECTS+=	\$(MAIN).o 
#

test: all
	#
	# building a local PIPS
	#
	\$(LINK) \$(ARCH)/pips \$(PIPS_MAIN) -lpips \$(PIPS_LIBS) 
	@echo 

wtest: all
	#
	# building a local WPIPS
	#
	\$(LINK) \$(ARCH)/wpips \$(WPIPS_ADDED_LDFLAGS) \$(WPIPS_MAIN) \\
		-lwpips \$(PIPS_LIBS) \$(WPIPS_ADDED_LIBS)
	@echo 

ttest: all
	#
	# building a local TPIPS
	#
	\$(LINK) \$(ARCH)/tpips  \$(TPIPS_MAIN) \\
	    -ltpips \$(PIPS_LIBS) \$(TPIPS_ADDED_LIBS)
	@echo 

ftest: all
	#
	# building a local Full PIPS
	#
	\$(LINK) \$(ARCH)/fpips \$(FPIPS_MAIN) -lpips -ltpips -lwpips \\
	    \$(PIPS_LIBS) \$(TPIPS_ADDED_LIBS) \$(WPIPS_ADDED_LIBS)
	#
	# creating links
	#
	\$(RM) \$(ARCH)/pips \$(ARCH)/tpips \$(ARCH)/wpips 
	ln \$(ARCH)/fpips \$(ARCH)/pips 
	ln \$(ARCH)/fpips \$(ARCH)/tpips 
	ln \$(ARCH)/fpips \$(ARCH)/wpips 
	#
	@echo 

# obsolete rule I guess. test is better. FC.
\$(BIN_TARGET): \$(ARCH)/\$(LIB_MAIN:.c=.o) \$(LIB_TARGET)
	#
	# building \$@
	#
	\$(LINK) \$(BIN_TARGET) \$< \$(PIPS_LIBS)
	@echo 

clobber: clean ; -Delete

%


##############################################################################

$verbose "specific to Passes"

[ $DIRTYPE = 'Passes' ] && cat >> $MAKEFILE <<% 
#
# a little bit rough...
#
\$(ARCH)/\$(TARGET): \$(ARCH)/lib\$(TARGET).a \\
	\$(PIPS_ROOT)/Lib/\$(ARCH)/*.a \\
	\$(LINEAR_ROOT)/Lib/\$(ARCH)/*.a \\
	\$(NEWGEN_ROOT)/Lib/\$(ARCH)/*.a
#
INSTALL_LIB +=	\$(LIB_MAIN:.c=.o)
#
CFILES	 =	\$(LIB_CFILES)
OBJECTS	 =	\$(LIB_OBJECTS)
INCLUDES =	\$(LIB_HEADERS)
SOURCES  += 	\$(INCLUDES) \$(CFILES) \$(DOCS)
#

\$(PIPS_BINDIR):; mkdir \$(PIPS_BINDIR)

\$(BIN_TARGET): \$(INC_TARGET) \$(LIB_MAIN:.c=.o) \$(LIB_TARGET)
	\$(LINK) \$(BIN_TARGET) \\
	    \$(LIB_MAIN:.c=.o) \$(LIB_TARGET) \$(TARGET_LIBS)
	@echo 

clean-compiled:
	\$(RM) \$(OBJECTS) \$(LIB_TARGET) \$(BIN_TARGET) 

clean: clean-compiled
	-\$(RM) TAGS \$(INC_TARGET) \$(DERIVED_HEADERS) \$(DERIVED_CFILES) \\
		\$(DERIVED_FILES) *.~[0-9]~ core

INC_CFILES += \$(LIB_CFILES)

%


##############################################################################

$verbose "specific to Default"

[ $DIRTYPE = 'Default' ] && cat >> $MAKEFILE <<% 

clean:
	\$(RM) core *~ \
	    *.aux *.log *.toc *.idx *.ind *.ilg *.lof *.lot *.bbl *.blg

%



##############################################################################

$verbose "specific to Production/Lib and Passes"

[ \( $DIRTYPE = 'Passes' -o $DIRTYPE = 'Libs' \) -a "$production" ] &&
cat >> $MAKEFILE <<%

.PRECIOUS: \$(ROOT)/Lib/\$(LIB_TARGET) \$(ROOT)/Bin/\$(BIN_TARGET)

\$(ROOT)/Include/\$(TARGET).h: header
	@\$(INSTALL) -f \$(ROOT)/Include \$(TARGET).h

\$(ROOT)/Lib/\$(LIB_TARGET): \$(LIB_TARGET) 
	@\$(INSTALL) -r \$(RANLIB) \$(ROOT)/Lib/\$(ARCH) \$(LIB_TARGET)

\$(LIB_OBJECTS): \$(TARGET).h

recompile: \$(ROOT)/Include/\$(TARGET).h \$(ROOT)/Lib/\$(LIB_TARGET) 

%



##############################################################################

$verbose "specific to PIPS/Production/Passes"

[ $DIRTYPE = 'Passes' -a "$production" -a $PART = PIPS ] &&
cat >> $MAKEFILE <<%

\$(TARGET_OBJECTS): \$(TARGET).h

\$(PIPS_ROOT)/Bin/\$(ARCH):; mkdir \$@

\$(PIPS_ROOT)/Bin/\$(BIN_TARGET): \$(BIN_TARGET) \$(PIPS_ROOT)/Bin/\$(ARCH)
	@\$(INSTALL) -x \$(PIPS_ROOT)/Bin/\$(ARCH) \$(BIN_TARGET)

recompile: \$(PIPS_ROOT)/Bin/\$(BIN_TARGET)

%



##############################################################################
#
# Common to all: installation and Makefile generation
#

$verbose "common to all again"

cat >> $MAKEFILE <<%

ALL_SOURCES =	\$(SOURCES) \$(CONFIG)

\$(TARGET_DIR):;	mkdir \$(TARGET_DIR)

#check_os:
#	@if test -n "\$(PIPS_CHECK_OS)"; \\
#	then echo "Cannot run make under this OS release"; \\
#	     echo "\$(PIPS_CHECK_OS)"; exit 1; \\
#	fi

.quick-install: \$(INSTALL_INC) \$(INSTALL_LIB) \$(INSTALL_BIN) \\
	\$(INSTALL_SHR) \$(INSTALL_DOC) \$(INSTALL_UTL) \$(INSTALL_RTM) \\
	\$(INSTALL_HTM) 
	#
	# installing files 
	# 
	# plain files
	@test ! "\$(INSTALL_INC)" || \\
	    \$(INSTALL) -f \$(INSTALL_INC_DIR) \$(INSTALL_INC) 
	@test ! "\$(INSTALL_DOC)" || \\
	    \$(INSTALL) -f \$(INSTALL_DOC_DIR) \$(INSTALL_DOC) 
	@test ! "\$(INSTALL_HTM)" || \\
	    \$(INSTALL) -f \$(INSTALL_HTM_DIR) \$(INSTALL_HTM) 
	@test ! "\$(INSTALL_UTL)" || \\
	    \$(INSTALL) -f \$(INSTALL_UTL_DIR) \$(INSTALL_UTL) 
	@test ! "\$(INSTALL_SHR)" || \\
	    \$(INSTALL) -f \$(INSTALL_SHR_DIR) \$(INSTALL_SHR)
	@test ! "\$(INSTALL_RTM)" || \\
	    \$(INSTALL) -f \$(INSTALL_RTM_DIR) \$(INSTALL_RTM)
	# libs...
	@test ! "\$(INSTALL_LIB)" || \\
	    \$(INSTALL) -r \$(RANLIB) \$(INSTALL_LIB_DIR) \$(INSTALL_LIB)
	# executables...
	@test ! "\$(INSTALL_BIN)" || \\
	    \$(INSTALL) -x \$(INSTALL_BIN_DIR) \$(INSTALL_BIN)
	touch .quick-install

tar:
	# taring \$(TARGET)
	cd ..; \\
	    \$(TAR) cf \$(TARGET).tar \\
		\$(addprefix \$(TARGET)/,\$(ALL_SOURCES) Makefile) ; \\
	    \$(ZIP) \$(TARGET).tar

quick-install: .quick-install

.makefile: \$(ROOT)/Utils/pips-makemake
	# 
	# regenerating Makefile
	#
	pips-makemake ${PIPSMKMK_OPTION}; touch .makefile

generate_makefile_if_necessary_and_possible:
	@[ ! -x \$(ROOT)/Utils/pips-makemake ] || \\
	    \$(MAKE) \$(GMKNODIR) .makefile 

count:;	@wc -l \$(ALL_SOURCES)

#
# some quick entries for SCCS:
info:
	-test -d SCCS && sccs info
	-test -d RCS && rlog -L -l RCS/*

# try to delta all checked out files
delta:
	-test -d SCCS && test ! "\`sccs tell\`" || sccs delget \`sccs tell\`
	-test -d RCS && ci -u \`rlog -L -R RCS/*\``

%



##############################################################################
#

$verbose "specific to Production"

[ "$production" ] && cat >> $MAKEFILE <<%
#
# print out the files for a release...
FWD_ROOT=.
RELEASE+= \$(ALL_SOURCES) \$(DEDUCED_CFILES) \$(DEDUCED_HEADERS) Makefile

release:
	@for f in \$(RELEASE) ; \\
	do echo \$(FWD_ROOT)/\$\$f ; done \$(RELEASE_OUT)
	    
%


##############################################################################
#
# partie specifique a Development
#

$verbose "specific to Development"

[ ! "$production" ] && cat >> $MAKEFILE <<%

check_sccs:
	@if [ -d SCCS ] ; then \\
	    [ ! "\`sccs tell\`" ] || \\
	    { echo "SCCS files locked, cannot install"; exit 1;} fi ;

check_rcs:
	@if [ -d RCS ] ; then \\
	    [ ! "\`rlog -L -R RCS/*\`" ] || \\
	    { echo "RCS files locked, cannot install"; exit 1;} fi ;

# install installs sources, so depends on sources. FC
# to insure the library is compiled before hand, a make is added.
.install: \$(ALL_SOURCES) 
	#
	# first check
	#
	\$(MAKE) check_install check_sccs check_rcs
	#
	# make target directory if necessary
	#
	\$(MAKE) \$(GMKNODIR) all \$(TARGET_DIR) 
	#
	# installing new source files 
	#
	@echo ""; echo; echo -n "Description of changes: " ; \\
	read x ; \\
	\$(INSTSRC) -rv -s \`pwd\` -t \$(TARGET_DIR) -y "\$\$x" \$(ALL_SOURCES)
	-@cd \$(TARGET_DIR) ; pips-makemake $PIPSMKMK_OPTION -S
	touch .install
	\$(MAKE) quick-install

install:  .install

# diff between dev and prod sources:
diff:
	#
	# showing diff between the local and installed versions
	#
	-@for f in \$(ALL_SOURCES) ; do \\
	  echo "DIFFERENCES BETWEEN DEV AND PROD FOR \$\$f:" ; \\
	  \$(DIFF) \$\$f \$(TARGET_DIR)/\$\$f ; \\
	done

%



##############################################################################
#
# La partie commune aux bibliotheques et aux passes :

$verbose "common to Libs and Passes"

[ $DIRTYPE = 'Libs' -o $DIRTYPE = 'Passes' ] && 
cat >> $MAKEFILE <<%
#

\$(ROOT)/Lib:; mkdir \$@

lint:; \$(TYPECHECK) \$(CFILES)|sed '/possible pointer alignm/d;/gen_alloc/d'

TAGS: \$(INCLUDES) \$(CFILES)
	etags \$(INCLUDES) \$(CFILES)
	ctags \$(INCLUDES) \$(CFILES)

\$(TARGET)-local.h:
	[ -f \$(TARGET)-local.h ] || { \\
	    test -f RCS/\$(TARGET)-local.h,v && co \$(TARGET)-local.h ; \\
	    touch \$(TARGET)-local.h ; }

# headers are not generated automatically, bacause it should be
# done each time a c file is touched, which is too much...
# thus it does depend only of the -local.h.
# header file reconstruction should be required explicitely
# with the header rule.
# some filtering is performed to avoid variations that depends on
# includes...

build-header-file:
	# 
	# building the header file...
	#
	\$(COPY) \$(TARGET)-local.h \$(INC_TARGET);\\
	{ \\
	echo "/* header file built by \$(PROTO) */";\\
	echo "#ifndef ${dir_simple_name}_header_included";\\
	echo "#define ${dir_simple_name}_header_included";\\
	cat \$(TARGET)-local.h;\\
	\$(PROTOIZE) \$(INC_CFILES) | \\
	  sed 's/struct _iobuf/FILE/g;s/__const/const/g;/_BUFFER_STATE/d;' ;\\
	echo "#endif /* ${dir_simple_name}_header_included */";\\
	} > \$(INC_TARGET).tmp
	\$(MOVE) \$(INC_TARGET).tmp \$(INC_TARGET)

# .header carrie all dependencies for INC_TARGET:
.header: \$(TARGET)-local.h \$(DERIVED_HEADERS) \$(INC_CFILES) 
	\$(MAKE) \$(GMKNODIR) build-header-file ; touch .header

# checks for the header file, and build if necessary...

# header: checks for INC_TARGET dependencies (.header) and for
# INC_TARGET existance !
header: .header \$(INC_TARGET)

\$(INC_TARGET): \$(TARGET)-local.h 
	\$(RM) .header; \$(MAKE) \$(GMKNODIR) .header

ifneq (\$(ARCH),.)
lib\$(TARGET).a: \$(ARCH) \$(ARCH)/lib\$(TARGET).a
endif

%



##############################################################################

$verbose "all but Default"

[ $DIRTYPE = 'Libs' -o $DIRTYPE = 'Passes' -o $DIRTYPE = 'Compiled' ] && 
cat >> $MAKEFILE <<%
#

# indirect depend bacause I do not trust make for the inclusion of
# Makefile.depend if that very file does not exist.

.depend: \$(CFILES) \$(DERIVED_CFILES) $MAKEFILE.depend.\$(ARCH)
	touch \$@

depend: .depend

# default rule if the dependence file is not there...
# forces the regeneration:
# - the dependences' generation needs the headers
# - the headers are generated thru the Makefile.
# - the Makefile needs the dependences.
# how to get out of this?
$MAKEFILE.depend.\$(ARCH):
	#
	# generating the dependences for \$(ARCH)
	#
	# creates an empty dependence file, it is ok for going on and
	# will prevent any recursion for generating the same dependences.
	touch \$@ 
	# the headers are needed. 
	test ! "\$(INC_TARGET)" -o -f "\$(INC_TARGET)" || \\
	    \$(MAKE) \$(GMKNODIR) \$(INC_TARGET)
	# may need the derived files
	test ! "\$(DERIVED_CFILES)" || \$(MAKE) \$(GMKNODIR) \$(DERIVED_CFILES)
	# now it's okay fo building all the dependences.
	# well, the how depends on the compiler...:-(
	test ! "\$(CFILES)\$(DERIVED_CFILES)" || \\
	{ \$(MAKEDEP) \$(CFILES) \$(DERIVED_CFILES) > \$(TMPFILE) ; \\
	  sed 's,^\(.*\.o:\),\$\$(ARCH)/\1,' \$(DEPFILE) > \$@ ; \\
	  \$(RM) \$(TMPFILE) \$(DEPFILE) ; }

#
# dependences are stored in another file which is simply included.
# the file differs for each "architectures"
include $MAKEFILE.depend.\$(ARCH)
%



##############################################################################

touch .makefile

### force dependence list generation, later on...
rm -f $MAKEFILE.depend* .depend
# ${PIPS_MAKE:-gmake} depend

### end good case
echo

# end of $RCSfile: pips-makemake,v $
#
