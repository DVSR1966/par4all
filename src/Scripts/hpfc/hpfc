#! /bin/sh
# 
# $RCSfile: hpfc,v $ (version $Revision$)
# $Date: 1995/04/25 15:54:29 $, 
#
# HPFC scripts very front-end.
# just an easy way not to have to remember the name of some scripts.
#
# (c) Fabien COELHO 1993, 1994, 1995... I'm getting old!
#
# TODO: enhance the help capabilities. (That is write a doc:-)
#

script=`basename $0`

# HELP message

usage()
{
  cat >&2 <<-END
	usage: $script [-vdq] function [options] [arguments]
	  version is $Revision$, function among (3 significant characters:-):
	  h|help: gives this help (but nothing more:-)
	  c|compile: compile
	  f|full: compile, compile and link
	  D|debug: compile with debug option
	  C|clean: clean directories
	  d|delete: delete hpfc directory
	  F|filter: show filter result
	  m|make: compile and link
	  r|run: run...
	  v|view|less: display a file
	  p|pvm: pvm control
	  i|interactive: interactive mode (thanks to GNU readline library)
	  s|ls: list directory content
	  q|quit: does nothing...
	  validate: used by the validation...
	  test: make test...
	  pwd: print working directory (but cannot change it:-)
	END
  exit ${1:-1}
}

# DEFAULT MODE:
#
# May be overwritten in the environment, thus enabling several level of
# hpfc thru the interactive option to share the same behavior.
#
# The default is demo (stderr silent, no warnings) because it does not
# look nice to make some "hpfc -q ..." and to have to explain that it
# is for demonstration purposes, in order to hide the generated warnings:-)
# I was kind enough to generate these (many) warnings, as a reminder of
# the (many) weaknesses of this prototype compiler.

HPFC_MODE=${HPFC_MODE:-demo}
export HPFC_MODE

# options

while getopts vdq OPT
do
  case $OPT in
    v) HPFC_MODE=void ;;
    q) HPFC_MODE=demo ;;
    d) HPFC_MODE=debug ;;
    *) usage 4
  esac
done

shift `expr $OPTIND - 1`

# DEFAULT if no arguments: interactive. That makes sense.

[ "$#" -eq 0 ] && exec hpfc_interactive

# ELSE exec the required command.
#
# if the argument is a file, the default is to compile it,
# else the command is executed. I allowed this non homogeneous
# feature to enable "hpfc file" to compile that file, in normal mode...
# just a shorthand for MY personnal use. FC.

key=$1
if [ -f "$key" ] 
then
  HPFC_MODE=void
  key=compile
else
  shift
fi

# The following should be coherent with the help...

case $key in
  h|hel*) usage 0 ;;
  c|com*) hpfc_compile -k $HPFC_MODE "$@" ;;
  f|ful*) hpfc_compile -k $HPFC_MODE -k full "$@" ;;
  D|deb*) hpfc_compile -k $HPFC_MODE "$@" ;;
  C|cle*) Delete "$@" ; hpfc_delete "$@" ;;
  d|del*) hpfc_delete "$@" ;;
  F|fil*) hpfc_directives < "$@" ;;
  m|mak*) cd `basename $1 .hpfc`.hpfc ; make all ;;
  r|run*) hpfc_run "$@" ;;
  p|pvm*) echo "$@" | pvm ; echo ;;
  v|vie*|les*) less "$@" ;;
  i|int*) hpfc_interactive ;;
  s|ls*) ls ;;
  val*) hpfc_compile -k validate "$@" ;;
  pwd*) pwd ;;
  tes*) cd $HPFC_DIR ; make test ;;
  q|qui*) : ;;
  *) usage 2
esac

# that is all
#
