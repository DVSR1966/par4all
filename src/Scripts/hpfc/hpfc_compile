#! /bin/sh
#
# HPFC driver, Fabien COELHO
#
# $RCSfile: hpfc_compile,v $ version $Revision$
# $Date: 1995/08/08 09:19:47 $, 

sh=`basename $0`
STATUS='0'
VERBOSE=':'
VERBOSEARG=
DEBUG=':'
DEBUGARG=
DELETE=':'
MAKE=':'
PIPS='pips'
TMP="/tmp/hpfc_tmp.`hostname`.$$"
INSTALL="$HPFC_TOOLS/hpfc_install"
PIPSARGS='-s MUST_REGIONS -p HPFC_CLOSE'
TIMEPROP=
PIPSPROP=

unset HPFFILES MODULE WORKSPACE DUMPFILES NOINSTALL STDOUT STDERR REDIRECT \
	FILES
rm -f $TMP.*

#
# functions

verbose()
{
  echo "$sh: $@"
}

debug()
{
  echo "$sh: $@" >&2
}

default_module()
{
  sed -n 's,^       *[Pp][Rr][Oo][Gg][Rr][Aa][Mm] \([^ ]*\),\1,p' $1 |
  tr 'a-z' 'A-Z'
}

#
# source ~/.hpfcrc if exists. May be used to modify the defaults

[ -r "$HOME/.hpfcrc" ] && . $HOME/.hpfcrc

#

usage()
{
  cat <<-EOF
	Usage: $sh [-vxDdhMqstirT] [-k K] [-p P] [-w W] [-m M] [-n N|file[.f]]
	  version is $Revision$
	  -t: test (dump the resulting files)
	  -i: no installation
	  -p P: P pips version to be used
	  -r: pips redirection (>&2)
	  -v: verbose about what is being done
	  -x: not verbose
	  -D: debug messages
	  -d: delete the pips database
	  -h: help, this help is displayed
	  -M: make (compile and link) the generated codes
	  -q: quiet  (stdout=/dev/null)
	  -s: silent (stderr=/dev/null - for demonstations:-)
	  -w W: workspace W is used for pips and hpfc
	  -m M: module M is compiled (should be the main)
	  -n N: source number n
	  -k K: keyword control (debug,demo,full,validate,timing,void|none)
	  file: source file
	EOF
  exit ${1:-1}
}

#
# the keyword control enables a global control of the switches

while getopts rtivxDdMqsn:hm:w:p:k: OPT
do
  case $OPT in
    t) DUMPFILES='1' ;;
    i) NOINSTALL='1' ;;
    p) PIPS="$OPTARG" ;;
    r) REDIRECT=':' ;;
    v) VERBOSE='verbose' ;;
    x) VERBOSE=':' ;;
    D) DEBUG='debug' ;;
    d) DELETE='Delete' ;;
    M) MAKE='gmake' ;;
    q) STDOUT='/dev/null' ;;
    s) STDERR='/dev/null' ;;
    n) HPFFILES="$HPFC_DIR/Tests/hpftest$OPTARG.f" ;;
    m) MODULE="$OPTARG" ;;
    w) WORKSPACE="$OPTARG" ;;
    k) case $OPTARG in
	 demo)
	     STDERR='/dev/null' ;
	     PIPSPROP='-1 HPFC_NO_WARNING -1 NO_USER_WARNING' ;
	     VERBOSE='verbose' ;;
	 full)
	     DELETE='Delete' ;
	     MAKE='gmake' ;;
	 timing)
	     TIMEPROP='-1 LOG_TIMINGS' ;;
	 void|none) : ;;
	 validate) 
	     DUMPFILES=':' ;
	     NOINSTALL=':' ;
	     REDIRECT=':' ;
	     VERBOSE=':' ;
	     DELETE='Delete' ;;
	 debug)
	     VERBOSEARG='-v'
	     DEBUGARG='-d'
	     PIPSPROP='-0 HPFC_NO_WARNING -0 NO_USER_WARNING -1 LOG_TIMINGS' ;
	     VERBOSE='verbose' ;
	     DEBUG='debug' ;
	     DELETE=':'	;
	     REDIRECT=':' ;;
	 *)  echo "no $OPTARG keyword" ;
	     usage 3 ;;
       esac ;;
    h|*) usage 1 ;;
  esac
done

shift `expr $OPTIND - 1`

[ "$#" -ne 0 ] &&
for f
do
  HPFFILES="$HPFFILES `dirname $f`/`basename $f`"
done

[ "$HPFFILES" ] || usage 2
[ "$MODULE" ] || MODULE=`default_module $HPFFILES .f`
[ "$WORKSPACE" ] || WORKSPACE=`echo $MODULE | tr 'A-Z' 'a-z'`

for f in $HPFFILES
do
  FILES="$FILES -f $f"
done

$VERBOSE "applying hpfc on file(s) $HPFFILES"
$DEBUG "`type $PIPS`"

#
# PIPS execution with possible redirections...

[ "$DEBUG" != : ] && set -x

eval $PIPS $FILES $PIPSARGS $PIPSPROP $TIMEPROP -m $MODULE $WORKSPACE \
	${REDIRECT:+">&2"} ${STDOUT:+"> $STDOUT"} ${STDERR:+"2> $STDERR"}

STATUS="$?"
set +x

[ "$STATUS" -eq 0 ] || 
{
  $VERBOSE "exiting - pips error"
  exit $STATUS
}

[ "$NOINSTALL" ] ||
{
  $VERBOSE "installing generated codes"
  
  [ -d "$WORKSPACE.hpfc" ] || mkdir $WORKSPACE.hpfc
  eval ${INSTALL} -b $WORKSPACE.database $FILES -i \
	$VERBOSEARG $DEBUGARG -t $WORKSPACE.hpfc -n $MODULE
}

[ "$DUMPFILES" ] &&
{
  $VERBOSE "dumping generated files"

  DBDIR=$WORKSPACE.database

  #
  # stupid hack to ease the dump

  touch $DBDIR/_host.h $DBDIR/_node.h 
  [ -f $DBDIR/host.f ] &&
  {
    touch $DBDIR/_init.h 
    mv $DBDIR/host.f $DBDIR/_host.f
    mv $DBDIR/node.f $DBDIR/_node.f
    mv $DBDIR/init_param.f $DBDIR/_init.f
    mv $DBDIR/parameters.h $DBDIR/_parameters.h
  }

  cat 	$DBDIR/*_host.f \
	$DBDIR/*_node.f \
	$DBDIR/*_parameters.h \
        $DBDIR/*_init.h \
        $DBDIR/*_init.m4 \
 	$DBDIR/*_host.h \
	$DBDIR/*_node.h 
}
  
[ "$DELETE" = : ] ||
{
  $VERBOSE "deleting $WORKSPACE workspace"
  $DELETE $WORKSPACE
}

[ "$MAKE" = : ] ||
{
  $VERBOSE "making $WORKSPACE"
  cd $WORKSPACE.hpfc
  eval $MAKE all \
  	${REDIRECT:+">&2"} ${STDOUT:+"> $STDOUT"} ${STDERR:+"2> $STDERR"}
}

$VERBOSE "done"

exit $STATUS

# that is all
#
