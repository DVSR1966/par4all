#! /bin/sh
#
# HPFC driver, Fabien COELHO
#
# $RCSfile: hpfc_compile,v $ version $Revision$
# $Date: 1995/03/24 14:47:56 $, 

script=`basename $0`
STATUS='0'
VERBOSE=':'
DEBUG=':'
DELETE=':'
MAKE=':'
PIPS='pips'
TMP="/tmp/hpfc_tmp.`hostname`.$$"
INSTALL="$HPFC_TOOLS/hpfc_install"
PIPSARGS='-s MUST_REGIONS -p HPFC_CLOSE'

unset HPFFILE MODULE WORKSPACE DUMPFILES NOINSTALL STDOUT STDERR
rm -f $TMP.*

#
# functions

verbose()
{
  echo "$script: $@"
}

debug()
{
  echo "$script: $@" >&2
}

default_module()
{
  sed -n 's,^       *[Pp][Rr][Oo][Gg][Rr][Aa][Mm] \([^ ]*\),\1,p' $1 |
  tr 'a-z' 'A-Z'
}

#
# source ~/.hpfcrc if exists. May be used to modify the defaults

[ -r "$HOME/.hpfcrc" ] && . $HOME/.hpfcrc

#

usage()
{
  cat <<-EOF
	Usage: $script [-vxDdhMqsti] [-k K] [-p P] [-w W] [-m M] [-n N|file[.f]]
	  version is $Revision$
	  -t: test (dump the resulting files)
	  -i: no installation
	  -p P: P pips version to be used
	  -v: verbose about what is being done
	  -x: not verbose
	  -D: debug messages
	  -d: delete the pips database
	  -h: help, this help is displayed
	  -M: make (compile and link) the generated codes
	  -q: quiet  (stdout=/dev/null)
	  -s: silent (stderr=/dev/null - for demonstations:-)
	  -w W: workspace W is used for pips and hpfc
	  -m M: module M is compiled (should be the main)
	  -n N: source number n
	  -k K: keyword control (demo, validate)
	  file: source file
	EOF
  exit ${1:-1}
}

#
# the keyword control enables a global control of tyhe switches

while getopts tivxDdMqsn:hm:w:p:k: OPT
do
  case $OPT in
    t) DUMPFILES="1" ;;
    i) NOINSTALL="1" ;;
    p) PIPS="$OPTARG" ;;
    v) VERBOSE='verbose' ;;
    x) VERBOSE=':' ;;
    D) DEBUG='debug' ;;
    d) DELETE='Delete' ;;
    M) MAKE='gmake' ;;
    q) STDOUT='/dev/null' ;;
    s) STDERR='/dev/null' ;;
    n) HPFFILE="$HPFC_DIR/Tests/hpftest$OPTARG.f" ;;
    m) MODULE="$OPTARG" ;;
    w) WORKSPACE="$OPTARG" ;;
    k) case $OPTARG in
	 demo) 
	     DELETE=Delete ;
	     STDERR='/dev/null' ;
	     VERBOSE='verbose' ;
	     MAKE='gmake' ;;
	 validate) 
	     DUMPFILES="1" ;
	     NOINSTALL="1" ;
	     VERBOSE=':' ;
	     DELETE='Delete' ;;
	 *)  echo "no $OPTARG keyword" ;
	     usage 3 ;;
       esac ;;
    h|*) usage 1 ;;
  esac
done

shift `expr $OPTIND - 1`

[ "$#" -eq 1 ] && { HPFFILE=`dirname $1`/`basename $1 .f`.f ; shift; }
[ "$#" -eq 0 ] || usage 2

[ "$MODULE" ] || MODULE=`default_module $HPFFILE .f`
[ "$WORKSPACE" ] || WORKSPACE=`echo $MODULE | tr 'A-Z' 'a-z'`

$VERBOSE "applying hpfc on file $HPFFILE"
$DEBUG "`type $PIPS`"

eval $PIPS -f $HPFFILE $PIPSARGS -m $MODULE $WORKSPACE \
	${STDOUT:+"> $STDOUT"} ${STDERR:+"2> $STDERR"}

STATUS="$?"

[ "$NOINSTALL" ] ||
{
  $VERBOSE "installing generated codes"
  
  [ -d "$WORKSPACE.hpfc" ] || mkdir $WORKSPACE.hpfc
  ${INSTALL} -b $WORKSPACE.database -r $HPFFILE -i -t $WORKSPACE.hpfc -n $MODULE
}

[ "$DUMPFILES" ] &&
{
  $VERBOSE "dumping generated files"

  DBDIR=$WORKSPACE.database

  #
  # stupid hack to ease the dump

  touch $DBDIR/_host.h $DBDIR/_node.h 
  [ -f $DBDIR/host.f ] &&
  {
    touch $DBDIR/_init.h 
    mv $DBDIR/host.f $DBDIR/_host.f
    mv $DBDIR/node.f $DBDIR/_node.f
    mv $DBDIR/init_param.f $DBDIR/_init.f
    mv $DBDIR/parameters.h $DBDIR/_parameters.h
  }

  cat 	$DBDIR/*_host.f \
	$DBDIR/*_node.f \
	$DBDIR/*_parameters.h \
        $DBDIR/*_init.h \
        $DBDIR/*_init.m4 \
 	$DBDIR/*_host.h \
	$DBDIR/*_node.h 
}
  
[ "$DELETE" = : ] ||
{
  $VERBOSE "deleting $WORKSPACE workspace"
  $DELETE $WORKSPACE
}

[ "$MAKE" = : ] ||
{
  $VERBOSE "making $WORKSPACE"
  (cd $WORKSPACE.hpfc ; $MAKE all) > $STDOUT 2> $STDERR
}

$VERBOSE "done"

exit $STATUS

# that is all
#
