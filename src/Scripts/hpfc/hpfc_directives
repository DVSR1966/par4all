#! /bin/sh
#
# $RCSfile: hpfc_directives,v $ ($Date: 1995/09/05 08:34:19 $, )
# version $Revision$
#
# Filter to switch from hpf directives to subroutine calls to be parsed
# by a Fortran 77 parser. I guess some perl or awk might be much nicer
# and more efficient, but I'm not very good at it:-) Looks like an exercice
# of style, "yes I can do it with seds and trs";-)
# It may be thought as clever or stupid:-)
# Only one subroutine or function should be put in the pipe. 
# ??? I do not deal with "R E A L" like Fortran lexical problems.
# ??? There may be problems with if and do instructions...
#     that is IF () & DO with a directive comment would not work.
#
# (c) Fabien Coelho 02/95.
#
# F77 and HPF directives -> 
# calls to HPFC special subroutines and functions -> 
# HPFC subs and functs analyzed and removed -> 
# analyzes on the correct transformed code
#

#
# HPF directives:
#
# _a: align
# _b: realign
# _c: cyclic
# _d: distribute
# _e: redistribute
# _i: independent
# _k: block 
# _n: new
# _p: processors
# _s: *
# _t: template
# _u: pure
# _y: dynamic
#
# _o: temporary for logical
#
# missing: inherit
#
# static directives are moved AFTER declarations, 
# since I need to parse them as statements.
#
# HPFC directives: (FCD, Fabien Coelho Directives:-)
#
# _1: synchro
# _2: timeon
# _3: timeoff
#
# (_ is hpfc)
#

#
# commands:
#
# the sed version should be able to handle very large lines... 
# gnu sed is okay. idem tr.

SED=${HPFC_SED:-sed}
TR=${HPFC_TR:-tr}
RM=rm
BASENAME=basename

#
# temporary files prefix

SCRIPT=`$BASENAME $0`

TMP=/tmp/$SCRIPT.$$
$RM -f $TMP.*

#
# directive normalization
# FCD are simply translated into hpf-like prefixed directives.
#
$SED 's,^[Cc!\*][Hh][Pp][Ff]\$\(.\)[ 	]*,chpf$\1,;
      s,^[Cc!\*][Ff][Cc][Dd]\$\(.\)[ 	]*,chpf$\1,' |
#
# lower case letters for directives *only*
#
$SED '/^chpf\$/s,A,a,g;/^chpf\$/s,B,b,g;/^chpf\$/s,C,c,g;/^chpf\$/s,D,d,g;
      /^chpf\$/s,E,e,g;/^chpf\$/s,F,f,g;/^chpf\$/s,G,g,g;/^chpf\$/s,H,h,g;
      /^chpf\$/s,I,i,g;/^chpf\$/s,J,j,g;/^chpf\$/s,K,k,g;/^chpf\$/s,L,l,g;
      /^chpf\$/s,M,m,g;/^chpf\$/s,N,n,g;/^chpf\$/s,O,o,g;/^chpf\$/s,P,p,g;
      /^chpf\$/s,Q,q,g;/^chpf\$/s,R,r,g;/^chpf\$/s,S,s,g;/^chpf\$/s,T,t,g;
      /^chpf\$/s,U,u,g;/^chpf\$/s,V,v,g;/^chpf\$/s,W,w,g;/^chpf\$/s,X,x,g;
      /^chpf\$/s,Y,y,g;/^chpf\$/s,Z,z,g;' |
#
# and continuation handling:
# put on one line
#
$TR '\012' '' | 
#
# remove not desired cr (& and 6 column styles)
#
$SED 's,&[ 	]*chpf\$., ,g;
      s,chpf\$[^ ], ,g' | 
#
# and back to a normal file
#
$TR '' '\012' | 
#
# massive transformations
#
$SED '/^chpf\$/s,\([ 	\,(]\)block\([ 	\,()]\),\1_k\2,g
      /^chpf\$/s,\([ 	\,(]\)block\([ 	\,()]\),\1_k\2,g
      /^chpf\$/s,_k\([\,)]\),_k()\1,g
      /^chpf\$/s,\([ 	\,(]\)cyclic\([ 	\,()]\),\1_c\2,g
      /^chpf\$/s,\([ 	\,(]\)cyclic\([ 	\,()]\),\1_c\2,g
      /^chpf\$/s,_c\([\,)]\),_c(1)\1,g
      /^chpf\$/s,\*\([\,)]\),_s()\1,g
      s,^chpf\$ synchro,      _1,
      s,^chpf\$ timeon,      _2,
      s,^chpf\$ timeoff,      _3,
      s,^chpf\$ dynamic \(.*\),      _y(\1),
      s,^chpf\$ pure \(.*\),      _u(\1),
      s,^chpf\$ template \(.*\),      _o \1      _t(\1),
      s,^chpf\$ processors \(.*\),      _o \1      _p(\1),
      s,^chpf\$ align \(.*\) with \(.*\),      _a(\1\,\2),
      s,^chpf\$ realign \(.*\) with \(.*\),      _b(\1\,\2),
      s,^chpf\$ distribute \(.*\) onto \(.*\),      _d(\1\,\2),
      s,^chpf\$ redistribute \(.*\) onto \(.*\),      _e(\1\,\2),
      s,^chpf\$ independent[ 	]*\([^( ,][^()\,]*\),      _i(\1),
      s,^chpf\$ independent[ 	]*\(.*\),      _i\1,
      s,^      _i\,,      _i()\,,
      s,^      _i(\([^)]*\))[ 	]*\,[ 	]*new[ 	]*(\([^)]*\)),      _i(\1)      _n(\2),
      s,_\([123abdeintpyou]\),call hpfc\1,g
      s,_\([cks]\),hpfc\1,g' |
#
# handles multi lines breaking (independent with new...)
#
$TR '' '\012' |
#
# separates static directives from others
#
$SED "/^      call hpfc[adptuy]/w $TMP.1
      /^      call hpfc[adptuy]/d" > $TMP.0

#
# line before which the static directives will be inserted
# i.e. last line of the declarations.
#
# first, find the last declaration line 
# (program and subroutine needed if none!)

LINE=`
$SED -n '/^[^Cc\*!].... [ 	]*[Ii][Nn][Tt][Ee][Gg][Ee][Rr][ 	\*]/=
         /^[^Cc\*!].... [ 	]*[Rr][Ee][Aa][Ll][ 	\*]/=
         /^[^Cc\*!].... [ 	]*[Ss][Tt][Rr][Ii][Nn][Gg][ 	\*]/=
         /^[^Cc\*!].... [ 	]*[Ss][Uu][Bb][Rr][Oo][Uu][Tt][Ii][Nn][Ee][ 	]/=
         /^[^Cc\*!].... [ 	]*[Pp][Rr][Oo][Gg][Rr][Aa][Mm][ 	]/=
         /^[^Cc\*!].... [ 	]*[Ll][Oo][Gg][Ii][Cc][Aa][Ll][ 	\*]/=
         /^[^Cc\*!].... [ 	]*[Cc][Oo][Mm][Pp][Ll][Ee][Xx][ 	\*]/=
         /^[^Cc\*!].... [ 	]*[Bb][Yy][Tt][Ee][ 	\*]/=
         /^[^Cc\*!].... call hpfco /=' $TMP.0 | 
$SED -n '$p'`

#
# then deal with continuations if any.
# comments and blank lines are also skipped, or why should I not ?

LAST_LINE=`
$SED -n "1,$LINE b
         s,^\([^Cc\*!]....[^ ]\),\1,
         s,^\([Cc\*!]\),\1,
         s,^\([ 	]*\)\$,\1,
         t cont
         q
         : cont
         =" $TMP.0 | 
$SED -n '$p'`

LINE=${LAST_LINE:-$LINE}

#
# final output

{
  $SED -n "1,$LINE p" $TMP.0
  $SED -n p $TMP.1
  $SED "1,$LINE d" $TMP.0
} | 
#
# breaks generated lines which are too long
# first insert some marks, after comma or parenthesis
# there should be no identifiers larger than 15 characters (55+15=70)
#
$SED '/^[^Cc\*!].... call hpfc.[( ].\{50,\}$/s/\([^]\{55\}[^,()]*[,()]\)/\1     x /g;
      /^[^Cc\*!].... call hpfco /s,call hpfco,logical,' |
#
# later replaced by CR
#
$TR '' '\012'

# clean temporary files

$RM -f $TMP.*

# That is all
#
