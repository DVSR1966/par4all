#!/bin/sh
#
# SCCS Stuff:
# $RCSfile: validate-sequential,v $ version $Revision$,
# ($Date: 1997/04/08 09:21:25 $, ) 
#
# A small Validation Suite test program for PIPS.
#
# Validate without arguments takes the contents of the default_file file,
# else arguments are subdirectories D in vdir. 
# For each D, one applies test_aspect that checks every file .f F.
# If a file F.{tpips,test} exists, it is executed and its output is
# compared to $F.result/test.
# Otherwise, every module M in F.database/modules is parallelized and its
# output is compared with $F.result/M (which is assumed to have been
# created by the user).
#
# A mail report is sent to the person running validate (see accept).
# 
# Mail problems to jouvelot@cri.ensmp.fr
#
# Modifications
#  - validate used to perform cd's and to execute where the validation
#    files are; the Production version of pips was used by default,
#    unless special links were created from Validation towards the
#    versions to be tested; now validate execute in the current directory
#    and the databases are created in the current directory; the version
#    of pips which is used is also reported back to the user;
#
#    Mainly, the $aspect variable was changed from a relative directory name
#    into an absolute directory name
#  - tmperr added
#  - source environment if necessary

# Ok at CRI...
[ "$PIPS_ROOT" ] || . /projects/Pips/pipsrc.sh

[ "$PIPS_VALIDDIR" ] || PIPS_VALIDDIR=$PIPS_ROOT/Validation
export PIPS_VALIDDIR

umask 002

vdir=${PIPS_VALIDDIR}
tdir=${PIPS_TEMPDIR:=/tmp}

if test -r $vdir/defaults.$PIPS_ARCH
then
    default_file="$vdir/defaults.$PIPS_ARCH"
else
    default_file="$vdir/defaults"
fi

RUNNER=`whoami`
HOSTNAME=`hostname`
PWD=`pwd`
subject="PIPS Validation:"
failed=""

# to be used by report for subject generation

directory=
program=
export directory
export program

VERBOSE=':'
DEBUG=':'

MAIL='/usr/ucb/mail'
test ! -x $MAIL && MAIL=mail

MAX_NB_LINES='100'

export MAX_NB_LINES
unset UNIQDIR pips_version RUNDIR LOCKFILE PERFORMANCE

#
# echos the pips to be run

which_executable()
{
  PATH="$PWD:$PWD/$PIPS_ARCH:$PIPS_ROOT/Bin/$PIPS_ARCH:$PATH" \
    type $1 | sed "s,.* is ,,"
}

usage()
{
  {
    echo "Usage: $0 [-uvdsth] [-a address] [-l file] [-x pips] [-r dir] [-f file] [modules]"
    echo "  -u: uniq directory to be used"
    echo "  -t: timing"
    echo "  -h: help"
    echo "  -v: verbose"
    echo "  -s: silent (default)"
    echo "  -d: debug"
    echo "  -a address: mail destination"
    echo "  -l file: lockfile name where to report"
    echo "  -f file: fortran files"
    echo "  -x pips: pips to be used (default as Validate)"
    echo "  -y tpips: tpips to be used (idem)"
    echo "  -r dir: directory where to run (default .)"
    echo "  -i lines: max number of lines for sendig a full message"
    echo "  -p file: properties.rc file"
    echo "  -m file: pipsmake.rc file"
  } >&2
  exit ${1:-1}
}

error()
{ ret=$1; shift; echo "$RCSfile: validate-sequential,v $:" "$@" >&2 ; exit $ret; }

#
# get options

unset FILES

while getopts tuvsdhx:y:r:f:l:i:a:p:m: opt
do
  case $opt in
    t) PERFORMANCE="begin: `date`" ;;
    v) VERBOSE='echo' ;;
    s) VERBOSE=':' ;;
    d) DEBUG='debug' ;;
    u) UNIQDIR=".validate_directory.$HOSTNAME.$$" ;;
    x) pips_version="$OPTARG" ;;
    y) tpips_version="$OPTARG" ;;
    r) RUNDIR="$OPTARG" ;;
    f) FILES="$FILES $OPTARG" ;;
    l) LOCKFILE="$OPTARG" ;;
    h) usage 0 ;;
    i) MAX_NB_LINES="$OPTARG" ;;
    a) RUNNER="$OPTARG" ;;
    p) PIPS_PROPERTIESRC="$OPTARG" ; export PIPS_PROPERTIESRC ;;
    m) PIPS_PIPSMAKERC="$OPTARG" ; export PIPS_PIPSMAKERC ;;
    *) usage 1
  esac
done

shift `expr $OPTIND - 1`

#
# to avoid a which call, where ~/.cshrc is executed and so on!
#
# FC, Tue Mar  8 14:19:50 MET 1994
#

debug()
{
  echo "$@" >&2
}

RUNDIR=${RUNDIR:-$PWD}
cd $RUNDIR || error 2 "cd $RUNDIR returned $?"

pips_version=${pips_version:-`which_executable pips`}
tpips_version=${tpips_version:=`which_executable tpips`}

export pips_version tpips_version

$VERBOSE "pips to be used: $pips_version"
$VERBOSE "tpips to be used: $tpips_version"

#
# a special directory is used when the -u option is set.
#
[ "$UNIQDIR" ] && { mkdir $UNIQDIR ; cd $UNIQDIR;}

$VERBOSE "running in directory `pwd`"

tmpout=${tdir}/validate.$$
tmperr=${tdir}/validate_err.$$
diffout_e=${tdir}/diff_e.$$
diffout=${tdir}/diff.$$
# global variable...
errors=${tdir}/errors.$$

echo 0 > $errors

report()
{
  result=$1
  message=$2
  
  $DEBUG " || report $1 suggested"

  if [ $result -ne 0 ] 
  then
    { 
      # reports errors if any
      [ -s "$tmperr" ] && \
      {
        echo "--"
	# [ -s $tmpout ] && cat $tmpout
	echo "--"
	cat $tmperr
	echo "--";
      }
      echo "Validate Message from $HOSTNAME:"
      echo
      echo "$message" 
    } | $MAIL -s "$subject ${3:-$directory/$program}" $RUNNER

    # beurk!
    int=`cat $errors`
    echo `expr $int + 1` > $errors

    return 1
  fi

  return 0 
}

make_diff()
{
  aspect=$1
  name=$2
  module=$3

  refresult=$aspect/$name.result/$module
  test -f $refresult.$PIPS_ARCH && refresult=$refresult.$PIPS_ARCH

  if [ ! -f $refresult ] 
  then
    report 1 "Cannot open result file $aspect/$name.result/$module"
    [ "$LOCKFILE" ] && echo "$aspect:$name:$module" > $LOCKFILE.$HOSTNAME
    exit 1
  fi

  rm -f $refresult.out
  cp $tmpout $refresult.out

  # diff -e $aspect/$name.result/$module $tmpout > $diffout_e
  ${PIPS_DIFF:-diff} $refresult $tmpout > $diffout
  status=$?
  lines=`wc -l $diffout | sed 's,^ *\([0-9][0-9]*\)[^0-9].*,\1,'`
  if [ $lines -gt $MAX_NB_LINES ] 
  then 
    rm -f $diffout ;
    echo "too many lines ($lines), look by hand" > $diffout ;
  fi

  report $status \
  "`echo Run accept on mail message to resynchronize for $pips_version. ;\
  echo Differences for $module in $refresult: ;\
  cat $diffout ;\
  echo ; `"

  # clean if ok.
  test $status -eq 0 && rm -f $refresult.out
}

test_aspect()
{
  aspect=$1
  
  (for file in ${FILES:-`ls $aspect/*.[fF]`} ; do
     name=`basename $file .f`
     name=`basename $name .F`
     u_name=`echo $name | tr a-z A-Z`
     program=$name

     test -r $aspect/$name.f -o -r $aspect/$name.F || 
	echo "! no $aspect/$name.[fF]"
     
     rm -f $tmpout $tmperr

     #
     # .test case

     if [ -f $aspect/$name.test ] 
     then
       echo "testing with $name.test" > $tmperr
       $aspect/$name.test > $tmpout 2> $tmperr
       STATUS=$?
       [ -f core ] && rm -f core

       report $STATUS \
         "Execution of $aspect/$name.test 
failed with $pips_version 
or $tpips_version" || \
         { $DEBUG " || error"; continue;}
       
       make_diff $aspect $name test
       continue
     fi
     
     #
     # .tpips case

     if [ -r $aspect/$name.tpips ]
     then
       echo "testing with $name.tpips" > $tmperr
       $tpips_version $aspect/$name.tpips > $tmpout 2> $tmperr
       STATUS=$?
       test -f core && rm -f core
       
       report $STATUS \
         "Execution of $aspect/$name.tpips
failed with $tpips_version" || \
         { $DEBUG " || error"; continue;}

       make_diff $aspect $name test
       continue
     fi

     #
     # default_test case
     
     if [ -f $aspect/default_test ]
     then
       echo "testing with default_test" > $tmperr
       sed "s/tested_file/$name/g;s/TESTED_FILE/$u_name/g" \
       $aspect/default_test > $aspect/$name.test
       chmod ugo+x $aspect/$name.test
       $aspect/$name.test > $tmpout 2> $tmperr
       STATUS=$?
       [ -f core ] && rm -f core

       report $STATUS "Execution of $aspect/default_test on $name.f failed with $pips_version" || { $DEBUG " || error"; rm -f $aspect/$name.test; continue;}
       
       rm -f $aspect/$name.test
       make_diff $aspect $name test
       continue
     fi
     
     #
     # default case
     $DEBUG " || default case"
     echo "testing with none (parallelize)" > $tmperr
     Init -f $file -d $name > $tmpout 2> $tmperr
     report $? "Cannot initialize $file" || continue
     
     for module in `cat $name.database/modules` ; do
       Display -m $module > $tmpout 2> $tmperr
       STATUS=$?
       [ -f core ] && rm -f core

       report $STATUS "Cannot parallelize module $module in $file with $pips_version" || continue
       
       make_diff $aspect $name $module
     done

     
     rm -f $tmpout $tmperr
     Delete $name > $tmpout 2> $tmperr
     report $? "Cannot delete workspace $name"
   done)
}

# validate command itself

case $# in
  0 ) 	aspects=`sed -e '/^#/d' ${default_file}` ;;
  * ) 	aspects="$*" ;;
esac

# if [ -f pipsmake.rc ] 
# then
#   report 2 "validate cannot be run with a local pipsmake.rc."
#   [ "$LOCKFILE" ] && echo "validate:$HOSTNAME" > $LOCKFILE.$HOSTNAME
#   exit 4
# elif [ -f properties.rc ]
# then
#   report 3 "validate cannot be run with a local properties.rc."
#   [ "$LOCKFILE" ] && echo "validate:$HOSTNAME" > $LOCKFILE.$HOSTNAME
#   exit 5
# fi

echo 0 > $errors 

#
# Main loop

for i in $aspects
do
  old_errors=`cat $errors`
  directory=$i

  if [ ! -d "$vdir/$i" ]
  then
    report 1 \
      "$i is not a directory in $vdir"
  elif [ -f $vdir/$i/pipsmake.rc ] 
  then
    report 2 \
    "validate should not be run with a pipsmake.rc in $vdir/$i."
  elif [ -f $vdir/$i/properties.rc ]
  then
    report 3 \
  "validate should not be run with a properties.rc in $vdir/$i."
  else

    $VERBOSE "validating $i"

    test_aspect $vdir/$i
  fi

  if [ "`cat $errors`" -ne "$old_errors" ] 
  then
    failed="$i-$failed"
  fi
done

#
# Final situation

if [ "`cat $errors`" -eq 0 ] 
then
  final="succeeded"
else
  final="failed (-$failed)"
fi

#
# clean directory and files

rm -f $tmpout $tmperr $diffout $diffout_e

[ "$UNIQDIR" ] && { cd ..; rm -rf $UNIQDIR;}

[ "$PERFORMANCE" ] && PERFORMANCE="$PERFORMANCE, end: `date`"

#
# Final report

directory=
program=

if [ "$LOCKFILE" ]
then
  echo $failed > "$LOCKFILE.$HOSTNAME"
else
  report 1 \
  "Your Validation Suite Test for

$aspects ${FILES:+($FILES)}
  
$final
   with $pips_version 
   and $tpips_version
   on $HOSTNAME

$PERFORMANCE

in case of problems, contact <coelho@cri.ensmp.fr>." "$final"

fi

rm -f $errors

#
# that's all
#
