#! /bin/sh
#
# (parallel) validation, Fabien Coelho, March 1994
#
# SCCS Stuff:
# $RCSfile: Validate,v $ ($Date: 1996/08/22 15:38:35 $, ), version $Revision$,
# got on %D%, %T%
# $Id$
#

#
# get the environment if necessary

[ "$PIPS_ROOT" ] || . /projects/Pips/pipsrc.sh

#
# should be in the environment

# why does pwd sometimes return /home/users/pips on chailly?
# sh and pwd are not very clever:-)

REAL_PIPSHOME=`(cd $PIPS_HOME/../pips;pwd)`

#

script=`basename $0`

unset VALIDOPT PERFORMANCE

vdir="$PIPS_VALIDDIR"
VALID="$PIPS_UTILDIR/validate-sequential"

# so as to find the right ping, mail and date...
PATH="/usr/ucb:/usr/etc:/usr/sbin:/usr/bin:$PATH"

hostname=`hostname`
user=`whoami`
PWD=`pwd`

# defaults

DEBUG=":"
DEBUG2=":"
VERBOSE=":"
parallel="1"
# time between sub-validation return checks.
update=30 

#
# functions

debug()
{
  echo "$@" >&2
}

verbose()
{
  echo "$@" >&2
  echo "$@" >> $MSG
}

unstammer()
{
    unst_f1=""
    unst_f2=""
    unst_sep=${2:-:}
    unst_counter=1;

    for unst_f1 in `
    for unst_f2 in \`echo "$1" | tr "$unst_sep" ' '\`
    do
      echo "$unst_counter	$unst_f2"
      unst_counter=\`expr $unst_counter + 1\`
    done | sort +1d -2 +0n -1 | uniq -1 | sort +0n -1 | cut -f 2 `
    do
      echo -n "$unst_sep$unst_f1"
    done
}

#
# keeps alive hosts from the list
#
alive()
{
  for v_host in `echo $1 | tr ':' ' '`
  do
    ping $v_host > /dev/null 2>&1 && echo -n ":$v_host"
  done
}

#
# echos the pips to be run

which_executable()
{
  PATH="$PWD:$PWD/$PIPS_ARCH:$PIPS_BINDIR/$PIPS_ARCH:$PATH" \
    type $1 | sed "s,.* is ,,"
}

#
# on errors
#
validate_usage()
{
  cat >&2 <<-EOF
	$script (version $Revision$): $@
	Description
	  This script executes pips non regressive tests (in \$PIPS_VALIDDIR).
	  The modules to test (script arguments) are executed in parallel on
	  available hosts from \$PIPS_HOSTS. Reports are sent to the user.
	Usage: $script [-dsvpnhtVD] [-a address] [-r dir] [-l dir]
	       [-x/y pips/tpips] [-i lines] [-f file] [modules]
	  -h: this help
	  -d: debug
	  -D: more debug
	  -s: silent (default)
	  -v: verbose
	  -V: more verbose
	  -p: parallel (default)
	  -n: sequential
	  -t: timing
	  -a adress: mail sent to (default "$user" for you:-)
	  -r dir: run directory (default .)
	  -i lines: max number of lines for sending a full message
	  -l dir: lock directory (default .)
	  -f file: what file in a module (use with -n)
	  -x pips: pips to be used
	  -y tpips: tpips to be used 
	    default {,t}pips: . ./\$PIPS_ARCH \$PIPS_ROOT/Bin/\$PIPS_ARCH type)
	  modules: if none, from file \$PIPS_VALIDDIR/defaults.\$PIPS_ARCH
	           else from file \$PIPS_VALIDDIR/defaults
EOF
  exit ${1:-1}
}

#
# I'm not so happy of that function...
# an allow null_glob_expansion would have been nicer
#
prefix_file_exists()
{
  $DEBUG2 " | in prefix_file_exists for $1"
  test "`echo -n $1.* | tr -cs '*' ' '`" = " *" || \
  { echo "1" ; $DEBUG2 " | found" ; return;}
  $DEBUG2 " | not found"
}

#
# finds an availbale host
#   waits for the termination of one run
#   stores the result and
#   gives the available hostname back
#
available_host()
{
  [ ! "`prefix_file_exists $WAITING`" ] && return 1
  #
  # waiting
  #
  while [ ! "`prefix_file_exists $RESULT`" ]
  do
    $DEBUG " | sleep" 
    sleep $update
  done
  #
  # get the result, hostname and remove the lock files
  #
  ah_file=`echo -n $RESULT.* | tr ' ' '\012' | head -1`
  # failed="$failed-"`cat $ah_file`
  #
  # failures append
  cat $ah_file >> $FAILED
  ah_host=`basename $ah_file | cut -d. -f 5`
  rm -f $WAITING.$ah_host $RESULT.$ah_host
  #
  # available host
  #
  $DEBUG2 " | available host found: $ah_host"
  echo $ah_host
}

#
# date taken for timing
#
local_date() { date +"%h %d %y, %T";}

#
# to avoid nfs problems
#
absolute_name()
{
  echo $1 | sed "s,^$REAL_PIPSHOME,$PIPS_HOME,"
}

#
# validate
#
send_validate()
{
  validate_module=$1
  validate_host=$2

  $DEBUG " | rsh $validate_host \ "
  $DEBUG " | $VALID \ "
  $DEBUG " |   -r $RUNDIR \ "
  $DEBUG " |   -l $RESULT \ "
  $DEBUG " |   -x $pips_version \ "
  $DEBUG " |   -y $tpips_version \ "
  $DEBUG " |   -u $VALIDOPT $validate_module"

  rsh $validate_host \
  $VALID -r $RUNDIR -l $RESULT -x "$pips_version" -y "$tpips_version" \
         -u $VALIDOPT $validate_module &

  echo "$validate_module" > $WAITING.$validate_host
}

#
# get options

while getopts DVdtsvpnhr:l:x:y:i:a: opt
do
  case $opt in
    d) DEBUG="debug" ;;
    D) DEBUG="debug"; DEBUG2="debug";  VALIDOPT="$VALIDOPT -d" ;;
    t) PERFORMANCE="begin `local_date`"; VALIDOPT="$VALIDOPT -t";;
    v) VERBOSE='verbose' ;;
    V) VERBOSE='verbose' ; VALIDOPT="$VALIDOPT -v";;
    i) VALIDOPT="$VALIDOPT -i $OPTARG" ;;
    s) VERBOSE=':' ;;
    p) parallel="1" ;;
    n) parallel="" ;;
    r) RUNDIR="$OPTARG" ;;
    l) LOCKDIR="$OPTARG" ;;
    x) pips_version="$OPTARG" ;;
    y) tpips_version="$OPTARG" ;;
    h) validate_usage 0 ;;
    a) user="$OPTARG" ; VALIDOPT="$VALIDOPT -a $user" ;;
    *) echo  ; validate_usage 1
  esac
done

shift `expr $OPTIND - 1`

#
# some default cases

RUNDIR=`absolute_name ${RUNDIR:-$PWD}`
LOCKDIR=`absolute_name ${LOCKDIR:-$RUNDIR}`

#
# lock names

WAITING="$LOCKDIR/.validate_waiting.$hostname.$$"
RESULT="$LOCKDIR/.validate_result.$hostname.$$"
FAILED="$LOCKDIR/.validate_failed.$hostname.$$"
MSG="$LOCKDIR/.validate_msg.$hostname.$$"

#
# the working directory

cd $RUNDIR
 
#
# variables

if test -r $vdir/defaults.$PIPS_ARCH
then
    default_file="$vdir/defaults.$PIPS_ARCH"
else
    default_file="$vdir/defaults"
fi

default_test="default_test"
subject="PIPS Validation"

pips_version=`absolute_name ${pips_version:-\`which_executable pips\`}`
tpips_version=`absolute_name ${tpips_version:-\`which_executable tpips\`}`

export pips_version
export tpips_version

$DEBUG " | $user on $hostname"
$DEBUG2 " | real PIPSHOME: $REAL_PIPSHOME"

#
# modules to be checked by the validation

case $# in
  0) $VERBOSE "Taking default validation from $default_file" ;
     MODULES=`sed /#/d < $default_file | tr -s '\012' ' '` ;;
  *) MODULES="$*"
esac

$DEBUG2 " | MODULES 1: $MODULES"
MODULES=`unstammer "$MODULES" ' '`

$VERBOSE "Modules: $MODULES"

#
# hosts to be used by the validation

VALHOSTS=$hostname

if [ "$parallel" ]
then
  VALHOSTS="$VALHOSTS:${PIPS_HOSTS:-chailly}"
fi

$DEBUG2 " | VALHOSTS 1: $VALHOSTS"
VALHOSTS=`unstammer $VALHOSTS`

$DEBUG2 " | VALHOSTS 2: $VALHOSTS"
VALHOSTS=`alive $VALHOSTS`

$VERBOSE "Hosts: $VALHOSTS"

#
# Sequential case

[ ! "$parallel" ] && \
{
  $VERBOSE "sequential validation"

  $DEBUG "exec $VALID \ "
  $DEBUG "   -r $RUNDIR \ "
  $DEBUG "   -x $pips_version \ "
  $DEBUG "   -u $VALIDOPT $MODULES"

  exec $VALID -r $RUNDIR -x "$pips_version" -u $VALIDOPT $MODULES
}

#
# Parallel case

$VERBOSE "parallel validation"
$VERBOSE " - with $pips_version"
$VERBOSE " - and  $tpips_version"
$VERBOSE " - in $RUNDIR"

$VERBOSE "creating initial locks"

touch $FAILED

for h in `echo $VALHOSTS | tr ':' ' '`
do
  $DEBUG " | initial lock for $h"
  touch $WAITING.$h $RESULT.$h
done

#

$VERBOSE "validating modules"

for m in $MODULES
do
  h=`available_host`
  $VERBOSE " - validate $m on $h"
  send_validate $m $h
done

#

$VERBOSE "waiting for reports"

while available_host ; do : ; done > /dev/null

#
#

$VERBOSE "generating final report"

failed=`tr '\012' '-' < $FAILED`

$DEBUG2 " | failed 0: /$failed/"
failed=`unstammer "$failed" '-'`
$DEBUG " | failed : /$failed/"

if [ "$failed" ]
then
  final="failed: [$failed]"
  finalsubject="$subject: failed"
else
  final="succeeded"
  finalsubject="$subject: succeeded"
fi

[ "$PERFORMANCE" ] && PERFORMANCE="$PERFORMANCE, end `local_date`"

cat >> $MSG <<%

Your Validation Suite Test for

$MODULES

$final
pips:  $pips_version
tpips: $tpips_version

$PERFORMANCE

In case of problems, contact coelho@cri.ensmp.fr
%

mail -s "$finalsubject" $user < $MSG

rm -f $FAILED $MSG

#
# that is all
#
