#! /usr/local/bin/perl
#
# $RCSfile: pips-deal-with-include,v $ (version $Revision$)
# $Date: 1996/07/05 10:11:20 $, 
#

sub debug {
    #printf STDERR @_;
}


sub include {
    my($file_name) = @_;
    &debug("Include file \"%s\"\n", $file_name);
    printf "c Inlining file '%s':\n", $file_name;
    # Since there is no module in the .f,
    # they may be have been forbidden,
    # so try in the originate directory:
    open(++$input,"<../$file_name")
	|| die "Include cannot open \"$file_name\"\n";
}


sub end_include {
    close($input--) || die "Cannot close stdin.\n";
    if ($input >= 1) {
	print "c End Inlining file.\n";
    }
}


$file_name = $ARGV[0];
$input = 0;
&debug("File \"%s\"\n", $file_name);
open(++$input,"<$file_name") || die "Include cannot open \"$file_name\"\n";
($output_file_name = $file_name) =~ s/\.f$/.FF/;
open(STDOUT, ">$output_file_name")
    || die "Include cannot open \"$output_file_name\"\n";

while ($input >= 1) {
    while (<$input>) {
	# Execute the 'include':
	/^\s+include\s*'([^']*)'/i && &include($1) && next;
        # Put any 'implicit none' as comment.
        /^(\s+implicit\s*none)/i && s/^/c Not yet implemented in Pips\nc  (it is MIL-STD-1553 Fortran and not Fortran 77):\nc/;
        print;
    }
    &end_include;
}

system("mv $file_name $file_name.orig; mv $output_file_name $file_name");
