!
! $Id$
!
! $Log: hpfc_bufmgr.m4f,v $
! Revision 1.14  1997/05/28 12:46:03  zory
! replace pvm calls by hpfc subroutines
!
! Revision 1.13  1997/05/02 16:36:18  coelho
! global buffer id shared with reception.
!
! Revision 1.12  1997/04/17 11:55:22  coelho
! better headers.
!
!
! First routines to fake the pack/unpack of data.
! The issue is to allow quite simply to measure the different
! overheads in the enumaration/packing/message stuff.
! Counts the number of calls, say for some statistics.
! The the routines for doing the job...
!
! ??? the routines are used for I/O communication with the reception
! already performed, hence the use of a global BUFFER ID...
! 
!
define(`GENERIC_BUFFER_PACK',`dnl
pushdef(`PVMTYPE',$1)dnl
fake_buffers(dnl
      subroutine build_name(PVMTYPE,hpfc fake bufpck)()
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      SEND NOT INITIALIZED=.FALSE.
      BUFINDEX=0
      hpfc fake bufpck=hpfc fake bufpck+1
      end)
      subroutine build_name(PVMTYPE,hpfc bufpck)()
      integer info, bufid
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      if (SEND NOT INITIALIZED) then
         call HPFC INIT SEND(BUFFER ENCODING, bufid)
         debug(if (bufid.lt.0) 
     $        write (unit=0,fmt=*) "pvm initsend error")
         SEND NOT INITIALIZED=.FALSE.
      endif
      call HPFC PACK(PVMTYPE, build_name(PVMTYPE,BUFF),
     $     BUFINDEX, 1, info)
      BUFINDEX=0
      end
popdef(`PVMTYPE')')dnl
define(`GENERIC_BUFFER_UPCK',`dnl
pushdef(`PVMTYPE',$1)dnl
fake_buffers(dnl
      subroutine build_name(PVMTYPE,hpfc fake bufupk)(lid)
      integer lid
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      if (RECEIVED NOT PERFORMED) then
         RECVCHANNELS(lid) = RECVCHANNELS(lid) + 2
         RECEIVED NOT PERFORMED = .FALSE.
      endif
      SIZEOFRECEIVEDBUFFER=build_name(PVMTYPE,BUFFSIZE)
      hpfc fake bufupk=hpfc fake bufupk+1
      end)
      subroutine build_name(PVMTYPE,hpfc bufupk)(lid)
      integer lid
      integer info, length, tag, tid
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      if (RECEIVED NOT PERFORMED) then
         debug(write (unit=0, fmt=*) 
     $        "RCV from ", lid, RECVCHANNELS(lid))
         call HPFC RECEIVE(NODETIDS(lid), RECVCHANNELS(lid), BUFFER ID)
         RECVCHANNELS(lid) = RECVCHANNELS(lid) + 2
         RECEIVED NOT PERFORMED = .FALSE.
         debug(write (unit=0, fmt=*) "RCV done")
      endif
      call HPFC MESSAGE INFO(BUFFER ID, length, tag, tid, info)
      SIZEOFRECEIVEDBUFFER = length / M4_PVM_LENGTH(PVMTYPE)
      call HPFC UNPACK(PVMTYPE, build_name(PVMTYPE,BUFF),
     $     SIZEOFRECEIVEDBUFFER, 1, info)
      end
popdef(`PVMTYPE')')dnl
define(`GENERIC_BUFFER',`
GENERIC_BUFFER_PACK($1)
GENERIC_BUFFER_UPCK($1)')

ifdef(`_HPFC_NO_BYTE1_',,`GENERIC_BUFFER(BYTE1)')
ifdef(`_HPFC_NO_INTEGER2_',,`GENERIC_BUFFER(INTEGER2)')
ifdef(`_HPFC_NO_INTEGER4_',,`GENERIC_BUFFER(INTEGER4)')
ifdef(`_HPFC_NO_REAL4_',,`GENERIC_BUFFER(REAL4)')
ifdef(`_HPFC_NO_REAL8_',,`GENERIC_BUFFER(REAL8)')
ifdef(`_HPFC_NO_COMPLEX8_',,`GENERIC_BUFFER(COMPLEX8)')
ifdef(`_HPFC_NO_COMPLEX16_',,`GENERIC_BUFFER(COMPLEX16)')

!
! that is all
!
