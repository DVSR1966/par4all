/* a set a functions to print the host and node status in PVM,
 * called from a Fortran subroutine. Plus some timer functions.
 * Portability based on pvm m4 macros.
 *
 * also include functions for timings...
 *
 * $RCSfile: hpfc_misc.m4c,v $ ($Date: 1995/09/04 18:04:04 $, )
 * version $Revision$
 *
 * Fabien Coelho, June 1993
 */

#include <stdio.h>
#include <string.h>
#include <assert.h>

#include "pvm3.h"

/* PVM 3.2 compatibility
 *  - pvmhostinfo <-> hostinfo
 *  - pvmtaskinfo <-> taskinfo (also adds ti_pid)
 */
#ifdef PVM_OLD
#define pvmtaskinfo taskinfo
#define pvmhostinfo hostinfo
static struct pvmtaskinfo
    task_not_found = {0, 0, 0, 0, "task not found"};
#else
static struct pvmtaskinfo
    task_not_found = {0, 0, 0, 0, "task not found", 0};
#endif

/*   end of fix for compatibility
 */

static char *
host_name(int ti_host, int nhost, struct pvmhostinfo *hostp)
{
    int i;

    for(i=0 ; i<nhost ; i++)
	if (hostp[i].hi_tid==ti_host) return hostp[i].hi_name;

    return "name not found";
}

static struct pvmtaskinfo 
which_task(int ti_tid, int ntask, struct pvmtaskinfo *taskp)
{
    int i;
    for(i=0 ; i<ntask ; i++)
	if (taskp[i].ti_tid==ti_tid) return taskp[i];

    return task_not_found; /* just to avoid a gcc warning */
}

void 
FUNCTION(print_host_info) ARGS(`')
{
    int i, info, nhost, narch;
    struct pvmhostinfo *hostp;

    info = pvm_config(&nhost, &narch, &hostp);
    if (info<0) 
	fprintf(stderr, "[print_host_info] pvm_config error (%d)\n", info);

    /* print hosts
     */
    fprintf(stderr, "PVM version %s running\n%d machine%s:\n",
	    pvm_version(), nhost, nhost==1 ? "" : "s");

    for( i=0 ; i<nhost ; i++ )
	fprintf(stderr, "%s\t(%s)\n", hostp[i].hi_name, hostp[i].hi_arch);

    fprintf(stderr, "\n");
}

void 
FUNCTION(print_task_info) ARGS(`number, tids, hosttid')
int *number, *tids, *hosttid;
{
    int i, info, nhost, narch, ntask;
    struct pvmtaskinfo *taskp;
    struct pvmhostinfo *hostp;
    
    /* get informations from pvm
     */
    info = pvm_config(&nhost, &narch, &hostp);
    if (info<0) 
	fprintf(stderr, "[print_task_info] pvm_config error (%d)\n", info);

    info = pvm_tasks(0, &ntask, &taskp);
    if (info<0) 
	fprintf(stderr, "[print_task_info] pvm_tasks error (%d)\n", info);
    
    /* print tasks
     */
    fprintf(stderr, "host running on %s\n",
	    host_name(which_task((*hosttid), ntask, taskp).ti_host,
		      nhost, hostp));

    fprintf(stderr, "%d nodes:\n", (*number));

    for( i=0 ; i<(*number) ; i++ )
	fprintf(stderr, "%d running on %s\n", i+1,
		host_name(which_task(tids[i], ntask, taskp).ti_host, 
			  nhost, hostp));

    fprintf(stderr, "\n");	
}

/******************************************************************** TIME */

#include <sys/time.h>

/* gettimeofday is not declared anywhere! 
 */
extern int gettimeofday(struct timeval *, struct timezone *tzp);
static struct timeval initial;
static int is_timer_on = 0;

void
FUNCTION(hpfc_timeon) ARGS(`')
{
    assert(!is_timer_on);
    if (gettimeofday(&initial, (struct timezone *) NULL))
	fprintf(stderr, "gettimeofday error\n");
    is_timer_on = 1;
}

#define MAX_COMMENT_LENGTH 127

void 
FUNCTION(hpfc_timeoff) ARGS(`STRING_ARG(comment)')
STRING_ARG_DECL(comment);
{
    struct timeval current;
    char buffer[ MAX_COMMENT_LENGTH + 1 ];
    int i;
    long seconds, micros;

    /* copy the comment in the buffer to ensure there is a NULL at the end.
     */  
    for (i=0; i<MAX_COMMENT_LENGTH && i<STRING_LEN(comment); i++)
	buffer[i] = STRING_PTR(comment)[i];
    buffer[i]='\0'

    assert(is_timer_on);
    if (gettimeofday(&current, (struct timezone *) NULL))
	fprintf(stderr, "gettimeofday error\n");

    seconds = current.tv_sec-initial.tv_sec;
    micros = current.tv_usec-initial.tv_usec;

    if (micros<0) micros+=1000000, seconds--;

    fprintf(stderr, "%s (wall clock time): %ld.%6ld\n", 
	    buffer, seconds, micros);

    is_timer_on = 0;
}

/* that is all
 */
