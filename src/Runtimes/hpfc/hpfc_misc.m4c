/* a set a functions to print the host and node status in PVM,
 * called from a Fortran subroutine. Plus some timer functions.
 * Portability based on pvm m4 macros.
 *
 * also include functions for timings...
 *
 * $RCSfile: hpfc_misc.m4c,v $ ($Date: 1995/09/20 18:58:19 $, )
 * version $Revision$
 *
 * Fabien Coelho, June 1993
 */

#include <stdio.h>
#include <string.h>
#include <assert.h>

#include "pvm3.h"

/* PVM 3.2 compatibility
 *  - pvmhostinfo <-> hostinfo
 *  - pvmtaskinfo <-> taskinfo (also adds ti_pid)
 */
#ifdef PVM_OLD
#define pvmtaskinfo taskinfo
#define pvmhostinfo hostinfo
#endif
/*   end of fix for compatibility
 */

#define check(var, msg) if(var<0)fprintf(stderr,"Error %d (%s)\n",var,msg);

static char *
host_name(
    int ti_host, /* the host number we are looking for */
    int nhost,   /* the number of hosts */
    struct pvmhostinfo *hostp) /* the struct in which the information is */
{
    int i;
    for(i=0 ; i<nhost ; i++)
	if (hostp[i].hi_tid==ti_host) return hostp[i].hi_name;

    return "name not found";
}

static struct pvmtaskinfo *
which_task(
    int ti_tid, /* the host number we are looking for */
    int ntask,  /* the number of hosts */
    struct pvmtaskinfo *taskp)/* the struct in which the information is */
{
    int i;
    for(i=0 ; i<ntask ; i++)
	if (taskp[i].ti_tid==ti_tid) return &taskp[i];

    return (struct pvmtaskinfo *) NULL;
}

void 
FUNCTION(print_host_info) ARGS(`')
{
    int i, info, nhost, narch;
    struct pvmhostinfo *hostp;

    info = pvm_config(&nhost, &narch, &hostp);
    check(info, "pvm_config");

    /* print hosts
     */
    fprintf(stderr, "PVM version %s running\n%d machine%s:\n",
	    pvm_version(), nhost, nhost==1 ? "" : "s");

    for( i=0 ; i<nhost ; i++ )
	fprintf(stderr, "%s\t(%s)\n", hostp[i].hi_name, hostp[i].hi_arch);

    fprintf(stderr, "\n");
}

void 
FUNCTION(print_task_info) ARGS(`number, tids, hosttid')
int *number, *tids, *hosttid;
{
    int i, info, nhost, narch, ntask;
    struct pvmtaskinfo *taskp, *found;
    struct pvmhostinfo *hostp;
    
    /* get informations from pvm
     */
    info = pvm_config(&nhost, &narch, &hostp);
    check(info, "pvm_config");

    info = pvm_tasks(0, &ntask, &taskp);
    check(info, "pvm_tacks");

    /* print tasks
     */
    found = which_task(*hosttid, ntask, taskp);
    fprintf(stderr, "host running on %s\n",
	    found ? host_name(found->ti_host, nhost, hostp) : "not found");

    fprintf(stderr, "%d nodes:\n", (*number));

    for( i=0 ; i<(*number) ; i++ )
    {
	found = which_task(tids[i], ntask, taskp);
	fprintf(stderr, "%d running on %s\n", i+1,
		found ? host_name(found->ti_host, nhost, hostp) : "not found");
    }

    fprintf(stderr, "\n");	
}

/******************************************************************** TIME */
/* functions to measure wall clock time and be called by the rt.
 * there is a static stack of ten timer starts, thus imbrication is possible.
 * going too far would result in an abort.
 */
#include <sys/time.h>

/* gettimeofday is not declared anywhere! 
 */
extern int gettimeofday(struct timeval *, struct timezone *);

/* static stack of timings...
 */
#define TIMER_STACK_SIZE 10
static struct timeval initial[TIMER_STACK_SIZE];
static int timer_index=0;

void
FUNCTION(hpfc_timeon) ARGS(`')
{
    assert(timer_index<TIMER_STACK_SIZE);

    /* push current time
     */
    if (gettimeofday(&initial[timer_index++], (struct timezone *) NULL))
	fprintf(stderr, "gettimeofday error\n");

    /* I could diplay some message, maybe with the level.
     */
}

#define MAX_COMMENT_LENGTH 63

/* to print the micros with leading and trailing 0s if needed
 */
static char *
print_micros(long micros)
{
    static char buffer[7];
    int i;

    sprintf(buffer, "%6ld", micros);

    for (i=0; i<6; i++)
	if (buffer[i]==' ') buffer[i]='0' ;

    return buffer;
}

void 
FUNCTION(hpfc_timeoff) ARGS(`STRING_ARG(comment)')
STRING_ARG_DECL(comment);
{
    char buffer[ MAX_COMMENT_LENGTH + 1 ];
    struct timeval current;
    long seconds, micros;
    int i;

    assert(timer_index>0);
    timer_index--;

    /* copy the comment in the buffer to ensure there is a NULL at the end.
     */  
    for (i=0; i<MAX_COMMENT_LENGTH && i<STRING_LEN(comment); i++)
	buffer[i] = STRING_PTR(comment)[i];
    buffer[i]='\0';

    /* get current time.
     */
    if (gettimeofday(&current, (struct timezone *) NULL))
	fprintf(stderr, "gettimeofday error\n");

    /* display result, with the level.
     */
    seconds = current.tv_sec-initial[timer_index].tv_sec;
    micros = current.tv_usec-initial[timer_index].tv_usec;

    if (micros<0) micros+=1000000, seconds--;

    fprintf(stderr, "%s [%d]: %ld.%s s\n", 
	    buffer, timer_index, seconds, print_micros(micros));
}

/* that is all
 */
