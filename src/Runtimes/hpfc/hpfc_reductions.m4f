c
c     Reductions management 
c
c $RCSfile: hpfc_reductions.m4f,v $ ($Date: 1994/08/29 12:15:12 $, )
c version $Revision$
c got on %D%, %T%
c $Id$
c
c     it is supposed that the reduction is computed on a full
c     array, which is nor replicated anyway. If used on a part,
c     should work, but I am not so sure.
c
c----------
c
c this could be computed statically, where it is used...
c
cdecl      external HPFC_PROCDIM
cdecl      integer HPFC_PROCDIM
c
      integer function HPFC_PROCDIM(an, ad)
      include 'hpfc_commons.h'
      integer an, ad
      integer tn, pn, i, it, ip
      tn = ATOT(an)
      pn = TTOP(tn)
      it = 0
      ip = 0
      do i=1, NODIMT(tn)
         if (ALIGN(an, i, 1).EQ.ad) it = i
      enddo
      if (it.NE.0) then
         do i=1, NODIMP(pn)
            if (DIST(tn, i, 1).EQ.it) ip = i
         enddo
      endif
      HPFC_PROCDIM = ip
      return
      end
c      
c----------
c
define(build_name,`$1_$2_$3')dnl
define(`LOGICAL_RED_3',`dnl
pushdef(`TYPE',$1)dnl
pushdef(`PVMTYPE',$2)dnl
pushdef(`NAME',$3)dnl
pushdef(`OPERATOR',$4)dnl
c
c    LOGICAL REDUCTION NAME FOR TYPE, 3 DIMENSIONS
c
c     
c NODE PART
c
cdecl      external  build_name(nred3,PVMTYPE,NAME)
cdecl      TYPE build_name(nred3,PVMTYPE,NAME)
      TYPE build_name(nred3,PVMTYPE,NAME)
     &  (a, an, 
     &  dl1, du1, dl2, du2, dl3, du3,
     &  lo1, up1, lo2, up2, lo3, up3)
      include ''`fpvm3.h''`
      include ''`hpfc_commons.h''`
      include ''`hpfc_rtsupport.h''`
      external HPFC_PROCDIM
      integer HPFC_PROCDIM
      TYPE a(dl1:du1, dl2:du2, dl3:du3)
      integer 
     &    an, 
     &    dl1, du1, dl2, du2, dl3, du3,
     &    lo1, up1, lo2, up2, lo3, up3
      TYPE result
      integer t1, i1, l1, u1, s1, d1
      integer t2, i2, l2, u2, s2, d2
      integer t3, i3, l3, u3, s3, d3
c
c initiate with a valid value
c
      CALL HPFC_CMPOWNERS(an, lo1, lo2,lo3, 0, 0, 0, 0)
      if (HPFC_SENDERP()) then
         t1 = HPFC_LOCALIND(an, 1, lo1)
         t2 = HPFC_LOCALIND(an, 2, lo2)
         t3 = HPFC_LOCALIND(an, 3, lo3)
         CALL HPFC_SNDTO_A(PVMTYPE, a(t1, t2, t3))
         result = a(t1, t2, t3)
      else
         CALL HPFC_RCVFR_mCS(PVMTYPE, result)
      endif
c
c compute the loop bounds
c
      d1 = HPFC_PROCDIM(an, 1)
      CALL HPFC_LOOP_BOUNDS(l1, u1, s1, lo1, up1, an, d1)
      d2 = HPFC_PROCDIM(an, 2)
      CALL HPFC_LOOP_BOUNDS(l2, u2, s2, lo2, up2, an, d2)
      d3 = HPFC_PROCDIM(an, 3)
      CALL HPFC_LOOP_BOUNDS(l3, u3, s3, lo3, up3, an, d3)
c
c local reduction
c
      do i1=l1, u1
         do i2=l2, u2
            do i3=l3, u3
               if (a(i1, i2, i3) OPERATOR result) 
     &              result = a(i1, i2, i3)
            enddo
         enddo
      enddo
c
c send partial result to host, and get the final result
c      
      CALL HPFC_SNDTO_H(PVMTYPE, result)
      CALL HPFC_RCVFR_mCH(PVMTYPE, result)
      build_name(nred3,PVMTYPE,NAME) = result
      return
      end
c
c HOST PART
c
cdecl      external build_name(hred3,PVMTYPE,NAME)
cdecl      TYPE build_name(hred3,PVMTYPE,NAME)
      TYPE function build_name(hred3,PVMTYPE,NAME)()
      include ''`fpvm3.h''`
      include ''`hpfc_commons.h''`
      TYPE result(MAXMAXSIZEOFPROCS), final
      integer i
c
c get partial results
c
      do i=1, MAXSIZEOFPROCS
         SENDERTID = NODETIDS(i)
         SLID = i
         CALL HPFC_RCVFR_S(PVMTYPE, result(i))
      enddo
c
c compute final result
c
      final = result(1)
      do i=2, MAXSIZEOFPROCS
         if (result(i) OPERATOR final) 
     &        final = result(i)
      enddo
c
c send final result to nodes 
c      
      CALL HPFC_HSNDTO_A(PVMTYPE, final)
      build_name(hred3,PVMTYPE,NAME) = final
      return
      end
c
c------------
c
popdef(`TYPE')dnl
popdef(`PVMTYPE')dnl
popdef(`NAME')dnl
popdef(`OPERATOR')dnl')dnl
define(`LOGICAL_RED_2',`dnl
pushdef(`TYPE',$1)dnl
pushdef(`PVMTYPE',$2)dnl
pushdef(`NAME',$3)dnl
pushdef(`OPERATOR',$4)dnl
c
c    LOGICAL REDUCTION NAME FOR TYPE, 2 DIMENSIONS
c
c     
c NODE PART
c
cdecl      external build_name(nred2,PVMTYPE,NAME)
cdecl      TYPE build_name(nred2,PVMTYPE,NAME)
      TYPE function build_name(nred2,PVMTYPE,NAME)
     & (a, an, dl1, du1, dl2, du2, lo1, up1, lo2, up2)
      include ''`fpvm3.h''`
      include ''`hpfc_commons.h''`
      include ''`hpfc_rtsupport.h''`
      external HPFC_PROCDIM
      integer HPFC_PROCDIM
      TYPE a(dl1:du1, dl2:du2)
      integer an, dl1, du1, dl2, du2, lo1, up1, lo2, up2
      TYPE result
      integer t1, i1, l1, u1, s1, d1
      integer t2, i2, l2, u2, s2, d2
c
c initiate with a valid value
c
      CALL HPFC_CMPOWNERS(an, lo1, lo2, 0, 0, 0, 0, 0)
      if (HPFC_SENDERP()) then
         t1 = HPFC_LOCALIND(an, 1, lo1)
         t2 = HPFC_LOCALIND(an, 2, lo2)
         CALL HPFC_SNDTO_A(PVMTYPE, a(t1, t2))
         result = a(t1, t2)
      else
         CALL HPFC_RCVFR_mCS(PVMTYPE, result)
      endif
c
c compute the loop bounds
c
      d1 = HPFC_PROCDIM(an, 1)
      CALL HPFC_LOOP_BOUNDS(l1, u1, s1, lo1, up1, an, d1)
      d2 = HPFC_PROCDIM(an, 2)
      CALL HPFC_LOOP_BOUNDS(l2, u2, s2, lo2, up2, an, d2)
c
c local reduction
c
      do i1=l1, u1
         do i2=l2, u2
            if (a(i1, i2) OPERATOR result) 
     &           result = a(i1, i2)
         enddo
      enddo
c
c send partial result to host, and get the final result
c      
      CALL HPFC_SNDTO_H(PVMTYPE, result)
      CALL HPFC_RCVFR_mCH(PVMTYPE, result)
      build_name(nred2,PVMTYPE,NAME) = result
      return
      end
c
c HOST PART
c
cdecl      external build_name(hred2,PVMTYPE,NAME)
cdecl      TYPEbuild_name(hred2,PVMTYPE,NAME)
      TYPE build_name(hred2,PVMTYPE,NAME)()
      include ''`fpvm3.h''`
      include ''`hpfc_commons.h''`
      TYPE result(MAXMAXSIZEOFPROCS), final
      integer i
c
c get partial results
c
      do i=1, MAXSIZEOFPROCS
         SENDERTID = NODETIDS(i)
         SLID = i
         CALL HPFC_RCVFR_S(PVMTYPE, result(i))
      enddo
c
c compute final result
c
      final = result(1)
      do i=2, MAXSIZEOFPROCS
         if (result(i) OPERATOR final) 
     &        final = result(i)
      enddo
c
c send final result to nodes 
c      
      CALL HPFC_HSNDTO_A(PVMTYPE, final)
      build_name(hred2,PVMTYPE,NAME) = final
      return
      end
c
c------------
c
popdef(`TYPE')dnl
popdef(`PVMTYPE')dnl
popdef(`NAME')dnl
popdef(`OPERATOR')dnl')dnl
define(LOGICAL_RED_1,`dnl
pushdef(`TYPE',$1)dnl
pushdef(`PVMTYPE',$2)dnl
pushdef(`NAME',$3)dnl
pushdef(`OPERATOR',$4)dnl
c
c    LOGICAL REDUCTION NAME FOR TYPE, 1 DIMENSION
c
c     
c NODE PART
c
cdecl      external build_name(nred1,PVMTYPE,NAME)
cdecl      TYPE build_name(nred1,PVMTYPE,NAME)
      TYPE function build_name(nred1,PVMTYPE,NAME)
     &   (a, an, dl1, du1, lo1, up1)
      include ''`fpvm3.h''`
      include ''`hpfc_commons.h''`
      include ''`hpfc_rtsupport.h''`
      external HPFC_PROCDIM
      integer HPFC_PROCDIM
      TYPE a(dl1:du1)
      integer an, dl1, du1, lo1, up1
      TYPE result
      integer t1, i1, l1, u1, s1, d1
c
c initiate with a valid value
c
      CALL HPFC_CMPOWNERS(an, lo1, 0, 0, 0, 0, 0, 0)
      if (HPFC_SENDERP()) then
         t1 = HPFC_LOCALIND(an, 1, lo1)
         CALL HPFC_SNDTO_A(PVMTYPE, a(t1))
         result = a(t1)
      else
         CALL HPFC_RCVFR_mCS(PVMTYPE, result)
      endif
c
c compute the loop bounds
c
      d1 = HPFC_PROCDIM(an, 1)
      CALL HPFC_LOOP_BOUNDS(l1, u1, s1, lo1, up1, an, d1)
c
c local reduction
c
      do i1=l1, u1
         if (a(i1) OPERATOR result) 
     &        result = a(i1)
      enddo
c
c send partial result to host, and get the final result
c      
      CALL HPFC_SNDTO_H(PVMTYPE, result)
      CALL HPFC_RCVFR_mCH(PVMTYPE, result)
      build_name(nred1,PVMTYPE,NAME) = result
      return
      end
c
c HOST PART
c
cdecl      external build_name(hred1,PVMTYPE,NAME)
cdecl      TYPE build_name(hred1,PVMTYPE,NAME)
      TYPE function build_name(hred1,PVMTYPE,NAME)()
      include ''`fpvm3.h''`
      include ''`hpfc_commons.h''`
      TYPE result(MAXMAXSIZEOFPROCS), final
      integer i
c
c get partial results
c
      do i=1, MAXSIZEOFPROCS
         SENDERTID = NODETIDS(i)
         SLID = i
         CALL HPFC_RCVFR_S(PVMTYPE, result(i))
      enddo
c
c compute final result
c
      final = result(1)
      do i=2, MAXSIZEOFPROCS
         if (result(i) OPERATOR final) 
     &        final = result(i)
      enddo
c
c send final result to nodes 
c      
      CALL HPFC_HSNDTO_A(PVMTYPE, final)
      build_name(hred1,PVMTYPE,NAME) = final
      return
      end
c
c------------
c
popdef(`TYPE')dnl
popdef(`PVMTYPE')dnl
popdef(`NAME')dnl
popdef(`OPERATOR')dnl')dnl
c
define(REDUCTIONS,`dnl
LOGICAL_RED_1($1, $2, MIN, .LT.)
LOGICAL_RED_1($1, $2, MAX, .GT.)
LOGICAL_RED_2($1, $2, MIN, .LT.)
LOGICAL_RED_2($1, $2, MAX, .GT.)
LOGICAL_RED_3($1, $2, MIN, .LT.)
LOGICAL_RED_3($1, $2, MAX, .GT.)')dnl
c
REDUCTIONS(real*8, REAL8) 
REDUCTIONS(real*4, REAL4)
REDUCTIONS(integer*4, INTEGER4)
REDUCTIONS(integer*8, INTEGER8)
c
c that is all
c
