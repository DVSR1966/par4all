$RCSfile: hpfc_runtime_library.README,v $ ($Revision$) $Date: 1995/12/01 13:38:07 $, 

 (c) Centre de Recherche en Informatique,
     Ecole des mines de Paris, 
     Fabien Coelho, 
     1993-1994-1995


This file describes the content of the Hpfc Runtime Library.
Don't expect anything from these sources, so you won't be disappointed.


Introduction:
-------------

This library was developed as a support to the Prototype HPF Compiler
generated codes. It includes functions for runtime description of the
distributed arrays, communications, shifts, broadcasts, and so on.
It is based on PVM. Some never tested extensions tried to use the CMMD
library of the CM5. Plans to switch to MPI. Most of the functions are
generated thru m4 templates, that get rid of types and data dimensions.


How to built the library:
-------------------------

Define the following environment variables:

PIPS_AR (ar)  and PIPS_ARFLAGS (rv)
PIPS_M4 (gm4) and HPFC_M4 (gm4)
  These m4 should include the shift operator. 
  I had bad experiences with SUN and DEC m4. GNU m4 1.4 is okay.
PVM_ROOT and PVM_ARCH
HPFC_RUNTIME_M4_PARAMS:
 -D HPFC_GNU	  (uses the GNU compilers: gcc/g77)
 -D DEMO          (print some messages when launched)
 -D DIRECT        (use direct connexions, if enough pes...)
 -D DEBUG         (verbose run)
 -D SYNC_EXIT     (synchronize on exit, needed by old PVM versions)
 -D USE_PVMe      (for IBM's PVM. a PVM3_ROOT is expected if set)
 -D FAKE_BUFFERS  (whether to generate fake broadcast/bufpck/bufupk
                   subroutines. Were used to measure PVM overheads...)

Then make (and hope:-)...


Library content and organization:
---------------------------------

Misc: Demo support: verbose run, timings...
Runtime: (rtsupport) everything to manage data distributions descriptors.
Reductions: for stride-1 aligned block-distributed arrays.
Broadcast: functions for partial broadcasts.
Packing: (un)pack of borders...
Shifts: for stride-1 aligned block-distributed arrays.
Buffers: (bufmgr) intermediate to squeeze PVM inefficiency.


Bugs:
-----

Many of them!
I should build one lib for the host and one the nodes?
Demand driven compilation of functions?
