! $Id$
!
! $Log: hpfc_communication_pvm.m4f,v $
! Revision 1.15  1997/06/06 14:44:15  zory
! one line was too long :-(
!
! Revision 1.14  1997/06/06 14:33:48  zory
! inserting HPFC INIT MAIN, HOST AND NODE
! (pvm specific subroutines)
!
! Revision 1.13  1997/06/06 12:57:22  zory
! cleaned RCS headers...
!
! Revision 1.6  1997/05/15 15:07:38  zory
! add new communication subroutines
!
! Revision 1.5  1997/05/14 15:19:50  zory
! Insert hpfc init, send, recv, pack, unpack (only in pvm)
!
! Revision 1.4  1997/05/02 16:35:59  coelho
! global; buffer id shared with latter unpacking.
!
! Revision 1.3  1997/04/17 11:51:23  coelho
! comments and debug added.
!
! Revision 1.2  1997/04/16 16:35:42  coelho
! functions for io-related communications.
!
! communication routines used by the compiler... could abstract both
! pvm and mpi, maybe. The pvm model (separate init/pack/send) is kept.
!


!
!-----------------
!
! HPFC INIT MAIN
!
! entry point in the library for a non differentiated host/node program.
! 
      subroutine HPFC INIT MAIN

      include "hpfc_commons.h"
      
      _CRAY(integer my rank)
      integer info, inum
      logical host known

      debug(print *, "[HPFC INIT MAIN] in")
!
! GLOBAL INITS
! 
      call HPFC CHECK

      NB OF TASKS = MAX SIZE OF PROCS

      HOST NODE MODEL = .false.
      SPAWN PERFORMED = .false.
      OUTSIDE SPAWN   = .false.

      call HPFC INIT COMMON PARAM LIB

      host known = .false.

      call pvmfmytid(MY TID)

      _getpe(
! the CRAY T3D does not have spawn, but the spawning is automatic!
      call pvmfgetpe(MY TID, my rank)
      debug(print *, "[HPFC INIT MAIN] getting pe ", MY TID, "-", my rank)
! mouais...
      MY TID = my rank
      MY LID = my rank
      SPAWN PERFORMED = .true.
      OUTSIDE SPAWN = .true.
      host known = .true.
      if (my rank.eq.0) then
         MY LID = 0
         HOST TID = MY TID
      end if)
      
      call pvmfjoingroup(HPFC GROUP NAME, inum)
      if (inum.lt.0) then
         call pvmfperror("while joining group in HPFC INIT MAIN", info)
         call pvmfexit(info)
         stop
      end if

      debug(print *, "[HPFC INIT MAIN] group ", HPFC GROUP NAME, inum)

      if (.not. host known) then
! decide which process is the host
         debug(print *, "[HPFC INIT MAIN] choosing host")
         if (inum.eq.0) then
            MY LID = 0
            HOST TID = MY TID
         else
! the host is not know, but i am its child!
            SPAWN PERFORMED = .true.
            call pvmfparent(HOST TID)
         end if
         host known = .true.
      end if
 
      _spawn(
      if (.not. SPAWN PERFORMED) then
         debug(print *, "spawning ", NB OF TASKS, " ", MAIN PROGRAM NAME)
         call pvmfspawn(
     $        MAIN PROGRAM NAME,
     $        PVM ARCH,
     $        NODE ARCHITECTURE,
     $        NB OF TASKS,
     $        NODE TIDS(1),
     $        info)

! may think of an external spawning?
         SPAWN PERFORMED = .true.
         
      end if)

      debug(print *, "[HPFC INIT MAIN] exiting")

      end

!
!-----------------
!
! HPFC INIT NODE
!
! this is the entry point in the hpfc runtime library for a node.
!
      subroutine HPFC INIT NODE
      _CM5(include "cmmd_fort.h")
      include "hpfc_commons.h"
      integer i, bufid, info

      HOST LID = 0

      debug(print *, "[HPFC INIT NODE] in ")

! in order to get the host tid 
      if (.not.OUTSIDE SPAWN) then
         call pvmfparent(HOST TID)
      end if

      _direct(call HPFC DIRECTROUTE IF POSSIBLE)

      call HPFC INIT COMMON PROCS
      call HPFC INIT COMMON BUFFER

! receive from host global informations about the nodes implicated
! in this run.
      _spawn(
! Should be a call to HPFC BCAST RECV, but NODETIDS is not yet available 
!      call HPFC BCAST RECV(HOST LID, 1, bufid)
      call pvmfrecv(HOSTTID, 1, bufid)
      call HPFC UNPACK(INTEGER4, NODE TIDS, NB OF TASKS + 1, 1, info)
      debug(if (info.lt.0) then
         call HPFC PRINT ERROR MSG("[HPFC INIT NODE] node tids recv",
     $     info)
         call HPFC TERMINATE TASK(info)
         stop
      endif)

      do i=1, NB OF TASKS
         if (NODE TIDS(i).EQ.MYTID)
     $        MYLID = i
      enddo)

      _getpe(
      do i=0, NB OF TASKS
         NODE TIDS(i) = i
      enddo)

      debug(print *, "[HPFC INIT NODE] lid: ", MY LID, " tid: ", MYTID)

      do i=1, NB OF PROCESSORS
         call HPFC CMPPOS(i, MY LID, MY POS(1, i))
      enddo

!
! 1 sends node version key to host
!
      if (MY LID.eq.1) then
      debug(print *, "[HPFC INIT NODE] sending key to ", HOSTLID)
         call HPFC INIT SEND(PVMRAW, bufid)
         call HPFC PACK(STRING, hpfc key, 64, 1, info)
         call HPFC SEND(HOSTLID, 1, info)
      endif

_CM5(
!
! cm5 related id initializations
!
      CM HOST ID = cmmd_host_node()
      CM MY ID   = cmmd_self_address()
      CM SIZE    = cmmd_partition_size()
!
      call HPFC INIT SEND(PVMRAW, bufid)
      call HPFC PACK(INTEGER4, CM MY ID, 1, 1, info)
      call HPFC SEND(HOSTLID, 1, info)
!
      call HPFC RECEIVE(HOSTLID, 1, bufid)
      call HPFC UNPACK(INTEGER4, CM NODE IDS, NBOFTASKS, 1, info)
!
! end of cm5 related initializations
!)

!
! insures that all nodes joined the group and are there
!
      call HPFC SYNCHRO

      debug(print *, "[HPFC INIT NODE] out", MY LID)

      end


!
!-----------------
!
! HPFC INIT HOST
!
! this is the entry point in the hpfc runtime library for a program.
!
      subroutine HPFC INIT HOST
      _CM5(include "cmmd_fort.h")
      include "hpfc_commons.h"
      integer bufid, info
      character*64 node key
      
      debug(print *, "[HPFC INIT HOST] in ")
      
      MYLID = 0
      HOSTLID = 0
      
      _direct(call HPFC DIRECTROUTE IF POSSIBLE)

      _spawn(
      if (.not. SPAWN PERFORMED) then
       debug(`print *,"[HPFCINITHOST] spawning",NB OF TASKS," ", 
     $ NODE PROGRAM NAME')

       call pvmfspawn(
     $      NODE PROGRAM NAME, 
     $      PVM ARCH, 
     $      NODE ARCHITECTURE, 
     $      NB OF TASKS, 
     $      NODE TIDS(1), 
     $      info)

         if (info.lt.0) then
            call HPFC PRINT ERROR MSG("initial spawning", info)
            call HPFC TERMINATE TASK(info)
            stop
         endif

         if (info.ne.NBOFTASKS) then
            call HPFC PRINT ERROR MSG("not spawned", 0)
            call HPFC TERMINATE TASK(0)
            stop
         endif

        endif)

      _getpe(
! rather specific to CRAY T3D
      debug(print *, "[HPFC INIT HOST] initializing NODE TIDS")
      do i=0, NB OF TASKS
         NODE TIDS(i)=i
      end do)
      
      _spawn(
! if not T3D and not MPI, the host sends the tids...
      NODETIDS(0) = MY TID
      call HPFC INIT SEND(PVMRAW, bufid)
      call HPFC PACK(INTEGER4, NODETIDS, NBOFTASKS + 1, 1, info)
      debug(if (info.lt.0) then
         call HPFC PRINT ERROR MSG("initial pack", info)
         call HPFC TERMINATE TASK(info)
         stop
      endif)
      call HPFC BCAST ROOT(NBOFTASKS, NODETIDS(1), 1, info)
      debug(if (info.lt.0) then
         call HPFC PRINT ERROR MSG("initial mcast", info)
         call HPFC TERMINATE TASK(info)
         stop
      endif))

      call HPFC INIT COMMON PROCS
      call HPFC INIT COMMON BUFFER
!
! check version of host and node
! to insure that both host and node where generated together...
!
      debug(print *, "[HPFC INIT HOST] receiving key")
      call HPFC RECEIVE(1, 1, bufid)
      call HPFC UNPACK(STRING, node key, 64, 1, info)
      if (node key.ne.hpfc key) then
         print *, "*** incompatible version keys!"
         print *, "*** host: ", hpfc key
         print *, "*** node: ", node key
         call HPFC KILL ALLTASKS
!the following line should be deleted ??          
         call HPFC TERMINATE TASK(info)
         stop
      endif

_CM5(
!
! cm5 related id initializations
!
      CM HOST ID = cmmd_self_address()
      CM MY ID   = CM HOST ID
      CM SIZE    = cmmd_partition_size()
!
      do i=1, NBOFTASKS
         call HPFC RECEIVE(i, 1, info)
         call HPFC UNPACK(INTEGER4, CM NODE IDS(i), 1, 1, info)
      enddo
!
      call HPFC INIT SEND(PVMRAW, bufid)
      call HPFC PACK(INTEGER4, CM NODE IDS, NBOFTASKS, 1, info)
      call HPFC BCAST ROOT(NBOFTASKS, NODETIDS(1), 1, info)
!
! end of cm5 related initializations
!)

      demo(
      call print host info
      if (HOST NODE MODEL) then 
         write (unit=0,fmt=*) " -- host node model"
      else
         write (unit=0,fmt=*) " -- single main program"
      end if
      call print task info(NBOFTASKS, NODETIDS(1), HOSTTID))

!
! insures that all nodes joined the group...
!
      call HPFC SYNCHRO

      debug(print *, "[HPFC INIT HOST] out ", MY LID)

      end



!
! Reduce operation 
!
! call pvmfreduce(func, data, count, datatype,msgtag, group, rootginst, info) 
! call MPI_REDUCE(sendbuf,recvbuf,count,datatype,op,root,comm,ierror)
!


!--------------------  HPFC MESSAGE INFO -----------------
!
! Give informations about the received message (or buffer) 
! (length, tag, source, info) 
!
      subroutine HPFC MESSAGE INFO(messageid, length, tag, source, info)
      include "hpfc_commons.h"
      integer messageid, length, tag, source, info
      call pvmfbufinfo(messageid, length, tag, source, info)
      debug(`print *, MYLID, "HPFC MESSAGE INFO ", info, " length = ", 
     $  length, " tag = ", tag , " source = ", source ')
      if (info.lt.0) then
         call pvmfperror("hpfc message info", info)
         call HPFC TERMINATE TASK(info)
         stop
      endif
      end 


!--------------------  HPFC PRINT ERROR MSG  -----------------
!
! Return an error string associated with the error code 
! plus additional information to the error message 
!
! MPI_ERROR_STRING(integer errorcode,charcter string(*),
!                     integer resultlen,integer ierror)
!
      subroutine HPFC PRINT ERROR MSG(message, error code)
      include "hpfc_commons.h"
      integer error code
      character*(*) message
      call pvmfperror(message, error code)
      end

!-------------------- HPFC TERMINATE TASK   -----------------
!
! Terminate the current task 
!
! MPI_FINALIZE(integer ierror)
!
      subroutine HPFC TERMINATE TASK
      include "hpfc_commons.h"
      integer info
      debug(print *, MYLID , "hpfc terminate task")
      call pvmfexit(info)
      end

!--------------------  HPFC KILL ALLTASKS  -----------------
!
! Kill all the tasks
!
! MPI_ABORT(integer comm,integer errorcode,integer ierror)
!
      subroutine HPFC KILL ALLTASKS
      include "hpfc_commons.h"
      integer info,i
      do i=1, NBOFTASKS
         call pvmfkill(NODETIDS(i), info)
      enddo
      end

!-------------------- HPFC SYNCHRO  -----------------
!
! add a synchronisation step 
!
! MPI_BARRIER(HPFC GROUP NAME)
!
      subroutine HPFC SYNCHRO
      include "hpfc_commons.h"
      integer info
      debug(print *, MYLID, "[hpfc synchro] waiting ", NBOFTASKS+1, "tasks")
      call pvmfbarrier(HPFC GROUP NAME, NBOFTASKS+1, info)
      if (info.lt.0) then
         call pvmfperror("hpfc synchro", info)
         call HPFC TERMINATE TASK(info)
         stop
      endif
      debug(print *, MYLID, "[hpfc synchro] done")
      end



!-------------------- HPFC INIT SEND  -----------------
!
! Initialize the current buffer
!
! set position to 0 in mpi
!
      subroutine HPFC INIT SEND(encoding,bufid)
      include "hpfc_commons.h"
      integer bufid,encoding
      debug(print *, MYLID, "initializing current buffer")
      call pvmfinitsend(encoding, bufid)
      debug(print *, MYLID, "current buffer initialized")
      end 

!-------------------- HPFC PACK  -----------------
!
! Packing count value in the current buffer...
! pvm syntax
! pvmfpack( what, xp, nitem, stride, info )
! mpi syntax
! MPI_PACK(choice inbuf,integer incount,integer datatype, choice outbuf,
!         integer outsize,integer position,integer comm, integer ierror) 
! MPI_PACKED(value,count,what,HPFC BUFFER,HPFC MAX BUFFER, HPFC POSITION, 
!             HPFC GROUP NAME, info)

      subroutine HPFC PACK(what, value, count, stride, info) 
      include "hpfc_commons.h"
      integer what, value, count, stride, info
      debug(print *, MYLID, "packing count values", count)
      call pvmfpack(what, value, count, stride, info)
      debug(print *, MYLID, "value packed")
      end

!-------------------- HPFC SEND  -----------------
!
! Sending the current buffer to dest...
!
! pvm syntax
! pvmfsend(dest, msgtag, info) 
! mpi syntax
! MPI_SEND(choice buf,integer count,integer datatype,integer dest,
!             integer tag, integer comm,integer ierror)
! MPI_SEND(HPFC BUFFER, HPFC POSITION, MPI_PACKED, dest, tag, 
!            HPFC GROUP NAME, info)  

      subroutine HPFC SEND(dest, tag, info)
      include "hpfc_commons.h"
      integer dest, tag, info
      debug(print *, MYLID, "sending message to - ", dest)
      call pvmfsend(NODE TIDS(dest), tag, info)
      debug(print *, MYLID, "message sent to - ", dest )
      end

!-------------------- HPFC UNPACK  -----------------
!
! Unpacking count value from the current buffer
! pvm syntax
! pvmfunpack( what, xp, nitem, stride, info )
! mpi syntax 
! MPI_UNPACK(choice inbuf,integer insize,integer position,
!               choice outbuf,integer outcount,integer datatype,
!               integer comm,integer ierror)

      subroutine HPFC UNPACK(what, value, count, stride, info) 
      include "hpfc_commons.h"
      integer what, value, count, stride, info
      debug(print *, MYLID, "unpacking count values")
      call pvmfunpack(what, value, count, stride, info)
      debug(print *, MYLID, "value unpacked")
      end

!--------------------  HPFC RECEIVE -----------------
!
! Receiving a message from source
! pvm syntax
! pvmfrecv( source, msgtag , bufid)
! mpi syntax
! MPI_RECV(choice buf,integer count,integer datatype,integer source,
!             integer tag,integer comm,integer status,integer ierror)

      subroutine HPFC RECEIVE(source, tag, bufid)
      include "hpfc_commons.h"
      integer source, tag, bufid
      debug(print *, MYLID, "receiving a message from - ", source)
      call pvmfrecv(NODE TIDS(source), tag, bufid)
      debug(print *, MYLID, "message received from - ", source)
      end

!-------------------- HPFC BCAST ROOT  -----------------
!
! Root initiate a broadcast communication 
!
! MPI_BCAST (choice buffer,integer count,integer datatype,integer root,
!              integer comm,integer ierror)

      subroutine HPFC BCAST ROOT(ntask, listoftids, tag, info )
      include "hpfc_commons.h"
      integer ntask, tag, info
      integer listoftids(MAX MAX SIZE OF PROCS)
      debug(print *, MY LID, "broadcast a message (root)")
      call pvmfmcast(ntask, listoftids, tag, info)
      debug(print *, MY LID, "broadcast performed (root)")
      end

!-------------------- HPFC BCAST RECV  -----------------
!
! Receive from a broadcast communication 
!
! MPI_BCAST 
      subroutine HPFC BCAST RECV(source, tag, bufid)
      include "hpfc_commons.h"
      integer source, tag, bufid
      debug(print *, MYLID, "Receive broadcast from", source )
      call pvmfrecv(NODETIDS(source), tag, bufid)
      debug(print *, MYLID, "Receive broadcast performed from", source )
      end 

!--------------------  HPFC HCAST  -----------------
!
! The host send a message to every node.
!
      subroutine HPFC HCAST
      include "hpfc_commons.h"
      integer info
      debug(print *, "hcast - ", MCAST HOST)
      call HPFC BCAST ROOT(MAX SIZE OF PROCS, NODE TIDS(1), MCAST HOST, info)
      MCAST HOST = MCAST HOST + 2
      debug(print *, "hcast done")
      end

!--------------------  HPFC NCAST  -----------------
!
! every node receive a broadcast from host.
!
      subroutine HPFC NCAST
      include "hpfc_commons.h"
      debug(print *, "ncast ", MY LID, " - ", MCAST HOST)
      call HPFC BCAST RECV(NODETIDS(HOST LID), MCAST HOST, BUFFER ID)
      MCAST HOST = MCAST HOST + 2
      debug(print *, "ncast done")
      end

!-------------------- HPFC SND TO HOST   -----------------
!
! a node sends a message to host
!
      subroutine HPFC SND TO HOST
      include "hpfc_commons.h"
      integer info
      debug(print *, "snd to host ", MYLID, " - ", HOST SND CHANNEL)
      call HPFC SEND(NODETIDS(HOST LID), HOST SND CHANNEL, info)
      HOST SND CHANNEL = HOST SND CHANNEL+2
      debug(print *, "snd to host done")
      end

!-------------------- HPFC RCV FROM HOST  -----------------
!
! a node receive a message from host
!
      subroutine HPFC RCV FROM HOST
      include "hpfc_commons.h"
      debug(print *, "rcv from host ", MY LID, " - ", HOST RCV CHANNEL)
      call HPFC RECEIVE(NODE TIDS(HOST LID), HOST RCV CHANNEL, 
     $     BUFFER ID)
      HOST RCV CHANNEL = HOST RCV CHANNEL+2
      debug(print *, "rcv from host done")
      end

!--------------------  HPFC SND TO NODE  -----------------
!
! the host sends a message from a node
!
      subroutine HPFC SND TO NODE(lid)
      include "hpfc_commons.h"
      integer lid
      integer info
      debug(print *, "snd to node ", lid, " - ", SEND CHANNELS(lid))
      call HPFC SEND(NODE TIDS(lid), SEND CHANNELS(lid), info)
      SEND CHANNELS(lid) = SEND CHANNELS(lid)+2
      debug(print *, "snd to node done")
      end

!--------------------  HPFC RCV FROM NODE  -----------------
!
! the host receive a message from a node
!
      subroutine HPFC RCV FROM NODE(lid)
      include "hpfc_commons.h"
      integer lid
      debug(print *, "rcv from node ", lid, " - ", RECV CHANNELS(lid))
      call HPFC RECEIVE(NODE TIDS(lid), RECV CHANNELS(lid), BUFFER ID)
      RECV CHANNELS(lid) = RECV CHANNELS(lid)+2
      debug(print *, "rcv from node done")
      end
!
!
!
