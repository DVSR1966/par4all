! $Id$
!
! $Log: hpfc_communication_pvm.m4f,v $
! Revision 1.12  1997/06/03 15:12:18  zory
! *** empty log message ***
!
! Revision 1.11  1997/05/30 09:15:04  zory
! *** empty log message ***
!
! Revision 1.10  1997/05/29 16:10:20  coelho
! *** empty log message ***
!
! Revision 1.9  1997/05/29 15:59:49  coelho
! *** empty log message ***
!
! Revision 1.8  1997/05/29 15:46:06  zory
! *** empty log message ***
!
! Revision 1.7  1997/05/29 09:03:25  zory
! *** empty log message ***
!
! Revision 1.6  1997/05/15 15:07:38  zory
! add new communication subroutines
!
! Revision 1.5  1997/05/14 15:19:50  zory
! Insert hpfc init, send, recv, pack, unpack (only in pvm)
!
! Revision 1.4  1997/05/02 16:35:59  coelho
! global; buffer id shared with latter unpacking.
!
! Revision 1.3  1997/04/17 11:51:23  coelho
! comments and debug added.
!
! Revision 1.2  1997/04/16 16:35:42  coelho
! functions for io-related communications.
!
! communication routines used by the compiler... could abstract both
! pvm and mpi, maybe. The pvm model (separate init/pack/send) is kept.
!


!
! Reduce operation 
!
! call pvmfreduce(func, data, count, datatype,msgtag, group, rootginst, info) 
! call MPI_REDUCE(sendbuf,recvbuf,count,datatype,op,root,comm,ierror)
!


!--------------------  HPFC MESSAGE INFO -----------------
!
! Give informations about the received message (or buffer) 
! (length, tag, source, info) 
!
! in mpi status(messageid) is an array of integers
! INTEGER STATUS(MPI_STATUS_SIZE) 
!
      subroutine HPFC MESSAGE INFO(messageid, length, tag, source, info)
      include "hpfc_commons.h"
      integer messageid, length, tag, source, info
      call pvmfbufinfo(messageid, length, tag, source, info)
      debug(`print *, MYLID, "HPFC DEBUG INFO ", info, " length = ", 
     $  length, " tag = ", tag , " source = ", source ')
      if (info.lt.0) then
         call pvmfperror("hpfc message info", info)
         call HPFC TERMINATE TASK(info)
         stop
      endif
      end 


!--------------------  HPFC PRINT ERROR MSG  -----------------
!
! Return an error string associated with the error code 
! plus additional information to the error message 
!
! MPI_ERROR_STRING(integer errorcode,charcter string(*),
!                     integer resultlen,integer ierror)
!
      subroutine HPFC PRINT ERROR MSG(message, error code)
      include "hpfc_commons.h"
      integer error code
      character*(*) message
      call pvmfperror(message, error code)
      end

!-------------------- HPFC JOIN GROUP   -----------------
!
! Create a group of tasks called HPFC GROUP NAME
!
! MPI_COMM_DUP(integer comm,integer newcomm,integer ierror)
! 
      subroutine HPFC JOIN GROUP(inum)
      include "hpfc_commons.h"
      integer inum,info
      call pvmfjoingroup(HPFC GROUP NAME, inum)
      if (inum.lt.0) then
         call pvmfperror("while joining group", info)
         call pvmfexit(info)
         stop
      end if
      debug(print *, MYLID, "[HPFC JOIN GROUP] ", HPFC GROUP NAME, inum)
      end

!-------------------- HPFC TERMINATE TASK   -----------------
!
! Terminate the current task 
!
! MPI_FINALIZE(integer ierror)
!
      subroutine HPFC TERMINATE TASK
      include "hpfc_commons.h"
      integer info
      debug(print *, MYLID , "hpfc terminate task")
      call pvmfexit(info)
      end

!--------------------  HPFC KILL ALLTASKS  -----------------
!
! Kill all the tasks
!
! MPI_ABORT(integer comm,integer errorcode,integer ierror)
!
      subroutine HPFC KILL ALLTASKS
      include "hpfc_commons.h"
      integer info,i
      do i=1, NBOFTASKS
         call pvmfkill(NODETIDS(i), info)
      enddo
      end

!-------------------- HPFC SYNCHRO  -----------------
!
! add a synchronisation step 
!
! MPI_BARRIER(HPFC GROUP NAME)
!
      subroutine HPFC SYNCHRO
      include "hpfc_commons.h"
      integer info
      debug(print *, MYLID, "[hpfc synchro] waiting ", NBOFTASKS+1, "tasks")
      call pvmfbarrier(HPFC GROUP NAME, NBOFTASKS+1, info)
      if (info.lt.0) then
         call pvmfperror("hpfc synchro", info)
         call HPFC TERMINATE TASK(info)
         stop
      endif
      debug(print *, MYLID, "[hpfc synchro] done")
      end


!--------------------  HPFC GET PE -----------------
!
! Give the processor rank (only useful for MPI and PVM/CRAY T3D)
!
! MPI_COMM_RANK(integer comm, integer rank, integer ierror)
!
      subroutine HPFC GET PE (the tid, the rank)
      include "hpfc_commons.h"
      integer the tid, the rank
      debug(print *, "HPFC GET PE - asking rank")
      _getpe(
      call pvmfgetpe(the tid, the rank))
      debug(print *, "HPFC GET PE rank", the rank)
      end


!--------------------  HPFC ENROLL COMMUNICATION -----------------
!       
! Enroll the communication space (mpi/pvm) and return an id  
! 
! MPI_INIT(integer ierror)
! MPI_COMM_RANK(integer comm,integer rank,integer ierror)
! MPI_COMM_SIZE(integer comm,integer size,integer ierror)
!
!      subroutine HPFC ENROLL COMMUNICATION(thetid)


!-------------------- HPFC INIT SEND  -----------------
!
! Initialize the current buffer
!
! set position to 0 in mpi
!
      subroutine HPFC INIT SEND(encoding,bufid)
      include "hpfc_commons.h"
      integer bufid,encoding
      debug(print *, MYLID, "initializing current buffer")
      call pvmfinitsend(encoding, bufid)
      debug(print *, MYLID, "current buffer initialized")
      end 

!-------------------- HPFC PACK  -----------------
!
! Packing count value in the current buffer...
! pvm syntax
! pvmfpack( what, xp, nitem, stride, info )
! mpi syntax
! MPI_PACK(choice inbuf,integer incount,integer datatype, choice outbuf,
!         integer outsize,integer position,integer comm, integer ierror) 
! MPI_PACKED(value,count,what,HPFC BUFFER,HPFC MAX BUFFER, HPFC POSITION, 
!             HPFC GROUP NAME, info)

      subroutine HPFC PACK(what, value, count, stride, info) 
      include "hpfc_commons.h"
      integer what, value, count, stride, info
      debug(print *, MYLID, "packing count values", count)
      call pvmfpack(what, value, count, stride, info)
      debug(print *, MYLID, "value packed")
      end

!-------------------- HPFC SEND  -----------------
!
! Sending the current buffer to dest...
!
! pvm syntax
! pvmfsend(dest, msgtag, info) 
! mpi syntax
! MPI_SEND(choice buf,integer count,integer datatype,integer dest,
!             integer tag, integer comm,integer ierror)
! MPI_SEND(HPFC BUFFER, HPFC POSITION, MPI_PACKED, dest, tag, 
!            HPFC GROUP NAME, info)  

      subroutine HPFC SEND(dest, tag, info)
      include "hpfc_commons.h"
      integer dest, tag, info
      debug(print *, MYLID, "sending message to - ", dest)
      call pvmfsend(NODE TIDS(dest), tag, info)
      debug(print *, MYLID, "message sent to - ", dest )
      end

!-------------------- HPFC UNPACK  -----------------
!
! Unpacking count value from the current buffer
! pvm syntax
! pvmfunpack( what, xp, nitem, stride, info )
! mpi syntax 
! MPI_UNPACK(choice inbuf,integer insize,integer position,
!               choice outbuf,integer outcount,integer datatype,
!               integer comm,integer ierror)

      subroutine HPFC UNPACK(what, value, count, stride, info) 
      include "hpfc_commons.h"
      integer what, value, count, stride, info
      debug(print *, MYLID, "unpacking count values")
      call pvmfunpack(what, value, count, stride, info)
      debug(print *, MYLID, "value unpacked")
      end

!--------------------  HPFC RECEIVE -----------------
!
! Receiving a message from source
! pvm syntax
! pvmfrecv( source, msgtag , bufid)
! mpi syntax
! MPI_RECV(choice buf,integer count,integer datatype,integer source,
!             integer tag,integer comm,integer status,integer ierror)

      subroutine HPFC RECEIVE(source, tag, bufid)
      include "hpfc_commons.h"
      integer source, tag, bufid
      debug(print *, MYLID, "receiving a message from - ", source)
      call pvmfrecv(NODE TIDS(source), tag, bufid)
      debug(print *, MYLID, "message received from - ", source)
      end

!-------------------- HPFC BCAST ROOT  -----------------
!
! Root initiate a broadcast communication 
!
! MPI_BCAST (choice buffer,integer count,integer datatype,integer root,
!              integer comm,integer ierror)

      subroutine HPFC BCAST ROOT(ntask, listoftids, tag, info )
      include "hpfc_commons.h"
      integer ntask, tag, info
      integer listoftids(MAX MAX SIZE OF PROCS)
      debug(print *, MY LID, "broadcast a message (root)")
      call pvmfmcast(ntask, listoftids, tag, info)
      debug(print *, MY LID, "broadcast performed (root)")
      end

!-------------------- HPFC BCAST RECV  -----------------
!
! Receive from a broadcast communication 
!
! MPI_BCAST 
      subroutine HPFC BCAST RECV(source, tag, bufid)
      include "hpfc_commons.h"
      integer source, tag, bufid
      debug(print *, MYLID, "Receive broadcast from", source )
      call pvmfrecv(NODETIDS(source), tag, bufid)
      debug(print *, MYLID, "Receive broadcast performed from", source )
      end 

!--------------------  HPFC HCAST  -----------------
!
! The host send a message to every node.
!
      subroutine HPFC HCAST
      include "hpfc_commons.h"
      integer info
      debug(print *, "hcast - ", MCAST HOST)
      call pvmfmcast(MAX SIZE OF PROCS, NODE TIDS(1), MCAST HOST, info)
      MCAST HOST = MCAST HOST + 2
      debug(print *, "hcast done")
      end

!--------------------  HPFC NCAST  -----------------
!
! every node receive a broadcast from host.
!
      subroutine HPFC NCAST
      include "hpfc_commons.h"
      debug(print *, "ncast ", MY LID, " - ", MCAST HOST)
      call pvmfrecv(NODETIDS(HOST LID), MCAST HOST, BUFFER ID)
      MCAST HOST = MCAST HOST + 2
      debug(print *, "ncast done")
      end

!-------------------- HPFC SND TO HOST   -----------------
!
! a node sends a message to host
!
      subroutine HPFC SND TO HOST
      include "hpfc_commons.h"
      integer info
      debug(print *, "snd to host ", MYLID, " - ", HOST SND CHANNEL)
      call pvmfsend(NODETIDS(HOST LID), HOST SND CHANNEL, info)
      HOST SND CHANNEL = HOST SND CHANNEL+2
      debug(print *, "snd to host done")
      end

!-------------------- HPFC RCV FROM HOST  -----------------
!
! a node receive a message from host
!
      subroutine HPFC RCV FROM HOST
      include "hpfc_commons.h"
      debug(print *, "rcv from host ", MY LID, " - ", HOST RCV CHANNEL)
      call pvmfrecv(NODE TIDS(HOST LID), HOST RCV CHANNEL, BUFFER ID)
      HOST RCV CHANNEL = HOST RCV CHANNEL+2
      debug(print *, "rcv from host done")
      end

!--------------------  HPFC SND TO NODE  -----------------
!
! the host sends a message from a node
!
      subroutine HPFC SND TO NODE(lid)
      include "hpfc_commons.h"
      integer lid
      integer info
      debug(print *, "snd to node ", lid, " - ", SEND CHANNELS(lid))
      call pvmfsend(NODE TIDS(lid), SEND CHANNELS(lid), info)
      SEND CHANNELS(lid) = SEND CHANNELS(lid)+2
      debug(print *, "snd to node done")
      end

!--------------------  HPFC RCV FROM NODE  -----------------
!
! the host receive a message from a node
!
      subroutine HPFC RCV FROM NODE(lid)
      include "hpfc_commons.h"
      integer lid
      debug(print *, "rcv from node ", lid, " - ", RECV CHANNELS(lid))
      call pvmfrecv(NODE TIDS(lid), RECV CHANNELS(lid), BUFFER ID)
      RECV CHANNELS(lid) = RECV CHANNELS(lid)+2
      debug(print *, "rcv from node done")
      end
!
!
!
