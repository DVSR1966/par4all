! $Id$
!
! $Log: hpfc_communication_pvm.m4f,v $
! Revision 1.5  1997/05/14 15:19:50  zory
! Insert hpfc init, send, recv, pack, unpack (only in pvm)
!
! Revision 1.4  1997/05/02 16:35:59  coelho
! global; buffer id shared with latter unpacking.
!
! Revision 1.3  1997/04/17 11:51:23  coelho
! comments and debug added.
!
! Revision 1.2  1997/04/16 16:35:42  coelho
! functions for io-related communications.
!
! communication routines used by the compiler... could abstract both
! pvm and mpi, maybe. The pvm model (separate init/pack/send) is kept.
!

!
! Terminate the current task 
!

      subroutine HPFC TERMINATE TASK
      include "hpfc_commons.h"
      integer info
      debug(print *, "hpfc terminate task")
      call pvmfexit(info)
      end


!
! Initialize the current buffer
!
      subroutine HPFC INIT SEND
      include "hpfc_commons.h"
      integer bufid
      debug(print *, "initializing current buffer")
      call pvmfinitsend(PVMRAW, bufid)
      debug(print *, "current buffer initialized")
      end 

!
! Packing count value in the current buffer...
!
      subroutine HPFC PACK(what, value, count, stride, info) 
      include "hpfc_commons.h"
      integer what, value, count, tag, stride, info
      debug(print *, "packing count values")
      call pvmfpack(what, value, count, stride, info)
      debug(print *, "value packed")
      end


!
! Sending the current buffer to dest...
!
      subroutine HPFC SEND(dest, tag, info)
      include "hpfc_commons.h"
      integer dest, tag, info
      debug(print *, "sending message")
      call pvmfsend(dest, tag, info)
      debug(print *, "message sent")
      end


!
! Unpacking count value from the current buffer
!
      subroutine HPFC UNPACK(what, value, count, stride, info) 
      include "hpfc_commons.h"
      integer what, value, count, tag, stride, info
      debug(print *, "unpacking count values")
      call pvmfunpack(what, value, count, stride, info)
      debug(print *, "value unpacked")
      end

!
! Receiving a message from source
! 
      subroutine HPFC RECEIVE(source, tag, bufid)
      include "hpfc_commons.h"
      integer source, tag, bufid
      debug(print *, "receiving a message")
      call pvmfrecv(source, tag, bufid)
      debug(print *, "message received")
      end

!
! The host send a message to every node.
!
      subroutine HPFC HCAST
      include "hpfc_commons.h"
      integer info
      debug(print *, "hcast - ", MCAST HOST)
      call pvmfmcast(MAX SIZE OF PROCS, NODE TIDS, MCAST HOST, info)
      MCAST HOST = MCAST HOST + 2
      debug(print *, "hcast done")
      end
!
! every node receive a broadcast from host.
!
      subroutine HPFC NCAST
      include "hpfc_commons.h"
      integer bufid
      debug(print *, "ncast ", MY LID, " - ", MCAST HOST)
      call pvmfrecv(HOST TID, MCAST HOST, bufid)
      MCAST HOST = MCAST HOST + 2
      debug(print *, "ncast done")
      end
!
! a node sends a message to host
!
      subroutine HPFC SND TO HOST
      include "hpfc_commons.h"
      integer info
      debug(print *, "snd to host ", MYLID, " - ", HOST SND CHANNEL)
      call pvmfsend(HOST TID, HOST SND CHANNEL, info)
      HOST SND CHANNEL = HOST SND CHANNEL+2
      debug(print *, "snd to host done")
      end
!
! a node receive a message from host
!
      subroutine HPFC RCV FROM HOST
      include "hpfc_commons.h"
      debug(print *, "rcv from host ", MY LID, " - ", HOST RCV CHANNEL)
      call pvmfrecv(HOST TID, HOST RCV CHANNEL, BUFFER ID)
      HOST RCV CHANNEL = HOST RCV CHANNEL+2
      debug(print *, "rcv from host done")
      end
!
! the host sends a message from a node
!
      subroutine HPFC SND TO NODE(lid)
      include "hpfc_commons.h"
      integer lid
      integer info
      debug(print *, "snd to node ", lid, " - ", SEND CHANNELS(lid))
      call pvmfsend(NODE TIDS(lid), SEND CHANNELS(lid), info)
      SEND CHANNELS(lid) = SEND CHANNELS(lid)+2
      debug(print *, "snd to node done")
      end
!
! the host receive a message from a node
!
      subroutine HPFC RCV FROM NODE(lid)
      include "hpfc_commons.h"
      integer lid
      debug(print *, "rcv from node ", lid, " - ", RECV CHANNELS(lid))
      call pvmfrecv(NODE TIDS(lid), RECV CHANNELS(lid), BUFFER ID)
      RECV CHANNELS(lid) = RECV CHANNELS(lid)+2
      debug(print *, "rcv from node done")
      end
!
!
!
