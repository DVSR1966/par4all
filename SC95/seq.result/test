user warning in tp_parse: seq: No such workspace
  Module         INIT
  Module         TESTINIT
  Module         DIGITALIZE
  Module         FLIPFLOP
  Module         TRANSPOSE
  Module         SMATMUL
  Module         MATMUL
  Module         SEQ
Workspace seq created and opened.
Main module PROGRAM "SEQ" selected.
Module SEQ selected
Module SEQ already active.
Module SEQ already active.
Request: build resource PRINTED_FILE for module SEQ.
  BOOTSTRAP                      building   ENTITIES()
  FILTER_FILE                    building   SOURCE_FILE(SEQ)
  PARSER                         building   PARSED_CODE(SEQ)
                                 building   CALLEES(SEQ)
  CONTROLIZER                    building   CODE(SEQ)
  PRINT_CODE                     building   PRINTED_FILE(SEQ)
PRINTED_FILE made for SEQ.
      PROGRAM SEQ

c     Goal: show different dependence tests and privatization

      PARAMETER (N=10)
      PARAMETER (LX=32, MX=92, NX=42)

      REAL A(N,N), B(N,N), C(N,N,2)

      REAL D(LX, MX, NX)

      READ *, A                                                         0001

      CALL MATMUL(B, A, A, N, N, N)                                     0002

      CALL SMATMUL(B, A, A, N, N, N)                                    0003

      CALL TRANSPOSE(B, N)                                              0004

      CALL FLIPFLOP(C, N, 0.25)                                         0005

      CALL INIT                                                         0006
      CALL TESTINIT                                                     0007
      CALL DIGITALIZE(D, LX, MX, NX)                                    0008

      END
Module MATMUL selected
Module MATMUL already active.
Request: build resource PARALLELPRINTED_FILE for module MATMUL.
  FILTER_FILE                    building   SOURCE_FILE(MATMUL)
  PARSER                         building   PARSED_CODE(MATMUL)
                                 building   CALLEES(MATMUL)
  CONTROLIZER                    building   CODE(MATMUL)
  PROPER_EFFECTS                 building   PROPER_EFFECTS(MATMUL)
  ATOMIC_CHAINS                  building   CHAINS(MATMUL)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(MATMUL)
  RICE_FAST_DEPENDENCE_GRAPH     building   DG(MATMUL)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(MATMUL)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(MATMUL)
PARALLELPRINTED_FILE made for MATMUL.

      SUBROUTINE MATMUL(X, Y, Z, L, M, N)
c     compute x := y * z
      REAL X(L,N), Y(L,M), Z(M,N)

      DOALL I = 1, L                                                    0001
         DOALL J = 1, N                                                 0002
            X(I,J) = 0.                                                 0003
         ENDDO
      ENDDO
      DOALL I = 1, L                                                    0001
         DOALL J = 1, N                                                 0002
            DO K = 1, M                                                 0004
               X(I,J) = X(I,J)+Y(I,K)*Z(K,J)                            0005
            ENDDO
         ENDDO
      ENDDO

      END
Module MATMUL already active.
Request: build resource DG_FILE for module MATMUL.
  PRINT_EFFECTIVE_DEPENDENCE_GRAPH building   DG_FILE(MATMUL)
DG_FILE made for MATMUL.

 **************** Effective Dependence Graph ****************

	05 --> 05 with conflicts
		from <X(I,J)-R-MUST> to <X(I,J)-W-MUST> at levels  3
	05 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-R-MUST> at levels  3
	05 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-W-MUST> at levels  3
	04 --> 04 with conflicts
		from <K-W-MUST> to <K-W-MUST> at levels  1 2
	03 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-R-MUST> at levels  3
	03 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-W-MUST> at levels  3
	02 --> 02 with conflicts
		from <J-W-MUST> to <J-W-MUST> at levels  1

****************** End of Dependence Graph ******************
Module SMATMUL selected
Module SMATMUL already active.
Request: build resource PARALLELPRINTED_FILE for module SMATMUL.
  FILTER_FILE                    building   SOURCE_FILE(SMATMUL)
  PARSER                         building   PARSED_CODE(SMATMUL)
                                 building   CALLEES(SMATMUL)
  CONTROLIZER                    building   CODE(SMATMUL)
  PROPER_EFFECTS                 building   PROPER_EFFECTS(SMATMUL)
  ATOMIC_CHAINS                  building   CHAINS(SMATMUL)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(SMATMUL)
  RICE_FAST_DEPENDENCE_GRAPH     building   DG(SMATMUL)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(SMATMUL)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(SMATMUL)
PARALLELPRINTED_FILE made for SMATMUL.

      SUBROUTINE SMATMUL(X, Y, Z, L, M, N)
c     compute x := y * z
      REAL X(L,N), Y(L,M), Z(M,N)

      DO I = 1, L                                                       0001
         DO J = 1, N                                                    0002
            S = 0.                                                      0003
            DO K = 1, M                                                 0004
               S = S+Y(I,K)*Z(K,J)                                      0005
            ENDDO
            X(I,J) = S                                                  0006
         ENDDO
      ENDDO

      END
Module SMATMUL already active.
Request: build resource DG_FILE for module SMATMUL.
  PRINT_EFFECTIVE_DEPENDENCE_GRAPH building   DG_FILE(SMATMUL)
DG_FILE made for SMATMUL.

 **************** Effective Dependence Graph ****************

	06 --> 05 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2
	06 --> 03 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2
	05 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	05 --> 05 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2 3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2 3
	05 --> 03 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2
	05 --> 03 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2
	04 --> 04 with conflicts
		from <K-W-MUST> to <K-W-MUST> at levels  1 2
	03 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2 3
	03 --> 03 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2
	02 --> 02 with conflicts
		from <J-W-MUST> to <J-W-MUST> at levels  1

****************** End of Dependence Graph ******************
Request: build phase/rule PRIVATIZE_MODULE for module SMATMUL.
  PRIVATIZE_MODULE               updating   CODE(SMATMUL)
PRIVATIZE_MODULE made for SMATMUL.
Module SMATMUL already active.
Request: build resource PARALLELPRINTED_FILE for module SMATMUL.
  PROPER_EFFECTS                 building   PROPER_EFFECTS(SMATMUL)
  ATOMIC_CHAINS                  building   CHAINS(SMATMUL)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(SMATMUL)
  RICE_FAST_DEPENDENCE_GRAPH     building   DG(SMATMUL)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(SMATMUL)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(SMATMUL)
PARALLELPRINTED_FILE made for SMATMUL.

      SUBROUTINE SMATMUL(X, Y, Z, L, M, N)
c     compute x := y * z
      REAL X(L,N), Y(L,M), Z(M,N)

      DOALL I = 1, L                                                    0001
         PRIVATE J
         DOALL J = 1, N                                                 0002
            PRIVATE S,K
            S = 0.                                                      0003
            DO K = 1, M                                                 0004
               S = S+Y(I,K)*Z(K,J)                                      0005
            ENDDO
            X(I,J) = S                                                  0006
         ENDDO
      ENDDO

      END
Module SMATMUL already active.
Request: build resource DG_FILE for module SMATMUL.
  PRINT_EFFECTIVE_DEPENDENCE_GRAPH building   DG_FILE(SMATMUL)
DG_FILE made for SMATMUL.

 **************** Effective Dependence Graph ****************

	05 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	05 --> 05 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  3
	03 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  3

****************** End of Dependence Graph ******************
Module TRANSPOSE selected
Module TRANSPOSE already active.
Request: build resource PARALLELPRINTED_FILE for module TRANSPOSE.
  FILTER_FILE                    building   SOURCE_FILE(TRANSPOSE)
  PARSER                         building   PARSED_CODE(TRANSPOSE)
                                 building   CALLEES(TRANSPOSE)
  CONTROLIZER                    building   CODE(TRANSPOSE)
  PROPER_EFFECTS                 building   PROPER_EFFECTS(TRANSPOSE)
  ATOMIC_CHAINS                  building   CHAINS(TRANSPOSE)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(TRANSPOSE)
  RICE_FAST_DEPENDENCE_GRAPH     building   DG(TRANSPOSE)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(TRANSPOSE)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(TRANSPOSE)
PARALLELPRINTED_FILE made for TRANSPOSE.

      SUBROUTINE TRANSPOSE(X,N)
      REAL X(N,N)

      DO I = 1, N-1                                                     0001
         DO J = I+1, N                                                  0002
            T = X(I,J)                                                  0003
            X(I,J) = X(J,I)                                             0004
            X(J,I) = T                                                  0005
         ENDDO
      ENDDO

      END
Module TRANSPOSE already active.
Request: build resource DG_FILE for module TRANSPOSE.
  PRINT_EFFECTIVE_DEPENDENCE_GRAPH building   DG_FILE(TRANSPOSE)
DG_FILE made for TRANSPOSE.

 **************** Effective Dependence Graph ****************

	05 --> 04 with conflicts
		from <X(J,I)-W-MUST> to <X(I,J)-W-MUST> at levels  1
	05 --> 03 with conflicts
		from <T-R-MUST> to <T-W-MUST> at levels  1 2
	05 --> 03 with conflicts
		from <X(J,I)-W-MUST> to <X(I,J)-R-MUST> at levels  1
	04 --> 05 with conflicts
		from <X(J,I)-R-MUST> to <X(J,I)-W-MUST> at levels  3
	04 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(J,I)-W-MUST> at levels  1 3
	04 --> 04 with conflicts
		from <X(J,I)-R-MUST> to <X(I,J)-W-MUST> at levels  1
	04 --> 04 with conflicts
		from <X(I,J)-W-MUST> to <X(J,I)-R-MUST> at levels  1
	03 --> 05 with conflicts
		from <X(I,J)-R-MUST> to <X(J,I)-W-MUST> at levels  1 3
	03 --> 05 with conflicts
		from <T-W-MUST> to <T-R-MUST> at levels  1 2 3
	03 --> 04 with conflicts
		from <X(I,J)-R-MUST> to <X(I,J)-W-MUST> at levels  3
	03 --> 03 with conflicts
		from <T-W-MUST> to <T-W-MUST> at levels  1 2
	02 --> 02 with conflicts
		from <J-W-MUST> to <J-W-MUST> at levels  1

****************** End of Dependence Graph ******************
Selecting rule: RICE_FULL_DEPENDENCE_GRAPH
Request: build phase/rule PRIVATIZE_MODULE for module TRANSPOSE.
  PRIVATIZE_MODULE               updating   CODE(TRANSPOSE)
PRIVATIZE_MODULE made for TRANSPOSE.
Module TRANSPOSE already active.
Request: build resource PARALLELPRINTED_FILE for module TRANSPOSE.
  PROPER_EFFECTS                 building   PROPER_EFFECTS(TRANSPOSE)
  ATOMIC_CHAINS                  building   CHAINS(TRANSPOSE)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(TRANSPOSE)
  RICE_FULL_DEPENDENCE_GRAPH     building   DG(TRANSPOSE)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(TRANSPOSE)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(TRANSPOSE)
PARALLELPRINTED_FILE made for TRANSPOSE.

      SUBROUTINE TRANSPOSE(X,N)
      REAL X(N,N)

      DOALL I = 1, N-1                                                  0001
         PRIVATE J
         DOALL J = I+1, N                                               0002
            PRIVATE T
            T = X(I,J)                                                  0003
            X(I,J) = X(J,I)                                             0004
            X(J,I) = T                                                  0005
         ENDDO
      ENDDO

      END
Module TRANSPOSE already active.
Request: build resource DG_FILE for module TRANSPOSE.
  PRINT_EFFECTIVE_DEPENDENCE_GRAPH building   DG_FILE(TRANSPOSE)
DG_FILE made for TRANSPOSE.

 **************** Effective Dependence Graph ****************

	04 --> 05 with conflicts
		from <X(J,I)-R-MUST> to <X(J,I)-W-MUST> at levels  3
	03 --> 05 with conflicts
		from <T-W-MUST> to <T-R-MUST> at levels  3
	03 --> 04 with conflicts
		from <X(I,J)-R-MUST> to <X(I,J)-W-MUST> at levels  3

****************** End of Dependence Graph ******************
Module FLIPFLOP selected
Module FLIPFLOP already active.
Request: build resource PRINTED_FILE for module FLIPFLOP.
  FILTER_FILE                    building   SOURCE_FILE(FLIPFLOP)
  PARSER                         building   PARSED_CODE(FLIPFLOP)
                                 building   CALLEES(FLIPFLOP)
  CONTROLIZER                    building   CODE(FLIPFLOP)
  PRINT_CODE                     building   PRINTED_FILE(FLIPFLOP)
PRINTED_FILE made for FLIPFLOP.

      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

      NEW = 1                                                           0001

10    CONTINUE                                                          0002
      OLD = NEW                                                         0003
      NEW = 3-OLD                                                       0004

      DO J = 2, N-1                                                     0005
         DO I = 2, N-1                                                  0006
            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END
Module FLIPFLOP already active.
Request: build resource PARALLELPRINTED_FILE for module FLIPFLOP.
  PROPER_EFFECTS                 building   PROPER_EFFECTS(FLIPFLOP)
  ATOMIC_CHAINS                  building   CHAINS(FLIPFLOP)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(FLIPFLOP)
  RICE_FULL_DEPENDENCE_GRAPH     building   DG(FLIPFLOP)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(FLIPFLOP)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(FLIPFLOP)
PARALLELPRINTED_FILE made for FLIPFLOP.

      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

      NEW = 1                                                           0001

10    CONTINUE                                                          0002
      OLD = NEW                                                         0003
      NEW = 3-OLD                                                       0004

      DO J = 2, N-1                                                     0005
         DO I = 2, N-1                                                  0006
            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END
Selecting rule: RICE_SEMANTICS_DEPENDENCE_GRAPH
Selecting rule: PRINT_CODE_PRECONDITIONS
Module FLIPFLOP already active.
Request: build resource PRINTED_FILE for module FLIPFLOP.
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(FLIPFLOP)
  TRANSFORMERS_INTRA_FAST        building   TRANSFORMERS(FLIPFLOP)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(FLIPFLOP)
  INTRAPROCEDURAL_SUMMARY_PRECONDITION building   SUMMARY_PRECONDITION(FLIPFLOP)
  PRECONDITIONS_INTRA            building   PRECONDITIONS(FLIPFLOP)
  PRINT_CODE_PRECONDITIONS       building   PRINTED_FILE(FLIPFLOP)
PRINTED_FILE made for FLIPFLOP.

C  P() {}


      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

C  P() {}


      NEW = 1                                                           0001

C  P(I,J,NEW,OLD) {}


10    CONTINUE                                                          0002

C  P(I,J,NEW,OLD) {}

      OLD = NEW                                                         0003

C  P(I,J,NEW,OLD) {NEW==OLD}

      NEW = 3-OLD                                                       0004

C  P(I,J,NEW,OLD) {NEW+OLD==3}


      DO J = 2, N-1                                                     0005

C  P(I,J,NEW,OLD) {NEW+OLD==3, 2<=J, J+1<=N}

         DO I = 2, N-1                                                  0006

C  P(I,J,NEW,OLD) {NEW+OLD==3, 2<=I, I+1<=N, 2<=J, J+1<=N}

            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

C  P(I,J,NEW,OLD) {NEW+OLD==3, N<=J}


      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END
Module FLIPFLOP already active.
Request: build resource PARALLELPRINTED_FILE for module FLIPFLOP.
  RICE_SEMANTICS_DEPENDENCE_GRAPH building   DG(FLIPFLOP)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(FLIPFLOP)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(FLIPFLOP)
PARALLELPRINTED_FILE made for FLIPFLOP.

      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

      NEW = 1                                                           0001

10    CONTINUE                                                          0002
      OLD = NEW                                                         0003
      NEW = 3-OLD                                                       0004

      DOALL J = 2, N-1                                                  0005
         DOALL I = 2, N-1                                               0006
            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END
Module DIGITALIZE selected
Selecting rule: PRINT_CODE
Module DIGITALIZE already active.
Request: build resource PRINTED_FILE for module DIGITALIZE.
  FILTER_FILE                    building   SOURCE_FILE(DIGITALIZE)
  PARSER                         building   PARSED_CODE(DIGITALIZE)
                                 building   CALLEES(DIGITALIZE)
  CONTROLIZER                    building   CODE(DIGITALIZE)
  PRINT_CODE                     building   PRINTED_FILE(DIGITALIZE)
PRINTED_FILE made for DIGITALIZE.

      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

      MS = MM1/2                                                        0001
      MM = MP1/2                                                        0002

      DO K = 2, N-1                                                     0003
         DO J = 2, MM                                                   0004
            JJ = J+MS                                                   0005
            X(J,K,1) = X(JJ,K,2)                                        0006
            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END
Request: build phase/rule PRIVATIZE_MODULE for module DIGITALIZE.
  PROPER_EFFECTS                 building   PROPER_EFFECTS(DIGITALIZE)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(DIGITALIZE)
  ATOMIC_CHAINS                  building   CHAINS(DIGITALIZE)
  PRIVATIZE_MODULE               updating   CODE(DIGITALIZE)
PRIVATIZE_MODULE made for DIGITALIZE.
Module DIGITALIZE already active.
Request: build resource PARALLELPRINTED_FILE for module DIGITALIZE.
  PROPER_EFFECTS                 building   PROPER_EFFECTS(DIGITALIZE)
  ATOMIC_CHAINS                  building   CHAINS(DIGITALIZE)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(DIGITALIZE)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(DIGITALIZE)
  TRANSFORMERS_INTRA_FAST        building   TRANSFORMERS(DIGITALIZE)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(DIGITALIZE)
  INTRAPROCEDURAL_SUMMARY_PRECONDITION building   SUMMARY_PRECONDITION(DIGITALIZE)
  PRECONDITIONS_INTRA            building   PRECONDITIONS(DIGITALIZE)
  RICE_SEMANTICS_DEPENDENCE_GRAPH building   DG(DIGITALIZE)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(DIGITALIZE)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(DIGITALIZE)
PARALLELPRINTED_FILE made for DIGITALIZE.

      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

      MS = MM1/2                                                        0001
      MM = MP1/2                                                        0002

      DOALL K = 2, N-1                                                  0003
         PRIVATE J
         DO J = 2, MM                                                   0004
            JJ = J+MS                                                   0005
            X(J,K,1) = X(JJ,K,2)                                        0006
            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END
Selecting rule: RICE_SEMANTICS_DEPENDENCE_GRAPH
user warning in activate: Rule `RICE_SEMANTICS_DEPENDENCE_GRAPH' already active
Selecting rule: INTERPROCEDURAL_SUMMARY_PRECONDITION
Selecting rule: PRECONDITIONS_INTER_FULL
Selecting rule: TRANSFORMERS_INTER_FULL
Selecting rule: PRINT_CODE_PRECONDITIONS
Module DIGITALIZE already active.
Request: build resource PRINTED_FILE for module DIGITALIZE.
  FILTER_FILE                    building   SOURCE_FILE(INIT)
  PARSER                         building   PARSED_CODE(INIT)
                                 building   CALLEES(INIT)
  CONTROLIZER                    building   CODE(INIT)
  PROPER_EFFECTS                 building   PROPER_EFFECTS(INIT)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(INIT)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(INIT)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(INIT)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(MATMUL)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(MATMUL)
  FILTER_FILE                    building   SOURCE_FILE(TESTINIT)
  PARSER                         building   PARSED_CODE(TESTINIT)
                                 building   CALLEES(TESTINIT)
  CONTROLIZER                    building   CODE(TESTINIT)
  PROPER_EFFECTS                 building   PROPER_EFFECTS(TESTINIT)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(TESTINIT)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(TESTINIT)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(TRANSPOSE)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(SMATMUL)
  PROPER_EFFECTS                 building   PROPER_EFFECTS(SEQ)
  CUMULATED_EFFECTS              building   CUMULATED_EFFECTS(SEQ)
  SUMMARY_EFFECTS                building   SUMMARY_EFFECTS(SEQ)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(SEQ)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(SMATMUL)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(TESTINIT)
  INITIAL_PRECONDITION           building   INITIAL_PRECONDITION(TRANSPOSE)
  PROGRAM_PRECONDITION           building   PROGRAM_PRECONDITION()
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(DIGITALIZE)
  CALLGRAPH                      building   CALLERS(DIGITALIZE)
                                 building   CALLERS(FLIPFLOP)
                                 building   CALLERS(INIT)
                                 building   CALLERS(MATMUL)
                                 building   CALLERS(SEQ)
                                 building   CALLERS(SMATMUL)
                                 building   CALLERS(TESTINIT)
                                 building   CALLERS(TRANSPOSE)
                                 building   HEIGHT(DIGITALIZE)
                                 building   HEIGHT(FLIPFLOP)
                                 building   HEIGHT(INIT)
                                 building   HEIGHT(MATMUL)
                                 building   HEIGHT(SEQ)
                                 building   HEIGHT(SMATMUL)
                                 building   HEIGHT(TESTINIT)
                                 building   HEIGHT(TRANSPOSE)
                                 building   DEPTH(DIGITALIZE)
                                 building   DEPTH(FLIPFLOP)
                                 building   DEPTH(INIT)
                                 building   DEPTH(MATMUL)
                                 building   DEPTH(SEQ)
                                 building   DEPTH(SMATMUL)
                                 building   DEPTH(TESTINIT)
                                 building   DEPTH(TRANSPOSE)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(TESTINIT)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(INIT)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(FLIPFLOP)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(TRANSPOSE)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(SMATMUL)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(MATMUL)
  TRANSFORMERS_INTER_FULL        building   TRANSFORMERS(SEQ)
  INTERPROCEDURAL_SUMMARY_PRECONDITION building   SUMMARY_PRECONDITION(SEQ)
  PRECONDITIONS_INTER_FULL       building   PRECONDITIONS(SEQ)
  INTERPROCEDURAL_SUMMARY_PRECONDITION building   SUMMARY_PRECONDITION(DIGITALIZE)
  PRECONDITIONS_INTER_FULL       building   PRECONDITIONS(DIGITALIZE)
  PRINT_CODE_PRECONDITIONS       building   PRINTED_FILE(DIGITALIZE)
PRINTED_FILE made for DIGITALIZE.

C  P() {LX==32, MM1==MP1-2, MX==92, NX==42, 1<=MM1, MM1<=91}


      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

C  P() {LX==32, MM1==MP1-2, MX==92, NX==42, 1<=MM1, MM1<=91}


      MS = MM1/2                                                        0001

C  P(MS) {LX==32, MM1==MP1-2, MX==92, NX==42, 1<=MM1, MM1<=91,
C    2MS<=MM1, MM1<=2MS+1}

      MM = MP1/2                                                        0002

C  P(MM,MS) {LX==32, MM1==MP1-2, MX==92, NX==42, MM1+1<=2MM,
C    2MM<=MM1+2, 1<=MM1, MM1<=91, 2MS<=MM1, MM1<=2MS+1}


      DO K = 2, N-1                                                     0003

C  P(J,JJ,K,MM,MS) {LX==32, MM1==MP1-2, MX==92, NX==42, 2<=K, K+1<=N,
C    MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1, MM1<=91, 2MS<=MM1, MM1<=2MS+1}

         DO J = 2, MM                                                   0004

C  P(J,JJ,K,MM,MS) {LX==32, MM1==MP1-2, MX==92, NX==42, 2<=J, J<=MM,
C    2<=K, K+1<=N, MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1, MM1<=91, 2MS<=MM1,
C    MM1<=2MS+1}

            JJ = J+MS                                                   0005

C  P(J,JJ,K,MM,MS) {J+MS==JJ, LX==32, MM1==MP1-2, MX==92, NX==42,
C    2<=J, J<=MM, 2<=K, K+1<=N, MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1,
C    MM1<=91, 2MS<=MM1, MM1<=2MS+1}

            X(J,K,1) = X(JJ,K,2)                                        0006

C  P(J,JJ,K,MM,MS) {J+MS==JJ, LX==32, MM1==MP1-2, MX==92, NX==42,
C    2<=J, J<=MM, 2<=K, K+1<=N, MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1,
C    MM1<=91, 2MS<=MM1, MM1<=2MS+1}

            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END
Module DIGITALIZE already active.
Request: build resource PARALLELPRINTED_FILE for module DIGITALIZE.
  RICE_SEMANTICS_DEPENDENCE_GRAPH building   DG(DIGITALIZE)
  RICE_ALL_DEPENDENCE            building   PARALLELIZED_CODE(DIGITALIZE)
  PRINT_PARALLELIZED77_CODE      building   PARALLELPRINTED_FILE(DIGITALIZE)
PARALLELPRINTED_FILE made for DIGITALIZE.

      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

      MS = MM1/2                                                        0001
      MM = MP1/2                                                        0002

      DOALL K = 2, N-1                                                  0003
         PRIVATE J
         DOALL J = 2, MM                                                0004
            PRIVATE JJ
            JJ = J+MS                                                   0005
            X(J,K,1) = X(JJ,K,2)                                        0006
            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END
Deletion of obsolete resources:
none destroyed.
Closing all modules.
  Closing module DIGITALIZE.
  Closing module FLIPFLOP.
  Closing module INIT.
  Closing module MATMUL.
  Closing module SEQ.
  Closing module SMATMUL.
  Closing module TESTINIT.
  Closing module TRANSPOSE.
Closing program.
Closing workspace.
Workspace seq closed.

Workspace seq deleted.
