void dataExchange(int *x, int *y)
{
   int t = *x;
   *x = *y;
   *y = t;
}
FLGR_Ret flgr1d_clear_all(FLGR_Data1D *data)
{
   if (data==(void *) 0) {
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1455, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   memset(data->array, 0, data->length*data->bps*data->spp/8+32);
   return FLGR_RET_OK;
}
void flgr1d_copy_fgUINT16_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc)
{
   memcpy(datdest->array, datsrc->array, datdest->bps*datdest->length*datdest->spp/8);
}
FLGR_Data1D * flgr1d_create_fgUINT16(int length, int spp, FLGR_Shape shape)
{
   FLGR_Data1D *dat;
   if (length<0) {
      fprintf(stderr, "Negative length!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1652, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }
   if (spp<1) {
      fprintf(stderr, "Sample Per Pixel (spp) must be > 0 !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1652, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }
   dat = (FLGR_Data1D *) flgr_malloc(sizeof(FLGR_Data1D));
   dat->dim = 1;
   dat->size_struct = sizeof(FLGR_Data1D);
   dat->bps = flgr_get_bps_from_type(FLGR_UINT16);
   dat->ref2d = -1;
   dat->shape = shape;
   dat->spp = spp;
   dat->length = length;
   dat->array_phantom = flgr_malloc(length*dat->bps*spp/8+64, 16);
   dat->array = dat->array_phantom+32;
   dat->type = FLGR_UINT16;
   return dat;
}
FLGR_Ret flgr1d_destroy(FLGR_Data1D *dat)
{
   if (dat==(void *) 0) {
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1600, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   flgr_free(dat->array_phantom);
   flgr_free(dat);

   return FLGR_RET_OK;
}
void flgr1d_import_raw_fgUINT16(FLGR_Data1D *datdest, void *raw)
{
   FLGR_Data1D datsrc[1];
   
   
   datsrc->bps = datdest->bps;
   datsrc->spp = datdest->spp;
   datsrc->length = datdest->length;
   datsrc->array = (fgUINT16 *) raw;
   if (raw!=(void *) 0) 
      memcpy(datdest->array, datsrc->array, datdest->bps*datdest->length*datdest->spp/8);
}
void flgr2d_apply_raster_scan_method_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Vector *vec = flgr_vector_create(nhb->spp, nhb->type);
   int i, j;
   int w = nhb->size_x;
   int h = nhb->size_y;
   flgr_vector_populate_from_scalar_fgUINT16(vec, 0);
   for(j = w/2+1; j <= w-1; j += 1)
      flgr2d_set_data_vector_fgUINT16(nhb, h/2, j, vec);
   for(i = h/2+1; i <= h-1; i += 1)
      for(j = 0; j <= w-1; j += 1)
         flgr2d_set_data_vector_fgUINT16(nhb, i, j, vec);
   flgr_vector_destroy(vec);
   return;
}
FLGR_Ret flgr2d_clear_all(FLGR_Data2D *data)
{
   int i;
   //PIPS generated variable
   FLGR_Data1D **P_0;
   if (data==(void *) 0) {
      
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1468, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   
   
   for(i = 0; i <= data->size_y-1; i += 1) {
      P_0 = data->row;
      flgr1d_clear_all(P_0[i]);
   }

   return FLGR_RET_OK;
}
FLGR_Ret flgr2d_convolution(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb)
{
   FLGR_Ret ret;
   if (datdest==(void *) 0||datsrc==(void *) 0||nhb==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1792, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__))!=FLGR_RET_OK) 
      return ret;

   if (datdest->type==FLGR_UINT16)

      flgr2d_convolution_fgUINT16(datdest, datsrc, nhb);
}
void flgr2d_convolution_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb)
{

   flgr2d_raster_slide_window_fgUINT16(datdest, datsrc, nhb, FLGR_NHB_NO_SYM, flgr2d_get_nhb_convolution_fgUINT16);
}
FLGR_Ret flgr2d_copy(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   int error = 0;
   FLGR_Ret ret;
   if (datdest==(void *) 0||datsrc==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1393, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr2d_is_data_same_size(datsrc, datdest))!=FLGR_RET_OK) {

      fprintf(stderr, "src and dest dat have different size !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1398, __FUNCTION__);
      flgr_backtrace_print();
      return ret;
   }
   
   /*
     if(datsrc->type==FLGR_UINT8) {
       FLGR_MACRO_COPY2D_SRC_FIX_TYPE(fgUINT8,fgBIT,fgUINT8,fgUINT16,fgUINT32,
   				   fgINT8,fgINT16,fgINT32,fgFLOAT32,fgFLOAT64);
   
     }else*/
   if (datsrc->type==FLGR_UINT16)
      flgr2d_copy_fgUINT16_fgUINT16(datdest, datsrc);
   else
      error = 1;

   if (error==1) {
      fprintf(stderr, "dest data type unknown!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1443, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_TYPE_UNKNOWN;
   }

   return FLGR_RET_OK;
}
void flgr2d_copy_fgUINT16_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   int i;
   FLGR_Data1D **dest = datdest->row;
   FLGR_Data1D **src = datsrc->row;
   for(i = 0; i <= datsrc->size_y-1; i += 1)
      flgr1d_copy_fgUINT16_fgUINT16(dest[i], src[i]);
   return;
}
FLGR_Data2D * flgr2d_create(int size_y, int size_x, int spp, FLGR_Type type, FLGR_Shape shape, FLGR_Connexity connexity)
{
   
   
   if (type==FLGR_UINT16) 
      return flgr2d_create_fgUINT16(size_y, size_x, spp, shape, connexity);
   fprintf(stderr, "Type unknown!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1663, __FUNCTION__);
   flgr_backtrace_print();
   return (void *) 0;
}
FLGR_Data2D * flgr2d_create_fgUINT16(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity)
{
   int i;
   FLGR_Data2D *dat;
   //PIPS generated variable
   FLGR_Data1D **P_1, **P_2;
   //PIPS generated variable
   void **P_3;
   //PIPS generated variable
   FLGR_Data1D **P_4;
   if (size_y<0) {
      fprintf(stderr, "Number of rows is negative !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1656, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }
   if (size_x<0) {
      fprintf(stderr, "Number of columns is negative !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1656, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }
   if (spp<1) {
      fprintf(stderr, "Sample Per Pixel (spp) must be > 0 !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1656, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }
   dat = (FLGR_Data2D *) flgr_malloc(sizeof(FLGR_Data2D));
   dat->row = (FLGR_Data1D **) flgr_malloc((size_y+16)*sizeof(FLGR_Data1D *));
   dat->array = flgr_malloc((size_y+16)*sizeof(fgUINT16 *));
   dat->dim = 2;
   dat->size_struct = sizeof(FLGR_Data2D);
   dat->bps = flgr_get_bps_from_type(FLGR_UINT16);
   dat->spp = spp;
   dat->shape = shape;
   dat->connexity = connexity;
   dat->size_y = size_y;
   dat->size_x = size_x;
   dat->type = FLGR_UINT16;
   dat->link_overlap = -1;
   dat->link_position = -1;
   dat->link_number = -1;
   for(i = 0; i <= size_y+16-1; i += 1) {
      P_1 = dat->row;
      P_1[i] = flgr1d_create_fgUINT16(size_x, spp, FLGR_NO_SHAPE);
      P_2 = dat->row;
      P_2[i]->ref2d = i;
      P_4 = dat->row;
      P_3 = dat->array;
      P_3[i] = (dat->row)[i]->array;
   }
   return dat;
}
FLGR_Data2D * flgr2d_create_from(FLGR_Data2D *datsrc)
{
   if (datsrc==(void *) 0) {
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1375, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }
   return flgr2d_create(datsrc->size_y, datsrc->size_x, datsrc->spp, datsrc->type, datsrc->shape, datsrc->connexity);
}
FLGR_NhbBox2D * flgr2d_create_neighbor_box(FLGR_Data2D *data)
{
   FLGR_NhbBox2D *tmp;
   int sizeMax;
   int typeSize, k;
   //PIPS generated variable
   int **P_5, **P_6;
   //PIPS generated variable
   void **P_7;
   //PIPS generated variable
   void **P_8;
   //PIPS generated variable
   int *P_9;
   if (data==(void *) 0) {
      
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1724, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }

   typeSize = flgr_get_sizeof(data->type);
   sizeMax = data->size_x*data->size_y;

   if (typeSize<1) 
      return (void *) 0;
   if (data->spp<1) 
      return (void *) 0;
   
   
   
   tmp = flgr_malloc(sizeof(FLGR_NhbBox2D));

   tmp->type = data->type;
   tmp->spp = data->spp;

   tmp->center_data_val = flgr_vector_create(data->spp, data->type);
   tmp->center_nhb_val = flgr_vector_create(data->spp, data->type);
   tmp->center_coord_y = 0;
   tmp->center_coord_x = 0;
   tmp->nhb_size_y = data->size_y;
   tmp->nhb_size_x = data->size_x;

   tmp->list_coord_x = (int **) flgr_malloc(sizeof(int *)*data->spp);
   tmp->list_coord_y = (int **) flgr_malloc(sizeof(int *)*data->spp);
   tmp->list_data_val = (void **) flgr_malloc(sizeof(void *)*data->spp);
   tmp->list_nhb_val = (void **) flgr_malloc(sizeof(void *)*data->spp);

   tmp->size = (int *) flgr_malloc(sizeof(int)*data->spp);

   for(k = 0; k <= data->spp-1; k += 1) {
      P_5 = tmp->list_coord_y;
      P_5[k] = flgr_malloc(sizeof(int)*sizeMax);
      P_6 = tmp->list_coord_x;
      P_6[k] = flgr_malloc(sizeof(int)*sizeMax);
      P_7 = tmp->list_data_val;
      P_7[k] = flgr_malloc(flgr_get_sizeof(tmp->type)*sizeMax);
      P_8 = tmp->list_nhb_val;
      P_8[k] = flgr_malloc(flgr_get_sizeof(tmp->type)*sizeMax);
      P_9 = tmp->size;
      P_9[k] = 0;
   }
   
   
   return tmp;
}
FLGR_Data2D * flgr2d_create_neighborhood(int size_y, int size_x, int spp, FLGR_Type type, FLGR_Shape shape, FLGR_Connexity connexity)
{
   FLGR_Data2D *nhb;
   if (size_x%2==0) {
      
      
      
      fprintf(stderr, "Warning NhbWidth(%d) is even! Changing to the next odd value (%d) \n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1674, __FUNCTION__, size_x, size_x+1);
      flgr_backtrace_print();
      size_x++;
   }
   if (size_y%2==0) {
      fprintf(stderr, "Warning NhbWidth(%d) is even! Changing to the next odd value (%d) \n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1678, __FUNCTION__, size_y, size_y+1);
      flgr_backtrace_print();
      size_y++;
   }
   if (connexity!=FLGR_4_CONNEX&&connexity!=FLGR_6_CONNEX&&connexity!=FLGR_8_CONNEX) {
      fprintf(stderr, "bad connexity : %d\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1683, __FUNCTION__, connexity);
      flgr_backtrace_print();
      return (void *) 0;
   }
   if ((nhb = flgr2d_create(size_y, size_x, spp, type, shape, connexity))==(void *) 0) 
      return (void *) 0;

   if (flgr2d_fill_neighborhood(nhb, shape, size_x, size_y)!=FLGR_RET_OK) {
      flgr2d_destroy(nhb);
      return (void *) 0;
   }

   return nhb;
}
FLGR_Data2D * flgr2d_create_neighborhood_from(FLGR_Data2D *nhbsrc)
{
   if (nhbsrc==(void *) 0) {
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1644, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }

   return flgr2d_create_neighborhood(nhbsrc->size_y, nhbsrc->size_x, nhbsrc->spp, nhbsrc->type, nhbsrc->shape, nhbsrc->connexity);
}
FLGR_Data2D * flgr2d_create_pixmap(int size_y, int size_x, int spp, FLGR_Type type)
{
   
   
   return flgr2d_create(size_y, size_x, spp, type, FLGR_NO_SHAPE, FLGR_NO_CONNEX);
}
int flgr2d_data_is_connexity(FLGR_Data2D *data, FLGR_Connexity connexity)
{
   if (data==(void *) 0) {
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1294, __FUNCTION__);
      flgr_backtrace_print();
      return 0;
   }
   return data->connexity==connexity;
}
FLGR_Ret flgr2d_destroy(FLGR_Data2D *dat)
{
   int i;
   //PIPS generated variable
   FLGR_Data1D **P_10;
   if (dat==(void *) 0) {
      
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1615, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   if (dat->link_overlap>-1) {
      fprintf(stderr, "Destroying a linked data, branching to flgr2d_destroy_link\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1620, __FUNCTION__);
      flgr_backtrace_print();
      return flgr2d_destroy_link(dat);
   }

   for(i = 0; i <= dat->size_y+16-1; i += 1) {
      P_10 = dat->row;
      flgr1d_destroy(P_10[i]);
   }

   flgr_free(dat->array);
   flgr_free(dat->row);
   flgr_free(dat);

   return FLGR_RET_OK;
}
FLGR_Ret flgr2d_destroy_link(FLGR_Data2D *dat)
{
   int k;
   //PIPS generated variable
   FLGR_Data1D **P_11, **P_12, **P_13, **P_14, **P_15;
   if (dat==(void *) 0) {
      
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1558, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   if (dat->link_overlap==-1) {
      fprintf(stderr, "Destroying a non-linked data, branching to flgr2d_destroy\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1563, __FUNCTION__);
      flgr_backtrace_print();
      return flgr2d_destroy(dat);
   }

   if (dat->link_position==0)
      for(k = dat->size_y-dat->link_overlap; k <= dat->size_y+16-1; k += 1) {
         P_11 = dat->row;
         flgr1d_destroy(P_11[k]);
      }
   else if (dat->link_position==dat->link_number-1) {
      for(k = 0; k <= dat->link_overlap-1; k += 1) {
         P_12 = dat->row;
         flgr1d_destroy(P_12[k]);
      }

      for(k = dat->size_y; k <= dat->size_y+16-1; k += 1) {
         P_13 = dat->row;
         flgr1d_destroy(P_13[k]);
      }
   }
   else {
      for(k = 0; k <= dat->link_overlap-1; k += 1) {
         P_14 = dat->row;
         flgr1d_destroy(P_14[k]);
      }
      for(k = dat->size_y-dat->link_overlap; k <= dat->size_y+16-1; k += 1) {
         P_15 = dat->row;
         flgr1d_destroy(P_15[k]);
      }
   }

   flgr_free(dat->array);
   flgr_free(dat->row);
   flgr_free(dat);

   return FLGR_RET_OK;
}
void flgr2d_destroy_neighbor_box(FLGR_NhbBox2D *extr)
{
   int k;
   //PIPS generated variable
   void **P_16;
   //PIPS generated variable
   void **P_17;
   //PIPS generated variable
   int **P_18, **P_19;
   if (extr==(void *) 0) {
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1529, __FUNCTION__);
      flgr_backtrace_print();
      return;
   }

   for(k = 0; k <= extr->spp-1; k += 1) {
      P_16 = extr->list_data_val;
      flgr_free(P_16[k]);
      P_17 = extr->list_nhb_val;
      flgr_free(P_17[k]);
      P_18 = extr->list_coord_x;
      flgr_free(P_18[k]);
      P_19 = extr->list_coord_y;
      flgr_free(P_19[k]);
   }
   
   
   flgr_vector_destroy(extr->center_data_val);
   flgr_vector_destroy(extr->center_nhb_val);

   flgr_free(extr->list_coord_x);
   flgr_free(extr->list_coord_y);
   flgr_free(extr->list_data_val);
   flgr_free(extr->list_nhb_val);
   flgr_free(extr->size);

   flgr_free(extr);
}
void flgr2d_draw_disc_fgUINT16(FLGR_Data2D *dat, int cx, int cy, int radius, FLGR_Vector *color)
{
   int d, y, x;
   d = 3-2*radius;
   x = 0;
   y = radius;
   while (y>=x) {
      flgr2d_draw_horizontal_line_fgUINT16(dat, cx-x, cy-y, 2*x+1, color);
      flgr2d_draw_horizontal_line_fgUINT16(dat, cx-x, cy+y, 2*x+1, color);
      flgr2d_draw_horizontal_line_fgUINT16(dat, cx-y, cy-x, 2*y+1, color);
      flgr2d_draw_horizontal_line_fgUINT16(dat, cx-y, cy+x, 2*y+1, color);
      if (d<0)
         d = d+4*x+6;
      else {
         d = d+4*(x-y)+10;
         y--;
      }
      x++;
   }
   return;
}
void flgr2d_draw_filled_ellipse_fgUINT16(FLGR_Data2D *dat, int cx, int cy, int a, int b, FLGR_Vector *color)
{
   int x = 0, y = b;
   unsigned int width = 1;
   long a2 = (long) a*a, b2 = (long) b*b;
   long crit1 = -(a2/4+a%2+b2);
   long crit2 = -(b2/4+b%2+a2);
   long crit3 = -(b2/4+b%2);
   long t = -(a2*y);
   long dxt = 2*b2*x, dyt = -(2*a2*y);
   long d2xt = 2*b2, d2yt = 2*a2;
   while (y>=0&&x<=a) 
      if (t+b2*x<=crit1||t+a2*y<=crit3) {
         x++, dxt += d2xt, t += dxt;
         width += 2;
      }
      else if (t-a2*y>crit2) {
         flgr2d_draw_horizontal_line_fgUINT16(dat, cx-x, cy-y, width, color);
         if (y!=0) 
            flgr2d_draw_horizontal_line_fgUINT16(dat, cx-x, cy+y, width, color);
         y--, dyt += d2yt, t += dyt;
      }
      else {
         flgr2d_draw_horizontal_line_fgUINT16(dat, cx-x, cy-y, width, color);
         if (y!=0) 
            flgr2d_draw_horizontal_line_fgUINT16(dat, cx-x, cy+y, width, color);
         x++, dxt += d2xt, t += dxt;
         y--, dyt += d2yt, t += dyt;
         width += 2;
      }
   if (b==0) 
      flgr2d_draw_horizontal_line_fgUINT16(dat, cx-a, cy, 2*a+1, color);
   return;
}
void flgr2d_draw_filled_rectangle_fgUINT16(FLGR_Data2D *dat, int x, int y, int size_x, int size_y, FLGR_Vector *color)
{
   int i;
   for(i = y; i <= y+size_y-1; i += 1)
      flgr2d_draw_horizontal_line_fgUINT16(dat, x, i, size_x, color);
   return;
}
void flgr2d_draw_horizontal_line_fgUINT16(FLGR_Data2D *dat, int x, int y, int size_x, FLGR_Vector *color)
{
   int i;
   for(i = x; i <= x+size_x-1; i += 1)
      flgr2d_draw_point_fgUINT16(dat, i, y, color);
   return;
}
void flgr2d_draw_line_fgUINT16(FLGR_Data2D *dat, int x1, int y1, int x2, int y2, FLGR_Vector *color)
{
   int d, dx, dy, aincr, bincr, xincr, yincr, x, y;
   if (abs(x2-x1)<abs(y2-y1)) {
      if (y1>y2) {
         dataExchange(&x1, &x2);
         dataExchange(&y1, &y2);
      }
      xincr = x2>x1?1:-1;
      dy = y2-y1;
      dx = abs(x2-x1);
      d = 2*dx-dy;
      aincr = 2*(dx-dy);
      bincr = 2*dx;
      x = x1;
      y = y1;
      flgr2d_draw_point_fgUINT16(dat, x, y, color);
      for(y = y1+1; y <= y2; y += 1) {
         if (d>=0) {
            x += xincr;
            d += aincr;
         }
         else
            d += bincr;
         flgr2d_draw_point_fgUINT16(dat, x, y, color);
      }
   }
   else {
      if (x1>x2) {
         dataExchange(&x1, &x2);
         dataExchange(&y1, &y2);
      }
      yincr = y2>y1?1:-1;
      dx = x2-x1;
      dy = abs(y2-y1);
      d = 2*dy-dx;
      aincr = 2*(dy-dx);
      bincr = 2*dy;
      x = x1;
      y = y1;
      flgr2d_draw_point_fgUINT16(dat, x, y, color);
      for(x = x1+1; x <= x2; x += 1) {
         if (d>=0) {
            y += yincr;
            d += aincr;
         }
         else
            d += bincr;
         flgr2d_draw_point_fgUINT16(dat, x, y, color);
      }
   }
   return;
}
void flgr2d_draw_point_fgUINT16(FLGR_Data2D *dat, int x, int y, FLGR_Vector *color)
{
   if (y<0) 
      return;
   if (x<0) 
      return;
   if (y>=dat->size_y) 
      return;
   if (x>=dat->size_x) 
      return;
   flgr2d_set_data_vector_fgUINT16(dat, y, x, color);
   return;
}
void flgr2d_draw_vertical_line_fgUINT16(FLGR_Data2D *dat, int x, int y, int size_y, FLGR_Vector *color)
{
   int i;
   for(i = y; i <= y+size_y-1; i += 1)
      flgr2d_draw_point_fgUINT16(dat, x, i, color);
   return;
}
FLGR_Ret flgr2d_fill_neighborhood(FLGR_Data2D *nhb, FLGR_Shape shape, int width, int height)
{
   if (nhb==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1482, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   if (nhb->shape!=shape) {
      fprintf(stderr, "given shape does not correspond to FLGR_Data2D shape\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1487, __FUNCTION__);
      flgr_backtrace_print();
   }

   if (width>nhb->size_x) {
      fprintf(stderr, "width too high\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1491, __FUNCTION__);
      flgr_backtrace_print();
      width = nhb->size_x;
   }

   if (width<0) {
      fprintf(stderr, "width < 0\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1496, __FUNCTION__);
      flgr_backtrace_print();
      width = 0;
   }

   if (width%2==0) 
      width++;

   if (height>nhb->size_y) {
      fprintf(stderr, "height too high\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1505, __FUNCTION__);
      flgr_backtrace_print();
      height = nhb->size_y;
   }

   if (height<0) {
      fprintf(stderr, "height < 0\n""WARNING: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1510, __FUNCTION__);
      flgr_backtrace_print();
      height = 0;
   }

   if (height%2==0) 
      height++;
   
   
   
   flgr2d_fill_neighborhood_fgUINT16(nhb, shape, width, height);
}
void flgr2d_fill_neighborhood_fgUINT16(FLGR_Data2D *nhb, FLGR_Shape shape, int width, int height)
{
   FLGR_Vector *vec1 = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Data2D *tmp = flgr2d_create_from(nhb);
   int h = nhb->size_y;
   int w = nhb->size_x;
   int size = height<width?height:width;
   double size_square = (double) size/2/(1+sqrt(2));
   double size_square2 = floor(size_square);
   int nbsqr = (int) size_square-size_square2<0.5f?size_square2:size_square2+1;
   int i;
   flgr2d_clear_all(nhb);
   flgr_vector_populate_from_scalar_fgUINT16(vec1, 1);
   if (shape==FLGR_HEX) {
      flgr2d_set_data_vector_fgUINT16(nhb, h/2, w/2, vec1);
      for(i = 0; i <= size/2-1; i += 1)
         flgr2d_native_dilate_6_connexity_fgUINT16(nhb);
      if (size/2%2==1) {
         flgr2d_fill_nhb_even_rows_fgUINT16(tmp, nhb);
         flgr2d_copy(nhb, tmp);
      }
   }
   else if (shape==FLGR_RECT)
      flgr2d_draw_filled_rectangle_fgUINT16(nhb, w/2-width/2, h/2-height/2, width, height, vec1);
   else if (shape==FLGR_DIAMOND) {
      flgr2d_set_data_vector_fgUINT16(nhb, h/2, w/2, vec1);
      for(i = 0; i <= size/2-1; i += 1)
         flgr2d_native_dilate_4_connexity_fgUINT16(nhb);
   }
   else if (shape==FLGR_OCTAGON) {
      flgr2d_set_data_vector_fgUINT16(nhb, h/2, w/2, vec1);
      for(i = 0; i <= size/2-nbsqr-1; i += 1)
         flgr2d_native_dilate_4_connexity_fgUINT16(nhb);
      for(i = 0; i <= nbsqr-1; i += 1)
         flgr2d_native_dilate_8_connexity_fgUINT16(nhb);
   }
   else if (shape==FLGR_DISC)
      flgr2d_draw_disc_fgUINT16(nhb, w/2, h/2, size/2, vec1);
   else if (shape==FLGR_ELLIPSE)
      flgr2d_draw_filled_ellipse_fgUINT16(nhb, w/2, h/2, width/2, height/2, vec1);
   else if (shape==FLGR_SLASH)
      flgr2d_draw_line_fgUINT16(nhb, w/2-width/2, height-1+h/2-height/2, width-1+w/2-width/2, h/2-height/2, vec1);
   else if (shape==FLGR_BSLASH)
      flgr2d_draw_line_fgUINT16(nhb, w/2-width/2, h/2-height/2, width-1+w/2-width/2, height-1+h/2-height/2, vec1);
   else if (shape==FLGR_CROSS) {
      flgr2d_draw_vertical_line_fgUINT16(nhb, w/2, h/2-height/2, height, vec1);
      flgr2d_draw_horizontal_line_fgUINT16(nhb, w/2-width/2, h/2, width, vec1);
   }
   else if (shape==FLGR_CROSSX) {
      flgr2d_draw_line_fgUINT16(nhb, w/2-width/2, height-1+h/2-height/2, width-1+w/2-width/2, h/2-height/2, vec1);
      flgr2d_draw_line_fgUINT16(nhb, w/2-width/2, h/2-height/2, width-1+w/2-width/2, height-1+h/2-height/2, vec1);
   }
   flgr_vector_destroy(vec1);
   flgr2d_destroy(tmp);
   return;
}
FLGR_Ret flgr2d_fill_nhb_even_rows(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   FLGR_Ret ret;
   if (datsrc==(void *) 0||datdest==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1280, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__);
   if (ret!=FLGR_RET_OK) 
      return ret;

   flgr2d_fill_nhb_even_rows_fgUINT16(datdest, datsrc);
}
void flgr2d_fill_nhb_even_rows_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   int mid = datsrc->size_y/2;
   int h = datsrc->size_y;
   int w = datsrc->size_x;
   int i, j;
   FLGR_Vector *tmp = flgr_vector_create(datsrc->spp, datsrc->type);
   for(i = mid; i >= 0; i += -2)
      for(j = 0; j <= w-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j, tmp);
      }
   for(i = mid-1; i >= 0; i += -2) {
      for(j = 0; j <= w-1-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j+1, tmp);
      }
      flgr2d_get_data_vector_fgUINT16(datsrc, i, w-1, tmp);
      flgr2d_set_data_vector_fgUINT16(datdest, i, 0, tmp);
   }
   for(i = mid+1; i <= h-1; i += 2) {
      for(j = 0; j <= w-1-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j+1, tmp);
      }
      flgr2d_get_data_vector_fgUINT16(datsrc, i, w-1, tmp);
      flgr2d_set_data_vector_fgUINT16(datdest, i, 0, tmp);
   }
   for(i = mid+2; i <= h-1; i += 2)
      for(j = 0; j <= w-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j, tmp);
      }
   flgr_vector_destroy(tmp);
   return;
}
FLGR_Ret flgr2d_fill_nhb_odd_rows(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   FLGR_Ret ret;
   if (datsrc==(void *) 0||datdest==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1264, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__);
   if (ret!=FLGR_RET_OK) 
      return ret;

   flgr2d_fill_nhb_odd_rows_fgUINT16(datdest, datsrc);
}
void flgr2d_fill_nhb_odd_rows_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   int mid = datsrc->size_y/2;
   int h = datsrc->size_y;
   int w = datsrc->size_x;
   int i, j;
   FLGR_Vector *tmp = flgr_vector_create(datsrc->spp, datsrc->type);
   for(i = mid; i >= 0; i += -2)
      for(j = 0; j <= w-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j, tmp);
      }
   for(i = mid-1; i >= 0; i += -2) {
      for(j = 0; j <= w-1-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j+1, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j, tmp);
      }
      flgr2d_get_data_vector_fgUINT16(datsrc, i, 0, tmp);
      flgr2d_set_data_vector_fgUINT16(datdest, i, w-1, tmp);
   }
   for(i = mid+1; i <= h-1; i += 2) {
      for(j = 0; j <= w-1-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j+1, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j, tmp);
      }
      flgr2d_get_data_vector_fgUINT16(datsrc, i, 0, tmp);
      flgr2d_set_data_vector_fgUINT16(datdest, i, w-1, tmp);
   }
   for(i = mid+2; i <= h-1; i += 2)
      for(j = 0; j <= w-1; j += 1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, tmp);
         flgr2d_set_data_vector_fgUINT16(datdest, i, j, tmp);
      }
   flgr_vector_destroy(tmp);
   return;
}
FLGR_Ret flgr2d_fill_nhbs_for_6_connexity(FLGR_Data2D *nhbEven, FLGR_Data2D *nhbOdd, FLGR_Data2D *nhb, int SYM)
{
   FLGR_Ret ret;
   if (nhb==(void *) 0||nhbOdd==(void *) 0||nhbEven==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1306, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr2d_is_data_same_attributes(nhbEven, nhbOdd, __FUNCTION__))!=FLGR_RET_OK) 
      return ret;
   if ((ret = flgr2d_is_data_same_attributes(nhbEven, nhb, __FUNCTION__))!=FLGR_RET_OK) 
      return ret;

   if (SYM==FLGR_NHB_SYM)
      if (flgr2d_data_is_connexity(nhb, FLGR_6_CONNEX)==1) {

         flgr2d_mirror_horizontal(nhbOdd, nhb);
         flgr2d_mirror_vertical_hmorph(nhbOdd);
         flgr2d_fill_nhb_even_rows(nhbEven, nhbOdd);
      }
      else {
         flgr2d_mirror_horizontal(nhbEven, nhb);
         flgr2d_mirror_vertical_hmorph(nhbEven);
         flgr2d_copy(nhbOdd, nhbEven);
      }
   else if (flgr2d_data_is_connexity(nhb, FLGR_6_CONNEX)==1) {
      flgr2d_copy(nhbEven, nhb);
      flgr2d_fill_nhb_odd_rows(nhbOdd, nhbEven);
   }
   else {
      flgr2d_copy(nhbEven, nhb);
      flgr2d_copy(nhbOdd, nhb);
   }

   return FLGR_RET_OK;
}
fgUINT16 flgr2d_get_data_array_fgUINT16(fgUINT16 **array, int row, int col)
{
   return flgr_get_array_fgUINT16(array[row], col);
}
void flgr2d_get_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct)
{
   fgUINT16 *array_s;
   fgUINT16 *array_d = (fgUINT16 *) vct->array;
   //PIPS generated variable
   void **P_20;
   row = flgr_normalize_coordinate(row, dat->size_y);
   col = flgr_normalize_coordinate(col, dat->size_x);
   P_20 = dat->array;
   array_s = (fgUINT16 *) P_20[row];
   flgr_get_data_array_vector_fgUINT16(array_d, array_s, vct->spp, col);
}
void flgr2d_get_data_vector_no_norm_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct)
{
   fgUINT16 *array_s = (fgUINT16 *) (dat->array)[row];
   fgUINT16 *array_d = (fgUINT16 *) vct->array;
   flgr_get_data_array_vector_fgUINT16(array_d, array_s, vct->spp, col);
}
void flgr2d_get_neighborhood_fgUINT16(FLGR_NhbBox2D *extr, FLGR_Data2D *dat, FLGR_Data2D *nhb, int row, int col)
{
   int i, j, m;
   int k, l, n;
   int nbrow, nbcol;
   int startrow, stoprow;
   int startcol, stopcol;
   int nhbsize_xdiv2;
   int nhbsize_ydiv2;
   int spp = dat->spp;
   fgUINT16 **pnhb = (fgUINT16 **) nhb->array;
   fgUINT16 **pdat = (fgUINT16 **) dat->array;
   fgUINT16 *list_data;
   fgUINT16 *list_nhb;
   int *list_coord_x;
   int *list_coord_y;
   int *size = extr->size;
   fgUINT16 nhb_val, data_val;
   //PIPS generated variable
   void **P_21;
   //PIPS generated variable
   void **P_22;
   //PIPS generated variable
   void **P_23;
   //PIPS generated variable
   void **P_24;
   //PIPS generated variable
   int **P_25, **P_26;
   nhbsize_xdiv2 = nhb->size_x>>1;
   nhbsize_ydiv2 = nhb->size_y>>1;
   nbrow = dat->size_y;
   nbcol = dat->size_x;
   extr->center_coord_y = row;
   extr->center_coord_x = col;
   startrow = row-nhbsize_ydiv2;
   startrow = startrow<0?0:startrow;
   stoprow = row+nhbsize_ydiv2;
   stoprow = stoprow>=nbrow?nbrow-1:stoprow;
   startcol = col-nhbsize_xdiv2;
   startcol = startcol<0?0:startcol;
   stopcol = col+nhbsize_xdiv2;
   stopcol = stopcol>=nbcol?nbcol-1:stopcol;
   P_21 = dat->array;
   flgr_get_data_array_vector_fgUINT16((fgUINT16 *) extr->center_data_val->array, (fgUINT16 *) P_21[row], spp, col);
   P_22 = nhb->array;
   flgr_get_data_array_vector_fgUINT16((fgUINT16 *) extr->center_nhb_val->array, (fgUINT16 *) P_22[nhbsize_ydiv2], spp, nhbsize_xdiv2);
   for(n = 0; n <= spp-1; n += 1) {
      P_23 = extr->list_data_val;
      list_data = (fgUINT16 *) P_23[n];
      P_24 = extr->list_nhb_val;
      list_nhb = (fgUINT16 *) P_24[n];
      P_25 = extr->list_coord_x;
      list_coord_x = (int *) P_25[n];
      P_26 = extr->list_coord_y;
      list_coord_y = (int *) P_26[n];
      m = 0;
      k = startrow-row+nhbsize_ydiv2;
      for(i = startrow; i <= stoprow; i += 1) {
         l = startcol-col+nhbsize_xdiv2;
         for(j = startcol; j <= stopcol; j += 1) {
            nhb_val = flgr2d_get_data_array_fgUINT16(pnhb, k, l*spp+n);
            if (nhb_val!=0) {
               data_val = flgr2d_get_data_array_fgUINT16(pdat, i, j*spp+n);
               list_coord_x[m] = l;
               list_coord_y[m] = k;
               list_data[m] = data_val;
               list_nhb[m] = nhb_val;
               m++;
            }
            l++;
         }
         k++;
      }
      size[n] = m;
   }
   return;
}
void flgr2d_get_nhb_convolution_fgUINT16(FLGR_Vector *result, FLGR_NhbBox2D *extr)
{
   int i, k;
   int spp = extr->spp;
   fgUINT16 *presult = (fgUINT16 *) result->array;
   fgUINT16 *list_data_val;
   fgUINT16 *list_nhb_val;
   int *size = extr->size;
   fgFLOAT64 a, b, sum;
   fgFLOAT64 tmp;
   //PIPS generated variable
   void **P_27;
   //PIPS generated variable
   void **P_28;
   for(k = 0; k <= spp-1; k += 1) {
      P_27 = extr->list_data_val;
      list_data_val = (fgUINT16 *) P_27[k];
      P_28 = extr->list_nhb_val;
      list_nhb_val = (fgUINT16 *) P_28[k];
      tmp = 0;
      sum = 0;
      for(i = 0; i <= size[k]-1; i += 1) {
         a = (fgFLOAT64) list_data_val[i];
         b = (fgFLOAT64) list_nhb_val[i];
         tmp = tmp+a*b;
         sum = sum+fabs(b);
      }
      if (sum!=0) 
         flgr_set_array_fgUINT16(presult, k, (fgUINT16) tmp/sum);
   }
   return;
}
void flgr2d_import_raw_fgUINT16(FLGR_Data2D *datdest, void *raw)
{
   FLGR_Data1D **dest = datdest->row;
   int spp = datdest->spp;
   int size = datdest->size_x*sizeof(fgUINT16)*spp;
   int i;
   for(i = 0; i <= datdest->size_y-1; i += 1) {
      flgr1d_import_raw_fgUINT16(dest[i], raw);
      raw += size;
   }
   return;
}
FLGR_Ret flgr2d_import_raw_ptr(FLGR_Data2D *datdest, void *raw)
{
   if (datdest==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1245, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   flgr2d_import_raw_fgUINT16(datdest, raw);
}
FLGR_Ret flgr2d_is_data_same_attributes(FLGR_Data2D *data1, FLGR_Data2D *data2, const char *callingFunction)
{
   FLGR_Ret ret;
   if (data1==(void *) 0||data2==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1194, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr_is_data_type_valid(data1->type))!=FLGR_RET_OK) {

      fprintf(stderr, "ERROR: Function %s: unknown type\r\n", callingFunction);
      flgr_backtrace_print();
      return ret;
   }
   if ((ret = flgr_is_data_type_valid(data2->type))!=FLGR_RET_OK) {

      fprintf(stderr, "ERROR: Function %s: unknown type\r\n", callingFunction);
      flgr_backtrace_print();
      return ret;
   }
   if ((ret = flgr2d_is_data_same_type(data1, data2))!=FLGR_RET_OK) {

      fprintf(stderr, "ERROR: Function %s: source and destination have a different type\r\n", callingFunction);
      flgr_backtrace_print();
      return ret;
   }
   if ((ret = flgr2d_is_data_same_spp(data1, data2))!=FLGR_RET_OK) {

      fprintf(stderr, "ERROR: Function %s: source and destination have a different vector size(spp)\r\n", callingFunction);
      flgr_backtrace_print();
      return ret;
   }
   if (data1->size_y!=data2->size_y||data1->size_x!=data2->size_x) {
      fprintf(stderr, "ERROR: Function %s: source and destination have a different size\r\n", callingFunction);
      flgr_backtrace_print();
      return FLGR_RET_SIZE_ERROR;
   }

   return FLGR_RET_OK;
}
FLGR_Ret flgr2d_is_data_same_size(FLGR_Data2D *data1, FLGR_Data2D *data2)
{
   if (data1==(void *) 0||data2==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1178, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if (data1->size_y!=data2->size_y||data1->size_x!=data2->size_x) 
      return FLGR_RET_SIZE_ERROR;

   return FLGR_RET_OK;
}
FLGR_Ret flgr2d_is_data_same_spp(FLGR_Data2D *dat1, FLGR_Data2D *dat2)
{
   if (dat1==(void *) 0||dat2==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1161, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   
   
   if (dat1->spp<0) 
      return FLGR_RET_VECTOR_SIZE_DIFFERENT;
   if (dat2->spp<0) 
      return FLGR_RET_VECTOR_SIZE_DIFFERENT;

   if (dat1->spp!=dat2->spp) 
      return FLGR_RET_VECTOR_SIZE_DIFFERENT;

   return FLGR_RET_OK;
}
FLGR_Ret flgr2d_is_data_same_type(FLGR_Data2D *data1, FLGR_Data2D *data2)
{
   FLGR_Ret ret;
   if (data1==(void *) 0||data2==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1143, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr_is_data_type_valid(data1->type))!=FLGR_RET_OK) 
      return ret;
   if ((ret = flgr_is_data_type_valid(data2->type))!=FLGR_RET_OK) 
      return ret;

   if (data1->type!=data2->type) 
      return FLGR_RET_TYPE_DIFFERENT;

   return FLGR_RET_OK;
}
FLGR_Ret flgr2d_mirror_horizontal(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   FLGR_Ret ret;
   if (datdest==(void *) 0||datsrc==(void *) 0) {
      fprintf(stderr, "Null objects\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1127, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__);
   if (ret!=FLGR_RET_OK) 
      return ret;

   flgr2d_mirror_horizontal_fgUINT16(datdest, datsrc);
}
void flgr2d_mirror_horizontal_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc)
{
   FLGR_Vector *vec1;
   int i, j, k;
   vec1 = flgr_vector_create(datsrc->spp, datsrc->type);
   for(i = 0; i <= datsrc->size_y-1; i += 1) {
      j = 0;
      for(k = datsrc->size_x-1; k >= 0; k += -1) {
         flgr2d_get_data_vector_fgUINT16(datsrc, i, j, vec1);
         flgr2d_set_data_vector_fgUINT16(datdest, i, k, vec1);
         j++;
      }
   }
   flgr_vector_destroy(vec1);
   return;
}
FLGR_Ret flgr2d_mirror_vertical_hmorph(FLGR_Data2D *dat)
{
   FLGR_Data1D *row_tmp;
   void *tmp;
   int i, j;
   //PIPS generated variable
   void **P_29;
   //PIPS generated variable
   void **P_30;
   //PIPS generated variable
   void **P_31;
   //PIPS generated variable
   void **P_32;
   //PIPS generated variable
   FLGR_Data1D **P_33, **P_34, **P_35, **P_36, **P_37, **P_38;
   if (dat==(void *) 0) {
      
      
      
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1090, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   j = dat->size_y-1;

   for(i = 0; i <= dat->size_y/2-1; i += 1) {
      P_29 = dat->array;
      tmp = P_29[i];
      P_31 = dat->array;
      P_30 = dat->array;
      P_30[i] = (dat->array)[j];
      P_32 = dat->array;
      P_32[j] = tmp;
      P_33 = dat->row;

      row_tmp = P_33[i];
      P_35 = dat->row;
      P_34 = dat->row;
      P_34[i] = (dat->row)[j];
      P_36 = dat->row;
      P_36[j] = row_tmp;
      P_37 = dat->row;

      P_37[i]->ref2d = i;
      P_38 = dat->row;
      P_38[j]->ref2d = j;
      j--;
   }

   return FLGR_RET_OK;
}
void flgr2d_native_dilate_4_connexity_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Data2D *nhbcopy;
   fgUINT16 **seodd;
   fgUINT16 **seeven;
   fgUINT16 **se;
   int i, j;
   int k, l;
   int m, n;
   fgUINT16 valse;
   FLGR_Vector *vecPixValue = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecPixMax = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecSeValue = flgr_vector_create(nhb->spp, nhb->type);
   nhbcopy = flgr2d_create_from(nhb);
   flgr2d_copy(nhbcopy, nhb);
   seodd = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seodd[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seeven[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 0, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 2, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 0, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 2, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 0, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 2, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 0, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 2, 0);
   for(i = 0; i <= nhb->size_y-1; i += 1)
      for(j = 0; j <= nhb->size_x-1; j += 1) {
         flgr_vector_populate_from_scalar_fgUINT16(vecPixMax, 0);
         m = 0;
         for(k = i-1; k <= i+1; k += 1) {
            if (k>=0&&k<nhb->size_y) {
               n = 0;
               for(l = j-1; l <= j+1; l += 1) {
                  if (l>=0&&l<nhb->size_x) {
                     se = i%2==1?seodd:seeven;
                     valse = flgr2d_get_data_array_fgUINT16(se, m, n);
                     flgr_vector_populate_from_scalar_fgUINT16(vecSeValue, valse);
                     flgr2d_get_data_vector_no_norm_fgUINT16(nhbcopy, k, l, vecPixValue);
                     flgr_vector_mult_fgUINT16(vecPixValue, vecPixValue, vecSeValue);
                     flgr_vector_sup_fgUINT16(vecPixMax, vecPixMax, vecPixValue);
                  }
                  n++;
               }
            }
            m++;
         }
         flgr2d_set_data_vector_fgUINT16(nhb, i, j, vecPixMax);
      }
   flgr_vector_destroy(vecPixValue);
   flgr_vector_destroy(vecPixMax);
   flgr_vector_destroy(vecSeValue);
   flgr2d_destroy(nhbcopy);
   flgr_free(seodd[0]);
   flgr_free(seodd[1]);
   flgr_free(seodd[2]);
   flgr_free(seodd);
   flgr_free(seeven[0]);
   flgr_free(seeven[1]);
   flgr_free(seeven[2]);
   flgr_free(seeven);
   return;
}
void flgr2d_native_dilate_6_connexity_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Data2D *nhbcopy;
   fgUINT16 **seodd;
   fgUINT16 **seeven;
   fgUINT16 **se;
   int i, j;
   int k, l;
   int m, n;
   fgUINT16 valse;
   FLGR_Vector *vecPixValue = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecPixMax = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecSeValue = flgr_vector_create(nhb->spp, nhb->type);
   nhbcopy = flgr2d_create_from(nhb);
   flgr2d_copy(nhbcopy, nhb);
   seodd = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seodd[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seeven[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 2, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 2, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 0, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 0, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 2, 1);
   for(i = 0; i <= nhb->size_y-1; i += 1)
      for(j = 0; j <= nhb->size_x-1; j += 1) {
         flgr_vector_populate_from_scalar_fgUINT16(vecPixMax, 0);
         m = 0;
         for(k = i-1; k <= i+1; k += 1) {
            if (k>=0&&k<nhb->size_y) {
               n = 0;
               for(l = j-1; l <= j+1; l += 1) {
                  if (l>=0&&l<nhb->size_x) {
                     se = i%2==1?seodd:seeven;
                     valse = flgr2d_get_data_array_fgUINT16(se, m, n);
                     flgr_vector_populate_from_scalar_fgUINT16(vecSeValue, valse);
                     flgr2d_get_data_vector_no_norm_fgUINT16(nhbcopy, k, l, vecPixValue);
                     flgr_vector_mult_fgUINT16(vecPixValue, vecPixValue, vecSeValue);
                     flgr_vector_sup_fgUINT16(vecPixMax, vecPixMax, vecPixValue);
                  }
                  n++;
               }
            }
            m++;
         }
         flgr2d_set_data_vector_fgUINT16(nhb, i, j, vecPixMax);
      }
   flgr_vector_destroy(vecPixValue);
   flgr_vector_destroy(vecPixMax);
   flgr_vector_destroy(vecSeValue);
   flgr2d_destroy(nhbcopy);
   flgr_free(seodd[0]);
   flgr_free(seodd[1]);
   flgr_free(seodd[2]);
   flgr_free(seodd);
   flgr_free(seeven[0]);
   flgr_free(seeven[1]);
   flgr_free(seeven[2]);
   flgr_free(seeven);
   return;
}
void flgr2d_native_dilate_8_connexity_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Data2D *nhbcopy;
   fgUINT16 **seodd;
   fgUINT16 **seeven;
   fgUINT16 **se;
   int i, j;
   int k, l;
   int m, n;
   fgUINT16 valse;
   FLGR_Vector *vecPixValue = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecPixMax = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecSeValue = flgr_vector_create(nhb->spp, nhb->type);
   nhbcopy = flgr2d_create_from(nhb);
   flgr2d_copy(nhbcopy, nhb);
   seodd = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seodd[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seeven[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 2, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 0, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 0, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 2, 1);
   for(i = 0; i <= nhb->size_y-1; i += 1)
      for(j = 0; j <= nhb->size_x-1; j += 1) {
         flgr_vector_populate_from_scalar_fgUINT16(vecPixMax, 0);
         m = 0;
         for(k = i-1; k <= i+1; k += 1) {
            if (k>=0&&k<nhb->size_y) {
               n = 0;
               for(l = j-1; l <= j+1; l += 1) {
                  if (l>=0&&l<nhb->size_x) {
                     se = i%2==1?seodd:seeven;
                     valse = flgr2d_get_data_array_fgUINT16(se, m, n);
                     flgr_vector_populate_from_scalar_fgUINT16(vecSeValue, valse);
                     flgr2d_get_data_vector_no_norm_fgUINT16(nhbcopy, k, l, vecPixValue);
                     flgr_vector_mult_fgUINT16(vecPixValue, vecPixValue, vecSeValue);
                     flgr_vector_sup_fgUINT16(vecPixMax, vecPixMax, vecPixValue);
                  }
                  n++;
               }
            }
            m++;
         }
         flgr2d_set_data_vector_fgUINT16(nhb, i, j, vecPixMax);
      }
   flgr_vector_destroy(vecPixValue);
   flgr_vector_destroy(vecPixMax);
   flgr_vector_destroy(vecSeValue);
   flgr2d_destroy(nhbcopy);
   flgr_free(seodd[0]);
   flgr_free(seodd[1]);
   flgr_free(seodd[2]);
   flgr_free(seodd);
   flgr_free(seeven[0]);
   flgr_free(seeven[1]);
   flgr_free(seeven[2]);
   flgr_free(seeven);
   return;
}
void flgr2d_raster_slide_window_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, const FLGR_ComputeNhb2D computeNhb)
{
   int i, j, w, h, spp = imgsrc->spp;
   fgUINT16 *vector_array;
   fgUINT16 *data_array;
   FLGR_Vector *result;
   FLGR_Data2D *nhbEven, *nhbOdd, *nhbrs;
   FLGR_NhbBox2D *extr;
   //PIPS generated variable
   void **P_39;
   w = imgsrc->size_x;
   h = imgsrc->size_y;
   result = flgr_vector_create(imgsrc->spp, imgsrc->type);
   vector_array = (fgUINT16 *) result->array;
   extr = flgr2d_create_neighbor_box(nhb);
   nhbEven = flgr2d_create_neighborhood_from(nhb);
   nhbOdd = flgr2d_create_neighborhood_from(nhb);
   flgr2d_fill_nhbs_for_6_connexity(nhbEven, nhbOdd, nhb, nhb_sym);
   if (imgdest==imgsrc) {
      flgr2d_apply_raster_scan_method_fgUINT16(nhbOdd);
      flgr2d_apply_raster_scan_method_fgUINT16(nhbEven);
   }
   for(i = 0; i <= h-1; i += 1) {
      P_39 = imgdest->array;
      data_array = (fgUINT16 *) P_39[i];
      for(j = 0; j <= w-1; j += 1) {
         nhbrs = i%2==1?nhbOdd:nhbEven;
         flgr2d_get_neighborhood_fgUINT16(extr, imgsrc, nhbrs, i, j);
         (*computeNhb)(result,extr);
         flgr_set_data_array_vector_fgUINT16(data_array, vector_array, spp, j);
      }
   }
   flgr2d_destroy(nhbOdd);
   flgr2d_destroy(nhbEven);
   flgr2d_destroy_neighbor_box(extr);
   flgr_vector_destroy(result);
   return;
}
void flgr2d_set_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct)
{
   fgUINT16 *array_s = (fgUINT16 *) vct->array;
   fgUINT16 *array_d = (fgUINT16 *) (dat->array)[row];
   flgr_set_data_array_vector_fgUINT16(array_d, array_s, vct->spp, col);
}
void flgr_backtrace_print(void)
{
   return;
}
void flgr_free(void *ptr)
{
   
   
   free(ptr);
}
fgUINT16 flgr_get_array_fgUINT16(fgUINT16 *array, int pos)
{
   return array[pos];
}
int flgr_get_bps_from_type(FLGR_Type type)
{


   if (type==FLGR_BIT) goto switch_1_case_FLGR_BIT;
   if (type==FLGR_UINT8) goto switch_1_case_FLGR_UINT8;
   if (type==FLGR_UINT16) goto switch_1_case_FLGR_UINT16;
   if (type==FLGR_UINT32) goto switch_1_case_FLGR_UINT32;
   if (type==FLGR_UINT64) goto switch_1_case_FLGR_UINT64;
   if (type==FLGR_INT8) goto switch_1_case_FLGR_INT8;
   if (type==FLGR_INT16) goto switch_1_case_FLGR_INT16;
   if (type==FLGR_INT32) goto switch_1_case_FLGR_INT32;
   if (type==FLGR_INT64) goto switch_1_case_FLGR_INT64;
   if (type==FLGR_FLOAT32) goto switch_1_case_FLGR_FLOAT32;
   if (type==FLGR_FLOAT64) {
   }
   else {
      goto switch_1_default;
   }
switch_1_case_FLGR_FLOAT64:   ;
   return sizeof(fgFLOAT64)<<3;
switch_1_case_FLGR_FLOAT32:   ;
   return sizeof(fgFLOAT32)<<3;
switch_1_case_FLGR_INT64:   ;
   return sizeof(fgINT64)<<3;
switch_1_case_FLGR_INT32:   ;
   return sizeof(fgINT32)<<3;
switch_1_case_FLGR_INT16:   ;
   return sizeof(fgINT16)<<3;
switch_1_case_FLGR_INT8:   ;
   return sizeof(fgINT8)<<3;
switch_1_case_FLGR_UINT64:   ;
   return sizeof(fgUINT64)<<3;
switch_1_case_FLGR_UINT32:   ;
   return sizeof(fgUINT32)<<3;
switch_1_case_FLGR_UINT16:   ;
   return sizeof(fgUINT16)<<3;
switch_1_case_FLGR_UINT8:   ;
   return sizeof(fgUINT8)<<3;
switch_1_case_FLGR_BIT:   ;
   return 1;
switch_1_default:   ;
   return FLGR_RET_TYPE_UNKNOWN;
}
void flgr_get_data_array_vector_fgUINT16(fgUINT16 *vector_array, fgUINT16 *data_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT16(data_array, i);
      flgr_set_array_fgUINT16(vector_array, k, val);
      i++;
   }
}
int flgr_get_sizeof(FLGR_Type type)
{


   if (type==FLGR_BIT) goto switch_1_case_FLGR_BIT;
   if (type==FLGR_UINT8) goto switch_1_case_FLGR_UINT8;
   if (type==FLGR_UINT16) goto switch_1_case_FLGR_UINT16;
   if (type==FLGR_UINT32) goto switch_1_case_FLGR_UINT32;
   if (type==FLGR_UINT64) goto switch_1_case_FLGR_UINT64;
   if (type==FLGR_INT8) goto switch_1_case_FLGR_INT8;
   if (type==FLGR_INT16) goto switch_1_case_FLGR_INT16;
   if (type==FLGR_INT32) goto switch_1_case_FLGR_INT32;
   if (type==FLGR_INT64) goto switch_1_case_FLGR_INT64;
   if (type==FLGR_FLOAT32) goto switch_1_case_FLGR_FLOAT32;
   if (type==FLGR_FLOAT64) {
   }
   else {
      goto switch_1_default;
   }
switch_1_case_FLGR_FLOAT64:   ;
   return sizeof(fgFLOAT64);
switch_1_case_FLGR_FLOAT32:   ;
   return sizeof(fgFLOAT32);
switch_1_case_FLGR_INT64:   ;
   return sizeof(fgINT64);
switch_1_case_FLGR_INT32:   ;
   return sizeof(fgINT32);
switch_1_case_FLGR_INT16:   ;
   return sizeof(fgINT16);
switch_1_case_FLGR_INT8:   ;
   return sizeof(fgINT8);
switch_1_case_FLGR_UINT64:   ;
   return sizeof(fgUINT64);
switch_1_case_FLGR_UINT32:   ;
   return sizeof(fgUINT32);
switch_1_case_FLGR_UINT16:   ;
   return sizeof(fgUINT16);
switch_1_case_FLGR_UINT8:   ;
   return sizeof(fgUINT8);
switch_1_case_FLGR_BIT:   ;
   return sizeof(fgBIT);
switch_1_default:   ;
   return FLGR_RET_TYPE_UNKNOWN;
}
FLGR_Type flgr_get_type_from_string(char *type)
{
   
   
   if (strcmp(type, "fgBIT")==0) 
      return FLGR_BIT;
   if (strcmp(type, "fgUINT8")==0) 
      return FLGR_UINT8;
   if (strcmp(type, "fgUINT16")==0) 
      return FLGR_UINT16;
   if (strcmp(type, "fgUINT32")==0) 
      return FLGR_UINT32;
   if (strcmp(type, "fgUINT64")==0) 
      return FLGR_UINT64;
   if (strcmp(type, "fgINT8")==0) 
      return FLGR_INT8;
   if (strcmp(type, "fgINT16")==0) 
      return FLGR_INT16;
   if (strcmp(type, "fgINT32")==0) 
      return FLGR_INT32;
   if (strcmp(type, "fgINT64")==0) 
      return FLGR_INT64;
   if (strcmp(type, "fgFLOAT32")==0) 
      return FLGR_FLOAT32;
   if (strcmp(type, "fgFLOAT64")==0) 
      return FLGR_FLOAT64;

   fprintf(stderr, "Unknown type %s\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1020, __FUNCTION__, type);
   flgr_backtrace_print();
   return FLGR_UINT8;
}
FLGR_Ret flgr_is_data_type_valid(FLGR_Type type)
{
   
   
   if (type==FLGR_UINT8)
      return FLGR_RET_OK;
   else if (type==FLGR_UINT16)
      return FLGR_RET_OK;
   else if (type==FLGR_UINT32)
      return FLGR_RET_OK;
   else if (type==FLGR_INT8)
      return FLGR_RET_OK;
   else if (type==FLGR_INT16)
      return FLGR_RET_OK;
   else if (type==FLGR_INT32)
      return FLGR_RET_OK;
   else if (type==FLGR_FLOAT32)
      return FLGR_RET_OK;
   else if (type==FLGR_FLOAT64)
      return FLGR_RET_OK;
   else if (type==FLGR_BIT)
      return FLGR_RET_OK;
   else
      return FLGR_RET_TYPE_UNKNOWN;
}
FLGR_Ret flgr_is_vector_type_valid(FLGR_Type type)
{
   
   
   if (type==FLGR_UINT8)
      return FLGR_RET_OK;
   else if (type==FLGR_UINT16)
      return FLGR_RET_OK;
   else if (type==FLGR_UINT32)
      return FLGR_RET_OK;
   else if (type==FLGR_UINT64)
      return FLGR_RET_OK;
   else if (type==FLGR_INT8)
      return FLGR_RET_OK;
   else if (type==FLGR_INT16)
      return FLGR_RET_OK;
   else if (type==FLGR_INT32)
      return FLGR_RET_OK;
   else if (type==FLGR_INT64)
      return FLGR_RET_OK;
   else if (type==FLGR_FLOAT32)
      return FLGR_RET_OK;
   else if (type==FLGR_FLOAT64)
      return FLGR_RET_OK;
   else if (type==FLGR_BIT)
      return FLGR_RET_OK;
   else
      return FLGR_RET_TYPE_UNKNOWN;
}
void * flgr_malloc(size_t size)
{
   void *tmp = malloc(size);
   if (tmp==(void *) 0) {
      
      
      
      fprintf(stderr, "Could not allocate data, returning NULL pointer !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 976, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }

   return tmp;
}
int flgr_normalize_coordinate(int axis_coord, int axis_length)
{
   int axis_true = -(1*axis_coord)-1;
   int axis_false;
   int axis_test;
   axis_coord = axis_coord<0?axis_true:axis_coord;
   axis_test = axis_coord/axis_length%2;
   axis_true = axis_length-axis_coord%axis_length-1;
   axis_false = axis_coord%axis_length;
   axis_coord = axis_coord>=axis_length&&axis_test?axis_true:axis_coord;
   axis_coord = axis_coord>=axis_length&&!axis_test?axis_false:axis_coord;
   
   /*   if(axis_coord<0) { */
   /*     axis_coord=-1*axis_coord-1; */
   /*   } */
   
   /*   if( axis_coord >= axis_length ) { */
   /*     if( ((axis_coord/axis_length)%2) == 1 ) */
   /*       axis_coord = axis_length - (axis_coord%axis_length) - 1; */
   /*     else */
   /*       axis_coord = axis_coord%axis_length; */
   /*   } */
   
   return axis_coord;
}
void flgr_set_array_fgUINT16(fgUINT16 *array, int pos, fgUINT16 value)
{
   array[pos] = value;
}
void flgr_set_data_array_vector_fgUINT16(fgUINT16 *data_array, fgUINT16 *vector_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT16(vector_array, k);
      flgr_set_array_fgUINT16(data_array, i, val);
      i++;
   }
}
FLGR_Vector * flgr_vector_create(int spp, FLGR_Type type)
{
   FLGR_Vector *vct;
   
   
   
   if (flgr_is_vector_type_valid(type)!=FLGR_RET_OK) {
      fprintf(stderr, "unknwon type\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 916, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }

   if (spp<1) {
      fprintf(stderr, "Sample Per Pixel (spp) cannot be < 1\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 921, __FUNCTION__);
      flgr_backtrace_print();
      return (void *) 0;
   }

   vct = flgr_malloc(sizeof(FLGR_Vector));

   vct->bps = flgr_get_bps_from_type(type);
   vct->spp = spp;
   vct->type = type;

   vct->array = flgr_malloc(spp*vct->bps/8+16, 16);
   if (vct->array==(void *) 0) {

      fprintf(stderr, "Allocation error !\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 934, __FUNCTION__);
      flgr_backtrace_print();
      flgr_free(vct);
      return (void *) 0;
   }

   return vct;
}
FLGR_Ret flgr_vector_destroy(FLGR_Vector *vct)
{
   if (vct==(void *) 0) {
      
      
      fprintf(stderr, "Null object\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 866, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if (vct->array==(void *) 0) {

      fprintf(stderr, "Vector array is null\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 871, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }

   flgr_free(vct->array);

   flgr_free(vct);
   
   
   
   return FLGR_RET_OK;
}
void flgr_vector_mult_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vct1, FLGR_Vector *vct2)
{
   int k;
   int spp = vctdest->spp;
   fgUINT16 *p1 = (fgUINT16 *) vct1->array;
   fgUINT16 *p2 = (fgUINT16 *) vct2->array;
   fgUINT16 *pdest = (fgUINT16 *) vctdest->array;
   fgUINT16 a1, a2;
   for(k = 0; k <= spp-1; k += 1) {
      a1 = flgr_get_array_fgUINT16(p1, k);
      a2 = flgr_get_array_fgUINT16(p2, k);
      flgr_set_array_fgUINT16(pdest, k, flgr_defop_mult_fgUINT16(a1, a2));
   }
   return;
}
void flgr_vector_populate_from_scalar_fgUINT16(FLGR_Vector *vctdest, fgUINT16 scalar)
{
   int k;
   fgUINT16 *vctar = (fgUINT16 *) vctdest->array;
   for(k = 0; k <= vctdest->spp-1; k += 1)
      flgr_set_array_fgUINT16(vctar, k, scalar);
   return;
}
void flgr_vector_sup_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vct1, FLGR_Vector *vct2)
{
   int k;
   int spp = vctdest->spp;
   fgUINT16 *p1 = (fgUINT16 *) vct1->array;
   fgUINT16 *p2 = (fgUINT16 *) vct2->array;
   fgUINT16 *pdest = (fgUINT16 *) vctdest->array;
   fgUINT16 a1, a2;
   for(k = 0; k <= spp-1; k += 1) {
      a1 = flgr_get_array_fgUINT16(p1, k);
      a2 = flgr_get_array_fgUINT16(p2, k);
      flgr_set_array_fgUINT16(pdest, k, flgr_defop_sup_fgUINT16(a1, a2));
   }
   return;
}
typedef unsigned int size_t;

/* Convenience types.  */
typedef unsigned char __u_char;
typedef unsigned short __u_short;
typedef unsigned int __u_int;
typedef unsigned long __u_long;

/* Fixed-size types, underlying types depend on word size and compiler.  */
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short __int16_t;
typedef unsigned short __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;


/* quad_t is also 64 bits.  */




typedef long long __quad_t;
typedef unsigned long long __u_quad_t;


typedef __u_quad_t __dev_t;
/* Type of device numbers.  */
typedef unsigned int __uid_t;
/* Type of user identifications.  */
typedef unsigned int __gid_t;
/* Type of group identifications.  */
typedef unsigned long __ino_t;
/* Type of file serial numbers.  */
typedef __u_quad_t __ino64_t;
/* Type of file serial numbers (LFS).*/
typedef unsigned int __mode_t;
/* Type of file attribute bitmasks.  */
typedef unsigned int __nlink_t;
/* Type of file link counts.  */
typedef long __off_t;
/* Type of file sizes and offsets.  */
typedef __quad_t __off64_t;
/* Type of file sizes and offsets (LFS).  */
typedef int __pid_t;
/* Type of process identifications.  */
typedef struct {
   int __val[2];
} __fsid_t;
/* Type of file system IDs.  */
typedef long __clock_t;
/* Type of CPU usage counts.  */
typedef unsigned long __rlim_t;
/* Type for resource measurement.  */
typedef __u_quad_t __rlim64_t;
/* Type for resource measurement (LFS).  */
typedef unsigned int __id_t;
/* General type for IDs.  */
typedef long __time_t;
/* Seconds since the Epoch.  */
typedef unsigned int __useconds_t;
/* Count of microseconds.  */
typedef long __suseconds_t;
/* Signed count of microseconds.  */

typedef int __daddr_t;
/* The type of a disk address.  */
typedef long __swblk_t;
/* Type of a swap block maybe?  */
typedef int __key_t;
/* Type of an IPC key.  */

/* Clock ID used in clock and timer functions.  */
typedef int __clockid_t;

/* Timer ID returned by `timer_create'.  */
typedef void *__timer_t;

/* Type to represent block size.  */
typedef long __blksize_t;

/* Types from the Large File Support interface.  */

/* Type to count number of disk blocks.  */
typedef long __blkcnt_t;
typedef __quad_t __blkcnt64_t;

/* Type to count file system blocks.  */
typedef unsigned long __fsblkcnt_t;
typedef __u_quad_t __fsblkcnt64_t;

/* Type to count file system nodes.  */
typedef unsigned long __fsfilcnt_t;
typedef __u_quad_t __fsfilcnt64_t;

typedef int __ssize_t;
/* Type of a byte count, or error.  */

/* These few don't really vary by system, they always correspond
   to one of the other defined types.  */
typedef __off64_t __loff_t;
/* Type of file sizes and offsets (LFS).  */
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;

/* Duplicates info from stdint.h but this is used in unistd.h.  */
typedef int __intptr_t;

/* Duplicate info from sys/socket.h.  */
typedef unsigned int __socklen_t;







/* Define outside of namespace so the C++ is happy.  */



/* The opaque type of streams.  This is the definition used elsewhere.  */
typedef struct _IO_FILE FILE;
/* The opaque type of streams.  This is the definition used elsewhere.  */
typedef struct _IO_FILE __FILE;
/* Value so far.  */
typedef struct {
   int __count;
   union {unsigned int __wch; char __wchb[4];} __value;
} __mbstate_t;
typedef struct {
   __off_t __pos;
   __mbstate_t __state;
} _G_fpos_t;
typedef struct {
   __off64_t __pos;
   __mbstate_t __state;
} _G_fpos64_t;
typedef int _G_int16_t;
typedef int _G_int32_t;
typedef unsigned int _G_uint16_t;
typedef unsigned int _G_uint32_t;
/* Define __gnuc_va_list.  */



typedef __builtin_va_list __gnuc_va_list;


/* Handle lock.  */







typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next;
   struct _IO_FILE *_sbuf;
   int _pos;
};

/* This is the structure from the libstdc++ codecvt class.  */
enum __codecvt_result {__codecvt_ok, __codecvt_partial, __codecvt_error, __codecvt_noconv};







/* Make sure we don't get into trouble again.  */
struct _IO_FILE {
   int _flags;
   char *_IO_read_ptr;
   char *_IO_read_end;
   char *_IO_read_base;
   char *_IO_write_base;
   char *_IO_write_ptr;
   char *_IO_write_end;
   char *_IO_buf_base;
   char *_IO_buf_end;
   char *_IO_save_base;
   char *_IO_backup_base;
   char *_IO_save_end;
   struct _IO_marker *_markers;
   struct _IO_FILE *_chain;
   int _fileno;
   int _flags2;
   __off_t _old_offset;
   unsigned short _cur_column;
   signed char _vtable_offset;
   char _shortbuf[1];
   _IO_lock_t *_lock;
   __off64_t _offset;
   void *__pad1;
   void *__pad2;
   void *__pad3;
   void *__pad4;
   size_t __pad5;
   int _mode;
   char _unused2[15*sizeof(int)-4*sizeof(void *)-sizeof(size_t)];
};


typedef struct _IO_FILE _IO_FILE;




extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
/* Functions to do I/O and file management for a stream.  */

/* Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.
   Return number of bytes read.  */
typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);

/* Write N bytes pointed to by BUF to COOKIE.  Write all N bytes
   unless there is an error.  Return number of bytes written, or -1 if
   there is an error without writing anything.  If the file has been
   opened for append (__mode.__append set), then set the file pointer
   to the end of the file and then do the write; if not, just write at
   the current file pointer.  */

typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n);

/* Move COOKIE's file position to *POS bytes from the
   beginning of the file (if W is SEEK_SET),
   the current position (if W is SEEK_CUR),
   or the end of the file (if W is SEEK_END).
   Set *POS to the new file position.
   Returns zero if successful, nonzero if not.  */
typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);

/* Close COOKIE.  */
typedef int __io_close_fn(void *__cookie);
extern int __underflow(_IO_FILE *);
extern int __uflow(_IO_FILE *);
extern int __overflow(_IO_FILE *, int);
extern int _IO_getc(_IO_FILE *__fp);
extern int _IO_putc(int __c, _IO_FILE *__fp);
extern int _IO_feof(_IO_FILE *__fp);
extern int _IO_ferror(_IO_FILE *__fp);

extern int _IO_peekc_locked(_IO_FILE *__fp);

/* This one is for Emacs. */



extern void _IO_flockfile(_IO_FILE *);
extern void _IO_funlockfile(_IO_FILE *);
extern int _IO_ftrylockfile(_IO_FILE *);

extern int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list, int *);

extern int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list);
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area(_IO_FILE *);
/* The type of the second argument to `fgetpos' and `fsetpos'.  */


typedef _G_fpos_t fpos_t;


/* Standard streams.  */
extern struct _IO_FILE *stdin;
/* Standard input stream.  */
extern struct _IO_FILE *stdout;
/* Standard output stream.  */
extern struct _IO_FILE *stderr;
/* Standard error output stream.  */
/* C89/C99 say they're macros.  Make them happy.  */





/* Remove file FILENAME.  */
extern int remove(const char *__filename);
/* Rename file OLD to NEW.  */
extern int rename(const char *__old, const char *__new);



/* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */

extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);



/* Create a temporary file and open it read/write.

   This function is a possible cancellation points and therefore not
   marked with __THROW.  */

extern FILE *tmpfile(void);
/* Generate a temporary filename.  */
extern char *tmpnam(char *__s);



/* This is the reentrant variant of `tmpnam'.  The only difference is
   that it does not allow S to be NULL.  */
extern char *tmpnam_r(char *__s);




/* Generate a unique temporary filename using up to five characters of PFX
   if it is not NULL.  The directory to put this file in is searched for
   as follows: First the environment variable "TMPDIR" is checked.
   If it contains the name of a writable directory, that directory is used.
   If not and if DIR is not NULL, that value is checked.  If that fails,
   P_tmpdir is tried and finally "/tmp".  The storage for the filename
   is allocated by `malloc'.  */

extern char *tempnam(const char *__dir, const char *__pfx);




/* Close STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fclose(FILE *__stream);
/* Flush STREAM, or all streams if STREAM is NULL.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fflush(FILE *__stream);



/* Faster versions when locking is not required.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */
extern int fflush_unlocked(FILE *__stream);


/* Open a file and create a new stream for it.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */

extern FILE *fopen(const char *__filename, const char *__modes);
/* Open a file, replacing an existing stream with it.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */


extern FILE *freopen(const char *__filename, const char *__modes, FILE *__stream);
/* Create a new stream that refers to an existing system file descriptor.  */
extern FILE *fdopen(int __fd, const char *__modes);
/* Create a new stream that refers to a memory buffer.  */

extern FILE *fmemopen(void *__s, size_t __len, const char *__modes);

/* Open a stream that writes into a malloc'd buffer that is expanded as
   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location
   and the number of characters written on fflush or fclose.  */
extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc);




/* If BUF is NULL, make STREAM unbuffered.
   Else make it use buffer BUF, of size BUFSIZ.  */
extern void setbuf(FILE *__stream, char *__buf);
/* Make STREAM use buffering mode MODE.
   If BUF is not NULL, use N bytes of it for buffering;
   else allocate an internal buffer N bytes long.  */

extern int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);



/* If BUF is NULL, make STREAM unbuffered.
   Else make it use SIZE bytes of BUF for buffering.  */

extern void setbuffer(FILE *__stream, char *__buf, size_t __size);

/* Make STREAM line-buffered.  */
extern void setlinebuf(FILE *__stream);




/* Write formatted output to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */

extern int fprintf(FILE *__stream, const char *__format, ...);
/* Write formatted output to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int printf(const char *__format, ...);
/* Write formatted output to S.  */

extern int sprintf(char *__s, const char *__format, ...);

/* Write formatted output to S from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */

extern int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);
/* Write formatted output to stdout from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int vprintf(const char *__format, __gnuc_va_list __arg);
/* Write formatted output to S from argument list ARG.  */

extern int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);




/* Maximum chars of output to write in MAXLEN.  */


extern int snprintf(char *__s, size_t __maxlen, const char *__format, ...);



extern int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);
/* Write formatted output to a file descriptor.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */


extern int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);

extern int dprintf(int __fd, const char *__fmt, ...);




/* Read formatted input from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */

extern int fscanf(FILE *__stream, const char *__format, ...);
/* Read formatted input from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int scanf(const char *__format, ...);
/* Read formatted input from S.  */

extern int sscanf(const char *__s, const char *__format, ...);

extern int __isoc99_fscanf(FILE *__stream, const char *__format, ...);
extern int __isoc99_scanf(const char *__format, ...);

extern int __isoc99_sscanf(const char *__s, const char *__format, ...);










/* Read formatted input from S into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */


extern int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);

/* Read formatted input from stdin into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */

extern int vscanf(const char *__format, __gnuc_va_list __arg);

/* Read formatted input from S into argument list ARG.  */


extern int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);


extern int __isoc99_vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);

extern int __isoc99_vscanf(const char *__format, __gnuc_va_list __arg);


extern int __isoc99_vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);











/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */
extern int fgetc(FILE *__stream);
extern int getc(FILE *__stream);

/* Read a character from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int getchar(void);


/* The C standard explicitly says this is a macro, so we always do the
   optimization for it.  */



/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */
extern int getc_unlocked(FILE *__stream);
extern int getchar_unlocked(void);



/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */
extern int fgetc_unlocked(FILE *__stream);




/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.

   These functions is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fputc(int __c, FILE *__stream);
extern int putc(int __c, FILE *__stream);

/* Write a character to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int putchar(int __c);


/* The C standard explicitly says this can be a macro,
   so we always do the optimization for it.  */



/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */
extern int fputc_unlocked(int __c, FILE *__stream);



/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */
extern int putc_unlocked(int __c, FILE *__stream);
extern int putchar_unlocked(int __c);





/* Get a word (int) from STREAM.  */
extern int getw(FILE *__stream);

/* Write a word (int) to STREAM.  */
extern int putw(int __w, FILE *__stream);




/* Get a newline-terminated string of finite length from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */

extern char *fgets(char *__s, int __n, FILE *__stream);

/* Get a newline-terminated string from stdin, removing the newline.
   DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern char *gets(char *__s);
/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   necessary.  Returns the number of characters read (not including the
   null terminator), or -1 on error or EOF.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */


extern __ssize_t __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);


extern __ssize_t getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);

/* Like `getdelim', but reads up to a newline.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */


extern __ssize_t getline(char **__lineptr, size_t *__n, FILE *__stream);




/* Write a string to STREAM.

   This function is a possible cancellation points and therefore not
   marked with __THROW.  */
extern int fputs(const char *__s, FILE *__stream);

/* Write a string, followed by a newline, to stdout.

   This function is a possible cancellation points and therefore not
   marked with __THROW.  */
extern int puts(const char *__s);


/* Push a character back onto the input buffer of STREAM.

   This function is a possible cancellation points and therefore not
   marked with __THROW.  */
extern int ungetc(int __c, FILE *__stream);


/* Read chunks of generic data from STREAM.

   This function is a possible cancellation points and therefore not
   marked with __THROW.  */

extern size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);
/* Write chunks of generic data to STREAM.

   This function is a possible cancellation points and therefore not
   marked with __THROW.  */

extern size_t fwrite(void *__ptr, size_t __size, size_t __n, FILE *__s);
/* Faster versions when locking is not necessary.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */

extern size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);

extern size_t fwrite_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);




/* Seek to a certain position on STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fseek(FILE *__stream, long __off, int __whence);
/* Return the current position of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern long ftell(FILE *__stream);
/* Rewind to the beginning of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern void rewind(FILE *__stream);


/* The Single Unix Specification, Version 2, specifies an alternative,
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   are originally defined in the Large File Support API.  */



/* Seek to a certain position on STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fseeko(FILE *__stream, __off_t __off, int __whence);
/* Return the current position of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern __off_t ftello(FILE *__stream);


/* Get STREAM's position.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fgetpos(FILE *__stream, fpos_t *__pos);
/* Set STREAM's position.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int fsetpos(FILE *__stream, const fpos_t *__pos);

/* Clear the error and EOF indicators for STREAM.  */
extern void clearerr(FILE *__stream);
/* Return the EOF indicator for STREAM.  */
extern int feof(FILE *__stream);
/* Return the error indicator for STREAM.  */
extern int ferror(FILE *__stream);



/* Faster versions when locking is not required.  */
extern void clearerr_unlocked(FILE *__stream);
extern int feof_unlocked(FILE *__stream);
extern int ferror_unlocked(FILE *__stream);




/* Print a message describing the meaning of the value of errno.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern void perror(const char *__s);
/* Declare sys_errlist and sys_nerr, or don't.  Compatibility (do) version.
   Copyright (C) 2002 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */





/* sys_errlist and sys_nerr are deprecated.  Use strerror instead.  */


extern int sys_nerr;
extern const char *sys_errlist[];



/* Return the system file descriptor for STREAM.  */
extern int fileno(FILE *__stream);



/* Faster version when locking is not required.  */
extern int fileno_unlocked(FILE *__stream);





/* Create a new stream connected to a pipe running the given command.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern FILE *popen(const char *__command, const char *__modes);

/* Close a stream opened by popen and return the status of its child.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */
extern int pclose(FILE *__stream);




/* Return the name of the controlling terminal.  */
extern char *ctermid(char *__s);
/* These are defined in POSIX.1:1996.  */

/* Acquire ownership of STREAM.  */
extern void flockfile(FILE *__stream);

/* Try to acquire ownership of STREAM but do not block if it is not
   possible.  */
extern int ftrylockfile(FILE *__stream);

/* Relinquish the ownership granted for STREAM.  */
extern void funlockfile(FILE *__stream);

/*!
   * \addtogroup group_fulguro_core
   * @{
   */

extern void flgr_backtrace_print(void);

/* Exact integral types.  */

/* Signed.  */

/* There is some amount of overlap with <sys/types.h> as known by inet code */


typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;




typedef long long int64_t;



/* Unsigned.  */
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;

typedef unsigned int uint32_t;






typedef unsigned long long uint64_t;



/* Small types.  */

/* Signed.  */
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;




typedef long long int_least64_t;


/* Unsigned.  */
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;




typedef unsigned long long uint_least64_t;



/* Fast types.  */

/* Signed.  */
typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;

typedef long long int_fast64_t;


/* Unsigned.  */
typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;

typedef unsigned long long uint_fast64_t;
typedef int intptr_t;


typedef unsigned int uintptr_t;



/* Largest integral types.  */





typedef long long intmax_t;

typedef unsigned long long uintmax_t;

/*!
   * \addtogroup group_fulguro_core
   * @{
   */

/*!
   *  Errors flags definition
   */

/*! Function worked correctly */

/*! Data type specified is not recoginzed in the function */

/*! Function could not work with images with different data types */

/*! Function could not work with images with different sizes */

/*! Memory could not be allocated */

/*! Connexity specified is not recognized by the function */

/*! The parameter is not known */

/*! The function is not implemented */

/*! For all others*/

/*  Non-initialized objects are used */

/*  Sample per pixel (spp) different */

/*  Vector size is not valid */

/*  function parameter is not valid */
typedef enum {FLGR_RET_OK, FLGR_RET_TYPE_UNKNOWN=-1, FLGR_RET_TYPE_DIFFERENT=-2, FLGR_RET_SIZE_ERROR=-3, FLGR_RET_ALLOCATION_ERROR=-4, FLGR_RET_CONNEXITY_UNKNOWN=-5, FLGR_RET_PARAM_UNKNOWN=-6, FLGR_RET_NOT_IMPLEMENTED=-7, FLGR_RET_UNDEFINED_ERROR=-8, FLGR_RET_NULL_OBJECT=-9, FLGR_RET_VECTOR_SIZE_DIFFERENT=-10, FLGR_RET_VECTOR_SIZE_ERROR=-11, FLGR_RET_PARAM_ERROR=-12} FLGR_Ret;

/*!
   *  Shape flags definition
   */

/*!< 1D Shape*/
/*!< 2D, Filled Rectangle */
/*!< 2D, Hexagon */
/*!< 2D, Disc */
/*!< 2D, Filled Ellipse */
/*!< 2D, Cross + */
/*!< 2D, Cross X */
/*!< 2D, line / */
/*!< 2D, line \\ */
/*!< 2D, Diamond */
/*!< 2D, Octagon */
/*!< User shape */
/*!< Shape not applicable */
typedef enum {FLGR_LINE, FLGR_RECT, FLGR_HEX, FLGR_DISC, FLGR_ELLIPSE, FLGR_CROSS, FLGR_CROSSX, FLGR_SLASH, FLGR_BSLASH, FLGR_DIAMOND, FLGR_OCTAGON, FLGR_USER_SHAPE, FLGR_NO_SHAPE} FLGR_Shape;

/*!
   *  Connexity Mesh flags definition
   */

/*!< Flag for 4-connex operation (2D) */
/*!< Flag for 6-connex operation (2D) */
/*!< Flag for 8-connex operation (2D) */
/*!< Flag No Connexity applicable */
typedef enum {FLGR_4_CONNEX=4, FLGR_6_CONNEX=6, FLGR_8_CONNEX=8, FLGR_NO_CONNEX=0} FLGR_Connexity;

/*!
   *  Data Types flags definition
   */

/*!< Flag for BIT type (one value is stored in one bit) */
/*!< Flag for UINT8 type */
/*!< Flag for UINT16 type */
/*!< Flag for UINT32 type */
/*!< Flag for UINT64 type */
/*!< Flag for INT8 type */
/*!< Flag for INT16 type */
/*!< Flag for INT32 type */
/*!< Flag for INT64 type */
/*!< Flag for FLOAT32 type */
/*!< Flag for FLOAT64 type */
typedef enum {FLGR_BIT, FLGR_UINT8, FLGR_UINT16, FLGR_UINT32, FLGR_UINT64, FLGR_INT8, FLGR_INT16, FLGR_INT32, FLGR_INT64, FLGR_FLOAT32, FLGR_FLOAT64} FLGR_Type;
typedef enum {FLGR_TEST_INF, FLGR_TEST_INFEQ, FLGR_TEST_EQ, FLGR_TEST_SUPEQ, FLGR_TEST_SUP, FLGR_TEST_DIFF, FLGR_TEST_UNKNOWN} FLGR_Test;

/*!
   *  Symetrize Neighborhood flags definition
   */

/*! Neihborhood Definition Symetrization Flag */

/*! Neihborhood Definition No Symetrization Flag */
typedef enum {FLGR_NHB_SYM, FLGR_NHB_NO_SYM} FLGR_Sym;



/*!
   *  Optimization availables for kernel-based operations
   */

/*!< Flag for square kernel optimization (8-connex) */
/*!< Flag for cross kernel optimization (4-connex) */
/*!< Flag for hexagonal kernel optimization (6-connex) */
/*!< Flag for rectangle kernel optimization (8-connex) */
/*!< Flag for octagon kernel optimization (8-connex) */
/*!< Flag for rhombus kernel optimization (8-connex) */
/*!< Flag for no specific kernel optimization */
typedef enum {FLGR_MORPHO_OPTIM_SQUARE, FLGR_MORPHO_OPTIM_CROSS, FLGR_MORPHO_OPTIM_HEXAGON, FLGR_MORPHO_OPTIM_RECTANGLE, FLGR_MORPHO_OPTIM_OCTAGON, FLGR_MORPHO_OPTIM_DIAMOND, FLGR_MORPHO_OPTIM_NONE} FLGR_MorphoOptim;

//type for returning errors, ok



//type for some measure method ...




typedef unsigned long long fgUINT64;
typedef long long fgINT64;


//types for tdata2d values
typedef unsigned char fgUINT8;
//!< 8 bits unsigned
typedef unsigned short fgUINT16;
//!< 16 bits unsigned
typedef unsigned int fgUINT32;
//!< 32 bits unsigned
typedef signed char fgINT8;
//!< 8 bits signed
typedef signed short fgINT16;
//!< 16 bits signed
typedef signed int fgINT32;
//!< 32 bits signed
typedef float fgFLOAT32;
//!< Simple Float
typedef double fgFLOAT64;
//!< Double Float





typedef fgUINT32 fgBIT;
//!< bit type. Pixels are packed by 32 or 64 depending on the processor type (32 bits or 64 bits)


//type for boolean
typedef fgUINT8 fgBOOL;
extern FLGR_Ret flgr_is_vector_type_valid(FLGR_Type type);
extern int flgr_get_bps_from_type(FLGR_Type type);
extern int flgr_get_sizeof(FLGR_Type type);
extern FLGR_Ret flgr_is_data_type_valid(FLGR_Type type);
extern char *flgr_get_type_string(FLGR_Type type);
extern char *flgr_get_shape_string(FLGR_Shape shape);
extern FLGR_Type flgr_get_type_from_string(char *type);

/*! \mainpage Fulguro Documentation
   *
   *
   * \section intro_sec Introduction
   *
   * Fulgoro is library for image processing with real-time constraints. It use SIMD optimizations when available
   * and give the opportunity to use automatic smart threads to speed-up processing.
   * Python or Ruby extension could be used to easily "script" applications while preserving the computation speed
   * <BR>
   * <BR>
   * <HR>
   *
   * \section wrapper_doc Wrapper Documentation
   * - <A href="wrapper/python.html">Python Fulguro Module Documentation</A><BR>
   * - <A href="wrapper/ruby.html">Ruby Fulguro Module Documentation</A><BR>
   * 
   * <HR>
   *
   * \section install_sec Installation
   * 
   * <B> * NEW * </B> CVS repository is deprecated and no longer updated, please use SVN repository
   *
   * <A href="http://fulguro.svn.sourceforge.net/viewvc/fulguro/fulguro/trunk.tar.gz?view=tar">Download svn fulguro/trunk Snapshot</A>
   * or retreive source project from SVN :<BR>
   * svn co https://fulguro.svn.sourceforge.net/svnroot/fulguro fulguro
   * <BR>
   * Check the root Makefile.include in the trunk directory to specify correct installation and dependences path.<BR>
   * <BR> To compile fulguro :
   * - Linux :
   *   - Check "Makefile.include" and modify it to your needs
   *   - Make
   *   - Make install
   *   - Make tests (try it multiple times because of fft wisdom file creation)
   *   - If LD_LIBRARY_PATH is correctly set to install directory, you can try test script in the swig directory or in the apps directory<BR><BR>
   * - Windows (mingw32 gcc 3.4.5) :
   *     - Open "fulguro_workspace.workspace" with <A href="http://www.codeblocks.org/">Code::Blocks</A>
   *     - Rebuild workspace fulguro_xxxx
   *     - Rebuild workspace winswig_python
   *
   * A CMake project is being prepared
   *
   * You should update your PYTHONPATH variable to /<install_lib_path>/pythonFulguro
   *
   * \subsection tools_subsec Tools required for compilation:
   * - python 2.5 devel
   * - ruby 1.8 devel
   * - libpng devel
   * - libjpeg devel
   * - libtiff4 devel
   * - swig (1.3.31 or better)
   * - fftw3 devel
   * - SDL devel (needed for Realtime Display Module and Threads management)
   * - Video4Linux devel (needed only for Realtime Capture Module)
   * - Doxygen (needed for documentation generation)
   * - Graphviz (needed for documentation generation)
   *
   * \subsection using_fulguro Using Fulguro Python or Ruby Scripts:
   * To run correctly python or ruby scripts, you will need <A href="http://nxv.sourceforge.net/">NxV</A>
   * (a multiplatform image viewer).
   *
   * <HR>
   *
   * \section project_website Sourceforge Project Website
   * \sa Project Website : http://sourceforge.net/projects/fulguro
   * \sa SVN Browse Website : http://fulguro.svn.sourceforge.net
   *
   * <HR>
   *
   * \section project_needs What is missing in Fulguro, in your opinion?
   * - <A href="php/poll.html">Vote now</A>
   * - <A href="php/poll_result.php">See results</A>
   *
   * <HR>
   *
   * \section bench Some benchmarks
   * - <A href="bench_IntelR_PentiumR_4_CPU_3.00GHz____Cache_2048_KB.html">Pentium IV Hyper-Threading</A><BR>
   * - <A href="bench_Dual_Core_AMD_Opterontm_Processor_280____Cache_1024_KB.html">Dual-Core Opteron 280</A><BR>
   * - <A href="bench_IntelR_XeonTM_CPU_3.20GHz____Cache_1024_KB.html">Xeon Hyper-Threading</A><BR>
   * - <A href="bench_Genuine_IntelR_CPU___________T2300____1.66GHz____Cache_2048_KB.html">Centrino Duo T2300</A><BR>
   * - <A href="bench_AMD_Athlontm_64_Processor_3200_____Cache_512_KB.html">Athlon 64 3200+</A><BR>
   * <BR><BR>
   *
   * <HR>
   *
   * \section Cost Estimation
   * <A href="cost_estimation.html">Cost estimation to develop fulguro</A><BR>
   * <BR>
   * <BR>
   * <HR>
   *
   * \section copyright Copyright and License
   * GNU LESSER GENERAL PUBLIC LICENSE
   *                      Version 3, 29 June 2007
   *
   *  Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
   *  Everyone is permitted to copy and distribute verbatim copies
   *  of this license document, but changing it is not allowed.
   * 
   * 
   *   This version of the GNU Lesser General Public License incorporates
   * the terms and conditions of version 3 of the GNU General Public
   * License, supplemented by the additional permissions listed below.
   * 
   *   0. Additional Definitions. 
   * 
   *   As used herein, "this License" refers to version 3 of the GNU Lesser
   * General Public License, and the "GNU GPL" refers to version 3 of the GNU
   * General Public License.
   * 
   *   "The Library" refers to a covered work governed by this License,
   * other than an Application or a Combined Work as defined below.
   * 
   *   An "Application" is any work that makes use of an interface provided
   * by the Library, but which is not otherwise based on the Library.
   * Defining a subclass of a class defined by the Library is deemed a mode
   * of using an interface provided by the Library.
   * 
   *   A "Combined Work" is a work produced by combining or linking an
   * Application with the Library.  The particular version of the Library
   * with which the Combined Work was made is also called the "Linked
   * Version".
   * 
   *   The "Minimal Corresponding Source" for a Combined Work means the
   * Corresponding Source for the Combined Work, excluding any source code
   * for portions of the Combined Work that, considered in isolation, are
   * based on the Application, and not on the Linked Version.
   * 
   *   The "Corresponding Application Code" for a Combined Work means the
   * object code and/or source code for the Application, including any data
   * and utility programs needed for reproducing the Combined Work from the
   * Application, but excluding the System Libraries of the Combined Work.
   * 
   *   1. Exception to Section 3 of the GNU GPL.
   * 
   *   You may convey a covered work under sections 3 and 4 of this License
   * without being bound by section 3 of the GNU GPL.
   * 
   *   2. Conveying Modified Versions.
   * 
   *   If you modify a copy of the Library, and, in your modifications, a
   * facility refers to a function or data to be supplied by an Application
   * that uses the facility (other than as an argument passed when the
   * facility is invoked), then you may convey a copy of the modified
   * version:
   * 
   *    a) under this License, provided that you make a good faith effort to
   *    ensure that, in the event an Application does not supply the
   *    function or data, the facility still operates, and performs
   *    whatever part of its purpose remains meaningful, or
   * 
   *    b) under the GNU GPL, with none of the additional permissions of
   *    this License applicable to that copy.
   * 
   *   3. Object Code Incorporating Material from Library Header Files.
   * 
   *   The object code form of an Application may incorporate material from
   * a header file that is part of the Library.  You may convey such object
   * code under terms of your choice, provided that, if the incorporated
   * material is not limited to numerical parameters, data structure
   * layouts and accessors, or small macros, inline functions and templates
   * (ten or fewer lines in length), you do both of the following:
   * 
   *    a) Give prominent notice with each copy of the object code that the
   *    Library is used in it and that the Library and its use are
   *    covered by this License.
   * 
   *    b) Accompany the object code with a copy of the GNU GPL and this license
   *    document.
   * 
   *   4. Combined Works.
   * 
   *   You may convey a Combined Work under terms of your choice that,
   * taken together, effectively do not restrict modification of the
   * portions of the Library contained in the Combined Work and reverse
   * engineering for debugging such modifications, if you also do each of
   * the following:
   * 
   *    a) Give prominent notice with each copy of the Combined Work that
   *    the Library is used in it and that the Library and its use are
   *    covered by this License.
   * 
   *    b) Accompany the Combined Work with a copy of the GNU GPL and this license
   *    document.
   * 
   *    c) For a Combined Work that displays copyright notices during
   *    execution, include the copyright notice for the Library among
   *    these notices, as well as a reference directing the user to the
   *    copies of the GNU GPL and this license document.
   * 
   *    d) Do one of the following:
   * 
   *        0) Convey the Minimal Corresponding Source under the terms of this
   *        License, and the Corresponding Application Code in a form
   *        suitable for, and under terms that permit, the user to
   *        recombine or relink the Application with a modified version of
   *        the Linked Version to produce a modified Combined Work, in the
   *        manner specified by section 6 of the GNU GPL for conveying
   *        Corresponding Source.
   * 
   *        1) Use a suitable shared library mechanism for linking with the
   *        Library.  A suitable mechanism is one that (a) uses at run time
   *        a copy of the Library already present on the user's computer
   *        system, and (b) will operate properly with a modified version
   *        of the Library that is interface-compatible with the Linked
   *        Version. 
   * 
   *    e) Provide Installation Information, but only if you would otherwise
   *    be required to provide such information under section 6 of the
   *    GNU GPL, and only to the extent that such information is
   *    necessary to install and execute a modified version of the
   *    Combined Work produced by recombining or relinking the
   *    Application with a modified version of the Linked Version. (If
   *    you use option 4d0, the Installation Information must accompany
   *    the Minimal Corresponding Source and Corresponding Application
   *    Code. If you use option 4d1, you must provide the Installation
   *    Information in the manner specified by section 6 of the GNU GPL
   *    for conveying Corresponding Source.)
   * 
   *   5. Combined Libraries.
   * 
   *   You may place library facilities that are a work based on the
   * Library side by side in a single library together with other library
   * facilities that are not Applications and are not covered by this
   * License, and convey such a combined library under terms of your
   * choice, if you do both of the following:
   * 
   *    a) Accompany the combined library with a copy of the same work based
   *    on the Library, uncombined with any other library facilities,
   *    conveyed under the terms of this License.
   * 
   *    b) Give prominent notice with the combined library that part of it
   *    is a work based on the Library, and explaining where to find the
   *    accompanying uncombined form of the same work.
   * 
   *   6. Revised Versions of the GNU Lesser General Public License.
   * 
   *   The Free Software Foundation may publish revised and/or new versions
   * of the GNU Lesser General Public License from time to time. Such new
   * versions will be similar in spirit to the present version, but may
   * differ in detail to address new problems or concerns.
   * 
   *   Each version is given a distinguishing version number. If the
   * Library as you received it specifies that a certain numbered version
   * of the GNU Lesser General Public License "or any later version"
   * applies to it, you have the option of following the terms and
   * conditions either of that published version or of any later version
   * published by the Free Software Foundation. If the Library as you
   * received it does not specify a version number of the GNU Lesser
   * General Public License, you may choose any version of the GNU Lesser
   * General Public License ever published by the Free Software Foundation.
   * 
   *   If the Library as you received it specifies that a proxy can decide
   * whether future versions of the GNU Lesser General Public License shall
   * apply, that proxy's public statement of acceptance of any version is
   * permanent authorization for you to choose that version for the
   * Library.
   *
   * <BR><BR>
   *
   */

/*! 
   *  Data 1D array structure
   */

/*!< Dimension */
/*!< Size of the structure  */
/*!< Number of bits per sample  */
/*!< Number of samples per pixel */
/*!< Value will be != -1 if the array correspond to a specific FLGR_Data2D's row */
/*!< Type of a sample*/
/*!< Shape if applicable*/
/*!< length of the array */
/*!< Virtual Start of row elements */
/*!< Physical Start of row elements (array = array_phantom+32)*/
typedef struct {
   int dim;
   int size_struct;
   int bps;
   int spp;
   int ref2d;
   FLGR_Type type;
   FLGR_Shape shape;
   int length;
   void *array;
   void *array_phantom;
} FLGR_Data1D;

/*! 
   *  Data2D array structure
   */

/*!< Dimension */
/*!< Size of the structure  */
/*!< Set sup>=0 if rows are linked to another FLGR_Data2D, else set to -1 */
/*!< which part of the image is used as link from the original image, else -1*/
/*!< number ofy position where the link starts in the source image, else -1 */
/*!< Number of bits per sample  */
/*!< Number of samples per pixel */
/*!< Value will be != -1 if the array correspond to a specific FLGR_Data3D's plan */
/*!< Type of a sample */
/*!< Shape if applicable drawed in the matrix*/
/*!< Connexity if applicable of the matrix*/
/*!< Number of line */
/*!< Number of column */
/*!< FLGR_Data1D row pointer array*/
/*!< fast access to 2d array values */
typedef struct {
   int dim;
   int size_struct;
   int link_overlap;
   int link_position;
   int link_number;
   int bps;
   int spp;
   int ref3d;
   FLGR_Type type;
   FLGR_Shape shape;
   FLGR_Connexity connexity;
   int size_y;
   int size_x;
   FLGR_Data1D **row;
   void **array;
} FLGR_Data2D;


extern int flgr_normalize_coordinate(int axis_coord, int axis_length);




/****************************************************************
   ********************* 1D Functions *****************************
   ****************************************************************/
extern FLGR_Data1D *flgr1d_create(int length, int spp, FLGR_Type type, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_from(FLGR_Data1D *dat);

extern FLGR_Data1D *flgr1d_create_signal(int length, int spp, FLGR_Type type);

extern FLGR_Data1D *flgr1d_create_signal_from(FLGR_Data1D *dat);

extern FLGR_Data1D *flgr1d_create_neighborhood(int length, int spp, FLGR_Type type, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_neighborhood_from(FLGR_Data1D *dat);

extern FLGR_Data1D *flgr1d_create_fgBIT(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgUINT8(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgUINT16(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgUINT32(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgINT8(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgINT16(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgINT32(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgFLOAT32(int length, int spp, FLGR_Shape shape);

extern FLGR_Data1D *flgr1d_create_fgFLOAT64(int length, int spp, FLGR_Shape shape);

extern FLGR_Ret flgr1d_destroy(FLGR_Data1D *dat);

extern FLGR_Ret flgr1d_is_data_same_length(FLGR_Data1D *dat1, FLGR_Data1D *dat2);

extern FLGR_Ret flgr1d_is_data_same_type(FLGR_Data1D *dat1, FLGR_Data1D *dat2);

extern FLGR_Ret flgr1d_is_data_same_spp(FLGR_Data1D *dat1, FLGR_Data1D *dat2);


extern FLGR_Ret flgr1d_is_data_same_attributes(FLGR_Data1D *data1, FLGR_Data1D *data2, const char *callingFunction);

extern int flgr1d_data_is_type_fgBIT(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgUINT8(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgUINT16(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgUINT32(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgINT8(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgINT16(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgINT32(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgFLOAT32(FLGR_Data1D *data);

extern int flgr1d_data_is_type_fgFLOAT64(FLGR_Data1D *data);

extern int flgr1d_data_is_type(FLGR_Data1D *data, FLGR_Type type);

extern int flgr1d_data_is_shape(FLGR_Data1D *data, FLGR_Shape shape);

extern FLGR_Ret flgr1d_data_set_shape(FLGR_Data1D *dat, FLGR_Shape shape);

extern FLGR_Ret flgr1d_clear_all(FLGR_Data1D *data);

/****************************************************************
   ********************* 2D Functions *****************************
   ****************************************************************/

extern FLGR_Data2D *flgr2d_create(int size_y, int size_x, int spp, FLGR_Type type, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_from(FLGR_Data2D *datsrc);

extern FLGR_Data2D *flgr2d_create_pixmap(int size_y, int size_x, int spp, FLGR_Type type);

extern FLGR_Data2D *flgr2d_create_pixmap_from(FLGR_Data2D *imgsrc);


extern FLGR_Data2D *flgr2d_create_neighborhood(int size_y, int size_x, int spp, FLGR_Type type, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_neighborhood_from(FLGR_Data2D *nhbsrc);

extern FLGR_Data2D *flgr2d_create_neighborhood_from_connexity(int spp, FLGR_Type type, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgBIT(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgUINT8(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgUINT16(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgUINT32(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgINT8(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgINT16(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgINT32(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgFLOAT32(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create_fgFLOAT64(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Ret flgr2d_destroy(FLGR_Data2D *dat);

extern FLGR_Data2D *flgr2d_create_pixmap_link(FLGR_Data2D *datain, int partsNumber, int partIndex, int overlapSize);

extern FLGR_Ret flgr2d_destroy_link(FLGR_Data2D *dat);




extern FLGR_Ret flgr2d_is_data_same_attributes(FLGR_Data2D *data1, FLGR_Data2D *data2, const char *callingFunction);

extern FLGR_Ret flgr2d_is_data_same_type(FLGR_Data2D *data1, FLGR_Data2D *data2);

extern FLGR_Ret flgr2d_is_data_same_spp(FLGR_Data2D *dat1, FLGR_Data2D *dat2);

extern FLGR_Ret flgr2d_is_data_same_size(FLGR_Data2D *data1, FLGR_Data2D *data2);

extern int flgr2d_data_is_type_fgBIT(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgUINT8(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgUINT16(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgUINT32(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgINT8(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgINT16(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgINT32(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgFLOAT32(FLGR_Data2D *data);

extern int flgr2d_data_is_type_fgFLOAT64(FLGR_Data2D *data);

extern int flgr2d_data_is_type(FLGR_Data2D *data, FLGR_Type type);

extern int flgr2d_data_is_shape(FLGR_Data2D *data, FLGR_Shape shape);

extern int flgr2d_data_is_connexity(FLGR_Data2D *data, FLGR_Connexity connexity);

extern FLGR_Ret flgr2d_data_set_shape(FLGR_Data2D *dat, FLGR_Shape shape);

extern FLGR_Ret flgr2d_data_set_connexity(FLGR_Data2D *dat, FLGR_Connexity connexity);

extern FLGR_Ret flgr2d_clear_all(FLGR_Data2D *data);




static void flgr_set_array_fgBIT(fgBIT *array, int pos, fgBIT value);


static void flgr_set_array_fgUINT8(fgUINT8 *array, int pos, fgUINT8 value);


static void flgr_set_array_fgUINT16(fgUINT16 *array, int pos, fgUINT16 value);


static void flgr_set_array_fgUINT32(fgUINT32 *array, int pos, fgUINT32 value);


static void flgr_set_array_fgUINT64(fgUINT64 *array, int pos, fgUINT64 value);


static void flgr_set_array_fgINT8(fgINT8 *array, int pos, fgINT8 value);


static void flgr_set_array_fgINT16(fgINT16 *array, int pos, fgINT16 value);


static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value);


static void flgr_set_array_fgINT64(fgINT64 *array, int pos, fgINT64 value);


static void flgr_set_array_fgFLOAT32(fgFLOAT32 *array, int pos, fgFLOAT32 value);


static void flgr_set_array_fgFLOAT64(fgFLOAT64 *array, int pos, fgFLOAT64 value);





static fgBIT flgr_get_array_fgBIT(fgBIT *array, int pos);


static fgUINT8 flgr_get_array_fgUINT8(fgUINT8 *array, int pos);


static fgUINT16 flgr_get_array_fgUINT16(fgUINT16 *array, int pos);


static fgUINT32 flgr_get_array_fgUINT32(fgUINT32 *array, int pos);


static fgUINT64 flgr_get_array_fgUINT64(fgUINT64 *array, int pos);


static fgINT8 flgr_get_array_fgINT8(fgINT8 *array, int pos);


static fgINT16 flgr_get_array_fgINT16(fgINT16 *array, int pos);


static fgINT32 flgr_get_array_fgINT32(fgINT32 *array, int pos);


static fgINT64 flgr_get_array_fgINT64(fgINT64 *array, int pos);


static fgFLOAT32 flgr_get_array_fgFLOAT32(fgFLOAT32 *array, int pos);


static fgFLOAT64 flgr_get_array_fgFLOAT64(fgFLOAT64 *array, int pos);

static void flgr_get_data_array_vector_fgBIT(fgBIT *vector_array, fgBIT *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgUINT8(fgUINT8 *vector_array, fgUINT8 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgUINT16(fgUINT16 *vector_array, fgUINT16 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgUINT32(fgUINT32 *vector_array, fgUINT32 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgINT8(fgINT8 *vector_array, fgINT8 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgINT16(fgINT16 *vector_array, fgINT16 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgINT32(fgINT32 *vector_array, fgINT32 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgFLOAT32(fgFLOAT32 *vector_array, fgFLOAT32 *data_array, int spp, int pos);


static void flgr_get_data_array_vector_fgFLOAT64(fgFLOAT64 *vector_array, fgFLOAT64 *data_array, int spp, int pos);

static void flgr_set_data_array_vector_fgBIT(fgBIT *data_array, fgBIT *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgUINT8(fgUINT8 *data_array, fgUINT8 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgUINT16(fgUINT16 *data_array, fgUINT16 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgUINT32(fgUINT32 *data_array, fgUINT32 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgINT8(fgINT8 *data_array, fgINT8 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgINT16(fgINT16 *data_array, fgINT16 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgINT32(fgINT32 *data_array, fgINT32 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgFLOAT32(fgFLOAT32 *data_array, fgFLOAT32 *vector_array, int spp, int pos);


static void flgr_set_data_array_vector_fgFLOAT64(fgFLOAT64 *data_array, fgFLOAT64 *vector_array, int spp, int pos);

/*!
 * \defgroup group_fulguro_core_vector Vector manipulations
 * \ingroup group_fulguro_core
 * \brief Functions to create and manipulate Vector
 * @{
 */

/*! 
   * Vector structure
   */

//!< Number of elements
//!< Number of bits per pixels
//!< Data type of elements
//!< Array of elements
typedef struct {
   int spp;
   int bps;
   FLGR_Type type;
   void *array;
} FLGR_Vector;


typedef int (*FLGR_VectorCompare)(FLGR_Vector *vec1, FLGR_Vector *vec2);

//! @}



extern FLGR_Vector *flgr_vector_create(int spp, FLGR_Type type);

extern FLGR_Ret flgr_vector_destroy(FLGR_Vector *vct);

extern FLGR_Ret flgr_vector_get_element(FLGR_Vector *vct, int index, void *value);
extern FLGR_Ret flgr_vector_set_element(FLGR_Vector *vct, int index, void *value);

extern FLGR_Ret flgr_vector_import_raw(FLGR_Vector *vctdest, void *raw_src);
extern FLGR_Ret flgr_vector_import_string(FLGR_Vector *vctdest, char *string_src);
extern FLGR_Ret flgr_vector_export_raw(void *raw_dest, FLGR_Vector *vctsrc);

extern FLGR_Ret flgr_vector_populate_from_scalar(FLGR_Vector *vctdest, void *scalar);
extern FLGR_Ret flgr_vector_populate_from_string(FLGR_Vector *vctdest, char *string);

extern FLGR_Ret flgr_vector_is_type_valid(FLGR_Vector *vct);

extern FLGR_Ret flgr_vector_clear(FLGR_Vector *vct);

extern int flgr_vector_equal(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_is_zero(FLGR_Vector *vct);

extern FLGR_Ret flgr_vector_is_same_type(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern FLGR_Ret flgr_vector_is_same_spp(FLGR_Vector *vct1, FLGR_Vector *vct2);

extern FLGR_Ret flgr_vector_copy(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);

extern FLGR_Ret flgr_vector_revert_element(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);




extern void flgr_vector_revert_element_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_revert_element_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);

extern void flgr_vector_import_raw_fgBIT(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgUINT8(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgUINT16(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgUINT32(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgUINT64(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgINT8(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgINT16(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgINT32(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgINT64(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgFLOAT32(FLGR_Vector *vctdest, void *raw_src);
extern void flgr_vector_import_raw_fgFLOAT64(FLGR_Vector *vctdest, void *raw_src);

extern void flgr_vector_import_string_fgBIT(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgUINT8(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgUINT16(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgUINT32(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgUINT64(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgINT8(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgINT16(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgINT32(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgINT64(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgFLOAT32(FLGR_Vector *vctdest, char *string_src);
extern void flgr_vector_import_string_fgFLOAT64(FLGR_Vector *vctdest, char *string_src);

extern void flgr_vector_export_raw_fgBIT(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgUINT8(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgUINT16(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgUINT32(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgUINT64(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgINT8(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgINT16(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgINT32(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgINT64(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgFLOAT32(void *raw_dest, FLGR_Vector *vctsrc);
extern void flgr_vector_export_raw_fgFLOAT64(void *raw_dest, FLGR_Vector *vctsrc);

extern int flgr_vector_equal_fgBIT(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgUINT8(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgUINT16(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgUINT32(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgUINT64(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgINT8(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgINT16(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgINT32(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgINT64(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgFLOAT32(FLGR_Vector *vct1, FLGR_Vector *vct2);
extern int flgr_vector_equal_fgFLOAT64(FLGR_Vector *vct1, FLGR_Vector *vct2);

extern int flgr_vector_is_zero_fgBIT(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgUINT8(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgUINT16(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgUINT32(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgUINT64(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgINT8(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgINT16(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgINT32(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgINT64(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgFLOAT32(FLGR_Vector *vct);
extern int flgr_vector_is_zero_fgFLOAT64(FLGR_Vector *vct);

extern int flgr_vector_is_type_fgBIT(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgUINT8(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgUINT16(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgUINT32(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgUINT64(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgINT8(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgINT16(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgINT32(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgINT64(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgFLOAT32(FLGR_Vector *vct);
extern int flgr_vector_is_type_fgFLOAT64(FLGR_Vector *vct);

extern void flgr_vector_populate_from_scalar_fgBIT(FLGR_Vector *vctdest, fgBIT scalar);
extern void flgr_vector_populate_from_scalar_fgUINT8(FLGR_Vector *vctdest, fgUINT8 scalar);
extern void flgr_vector_populate_from_scalar_fgUINT16(FLGR_Vector *vctdest, fgUINT16 scalar);
extern void flgr_vector_populate_from_scalar_fgUINT32(FLGR_Vector *vctdest, fgUINT32 scalar);
extern void flgr_vector_populate_from_scalar_fgUINT64(FLGR_Vector *vctdest, fgUINT64 scalar);
extern void flgr_vector_populate_from_scalar_fgINT8(FLGR_Vector *vctdest, fgINT8 scalar);
extern void flgr_vector_populate_from_scalar_fgINT16(FLGR_Vector *vctdest, fgINT16 scalar);
extern void flgr_vector_populate_from_scalar_fgINT32(FLGR_Vector *vctdest, fgINT32 scalar);
extern void flgr_vector_populate_from_scalar_fgINT64(FLGR_Vector *vctdest, fgINT64 scalar);
extern void flgr_vector_populate_from_scalar_fgFLOAT32(FLGR_Vector *vctdest, fgFLOAT32 scalar);
extern void flgr_vector_populate_from_scalar_fgFLOAT64(FLGR_Vector *vctdest, fgFLOAT64 scalar);

extern void flgr_vector_get_element_fgBIT(FLGR_Vector *vct, int index, fgBIT *value);
extern void flgr_vector_get_element_fgUINT8(FLGR_Vector *vct, int index, fgUINT8 *value);
extern void flgr_vector_get_element_fgUINT16(FLGR_Vector *vct, int index, fgUINT16 *value);
extern void flgr_vector_get_element_fgUINT32(FLGR_Vector *vct, int index, fgUINT32 *value);
extern void flgr_vector_get_element_fgUINT64(FLGR_Vector *vct, int index, fgUINT64 *value);
extern void flgr_vector_get_element_fgINT8(FLGR_Vector *vct, int index, fgINT8 *value);
extern void flgr_vector_get_element_fgINT16(FLGR_Vector *vct, int index, fgINT16 *value);
extern void flgr_vector_get_element_fgINT32(FLGR_Vector *vct, int index, fgINT32 *value);
extern void flgr_vector_get_element_fgINT64(FLGR_Vector *vct, int index, fgINT64 *value);
extern void flgr_vector_get_element_fgFLOAT32(FLGR_Vector *vct, int index, fgFLOAT32 *value);
extern void flgr_vector_get_element_fgFLOAT64(FLGR_Vector *vct, int index, fgFLOAT64 *value);

extern void flgr_vector_set_element_fgBIT(FLGR_Vector *vct, int index, fgBIT value);
extern void flgr_vector_set_element_fgUINT8(FLGR_Vector *vct, int index, fgUINT8 value);
extern void flgr_vector_set_element_fgUINT16(FLGR_Vector *vct, int index, fgUINT16 value);
extern void flgr_vector_set_element_fgUINT32(FLGR_Vector *vct, int index, fgUINT32 value);
extern void flgr_vector_set_element_fgUINT64(FLGR_Vector *vct, int index, fgINT64 value);
extern void flgr_vector_set_element_fgINT8(FLGR_Vector *vct, int index, fgINT8 value);
extern void flgr_vector_set_element_fgINT16(FLGR_Vector *vct, int index, fgINT16 value);
extern void flgr_vector_set_element_fgINT32(FLGR_Vector *vct, int index, fgINT32 value);
extern void flgr_vector_set_element_fgINT64(FLGR_Vector *vct, int index, fgINT64 value);
extern void flgr_vector_set_element_fgFLOAT32(FLGR_Vector *vct, int index, fgFLOAT32 value);
extern void flgr_vector_set_element_fgFLOAT64(FLGR_Vector *vct, int index, fgFLOAT64 value);

extern void flgr_vector_copy_fgBIT_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgBIT_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT8_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT16_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT32_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgUINT64_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT8_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT16_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT32_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgINT64_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT32_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgBIT(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgUINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgUINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgUINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgINT8(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgINT16(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgINT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgINT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgFLOAT32(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);
extern void flgr_vector_copy_fgFLOAT64_fgFLOAT64(FLGR_Vector *vctdest, FLGR_Vector *vctsrc);

/*!
   * \addtogroup group_fulguro_core_array
   * @{
   */


extern FLGR_Ret flgr1d_set_data_vector(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern FLGR_Ret flgr1d_get_data_vector(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern FLGR_Ret flgr1d_get_data_vector_no_norm(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);

extern FLGR_Ret flgr2d_set_data_vector(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern FLGR_Ret flgr2d_get_data_vector(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern FLGR_Ret flgr2d_get_data_vector_no_norm(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);


extern FLGR_Ret flgr1d_set_data_ptr(FLGR_Data1D *dat, int pos, void *value);
extern FLGR_Ret flgr1d_set_data_str(FLGR_Data1D *dat, int pos, char *value);
extern FLGR_Ret flgr1d_get_data_ptr(FLGR_Data1D *dat, int pos, void *value);
extern FLGR_Ret flgr1d_get_data_no_norm_ptr(FLGR_Data1D *dat, int pos, void *value);



extern FLGR_Ret flgr2d_set_data_ptr(FLGR_Data2D *dat, int row, int col, void *value);
extern FLGR_Ret flgr2d_set_data_str(FLGR_Data2D *dat, int row, int col, char *value);
extern FLGR_Ret flgr2d_get_data_ptr(FLGR_Data2D *dat, int row, int col, void *value);
extern FLGR_Ret flgr2d_get_data_no_norm_ptr(FLGR_Data2D *dat, int row, int col, void *value);







extern void flgr1d_set_data_vector_fgBIT(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgUINT8(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgUINT16(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgUINT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgINT8(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgINT16(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgINT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgFLOAT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_set_data_vector_fgFLOAT64(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);

extern void flgr1d_get_data_vector_fgBIT(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgUINT8(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgUINT16(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgUINT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgINT8(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgINT16(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgINT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgFLOAT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_fgFLOAT64(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);

extern void flgr1d_get_data_vector_no_norm_fgBIT(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgUINT8(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgUINT16(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgUINT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgINT8(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgINT16(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgINT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgFLOAT32(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);
extern void flgr1d_get_data_vector_no_norm_fgFLOAT64(FLGR_Data1D *dat, int pos, FLGR_Vector *vct);


extern void flgr2d_set_data_vector_fgBIT(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgUINT8(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgUINT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgINT8(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgINT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgFLOAT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_set_data_vector_fgFLOAT64(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);

extern void flgr2d_get_data_vector_fgBIT(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgUINT8(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgUINT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgINT8(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgINT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgFLOAT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_fgFLOAT64(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);

extern void flgr2d_get_data_vector_no_norm_fgBIT(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgUINT8(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgUINT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgINT8(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgINT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgFLOAT32(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_get_data_vector_no_norm_fgFLOAT64(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);




extern void flgr1d_set_data_fgBIT(FLGR_Data1D *dat, int pos, fgBIT *value);
extern void flgr1d_set_data_fgUINT8(FLGR_Data1D *dat, int pos, fgUINT8 *value);
extern void flgr1d_set_data_fgUINT16(FLGR_Data1D *dat, int pos, fgUINT16 *value);
extern void flgr1d_set_data_fgUINT32(FLGR_Data1D *dat, int pos, fgUINT32 *value);
extern void flgr1d_set_data_fgINT8(FLGR_Data1D *dat, int pos, fgINT8 *value);
extern void flgr1d_set_data_fgINT16(FLGR_Data1D *dat, int pos, fgINT16 *value);
extern void flgr1d_set_data_fgINT32(FLGR_Data1D *dat, int pos, fgINT32 *value);
extern void flgr1d_set_data_fgFLOAT32(FLGR_Data1D *dat, int pos, fgFLOAT32 *value);
extern void flgr1d_set_data_fgFLOAT64(FLGR_Data1D *dat, int pos, fgFLOAT64 *value);

extern void flgr1d_get_data_fgBIT(FLGR_Data1D *dat, int pos, fgBIT *value);
extern void flgr1d_get_data_fgUINT8(FLGR_Data1D *dat, int pos, fgUINT8 *value);
extern void flgr1d_get_data_fgUINT16(FLGR_Data1D *dat, int pos, fgUINT16 *value);
extern void flgr1d_get_data_fgUINT32(FLGR_Data1D *dat, int pos, fgUINT32 *value);
extern void flgr1d_get_data_fgINT8(FLGR_Data1D *dat, int pos, fgINT8 *value);
extern void flgr1d_get_data_fgINT16(FLGR_Data1D *dat, int pos, fgINT16 *value);
extern void flgr1d_get_data_fgINT32(FLGR_Data1D *dat, int pos, fgINT32 *value);
extern void flgr1d_get_data_fgFLOAT32(FLGR_Data1D *dat, int pos, fgFLOAT32 *value);
extern void flgr1d_get_data_fgFLOAT64(FLGR_Data1D *dat, int pos, fgFLOAT64 *value);

extern void flgr1d_get_data_no_norm_fgBIT(FLGR_Data1D *dat, int pos, fgBIT *value);
extern void flgr1d_get_data_no_norm_fgUINT8(FLGR_Data1D *dat, int pos, fgUINT8 *value);
extern void flgr1d_get_data_no_norm_fgUINT16(FLGR_Data1D *dat, int pos, fgUINT16 *value);
extern void flgr1d_get_data_no_norm_fgUINT32(FLGR_Data1D *dat, int pos, fgUINT32 *value);
extern void flgr1d_get_data_no_norm_fgINT8(FLGR_Data1D *dat, int pos, fgINT8 *value);
extern void flgr1d_get_data_no_norm_fgINT16(FLGR_Data1D *dat, int pos, fgINT16 *value);
extern void flgr1d_get_data_no_norm_fgINT32(FLGR_Data1D *dat, int pos, fgINT32 *value);
extern void flgr1d_get_data_no_norm_fgFLOAT32(FLGR_Data1D *dat, int pos, fgFLOAT32 *value);
extern void flgr1d_get_data_no_norm_fgFLOAT64(FLGR_Data1D *dat, int pos, fgFLOAT64 *value);






extern void flgr2d_set_data_fgBIT(FLGR_Data2D *dat, int row, int col, fgBIT *value);
extern void flgr2d_set_data_fgUINT8(FLGR_Data2D *dat, int row, int col, fgUINT8 *value);
extern void flgr2d_set_data_fgUINT16(FLGR_Data2D *dat, int row, int col, fgUINT16 *value);
extern void flgr2d_set_data_fgUINT32(FLGR_Data2D *dat, int row, int col, fgUINT32 *value);
extern void flgr2d_set_data_fgINT8(FLGR_Data2D *dat, int row, int col, fgINT8 *value);
extern void flgr2d_set_data_fgINT16(FLGR_Data2D *dat, int row, int col, fgINT16 *value);
extern void flgr2d_set_data_fgINT32(FLGR_Data2D *dat, int row, int col, fgINT32 *value);
extern void flgr2d_set_data_fgFLOAT32(FLGR_Data2D *dat, int row, int col, fgFLOAT32 *value);
extern void flgr2d_set_data_fgFLOAT64(FLGR_Data2D *dat, int row, int col, fgFLOAT64 *value);

extern void flgr2d_get_data_fgBIT(FLGR_Data2D *dat, int row, int col, fgBIT *value);
extern void flgr2d_get_data_fgUINT8(FLGR_Data2D *dat, int row, int col, fgUINT8 *value);
extern void flgr2d_get_data_fgUINT16(FLGR_Data2D *dat, int row, int col, fgUINT16 *value);
extern void flgr2d_get_data_fgUINT32(FLGR_Data2D *dat, int row, int col, fgUINT32 *value);
extern void flgr2d_get_data_fgINT8(FLGR_Data2D *dat, int row, int col, fgINT8 *value);
extern void flgr2d_get_data_fgINT16(FLGR_Data2D *dat, int row, int col, fgINT16 *value);
extern void flgr2d_get_data_fgINT32(FLGR_Data2D *dat, int row, int col, fgINT32 *value);
extern void flgr2d_get_data_fgFLOAT32(FLGR_Data2D *dat, int row, int col, fgFLOAT32 *value);
extern void flgr2d_get_data_fgFLOAT64(FLGR_Data2D *dat, int row, int col, fgFLOAT64 *value);

extern void flgr2d_get_data_no_norm_fgBIT(FLGR_Data2D *dat, int row, int col, fgBIT *value);
extern void flgr2d_get_data_no_norm_fgUINT8(FLGR_Data2D *dat, int row, int col, fgUINT8 *value);
extern void flgr2d_get_data_no_norm_fgUINT16(FLGR_Data2D *dat, int row, int col, fgUINT16 *value);
extern void flgr2d_get_data_no_norm_fgUINT32(FLGR_Data2D *dat, int row, int col, fgUINT32 *value);
extern void flgr2d_get_data_no_norm_fgINT8(FLGR_Data2D *dat, int row, int col, fgINT8 *value);
extern void flgr2d_get_data_no_norm_fgINT16(FLGR_Data2D *dat, int row, int col, fgINT16 *value);
extern void flgr2d_get_data_no_norm_fgINT32(FLGR_Data2D *dat, int row, int col, fgINT32 *value);
extern void flgr2d_get_data_no_norm_fgFLOAT32(FLGR_Data2D *dat, int row, int col, fgFLOAT32 *value);
extern void flgr2d_get_data_no_norm_fgFLOAT64(FLGR_Data2D *dat, int row, int col, fgFLOAT64 *value);








static void flgr1d_set_data_array_fgBIT(fgBIT *array, int pos, fgBIT value);


static void flgr1d_set_data_array_fgUINT8(fgUINT8 *array, int pos, fgUINT8 value);


static void flgr1d_set_data_array_fgUINT16(fgUINT16 *array, int pos, fgUINT16 value);


static void flgr1d_set_data_array_fgUINT32(fgUINT32 *array, int pos, fgUINT32 value);


static void flgr1d_set_data_array_fgUINT64(fgUINT64 *array, int pos, fgUINT64 value);


static void flgr1d_set_data_array_fgINT8(fgINT8 *array, int pos, fgINT8 value);


static void flgr1d_set_data_array_fgINT16(fgINT16 *array, int pos, fgINT16 value);


static void flgr1d_set_data_array_fgINT32(fgINT32 *array, int pos, fgINT32 value);


static void flgr1d_set_data_array_fgINT64(fgINT64 *array, int pos, fgINT64 value);


static void flgr1d_set_data_array_fgFLOAT32(fgFLOAT32 *array, int pos, fgFLOAT32 value);


static void flgr1d_set_data_array_fgFLOAT64(fgFLOAT64 *array, int pos, fgFLOAT64 value);








static fgBIT flgr1d_get_data_array_fgBIT(fgBIT *array, int pos);


static fgUINT8 flgr1d_get_data_array_fgUINT8(fgUINT8 *array, int pos);


static fgUINT16 flgr1d_get_data_array_fgUINT16(fgUINT16 *array, int pos);


static fgUINT32 flgr1d_get_data_array_fgUINT32(fgUINT32 *array, int pos);


static fgUINT64 flgr1d_get_data_array_fgUINT64(fgUINT64 *array, int pos);


static fgINT8 flgr1d_get_data_array_fgINT8(fgINT8 *array, int pos);


static fgINT16 flgr1d_get_data_array_fgINT16(fgINT16 *array, int pos);


static fgINT32 flgr1d_get_data_array_fgINT32(fgINT32 *array, int pos);


static fgINT64 flgr1d_get_data_array_fgINT64(fgINT64 *array, int pos);


static fgFLOAT32 flgr1d_get_data_array_fgFLOAT32(fgFLOAT32 *array, int pos);


static fgFLOAT64 flgr1d_get_data_array_fgFLOAT64(fgFLOAT64 *array, int pos);








static void flgr2d_set_data_array_fgBIT(fgBIT **array, int row, int col, fgBIT value);

static void flgr2d_set_data_array_fgUINT8(fgUINT8 **array, int row, int col, fgUINT8 value);

static void flgr2d_set_data_array_fgUINT16(fgUINT16 **array, int row, int col, fgUINT16 value);

static void flgr2d_set_data_array_fgUINT32(fgUINT32 **array, int row, int col, fgUINT32 value);

static void flgr2d_set_data_array_fgINT8(fgINT8 **array, int row, int col, fgINT8 value);

static void flgr2d_set_data_array_fgINT16(fgINT16 **array, int row, int col, fgINT16 value);

static void flgr2d_set_data_array_fgINT32(fgINT32 **array, int row, int col, fgINT32 value);

static void flgr2d_set_data_array_fgFLOAT32(fgFLOAT32 **array, int row, int col, fgFLOAT32 value);

static void flgr2d_set_data_array_fgFLOAT64(fgFLOAT64 **array, int row, int col, fgFLOAT64 value);




static fgBIT flgr2d_get_data_array_fgBIT(fgBIT **array, int row, int col);

static fgUINT8 flgr2d_get_data_array_fgUINT8(fgUINT8 **array, int row, int col);

static fgUINT16 flgr2d_get_data_array_fgUINT16(fgUINT16 **array, int row, int col);

static fgUINT32 flgr2d_get_data_array_fgUINT32(fgUINT32 **array, int row, int col);

static fgINT8 flgr2d_get_data_array_fgINT8(fgINT8 **array, int row, int col);

static fgINT16 flgr2d_get_data_array_fgINT16(fgINT16 **array, int row, int col);

static fgINT32 flgr2d_get_data_array_fgINT32(fgINT32 **array, int row, int col);

static fgFLOAT32 flgr2d_get_data_array_fgFLOAT32(fgFLOAT32 **array, int row, int col);

static fgFLOAT64 flgr2d_get_data_array_fgFLOAT64(fgFLOAT64 **array, int row, int col);

extern FLGR_Ret flgr1d_copy(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern FLGR_Ret flgr2d_copy(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern FLGR_Ret flgr1d_import_raw_ptr(FLGR_Data1D *dat, void *raw);
extern FLGR_Ret flgr1d_export_raw_ptr(void *raw, FLGR_Data1D *dat);

extern FLGR_Ret flgr2d_import_raw_ptr(FLGR_Data2D *datdest, void *raw);
extern FLGR_Ret flgr2d_export_raw_ptr(void *raw, FLGR_Data2D *dat);

extern FLGR_Ret flgr1d_mirror(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern FLGR_Ret flgr1d_mirror_hmorph(FLGR_Data1D *dat);

extern FLGR_Ret flgr2d_mirror_horizontal(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_mirror_horizontal_hmorph(FLGR_Data2D *dat);

extern FLGR_Ret flgr2d_mirror_vertical(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_mirror_vertical_hmorph(FLGR_Data2D *dat);

extern FLGR_Ret flgr2d_fill_nhb_even_rows(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_fill_nhb_odd_rows(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);


extern FLGR_Ret flgr2d_fill_nhbs_for_6_connexity(FLGR_Data2D *nhbEven, FLGR_Data2D *nhbOdd, FLGR_Data2D *nhb, int SYM);


extern FLGR_Ret flgr2d_copy_to_1d(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr1d_copy_to_2d(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);





extern void flgr2d_copy_to_1d_fgBIT(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgUINT8(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgUINT16(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgUINT32(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgINT8(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgINT16(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgINT32(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_to_1d_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data2D *datsrc);

extern void flgr1d_copy_to_2d_fgBIT(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgUINT8(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgUINT16(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgUINT32(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgINT8(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgINT16(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgINT32(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_to_2d_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data1D *datsrc);


extern void flgr2d_fill_nhb_odd_rows_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_odd_rows_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_fill_nhb_even_rows_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_fill_nhb_even_rows_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);




extern void flgr1d_mirror_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_mirror_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);


extern void flgr1d_mirror_hmorph_fgBIT(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgUINT8(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgUINT16(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgUINT32(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgINT8(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgINT16(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgINT32(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgFLOAT32(FLGR_Data1D *dat);
extern void flgr1d_mirror_hmorph_fgFLOAT64(FLGR_Data1D *dat);


extern void flgr2d_mirror_horizontal_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_mirror_horizontal_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);


extern void flgr2d_mirror_horizontal_hmorph_fgBIT(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgUINT8(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgUINT16(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgUINT32(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgINT8(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgINT16(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgINT32(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgFLOAT32(FLGR_Data2D *dat);
extern void flgr2d_mirror_horizontal_hmorph_fgFLOAT64(FLGR_Data2D *dat);


extern void flgr1d_import_raw_fgBIT(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgUINT8(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgUINT16(FLGR_Data1D *datdest, void *raw);
extern void flgr1d_import_raw_fgUINT32(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgINT8(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgINT16(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgINT32(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgFLOAT32(FLGR_Data1D *dat, void *raw);
extern void flgr1d_import_raw_fgFLOAT64(FLGR_Data1D *dat, void *raw);

extern void flgr1d_export_raw_fgBIT(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgUINT8(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgUINT16(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgUINT32(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgINT8(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgINT16(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgINT32(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgFLOAT32(void *raw, FLGR_Data1D *dat);
extern void flgr1d_export_raw_fgFLOAT64(void *raw, FLGR_Data1D *dat);

extern void flgr2d_import_raw_fgBIT(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgUINT8(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgUINT16(FLGR_Data2D *datdest, void *raw);
extern void flgr2d_import_raw_fgUINT32(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgINT8(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgINT16(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgINT32(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgFLOAT32(FLGR_Data2D *dat, void *raw);
extern void flgr2d_import_raw_fgFLOAT64(FLGR_Data2D *dat, void *raw);

extern void flgr2d_export_raw_fgBIT(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgUINT8(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgUINT16(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgUINT32(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgINT8(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgINT16(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgINT32(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgFLOAT32(void *raw, FLGR_Data2D *dat);
extern void flgr2d_export_raw_fgFLOAT64(void *raw, FLGR_Data2D *dat);



extern void flgr1d_copy_fgBIT_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);

extern void flgr1d_copy_fgBIT_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT8_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT16_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgUINT32_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT8_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT16_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgINT32_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT32_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr1d_copy_fgFLOAT64_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr2d_copy_fgBIT_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern void flgr2d_copy_fgBIT_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT8_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT16_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgUINT32_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT8_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT16_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgINT32_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT32_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_copy_fgFLOAT64_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

/*!
   * \addtogroup group_fulguro_core_nhb
   * @{
   */

/*! 
   * Neighborhood Box 1D
   */

/*! type of the data in the extracted neighborhood */

/*! Sample per Pixel */

/*! column Coordinate in the image of the pixel considered as the center of the neighborhood */

/*! value of the center of the extracted signal window */

/*! value of the center of nhb */

/*! X size of the nhb used to extract values */

/*! X coordinates list of pixel extracted */

/*! list of pixels values extracted in the signal */

/*! list of Neighborhood values corresponding to extracted pixels in the signal */

/*! size of the extracted values list */
typedef struct {
   FLGR_Type type;
   int spp;
   int center_coord_x;
   FLGR_Vector *center_data_val;
   FLGR_Vector *center_nhb_val;
   int nhb_size_x;
   int **list_coord_x;
   void **list_data_val;
   void **list_nhb_val;
   int *size;
} FLGR_NhbBox1D;

/*! 
   * Neighborhood Box 2D
   */

/*! type of the data in the extracted neighborhood */

/*! Sample per Pixel */

/*! Row Coordinate in the image of the pixel considered as the center of the neighborhood */

/*! Column Coordinate in the image of the pixel considered as the center of the neighborhood */

/*! value of the center of the extracted image box */

/*! value of the center of nhb */

/*! Y size of the nhb used to extract values */

/*! X size of the nhb used to extract values */

/*! Y coordinates list of pixel extracted */

/*! X coordinates list of pixel extracted */

/*! list of pixels values extracted in the image */

/*! list of Neighborhood values corresponding to extracted pixels in the image */

/*! size of the pixel list */
typedef struct {
   FLGR_Type type;
   int spp;
   int center_coord_y;
   int center_coord_x;
   FLGR_Vector *center_data_val;
   FLGR_Vector *center_nhb_val;
   int nhb_size_y;
   int nhb_size_x;
   int **list_coord_y;
   int **list_coord_x;
   void **list_data_val;
   void **list_nhb_val;
   int *size;
} FLGR_NhbBox2D;

//! @}

extern FLGR_MorphoOptim flgr1d_get_optimization_available(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);

extern FLGR_NhbBox1D *flgr1d_create_neighbor_box(FLGR_Data1D *data);

extern void flgr1d_destroy_neighbor_box(FLGR_NhbBox1D *extr);


extern FLGR_Ret flgr1d_get_neighborhood(FLGR_NhbBox1D *extr, FLGR_Data1D *dat, FLGR_Data1D *nhb, int x);



extern void flgr1d_get_neighborhood_fgBIT(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgUINT8(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgUINT16(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgUINT32(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgINT8(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgINT16(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgINT32(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgFLOAT32(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_fgFLOAT64(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);






extern FLGR_Ret flgr1d_get_neighborhood_unfolded(FLGR_NhbBox1D *extr, FLGR_Data1D *dat, FLGR_Data1D *nhb, int x);



extern void flgr1d_get_neighborhood_unfolded_fgBIT(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgUINT8(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgUINT16(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgUINT32(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgINT8(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgINT16(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgINT32(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgFLOAT32(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);


extern void flgr1d_get_neighborhood_unfolded_fgFLOAT64(FLGR_NhbBox1D *extr, FLGR_Data1D *img, FLGR_Data1D *nhb, int pos);
extern FLGR_MorphoOptim flgr2d_get_optimization_available(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);

extern FLGR_NhbBox2D *flgr2d_create_neighbor_box(FLGR_Data2D *data);

extern void flgr2d_destroy_neighbor_box(FLGR_NhbBox2D *extr);


extern FLGR_Ret flgr2d_get_neighborhood(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);





extern void flgr2d_get_neighborhood_fgBIT(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgUINT8(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgUINT16(FLGR_NhbBox2D *extr, FLGR_Data2D *dat, FLGR_Data2D *nhb, int row, int col);


extern void flgr2d_get_neighborhood_fgUINT32(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgINT8(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgINT16(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgINT32(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgFLOAT32(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_fgFLOAT64(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);



extern FLGR_Ret flgr2d_get_neighborhood_unfolded(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);





extern void flgr2d_get_neighborhood_unfolded_fgBIT(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgUINT8(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgUINT16(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgUINT32(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgINT8(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgINT16(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgINT32(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgFLOAT32(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);


extern void flgr2d_get_neighborhood_unfolded_fgFLOAT64(FLGR_NhbBox2D *extr, FLGR_Data2D *img, FLGR_Data2D *nhb, int x, int y);

extern FLGR_Ret flgr1d_convolution(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern FLGR_Ret flgr1d_convolution_unfolded(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);

extern FLGR_Ret flgr2d_convolution(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern FLGR_Ret flgr2d_convolution_unfolded(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);


extern void flgr1d_convolution_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);

extern void flgr1d_convolution_unfolded_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);
extern void flgr1d_convolution_unfolded_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb);

extern void flgr2d_convolution_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);

extern void flgr2d_convolution_unfolded_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);
extern void flgr2d_convolution_unfolded_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);



extern FLGR_Ret flgr2d_fast_correlation(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);


extern void flgr2d_fast_correlation_fgBIT(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgUINT8(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgUINT16(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgUINT32(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgINT8(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgINT16(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgINT32(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgFLOAT32(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern void flgr2d_fast_correlation_fgFLOAT64(FLGR_Data2D *imout, FLGR_Data2D *imin, FLGR_Data2D *imref, int horizon);
extern FLGR_Ret flgr_parse_str_constant(FLGR_Type type, int spp, char *strin, void *constout);
extern void *flgr_allocate_vector_const(FLGR_Type type, int spp, void *valueForEachVectorElement);

/*!
   * \addtogroup group_fulguro_core
   * @{
   */

//! pointer to a function doing computation over an extracted neighborhood
typedef void (*FLGR_ComputeNhb2D)(FLGR_Vector *result, FLGR_NhbBox2D *extr);
//! pointer to a function doing computation over an extracted neighborhood
typedef void (*FLGR_ComputeNhb1D)(FLGR_Vector *result, FLGR_NhbBox1D *extr);
//! pointer to a function doing arith computation over vectors
typedef void (*FLGR_ComputeArith)(FLGR_Vector *vector_dest, FLGR_Vector *vector_1, FLGR_Vector *vector_2);


//! @}


extern FLGR_Ret flgr1d_apply_raster_scan_method(FLGR_Data1D *nhb);
extern FLGR_Ret flgr1d_apply_anti_raster_scan_method(FLGR_Data1D *nhb);

extern FLGR_Ret flgr2d_apply_raster_scan_method(FLGR_Data2D *nhb);
extern FLGR_Ret flgr2d_apply_anti_raster_scan_method(FLGR_Data2D *nhb);




extern FLGR_Ret flgr1d_raster_slide_window(FLGR_Data1D *imgdest, FLGR_Data1D *imgsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern FLGR_Ret flgr1d_anti_raster_slide_window(FLGR_Data1D *imgdest, FLGR_Data1D *imgsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern FLGR_Ret flgr1d_raster_slide_window_unfolded(FLGR_Data1D *imgdest, FLGR_Data1D *imgsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern FLGR_Ret flgr1d_anti_raster_slide_window_unfolded(FLGR_Data1D *imgdest, FLGR_Data1D *imgsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);



extern FLGR_Ret flgr1d_raster_slide_structuring_function(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);







extern FLGR_Ret flgr2d_raster_slide_window(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern FLGR_Ret flgr2d_anti_raster_slide_window(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern FLGR_Ret flgr2d_raster_slide_window_unfolded(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern FLGR_Ret flgr2d_anti_raster_slide_window_unfolded(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);



extern FLGR_Ret flgr2d_raster_slide_structuring_function(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);






extern void flgr1d_raster_slide_structuring_function_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);


extern void flgr1d_raster_slide_structuring_function_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *semap, FLGR_Shape shape, FLGR_ComputeNhb1D computeNhb);





extern void flgr2d_raster_slide_structuring_function_fgBIT(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgUINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgUINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgINT8(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgFLOAT32(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_structuring_function_fgFLOAT64(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *semap, FLGR_Shape shape, FLGR_ComputeNhb2D computeNhb);
extern void flgr1d_apply_raster_scan_method_fgBIT(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgUINT8(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgUINT16(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgUINT32(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgINT8(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgINT16(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgINT32(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgFLOAT32(FLGR_Data1D *nhb);
extern void flgr1d_apply_raster_scan_method_fgFLOAT64(FLGR_Data1D *nhb);

extern void flgr1d_apply_anti_raster_scan_method_fgBIT(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgUINT8(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgUINT16(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgUINT32(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgINT8(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgINT16(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgINT32(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgFLOAT32(FLGR_Data1D *nhb);
extern void flgr1d_apply_anti_raster_scan_method_fgFLOAT64(FLGR_Data1D *nhb);




extern void flgr1d_raster_slide_window_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);




extern void flgr1d_anti_raster_slide_window_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);






extern void flgr1d_raster_slide_window_unfolded_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_raster_slide_window_unfolded_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);




extern void flgr1d_anti_raster_slide_window_unfolded_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);


extern void flgr1d_anti_raster_slide_window_unfolded_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D getNhbVal);



extern void flgr1d_raster_slide_window_before_op_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_raster_slide_window_before_op_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);






extern void flgr1d_anti_raster_slide_window_before_op_fgBIT(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgUINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgUINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgINT8(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgFLOAT32(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr1d_anti_raster_slide_window_before_op_fgFLOAT64(FLGR_Data1D *datdest, FLGR_Data1D *datsrc, FLGR_Data1D *datarith, FLGR_Data1D *nhb, int nhb_sym, FLGR_ComputeNhb1D computeNhb, FLGR_ComputeArith computeArith);
extern void flgr2d_apply_raster_scan_method_fgBIT(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgUINT8(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgUINT16(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgUINT32(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgINT8(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgINT16(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgINT32(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgFLOAT32(FLGR_Data2D *nhb);
extern void flgr2d_apply_raster_scan_method_fgFLOAT64(FLGR_Data2D *nhb);

extern void flgr2d_apply_anti_raster_scan_method_fgBIT(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgUINT8(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgUINT16(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgUINT32(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgINT8(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgINT16(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgINT32(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgFLOAT32(FLGR_Data2D *nhb);
extern void flgr2d_apply_anti_raster_scan_method_fgFLOAT64(FLGR_Data2D *nhb);





extern void flgr2d_raster_slide_window_fgBIT(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgUINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, const FLGR_ComputeNhb2D computeNhb);


extern void flgr2d_raster_slide_window_fgUINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgFLOAT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_fgFLOAT64(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);




extern void flgr2d_anti_raster_slide_window_fgBIT(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgUINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgUINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgFLOAT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_fgFLOAT64(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);






extern void flgr2d_raster_slide_window_unfolded_fgBIT(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgUINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgUINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgFLOAT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_raster_slide_window_unfolded_fgFLOAT64(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);




extern void flgr2d_anti_raster_slide_window_unfolded_fgBIT(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgUINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgUINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgFLOAT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);


extern void flgr2d_anti_raster_slide_window_unfolded_fgFLOAT64(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D getNhbVal);



extern void flgr2d_raster_slide_window_before_op_fgBIT(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgUINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgUINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgFLOAT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_raster_slide_window_before_op_fgFLOAT64(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);






extern void flgr2d_anti_raster_slide_window_before_op_fgBIT(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgUINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgUINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgINT8(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgINT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgFLOAT32(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);




extern void flgr2d_anti_raster_slide_window_before_op_fgFLOAT64(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *imgarith, FLGR_Data2D *nhb, int nhb_sym, FLGR_ComputeNhb2D computeNhb, FLGR_ComputeArith computeArith);
extern void flgr2d_get_nhb_convolution_fgUINT16(FLGR_Vector *result, FLGR_NhbBox2D *extr);


extern fgUINT16 flgr2d_get_data_array_fgUINT16(fgUINT16 **array, int row, int col);

extern void flgr_get_data_array_vector_fgUINT16(fgUINT16 *vector_array, fgUINT16 *data_array, int spp, int pos);

extern fgUINT16 flgr_get_array_fgUINT16(fgUINT16 *array, int pos);

extern void flgr_set_array_fgUINT16(fgUINT16 *array, int pos, fgUINT16 value);


extern void flgr_set_data_array_vector_fgUINT16(fgUINT16 *data_array, fgUINT16 *vector_array, int spp, int pos);

static fgUINT16 flgr_defop_sup_fgUINT16(fgUINT16 a, fgUINT16 b);
extern void flgr_vector_sup_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vct1, FLGR_Vector *vct2);

static fgUINT16 flgr_defop_mult_fgUINT16(fgUINT16 a, fgUINT16 b);

extern void flgr_vector_populate_from_scalar_fgUINT16(FLGR_Vector *vctdest, fgUINT16 scalar);
extern void flgr_vector_mult_fgUINT16(FLGR_Vector *vctdest, FLGR_Vector *vct1, FLGR_Vector *vct2);
extern FLGR_Ret flgr_vector_destroy(FLGR_Vector *vct);
extern FLGR_Ret flgr_is_vector_type_valid(FLGR_Type type);
extern FLGR_Vector *flgr_vector_create(int spp, FLGR_Type type);
extern int flgr_normalize_coordinate(int axis_coord, int axis_length);
extern void *flgr_malloc(size_t size);
extern FLGR_Ret flgr_is_data_type_valid(FLGR_Type type);
extern FLGR_Type flgr_get_type_from_string(char *type);
extern int flgr_get_bps_from_type(FLGR_Type type);
extern void flgr_free(void *ptr);
extern void flgr_backtrace_print(void);
extern void flgr2d_set_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_native_dilate_8_connexity_fgUINT16(FLGR_Data2D *nhb);
extern void flgr2d_native_dilate_6_connexity_fgUINT16(FLGR_Data2D *nhb);
extern void flgr2d_get_data_vector_no_norm_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_native_dilate_4_connexity_fgUINT16(FLGR_Data2D *nhb);
extern FLGR_Ret flgr2d_mirror_vertical_hmorph(FLGR_Data2D *dat);

extern void flgr2d_mirror_horizontal_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
//////////////////////////////////////////////////////////////////
/*! mirror horizontally an image (regarding a vertical axis ...)
 *  @param datdest : a pointer to FLGR_Data2D
 *  @param datsrc  : a pointer to FLGR_Data2D
 *  @returns FLGR_RET_OK, ...
 */
//////////////////////////////////////////////////////////////////
extern FLGR_Ret flgr2d_mirror_horizontal(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_is_data_same_type(FLGR_Data2D *data1, FLGR_Data2D *data2);

extern FLGR_Ret flgr2d_is_data_same_spp(FLGR_Data2D *dat1, FLGR_Data2D *dat2);
extern FLGR_Ret flgr2d_is_data_same_size(FLGR_Data2D *data1, FLGR_Data2D *data2);
extern FLGR_Ret flgr2d_is_data_same_attributes(FLGR_Data2D *data1, FLGR_Data2D *data2, const char *callingFunction);
extern void flgr1d_import_raw_fgUINT16(FLGR_Data1D *datdest, void *raw);
extern void flgr2d_import_raw_fgUINT16(FLGR_Data2D *datdest, void *raw);
extern FLGR_Ret flgr2d_import_raw_ptr(FLGR_Data2D *datdest, void *raw);
extern void flgr2d_get_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct);
extern void flgr2d_fill_nhb_odd_rows_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_fill_nhb_odd_rows(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_fill_nhb_even_rows(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern int flgr2d_data_is_connexity(FLGR_Data2D *data, FLGR_Connexity connexity);
extern FLGR_Ret flgr2d_fill_nhbs_for_6_connexity(FLGR_Data2D *nhbEven, FLGR_Data2D *nhbOdd, FLGR_Data2D *nhb, int SYM);
extern void flgr2d_fill_nhb_even_rows_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern void flgr2d_draw_vertical_line_fgUINT16(FLGR_Data2D *dat, int x, int y, int size_y, FLGR_Vector *color);
extern void flgr2d_draw_point_fgUINT16(FLGR_Data2D *dat, int x, int y, FLGR_Vector *color);
extern void dataExchange(int *x, int *y);
extern void flgr2d_draw_line_fgUINT16(FLGR_Data2D *dat, int x1, int y1, int x2, int y2, FLGR_Vector *color);
extern void flgr2d_draw_horizontal_line_fgUINT16(FLGR_Data2D *dat, int x, int y, int size_x, FLGR_Vector *color);
extern void flgr2d_draw_filled_rectangle_fgUINT16(FLGR_Data2D *dat, int x, int y, int size_x, int size_y, FLGR_Vector *color);
extern void flgr2d_draw_filled_ellipse_fgUINT16(FLGR_Data2D *dat, int cx, int cy, int a, int b, FLGR_Vector *color);
extern void flgr2d_draw_disc_fgUINT16(FLGR_Data2D *dat, int cx, int cy, int radius, FLGR_Vector *color);
extern FLGR_Data2D *flgr2d_create_from(FLGR_Data2D *datsrc);
extern void flgr1d_copy_fgUINT16_fgUINT16(FLGR_Data1D *datdest, FLGR_Data1D *datsrc);
extern void flgr2d_copy_fgUINT16_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);
extern FLGR_Ret flgr2d_copy(FLGR_Data2D *datdest, FLGR_Data2D *datsrc);

extern FLGR_Ret flgr1d_clear_all(FLGR_Data1D *data);
extern FLGR_Ret flgr2d_clear_all(FLGR_Data2D *data);
extern void flgr2d_fill_neighborhood_fgUINT16(FLGR_Data2D *nhb, FLGR_Shape shape, int width, int height);
extern FLGR_Ret flgr2d_fill_neighborhood(FLGR_Data2D *nhb, FLGR_Shape shape, int width, int height);
extern void flgr2d_destroy_neighbor_box(FLGR_NhbBox2D *extr);
extern FLGR_Ret flgr2d_destroy_link(FLGR_Data2D *dat);
extern FLGR_Ret flgr1d_destroy(FLGR_Data1D *dat);
extern FLGR_Ret flgr2d_destroy(FLGR_Data2D *dat);
extern FLGR_Data2D *flgr2d_create_pixmap(int size_y, int size_x, int spp, FLGR_Type type);

extern FLGR_Data2D *flgr2d_create_neighborhood_from(FLGR_Data2D *nhbsrc);

extern FLGR_Data1D *flgr1d_create_fgUINT16(int length, int spp, FLGR_Shape shape);

extern FLGR_Data2D *flgr2d_create_fgUINT16(int size_y, int size_x, int spp, FLGR_Shape shape, FLGR_Connexity connexity);

extern FLGR_Data2D *flgr2d_create(int size_y, int size_x, int spp, FLGR_Type type, FLGR_Shape shape, FLGR_Connexity connexity);
extern FLGR_Data2D *flgr2d_create_neighborhood(int size_y, int size_x, int spp, FLGR_Type type, FLGR_Shape shape, FLGR_Connexity connexity);
extern int flgr_get_sizeof(FLGR_Type type);
extern FLGR_NhbBox2D *flgr2d_create_neighbor_box(FLGR_Data2D *data);
extern void flgr2d_get_neighborhood_fgUINT16(FLGR_NhbBox2D *extr, FLGR_Data2D *dat, FLGR_Data2D *nhb, int row, int col);

extern void flgr2d_apply_raster_scan_method_fgUINT16(FLGR_Data2D *nhb);

extern void flgr2d_raster_slide_window_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, const FLGR_ComputeNhb2D computeNhb);
extern void flgr2d_convolution_fgUINT16(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);


extern FLGR_Ret flgr2d_convolution(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb);

/* the test file */
extern int main(int argc, char *argv[]);
static fgBIT flgr1d_get_data_array_fgBIT(fgBIT *array, int pos)
{
   return flgr_get_array_fgBIT(array, pos);
}
static fgFLOAT32 flgr1d_get_data_array_fgFLOAT32(fgFLOAT32 *array, int pos)
{
   return flgr_get_array_fgFLOAT32(array, pos);
}
static fgFLOAT64 flgr1d_get_data_array_fgFLOAT64(fgFLOAT64 *array, int pos)
{
   return flgr_get_array_fgFLOAT64(array, pos);
}
static fgINT16 flgr1d_get_data_array_fgINT16(fgINT16 *array, int pos)
{
   return flgr_get_array_fgINT16(array, pos);
}
static fgINT32 flgr1d_get_data_array_fgINT32(fgINT32 *array, int pos)
{
   return flgr_get_array_fgINT32(array, pos);
}
static fgINT64 flgr1d_get_data_array_fgINT64(fgINT64 *array, int pos)
{
   return flgr_get_array_fgINT64(array, pos);
}
static fgINT8 flgr1d_get_data_array_fgINT8(fgINT8 *array, int pos)
{
   return flgr_get_array_fgINT8(array, pos);
}
static fgUINT16 flgr1d_get_data_array_fgUINT16(fgUINT16 *array, int pos)
{
   return flgr_get_array_fgUINT16(array, pos);
}
static fgUINT32 flgr1d_get_data_array_fgUINT32(fgUINT32 *array, int pos)
{
   return flgr_get_array_fgUINT32(array, pos);
}
static fgUINT64 flgr1d_get_data_array_fgUINT64(fgUINT64 *array, int pos)
{
   return flgr_get_array_fgUINT64(array, pos);
}
static fgUINT8 flgr1d_get_data_array_fgUINT8(fgUINT8 *array, int pos)
{
   return flgr_get_array_fgUINT8(array, pos);
}
static void flgr1d_set_data_array_fgBIT(fgBIT *array, int pos, fgBIT value)
{
   flgr_set_array_fgBIT(array, pos, value);
}
static void flgr1d_set_data_array_fgFLOAT32(fgFLOAT32 *array, int pos, fgFLOAT32 value)
{
   flgr_set_array_fgFLOAT32(array, pos, value);
}
static void flgr1d_set_data_array_fgFLOAT64(fgFLOAT64 *array, int pos, fgFLOAT64 value)
{
   flgr_set_array_fgFLOAT64(array, pos, value);
}
static void flgr1d_set_data_array_fgINT16(fgINT16 *array, int pos, fgINT16 value)
{
   flgr_set_array_fgINT16(array, pos, value);
}
static void flgr1d_set_data_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
   flgr_set_array_fgINT32(array, pos, value);
}
static void flgr1d_set_data_array_fgINT64(fgINT64 *array, int pos, fgINT64 value)
{
   flgr_set_array_fgINT64(array, pos, value);
}
static void flgr1d_set_data_array_fgINT8(fgINT8 *array, int pos, fgINT8 value)
{
   flgr_set_array_fgINT8(array, pos, value);
}
static void flgr1d_set_data_array_fgUINT16(fgUINT16 *array, int pos, fgUINT16 value)
{
   flgr_set_array_fgUINT16(array, pos, value);
}
static void flgr1d_set_data_array_fgUINT32(fgUINT32 *array, int pos, fgUINT32 value)
{
   flgr_set_array_fgUINT32(array, pos, value);
}
static void flgr1d_set_data_array_fgUINT64(fgUINT64 *array, int pos, fgUINT64 value)
{
   flgr_set_array_fgUINT64(array, pos, value);
}
static void flgr1d_set_data_array_fgUINT8(fgUINT8 *array, int pos, fgUINT8 value)
{
   flgr_set_array_fgUINT8(array, pos, value);
}
static fgBIT flgr2d_get_data_array_fgBIT(fgBIT **array, int row, int col)
{
   return flgr_get_array_fgBIT(array[row], col);
}
static fgFLOAT32 flgr2d_get_data_array_fgFLOAT32(fgFLOAT32 **array, int row, int col)
{
   return flgr_get_array_fgFLOAT32(array[row], col);
}
static fgFLOAT64 flgr2d_get_data_array_fgFLOAT64(fgFLOAT64 **array, int row, int col)
{
   return flgr_get_array_fgFLOAT64(array[row], col);
}
static fgINT16 flgr2d_get_data_array_fgINT16(fgINT16 **array, int row, int col)
{
   return flgr_get_array_fgINT16(array[row], col);
}
static fgINT32 flgr2d_get_data_array_fgINT32(fgINT32 **array, int row, int col)
{
   return flgr_get_array_fgINT32(array[row], col);
}
static fgINT8 flgr2d_get_data_array_fgINT8(fgINT8 **array, int row, int col)
{
   return flgr_get_array_fgINT8(array[row], col);
}
static fgUINT16 flgr2d_get_data_array_fgUINT16(fgUINT16 **array, int row, int col)
{
   return flgr_get_array_fgUINT16(array[row], col);
}
static fgUINT32 flgr2d_get_data_array_fgUINT32(fgUINT32 **array, int row, int col)
{
   return flgr_get_array_fgUINT32(array[row], col);
}
static fgUINT8 flgr2d_get_data_array_fgUINT8(fgUINT8 **array, int row, int col)
{
   return flgr_get_array_fgUINT8(array[row], col);
}
static void flgr2d_set_data_array_fgBIT(fgBIT **array, int row, int col, fgBIT value)
{
   flgr_set_array_fgBIT(array[row], col, value);
}
static void flgr2d_set_data_array_fgFLOAT32(fgFLOAT32 **array, int row, int col, fgFLOAT32 value)
{
   flgr_set_array_fgFLOAT32(array[row], col, value);
}
static void flgr2d_set_data_array_fgFLOAT64(fgFLOAT64 **array, int row, int col, fgFLOAT64 value)
{
   flgr_set_array_fgFLOAT64(array[row], col, value);
}
static void flgr2d_set_data_array_fgINT16(fgINT16 **array, int row, int col, fgINT16 value)
{
   flgr_set_array_fgINT16(array[row], col, value);
}
static void flgr2d_set_data_array_fgINT32(fgINT32 **array, int row, int col, fgINT32 value)
{
   flgr_set_array_fgINT32(array[row], col, value);
}
static void flgr2d_set_data_array_fgINT8(fgINT8 **array, int row, int col, fgINT8 value)
{
   flgr_set_array_fgINT8(array[row], col, value);
}
static void flgr2d_set_data_array_fgUINT16(fgUINT16 **array, int row, int col, fgUINT16 value)
{
   flgr_set_array_fgUINT16(array[row], col, value);
}
static void flgr2d_set_data_array_fgUINT32(fgUINT32 **array, int row, int col, fgUINT32 value)
{
   flgr_set_array_fgUINT32(array[row], col, value);
}
static void flgr2d_set_data_array_fgUINT8(fgUINT8 **array, int row, int col, fgUINT8 value)
{
   flgr_set_array_fgUINT8(array[row], col, value);
}
static fgUINT16 flgr_defop_mult_fgUINT16(fgUINT16 a, fgUINT16 b)
{
   return a*b;
}
static fgUINT16 flgr_defop_sup_fgUINT16(fgUINT16 a, fgUINT16 b)
{
   return a<b?b:a;
}
static fgBIT flgr_get_array_fgBIT(fgBIT *array, int pos)
{
   fgBIT val;
   fgBIT mask = 0;
   int vectorbps = sizeof(fgBIT)<<3;
   int vectorSelect;
   int pixinVector;
   int nbdec;

   vectorSelect = pos/vectorbps;
   pixinVector = pos%vectorbps;

   nbdec = vectorbps-(fgBIT) 1-pixinVector;
   mask = (fgBIT) 1<<nbdec;

   val = array[vectorSelect];
   val &= mask;
   val = val>>nbdec;
   return val;
}
static fgFLOAT32 flgr_get_array_fgFLOAT32(fgFLOAT32 *array, int pos)
{
   return array[pos];
}
static fgFLOAT64 flgr_get_array_fgFLOAT64(fgFLOAT64 *array, int pos)
{
   return array[pos];
}
static fgINT16 flgr_get_array_fgINT16(fgINT16 *array, int pos)
{
   return array[pos];
}
static fgINT32 flgr_get_array_fgINT32(fgINT32 *array, int pos)
{
   return array[pos];
}
static fgINT64 flgr_get_array_fgINT64(fgINT64 *array, int pos)
{
   return array[pos];
}
static fgINT8 flgr_get_array_fgINT8(fgINT8 *array, int pos)
{
   return array[pos];
}
static fgUINT16 flgr_get_array_fgUINT16(fgUINT16 *array, int pos)
{
   return array[pos];
}
static fgUINT32 flgr_get_array_fgUINT32(fgUINT32 *array, int pos)
{
   return array[pos];
}
static fgUINT64 flgr_get_array_fgUINT64(fgUINT64 *array, int pos)
{
   return array[pos];
}
static fgUINT8 flgr_get_array_fgUINT8(fgUINT8 *array, int pos)
{
   return array[pos];
}
static void flgr_get_data_array_vector_fgBIT(fgBIT *vector_array, fgBIT *data_array, int spp, int pos)
{
   register fgBIT val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgBIT(data_array, i);
      flgr_set_array_fgBIT(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgFLOAT32(fgFLOAT32 *vector_array, fgFLOAT32 *data_array, int spp, int pos)
{
   register fgFLOAT32 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgFLOAT32(data_array, i);
      flgr_set_array_fgFLOAT32(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgFLOAT64(fgFLOAT64 *vector_array, fgFLOAT64 *data_array, int spp, int pos)
{
   register fgFLOAT64 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgFLOAT64(data_array, i);
      flgr_set_array_fgFLOAT64(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgINT16(fgINT16 *vector_array, fgINT16 *data_array, int spp, int pos)
{
   register fgINT16 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgINT16(data_array, i);
      flgr_set_array_fgINT16(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgINT32(fgINT32 *vector_array, fgINT32 *data_array, int spp, int pos)
{
   register fgINT32 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgINT32(data_array, i);
      flgr_set_array_fgINT32(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgINT8(fgINT8 *vector_array, fgINT8 *data_array, int spp, int pos)
{
   register fgINT8 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgINT8(data_array, i);
      flgr_set_array_fgINT8(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgUINT16(fgUINT16 *vector_array, fgUINT16 *data_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT16(data_array, i);
      flgr_set_array_fgUINT16(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgUINT32(fgUINT32 *vector_array, fgUINT32 *data_array, int spp, int pos)
{
   register fgUINT32 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT32(data_array, i);
      flgr_set_array_fgUINT32(vector_array, k, val);
      i++;
   }
}
static void flgr_get_data_array_vector_fgUINT8(fgUINT8 *vector_array, fgUINT8 *data_array, int spp, int pos)
{
   register fgUINT8 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT8(data_array, i);
      flgr_set_array_fgUINT8(vector_array, k, val);
      i++;
   }
}
static void flgr_set_array_fgBIT(fgBIT *array, int pos, fgBIT value)
{
   fgBIT val;
   fgBIT mask = 0;
   int vectorbps = sizeof(fgBIT)<<3;
   int vectorSelect;
   int pixinVector;
   int nbdec;

   vectorSelect = pos/vectorbps;
   pixinVector = pos%vectorbps;

   nbdec = vectorbps-(fgBIT) 1-pixinVector;
   mask = (fgBIT) 1<<nbdec;

   val = array[vectorSelect];
   val &= ~mask;
   value = (value&(fgBIT) 1)<<nbdec;
   val |= value;

   array[vectorSelect] = val;
}
static void flgr_set_array_fgFLOAT32(fgFLOAT32 *array, int pos, fgFLOAT32 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgFLOAT64(fgFLOAT64 *array, int pos, fgFLOAT64 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgINT16(fgINT16 *array, int pos, fgINT16 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgINT64(fgINT64 *array, int pos, fgINT64 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgINT8(fgINT8 *array, int pos, fgINT8 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgUINT16(fgUINT16 *array, int pos, fgUINT16 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgUINT32(fgUINT32 *array, int pos, fgUINT32 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgUINT64(fgUINT64 *array, int pos, fgUINT64 value)
{
   array[pos] = value;
}
static void flgr_set_array_fgUINT8(fgUINT8 *array, int pos, fgUINT8 value)
{
   array[pos] = value;
}
static void flgr_set_data_array_vector_fgBIT(fgBIT *data_array, fgBIT *vector_array, int spp, int pos)
{
   register fgBIT val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgBIT(vector_array, k);
      flgr_set_array_fgBIT(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgFLOAT32(fgFLOAT32 *data_array, fgFLOAT32 *vector_array, int spp, int pos)
{
   register fgFLOAT32 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgFLOAT32(vector_array, k);
      flgr_set_array_fgFLOAT32(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgFLOAT64(fgFLOAT64 *data_array, fgFLOAT64 *vector_array, int spp, int pos)
{
   register fgFLOAT64 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgFLOAT64(vector_array, k);
      flgr_set_array_fgFLOAT64(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgINT16(fgINT16 *data_array, fgINT16 *vector_array, int spp, int pos)
{
   register fgINT16 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgINT16(vector_array, k);
      flgr_set_array_fgINT16(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgINT32(fgINT32 *data_array, fgINT32 *vector_array, int spp, int pos)
{
   register fgINT32 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgINT32(vector_array, k);
      flgr_set_array_fgINT32(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgINT8(fgINT8 *data_array, fgINT8 *vector_array, int spp, int pos)
{
   register fgINT8 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgINT8(vector_array, k);
      flgr_set_array_fgINT8(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgUINT16(fgUINT16 *data_array, fgUINT16 *vector_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT16(vector_array, k);
      flgr_set_array_fgUINT16(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgUINT32(fgUINT32 *data_array, fgUINT32 *vector_array, int spp, int pos)
{
   register fgUINT32 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT32(vector_array, k);
      flgr_set_array_fgUINT32(data_array, i, val);
      i++;
   }
}
static void flgr_set_data_array_vector_fgUINT8(fgUINT8 *data_array, fgUINT8 *vector_array, int spp, int pos)
{
   register fgUINT8 val;
   register int i, k;
   i = pos*spp;

   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT8(vector_array, k);
      flgr_set_array_fgUINT8(data_array, i, val);
      i++;
   }
}
int main(int argc, char *argv[])
{
   
   
   
   
   
   
   
   
   fgUINT16 rawsrc[] = {105, 115, 28, 41, 41, 48, 54, 57, 62, 70, 72, 76, 75, 76, 76, 78, 75, 77, 78, 76, 75, 79, 77, 76, 77, 73, 71, 64, 62, 55, 50, 44, 42, 32, 123, 112, 100, 88, 82, 73, 73, 76, 76, 81, 85, 86, 90, 90, 93, 92, 91, 96, 96, 100, 96, 98, 98, 97, 102, 99, 98, 96, 99, 102, 98, 93, 100, 99, 94, 96, 94, 90, 88, 87, 88, 88, 85, 87, 35, 5};
   
   
   
   
   
   
   
   
   fgUINT16 rawref[] = {92, 78, 68, 56, 60, 62, 64, 67, 70, 71, 87, 78, 71, 63, 65, 65, 66, 66, 66, 67, 66, 65, 64, 72, 80, 87, 82, 77, 72, 71, 66, 65, 64, 74, 82, 90, 86, 82, 77, 76, 71, 71, 71, 81, 90, 98, 95, 93, 90, 90, 88, 89, 91, 92, 93, 93, 94, 95, 95, 96, 94, 94, 94, 94, 94, 93, 93, 88, 79, 71, 94, 94, 93, 93, 92, 92, 92, 83, 69, 57};

   FLGR_Data2D *imgsrc, *imgref, *img, *nhb;
   FLGR_Ret ret;

   imgsrc = flgr2d_create_pixmap(8, 10, 1, flgr_get_type_from_string("fgUINT16"));
   imgref = flgr2d_create_pixmap(8, 10, 1, flgr_get_type_from_string("fgUINT16"));
   img = flgr2d_create_pixmap(8, 10, 1, flgr_get_type_from_string("fgUINT16"));
   
   
   nhb = flgr2d_create_neighborhood(3, 3, 1, flgr_get_type_from_string("fgUINT16"), FLGR_RECT, FLGR_8_CONNEX);

   flgr2d_import_raw_ptr(imgsrc, rawsrc);
   flgr2d_import_raw_ptr(imgref, rawref);
   
   
   ret = flgr2d_convolution(img, imgsrc, nhb);
   
   /*check_and_display_data2d(imgref,img,ret);				*/
   
   flgr2d_destroy(imgsrc);
   flgr2d_destroy(imgref);
   flgr2d_destroy(img);
   flgr2d_destroy(nhb);

   return 1;
}
FLGR_Ret flgr2d_convolution(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb)
{
   FLGR_Ret ret;
   if (datdest==(void *) 0||datsrc==(void *) 0||nhb==(void *) 0) {
      fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Null objects!\n", "./fulguro-included.h", 1792, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__))!=FLGR_RET_OK) 
      return ret;

   if (datdest->type==FLGR_UINT16) {
      {
         //PIPS generated variable
         FLGR_Data2D *datdest = datdest, *datsrc = datsrc, *nhb = nhb;

         flgr2d_raster_slide_window_fgUINT16(datdest, datsrc, nhb, FLGR_NHB_NO_SYM, flgr2d_get_nhb_convolution_fgUINT16);
      }
   }
}
fgUINT16 flgr_get_array_fgUINT16(fgUINT16 *array, int pos)
{
   return array[pos];
}
void flgr2d_native_dilate_4_connexity_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Data2D *nhbcopy;
   fgUINT16 **seodd;
   fgUINT16 **seeven;
   fgUINT16 **se;
   int i, j;
   int k, l;
   int m, n;
   fgUINT16 valse;
   FLGR_Vector *vecPixValue = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecPixMax = flgr_vector_create(nhb->spp, nhb->type);
   FLGR_Vector *vecSeValue = flgr_vector_create(nhb->spp, nhb->type);
   nhbcopy = flgr2d_create_from(nhb);
   flgr2d_copy(nhbcopy, nhb);
   seodd = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seodd[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seodd[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven = (fgUINT16 **) flgr_malloc(sizeof(fgUINT16 *)*3);
   seeven[0] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[1] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   seeven[2] = (fgUINT16 *) flgr_malloc(sizeof(fgUINT16)*3);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 0, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 0, 2, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 0, 0);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seodd, 2, 2, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 0, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 0, 2, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 0, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 1, 2, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 0, 0);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 1, 1);
   flgr2d_set_data_array_fgUINT16(seeven, 2, 2, 0);
   for(i = 0; i <= nhb->size_y-1; i += 1)
      for(j = 0; j <= nhb->size_x-1; j += 1) {
         flgr_vector_populate_from_scalar_fgUINT16(vecPixMax, 0);
         m = 0;
         for(k = i-1; k <= i+1; k += 1) {
            if (k>=0&&k<nhb->size_y) {
               n = 0;
               for(l = j-1; l <= j+1; l += 1) {
                  if (l>=0&&l<nhb->size_x) {
                     se = i%2==1?seodd:seeven;
                     valse = flgr2d_get_data_array_fgUINT16(se, m, n);
                     flgr_vector_populate_from_scalar_fgUINT16(vecSeValue, valse);
                     flgr2d_get_data_vector_no_norm_fgUINT16(nhbcopy, k, l, vecPixValue);
                     flgr_vector_mult_fgUINT16(vecPixValue, vecPixValue, vecSeValue);
                     flgr_vector_sup_fgUINT16(vecPixMax, vecPixMax, vecPixValue);
                  }
                  n++;
               }
            }
            m++;
         }
         flgr2d_set_data_vector_fgUINT16(nhb, i, j, vecPixMax);
      }
   flgr_vector_destroy(vecPixValue);
   flgr_vector_destroy(vecPixMax);
   flgr_vector_destroy(vecSeValue);
   flgr2d_destroy(nhbcopy);
   flgr_free(seodd[0]);
   flgr_free(seodd[1]);
   flgr_free(seodd[2]);
   flgr_free(seodd);
   flgr_free(seeven[0]);
   flgr_free(seeven[1]);
   flgr_free(seeven[2]);
   flgr_free(seeven);
   return;
}
void flgr2d_raster_slide_window_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, const FLGR_ComputeNhb2D computeNhb)
{
   int i, j, w, h, spp = imgsrc->spp;
   fgUINT16 *vector_array;
   fgUINT16 *data_array;
   FLGR_Vector *result;
   FLGR_Data2D *nhbEven, *nhbOdd, *nhbrs;
   FLGR_NhbBox2D *extr;
   //PIPS generated variable
   void **P_39;
   //PIPS generated variable
   unsigned short _return0, _return1, _return2;
   w = imgsrc->size_x;
   h = imgsrc->size_y;
   result = flgr_vector_create(imgsrc->spp, imgsrc->type);
   vector_array = (fgUINT16 *) result->array;
   extr = flgr2d_create_neighbor_box(nhb);
   nhbEven = flgr2d_create_neighborhood_from(nhb);
   nhbOdd = flgr2d_create_neighborhood_from(nhb);
   flgr2d_fill_nhbs_for_6_connexity(nhbEven, nhbOdd, nhb, nhb_sym);
   if (imgdest==imgsrc) {
      flgr2d_apply_raster_scan_method_fgUINT16(nhbOdd);
      flgr2d_apply_raster_scan_method_fgUINT16(nhbEven);
   }
   for(i = 0; i <= h-1; i += 1) {
      P_39 = imgdest->array;
      data_array = (fgUINT16 *) P_39[i];
      for(j = 0; j <= w-1; j += 1) {
         nhbrs = i%2==1?nhbOdd:nhbEven;
         {
            int i_, j_, m;
            int k, l, n;
            int nbrow, nbcol;
            int startrow, stoprow;
            int startcol, stopcol;
            int nhbsize_xdiv2;
            int nhbsize_ydiv2;
            int spp;
            fgUINT16 **pnhb;
            fgUINT16 **pdat;
            fgUINT16 *list_data;
            fgUINT16 *list_nhb;
            int *list_coord_x;
            int *list_coord_y;
            int *size;
            fgUINT16 nhb_val, data_val;
            //PIPS generated variable
            void **P_21;
            //PIPS generated variable
            void **P_22;
            //PIPS generated variable
            void **P_23;
            //PIPS generated variable
            void **P_24;
            //PIPS generated variable
            int **P_25, **P_26;
            spp = imgsrc->spp;
            pnhb = (fgUINT16 **) nhbrs->array;
            pdat = (fgUINT16 **) imgsrc->array;
            size = extr->size;
            nhbsize_xdiv2 = nhbrs->size_x>>1;
            nhbsize_ydiv2 = nhbrs->size_y>>1;
            nbrow = imgsrc->size_y;
            nbcol = imgsrc->size_x;
            extr->center_coord_y = i;
            extr->center_coord_x = j;
            startrow = i-nhbsize_ydiv2;
            startrow = startrow<0?0:startrow;
            stoprow = i+nhbsize_ydiv2;
            stoprow = stoprow>=nbrow?nbrow-1:stoprow;
            startcol = j-nhbsize_xdiv2;
            startcol = startcol<0?0:startcol;
            stopcol = j+nhbsize_xdiv2;
            stopcol = stopcol>=nbcol?nbcol-1:stopcol;
            P_21 = imgsrc->array;
            flgr_get_data_array_vector_fgUINT16((fgUINT16 *) extr->center_data_val->array, (fgUINT16 *) P_21[i], spp, j);
            P_22 = nhbrs->array;
            flgr_get_data_array_vector_fgUINT16((fgUINT16 *) extr->center_nhb_val->array, (fgUINT16 *) P_22[nhbsize_ydiv2], spp, nhbsize_xdiv2);
            for(n = 0; n <= spp-1; n += 1) {
               P_23 = extr->list_data_val;
               list_data = (fgUINT16 *) P_23[n];
               P_24 = extr->list_nhb_val;
               list_nhb = (fgUINT16 *) P_24[n];
               P_25 = extr->list_coord_x;
               list_coord_x = (int *) P_25[n];
               P_26 = extr->list_coord_y;
               list_coord_y = (int *) P_26[n];
               m = 0;
               k = startrow-i+nhbsize_ydiv2;
               for(i_ = startrow; i_ <= stoprow; i_ += 1) {
                  l = startcol-j+nhbsize_xdiv2;
                  for(j_ = startcol; j_ <= stopcol; j_ += 1) {
                     {
                        //PIPS generated variable
                        int I_2 = l*spp+n;
                        {
                           //PIPS generated variable
                           unsigned short _return0;
                           {
                              //PIPS generated variable
                              fgUINT16 *P_40;
                              P_40 = pnhb[k];
                              _return0 = P_40[I_2];
                           }
                           _return1 = _return0;
                        }
                     }
                     nhb_val = _return1;
                     if (nhb_val!=0) {
                        {
                           //PIPS generated variable
                           int I_3 = j_*spp+n;
                           {
                              //PIPS generated variable
                              unsigned short _return0;
                              {
                                 //PIPS generated variable
                                 fgUINT16 *P_40;
                                 P_40 = pdat[i_];
                                 _return0 = P_40[I_3];
                              }
                              _return2 = _return0;
                           }
                        }
                        data_val = _return2;
                        list_coord_x[m] = l;
                        list_coord_y[m] = k;
                        list_data[m] = data_val;
                        list_nhb[m] = nhb_val;
                        m++;
                     }
                     l++;
                  }
                  k++;
               }
               size[n] = m;
            }
         }
         (*computeNhb)(result,extr);
         {
            register fgUINT16 val;
            register int i, k;
            i = j*spp;

            for(k = 0; k <= spp-1; k += 1) {
               _return0 = vector_array[k];
               val = _return0;
               data_array[i] = val;
               i++;
            }
         }
      }
   }
   flgr2d_destroy(nhbOdd);
   flgr2d_destroy(nhbEven);
   flgr2d_destroy_neighbor_box(extr);
   flgr_vector_destroy(result);
   return;
}
void flgr2d_raster_slide_window_fgUINT16(FLGR_Data2D *imgdest, FLGR_Data2D *imgsrc, FLGR_Data2D *nhb, int nhb_sym, const FLGR_ComputeNhb2D computeNhb)
{
   int i, j, w, h, spp = imgsrc->spp;
   fgUINT16 *vector_array;
   fgUINT16 *data_array;
   FLGR_Vector *result;
   FLGR_Data2D *nhbEven, *nhbOdd, *nhbrs;
   FLGR_NhbBox2D *extr;
   //PIPS generated variable
   void **P_39;
   //PIPS generated variable
   unsigned short _return0, _return1, _return2;
   w = imgsrc->size_x;
   h = imgsrc->size_y;
   result = flgr_vector_create(imgsrc->spp, imgsrc->type);
   vector_array = (fgUINT16 *) result->array;
   extr = flgr2d_create_neighbor_box(nhb);
   nhbEven = flgr2d_create_neighborhood_from(nhb);
   nhbOdd = flgr2d_create_neighborhood_from(nhb);
   flgr2d_fill_nhbs_for_6_connexity(nhbEven, nhbOdd, nhb, nhb_sym);
   if (imgdest==imgsrc) {
      flgr2d_apply_raster_scan_method_fgUINT16(nhbOdd);
      flgr2d_apply_raster_scan_method_fgUINT16(nhbEven);
   }
   for(i = 0; i <= h-1; i += 1) {
      P_39 = imgdest->array;
      data_array = (fgUINT16 *) P_39[i];
      for(j = 0; j <= w-1; j += 1) {
         nhbrs = i%2==1?nhbOdd:nhbEven;
         {
            int i_, j_, m;
            int k, l, n;
            int nbrow, nbcol;
            int startrow, stoprow;
            int startcol, stopcol;
            int nhbsize_xdiv2;
            int nhbsize_ydiv2;
            int spp;
            fgUINT16 **pnhb;
            fgUINT16 **pdat;
            fgUINT16 *list_data;
            fgUINT16 *list_nhb;
            int *list_coord_x;
            int *list_coord_y;
            int *size;
            fgUINT16 nhb_val, data_val;
            //PIPS generated variable
            void **P_21;
            //PIPS generated variable
            void **P_22;
            //PIPS generated variable
            void **P_23;
            //PIPS generated variable
            void **P_24;
            //PIPS generated variable
            int **P_25, **P_26;
            spp = imgsrc->spp;
            pnhb = (fgUINT16 **) nhbrs->array;
            pdat = (fgUINT16 **) imgsrc->array;
            size = extr->size;
            nhbsize_xdiv2 = nhbrs->size_x>>1;
            nhbsize_ydiv2 = nhbrs->size_y>>1;
            nbrow = imgsrc->size_y;
            nbcol = imgsrc->size_x;
            extr->center_coord_y = i;
            extr->center_coord_x = j;
            startrow = i-nhbsize_ydiv2;
            startrow = startrow<0?0:startrow;
            stoprow = i+nhbsize_ydiv2;
            stoprow = stoprow>=nbrow?nbrow-1:stoprow;
            startcol = j-nhbsize_xdiv2;
            startcol = startcol<0?0:startcol;
            stopcol = j+nhbsize_xdiv2;
            stopcol = stopcol>=nbcol?nbcol-1:stopcol;
            P_21 = imgsrc->array;
            {
               //PIPS generated variable
               fgUINT16 *P_47 = extr->center_data_val->array, *P_48 = P_21[i];
               {
                  register fgUINT16 val;
                  register int i, k;
                  //PIPS generated variable
                  unsigned short _return0;
                  i = j*spp;

                  for(k = 0; k <= spp-1; k += 1) {
                     _return0 = P_48[i];
                     val = _return0;
                     P_47[k] = val;
                     i++;
                  }
               }
            }
            P_22 = nhbrs->array;
            {
               //PIPS generated variable
               fgUINT16 *P_49 = extr->center_nhb_val->array, *P_50 = P_22[nhbsize_ydiv2];
               {
                  register fgUINT16 val;
                  register int i, k;
                  //PIPS generated variable
                  unsigned short _return0;
                  i = nhbsize_xdiv2*spp;

                  for(k = 0; k <= spp-1; k += 1) {
                     _return0 = P_50[i];
                     val = _return0;
                     P_49[k] = val;
                     i++;
                  }
               }
            }
            for(n = 0; n <= spp-1; n += 1) {
               P_23 = extr->list_data_val;
               list_data = (fgUINT16 *) P_23[n];
               P_24 = extr->list_nhb_val;
               list_nhb = (fgUINT16 *) P_24[n];
               P_25 = extr->list_coord_x;
               list_coord_x = (int *) P_25[n];
               P_26 = extr->list_coord_y;
               list_coord_y = (int *) P_26[n];
               m = 0;
               k = startrow-i+nhbsize_ydiv2;
               for(i_ = startrow; i_ <= stoprow; i_ += 1) {
                  l = startcol-j+nhbsize_xdiv2;
                  for(j_ = startcol; j_ <= stopcol; j_ += 1) {
                     {
                        //PIPS generated variable
                        int I_2 = l*spp+n;
                        {
                           //PIPS generated variable
                           unsigned short _return0;
                           {
                              //PIPS generated variable
                              fgUINT16 *P_40;
                              P_40 = pnhb[k];
                              _return0 = P_40[I_2];
                           }
                           _return1 = _return0;
                        }
                     }
                     nhb_val = _return1;
                     if (nhb_val!=0) {
                        {
                           //PIPS generated variable
                           int I_3 = j_*spp+n;
                           {
                              //PIPS generated variable
                              unsigned short _return0;
                              {
                                 //PIPS generated variable
                                 fgUINT16 *P_40;
                                 P_40 = pdat[i_];
                                 _return0 = P_40[I_3];
                              }
                              _return2 = _return0;
                           }
                        }
                        data_val = _return2;
                        list_coord_x[m] = l;
                        list_coord_y[m] = k;
                        list_data[m] = data_val;
                        list_nhb[m] = nhb_val;
                        m++;
                     }
                     l++;
                  }
                  k++;
               }
               size[n] = m;
            }
         }
         (*computeNhb)(result,extr);
         {
            register fgUINT16 val;
            register int i, k;
            i = j*spp;

            for(k = 0; k <= spp-1; k += 1) {
               _return0 = vector_array[k];
               val = _return0;
               data_array[i] = val;
               i++;
            }
         }
      }
   }
   flgr2d_destroy(nhbOdd);
   flgr2d_destroy(nhbEven);
   flgr2d_destroy_neighbor_box(extr);
   flgr_vector_destroy(result);
   return;
}
void flgr2d_get_nhb_convolution_fgUINT16(FLGR_Vector *result, FLGR_NhbBox2D *extr)
{
   int i, k;
   int spp = extr->spp;
   fgUINT16 *presult = (fgUINT16 *) result->array;
   fgUINT16 *list_data_val;
   fgUINT16 *list_nhb_val;
   int *size = extr->size;
   fgFLOAT64 a, b, sum;
   fgFLOAT64 tmp;
   //PIPS generated variable
   void **P_27;
   //PIPS generated variable
   void **P_28;
   for(k = 0; k <= spp-1; k += 1) {
      P_27 = extr->list_data_val;
      list_data_val = (fgUINT16 *) P_27[k];
      P_28 = extr->list_nhb_val;
      list_nhb_val = (fgUINT16 *) P_28[k];
      tmp = 0;
      sum = 0;
      for(i = 0; i <= size[k]-1; i += 1) {
         a = (fgFLOAT64) list_data_val[i];
         b = (fgFLOAT64) list_nhb_val[i];
         tmp = tmp+a*b;
         sum = sum+fabs(b);
      }
      if (sum!=0) {
         {
            //PIPS generated variable
            fgUINT16 I_1 = tmp/sum;
            presult[k] = I_1;
         }
      }
   }
   return;
}
FLGR_Ret flgr2d_convolution(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb)
{
   FLGR_Ret ret;
   if (datdest==(void *) 0||datsrc==(void *) 0||nhb==(void *) 0) {
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function %s: ", "./fulguro-included.h", 1792, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__))!=FLGR_RET_OK) 
      return ret;

   if (datdest->type==FLGR_UINT16) {
      {
         //PIPS generated variable
         FLGR_Data2D *datdest = datdest, *datsrc = datsrc, *nhb = nhb;
         {
            //PIPS generated variable
            FLGR_Data2D *imgdest = datdest, *imgsrc = datsrc, *nhb = nhb;
            //PIPS generated variable
            int nhb_sym = FLGR_NHB_NO_SYM;
            //PIPS generated variable
            const FLGR_ComputeNhb2D computeNhb = flgr2d_get_nhb_convolution_fgUINT16;
            {
               int i, j, w, h, spp;
               fgUINT16 *vector_array;
               fgUINT16 *data_array;
               FLGR_Vector *result;
               FLGR_Data2D *nhbEven, *nhbOdd, *nhbrs;
               FLGR_NhbBox2D *extr;
               //PIPS generated variable
               void **P_39;
               //PIPS generated variable
               unsigned short _return0, _return1, _return2;
               spp = imgsrc->spp;
               w = imgsrc->size_x;
               h = imgsrc->size_y;
               result = flgr_vector_create(imgsrc->spp, imgsrc->type);
               vector_array = (fgUINT16 *) result->array;
               extr = flgr2d_create_neighbor_box(nhb);
               nhbEven = flgr2d_create_neighborhood_from(nhb);
               nhbOdd = flgr2d_create_neighborhood_from(nhb);
               flgr2d_fill_nhbs_for_6_connexity(nhbEven, nhbOdd, nhb, nhb_sym);
               if (imgdest==imgsrc) {
                  flgr2d_apply_raster_scan_method_fgUINT16(nhbOdd);
                  flgr2d_apply_raster_scan_method_fgUINT16(nhbEven);
               }
               for(i = 0; i <= h-1; i += 1) {
                  P_39 = imgdest->array;
                  data_array = (fgUINT16 *) P_39[i];
                  for(j = 0; j <= w-1; j += 1) {
                     nhbrs = i%2==1?nhbOdd:nhbEven;
                     {
                        int i_, j_, m;
                        int k, l, n;
                        int nbrow, nbcol;
                        int startrow, stoprow;
                        int startcol, stopcol;
                        int nhbsize_xdiv2;
                        int nhbsize_ydiv2;
                        int spp;
                        fgUINT16 **pnhb;
                        fgUINT16 **pdat;
                        fgUINT16 *list_data;
                        fgUINT16 *list_nhb;
                        int *list_coord_x;
                        int *list_coord_y;
                        int *size;
                        fgUINT16 nhb_val, data_val;
                        //PIPS generated variable
                        void **P_21;
                        //PIPS generated variable
                        void **P_22;
                        //PIPS generated variable
                        void **P_23;
                        //PIPS generated variable
                        void **P_24;
                        //PIPS generated variable
                        int **P_25, **P_26;
                        spp = imgsrc->spp;
                        pnhb = (fgUINT16 **) nhbrs->array;
                        pdat = (fgUINT16 **) imgsrc->array;
                        size = extr->size;
                        nhbsize_xdiv2 = nhbrs->size_x>>1;
                        nhbsize_ydiv2 = nhbrs->size_y>>1;
                        nbrow = imgsrc->size_y;
                        nbcol = imgsrc->size_x;
                        extr->center_coord_y = i;
                        extr->center_coord_x = j;
                        startrow = i-nhbsize_ydiv2;
                        startrow = startrow<0?0:startrow;
                        stoprow = i+nhbsize_ydiv2;
                        stoprow = stoprow>=nbrow?nbrow-1:stoprow;
                        startcol = j-nhbsize_xdiv2;
                        startcol = startcol<0?0:startcol;
                        stopcol = j+nhbsize_xdiv2;
                        stopcol = stopcol>=nbcol?nbcol-1:stopcol;
                        P_21 = imgsrc->array;
                        {
                           //PIPS generated variable
                           fgUINT16 *P_47, *P_48;
                           P_47 = extr->center_data_val->array;
                           P_48 = P_21[i];
                           {
                              register fgUINT16 val;
                              register int i, k;
                              //PIPS generated variable
                              unsigned short _return0;
                              i = j*spp;

                              for(k = 0; k <= spp-1; k += 1) {
                                 _return0 = P_48[i];
                                 val = _return0;
                                 P_47[k] = val;
                                 i++;
                              }
                           }
                        }
                        P_22 = nhbrs->array;
                        {
                           //PIPS generated variable
                           fgUINT16 *P_49, *P_50;
                           P_49 = extr->center_nhb_val->array;
                           P_50 = P_22[nhbsize_ydiv2];
                           {
                              register fgUINT16 val;
                              register int i, k;
                              //PIPS generated variable
                              unsigned short _return0;
                              i = nhbsize_xdiv2*spp;

                              for(k = 0; k <= spp-1; k += 1) {
                                 _return0 = P_50[i];
                                 val = _return0;
                                 P_49[k] = val;
                                 i++;
                              }
                           }
                        }
                        for(n = 0; n <= spp-1; n += 1) {
                           P_23 = extr->list_data_val;
                           list_data = (fgUINT16 *) P_23[n];
                           P_24 = extr->list_nhb_val;
                           list_nhb = (fgUINT16 *) P_24[n];
                           P_25 = extr->list_coord_x;
                           list_coord_x = (int *) P_25[n];
                           P_26 = extr->list_coord_y;
                           list_coord_y = (int *) P_26[n];
                           m = 0;
                           k = startrow-i+nhbsize_ydiv2;
                           for(i_ = startrow; i_ <= stoprow; i_ += 1) {
                              l = startcol-j+nhbsize_xdiv2;
                              for(j_ = startcol; j_ <= stopcol; j_ += 1) {
                                 {
                                    //PIPS generated variable
                                    int I_2;
                                    I_2 = l*spp+n;
                                    {
                                       //PIPS generated variable
                                       unsigned short _return0;
                                       {
                                          //PIPS generated variable
                                          fgUINT16 *P_40;
                                          P_40 = pnhb[k];
                                          _return0 = P_40[I_2];
                                       }
                                       _return1 = _return0;
                                    }
                                 }
                                 nhb_val = _return1;
                                 if (nhb_val!=0) {
                                    {
                                       //PIPS generated variable
                                       int I_3;
                                       I_3 = j_*spp+n;
                                       {
                                          //PIPS generated variable
                                          unsigned short _return0;
                                          {
                                          //PIPS generated variable
                                          fgUINT16 *P_40;
                                          P_40 = pdat[i_];
                                          _return0 = P_40[I_3];
                                          }
                                          _return2 = _return0;
                                       }
                                    }
                                    data_val = _return2;
                                    list_coord_x[m] = l;
                                    list_coord_y[m] = k;
                                    list_data[m] = data_val;
                                    list_nhb[m] = nhb_val;
                                    m++;
                                 }
                                 l++;
                              }
                              k++;
                           }
                           size[n] = m;
                        }
                     }
                     (*computeNhb)(result,extr);
                     {
                        register fgUINT16 val;
                        register int i, k;
                        i = j*spp;

                        for(k = 0; k <= spp-1; k += 1) {
                           _return0 = vector_array[k];
                           val = _return0;
                           data_array[i] = val;
                           i++;
                        }
                     }
                  }
               }
               flgr2d_destroy(nhbOdd);
               flgr2d_destroy(nhbEven);
               flgr2d_destroy_neighbor_box(extr);
               flgr_vector_destroy(result);
            }
         }
      }
   }
}
