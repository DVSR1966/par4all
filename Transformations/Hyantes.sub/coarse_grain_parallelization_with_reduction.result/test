static void do_run_AMORTIZED_DISK(data_t lonMin, data_t latMin, data_t lonStep, data_t latStep, data_t range, size_t lonRange, size_t latRange, size_t nb, hs_potential_t pt[latRange][lonRange], hs_potential_t t[nb], hs_config_t *config)
{
   data_t town_sum = 0.;
   data_t total_sum = 0.;
   config->status = 0;
   {
      size_t k;
      /*for each town, we shall calculate its contribution on the window */
      
      for(k = 0; k <= nb-1; k += 1) {
         data_t pot = t[k].pot;
         town_sum += pot;
         /* only process if it is relevant */
         if (pot>0) {
            /* contribution step: compute contribution of t[k] to the whole map */
            data_t sum = 0.;

            data_t latmax = acos(cos(t[k].lat)*cos(range/6368.)-fabs(sin(t[k].lat)*sin(range/6368.)));
            data_t latmin = acos(cos(t[k].lat)*cos(range/6368.)+fabs(sin(t[k].lat)*sin(range/6368.)));

            if (latmin>t[k].lat)
               latmin = 2*t[k].lat-latmin;
            long int imin = floor((latmin-latMin)/latStep);
            size_t imax = 1+ceil((latmax-latMin)/latStep);

            if (imin<0)
               imin = 0;
            if (imax>latRange)
               imax = latRange;
            data_t deltalon = acos((cos(range/6368)-pow(sin(t[k].lat), 2))/pow(cos(t[k].lat), 2));
            data_t lonmax = t[k].lon+deltalon;
            data_t lonmin = t[k].lon-deltalon;
            long int jmin = floor((lonmin-lonMin)/lonStep);
            size_t jmax = 1+ceil((lonmax-lonMin)/lonStep);

            if (jmin<0)
               jmin = 0;
            if (jmax>lonRange)
               jmax = lonRange;

            data_t contrib[imax-imin+1][jmax-jmin+1];
            {
               size_t i;

#pragma omp parallel for reduction(+:sum)
               for(i = imin; i <= imax-1; i += 1) {
                  size_t j;
#pragma omp parallel for reduction(+:sum)
                  for(j = jmin; j <= jmax-1; j += 1) {
                     data_t tmp = 6368.*acos(cos(latMin+latStep*i)*cos(t[k].lat)*(cos(lonMin+lonStep*j)*cos(t[k].lon)+sin(lonMin+lonStep*j)*sin(t[k].lon))+sin(latMin+latStep*i)*sin(t[k].lat));
                     /* if distance from town is within range, set contribution */
                     if (tmp<range) {
                        do {
                           contrib[i-imin][j-jmin] = pot/(1+tmp);
                        }
                        while (0);
                        sum += contrib[i-imin][j-jmin];
                     }
                     else
                        contrib[i-imin][j-jmin] = 0;
                  }
               }
            }
            
            /* normalization step: make sure pot is fully represented by its contributions */
            if (sum>0) {
               size_t i;
#pragma omp parallel for reduction(+:total_sum)
               for(i = imin; i <= imax-1; i += 1) {
                  size_t j;
#pragma omp parallel for reduction(+:total_sum)
                  for(j = jmin; j <= jmax-1; j += 1) {
                     data_t c = contrib[i-imin][j-jmin];
                     if (c>0) {
                        pt[i][j].pot += c*pot/sum;
                        total_sum += c*pot/sum;
                     }
                  }
               }
            }
         }
         config->status = (unsigned long int) k;
      }
   }

   if (fabs(town_sum-total_sum)>0.0001)
      fprintf(stderr, "Warning : information lost during processing, you may consider increasing the window resolution\n");
}
