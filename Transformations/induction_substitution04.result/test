
Initial code for "induction04"

void induction04(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = -1;
   int sum;
   for(i = 0; i <= SIZE-1; i += 1) {
      k = i;
      for(j = 0; j <= SIZE-1; j += 1) {
         sum = B[j-k][k]+A[k];
         A[k++] = sum;
      }
   }
}

Transformers for "induction04"


//  T() {}

void induction04(double A[SIZE], double B[SIZE][SIZE])
{

//  T(i,j) {}

   int i, j;

//  T(k) {k==-1}

   int k = -1;

//  T(sum) {}

   int sum;

//  T(i,j,k,sum) {i+1<=SIZE, 0<=i}

   for(i = 0; i <= SIZE-1; i += 1) {

//  T(k) {i==k}

      k = i;

//  T(j,k,sum) {j+k#init==k, j+1<=SIZE, k#init<=k}

      for(j = 0; j <= SIZE-1; j += 1) {

//  T(sum) {}

         sum = B[j-k][k]+A[k];

//  T(k) {k==k#init+1}

         A[k++] = sum;
      }
   }
}

Preconditions for "induction04"


//  P() {SIZE==10}

void induction04(double A[SIZE], double B[SIZE][SIZE])
{

//  P() {SIZE==10}

   int i, j;

//  P(i,j) {SIZE==10}

   int k = -1;

//  P(i,j,k) {SIZE==10, k==-1}

   int sum;

//  P(i,j,k,sum) {SIZE==10, k==-1}

   for(i = 0; i <= SIZE-1; i += 1) {

//  P(i,j,k,sum) {SIZE==10, 0<=i, i<=9}

      k = i;

//  P(i,j,k,sum) {SIZE==10, i==k, 0<=i, i<=9}

      for(j = 0; j <= SIZE-1; j += 1) {

//  P(i,j,k,sum) {SIZE==10, i+j==k, 0<=j, j<=9, k<=j+9, j<=k}

         sum = B[j-k][k]+A[k];

//  P(i,j,k,sum) {SIZE==10, i+j==k, 0<=j, j<=9, k<=j+9, j<=k}

         A[k++] = sum;
      }
   }
}

Code for "induction04" after induction substitution

void induction04(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = -1;
   int sum;
   for(i = 0; i <= SIZE-1; i += 1) {
      k = i;
      for(j = 0; j <= SIZE-1; j += 1) {
         sum = B[j-(-((-i)+(-j)))][-((-i)+(-j))]+A[-((-i)+(-j))];
         A[k = -((-i)+(-j))+1, k-1] = sum;
      }
   }
}
