
Initial code

void scalarization20(double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i;
   int j;
   for(i = 0; i <= SIZE-1; i += 1)
      for(j = 0; j <= SIZE-1; j += 1) {
         // BEGIN BLOCK
         B[i][j] = 0.;
         B[i][j] = B[i][j]+B[i][j];
         B[i][j] = B[i][j]*B[i][j];
         // END BLOCK
      }
   // END BLOCK
}

Initial code with preconditions


//  P() {TOP-LEVEL:SIZE==10}

void scalarization20(double B[SIZE][SIZE])
{

//  P() {TOP-LEVEL:SIZE==10}

   // BEGIN BLOCK
   int i;
   int j;

//  P() {TOP-LEVEL:SIZE==10}

   for(i = 0; i <= SIZE-1; i += 1)

//  P(i,j) {TOP-LEVEL:SIZE==10, 0<=i, i<=9}

      for(j = 0; j <= SIZE-1; j += 1) {

//  P(i,j) {TOP-LEVEL:SIZE==10, 0<=i, i<=9, 0<=j, j<=9}

         // BEGIN BLOCK

//  P(i,j) {TOP-LEVEL:SIZE==10, 0<=i, i<=9, 0<=j, j<=9}

         B[i][j] = 0.;

//  P(i,j) {TOP-LEVEL:SIZE==10, 0<=i, i<=9, 0<=j, j<=9}

         B[i][j] = B[i][j]+B[i][j];

//  P(i,j) {TOP-LEVEL:SIZE==10, 0<=i, i<=9, 0<=j, j<=9}

         B[i][j] = B[i][j]*B[i][j];
         // END BLOCK
      }
   // END BLOCK
}

IN regions

void scalarization20(double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i;
   int j;
   for(i = 0; i <= SIZE-1; i += 1)
      for(j = 0; j <= SIZE-1; j += 1) {
         // BEGIN BLOCK
         B[i][j] = 0.;

//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==i, PHI2==j, TOP-LEVEL:SIZE==10,
//    0<=i, i<=9, 0<=j, j<=9}>

         B[i][j] = B[i][j]+B[i][j];

//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==i, PHI2==j, TOP-LEVEL:SIZE==10,
//    0<=i, i<=9, 0<=j, j<=9}>

         B[i][j] = B[i][j]*B[i][j];
         // END BLOCK
      }
   // END BLOCK
}

OUT regions


//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, TOP-LEVEL:SIZE==10}>

void scalarization20(double B[SIZE][SIZE])
{

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, TOP-LEVEL:SIZE==10}>

   // BEGIN BLOCK
   int i;
   int j;

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, TOP-LEVEL:SIZE==10}>

   for(i = 0; i <= SIZE-1; i += 1)

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==i, PHI1==0, PHI2==0,
//    TOP-LEVEL:SIZE==10}>

      for(j = 0; j <= SIZE-1; j += 1) {

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==i, PHI1==0, PHI2==j, PHI2==0,
//    TOP-LEVEL:SIZE==10}>

         // BEGIN BLOCK

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==i, PHI2==j, TOP-LEVEL:SIZE==10,
//    0<=i, i<=9, 0<=j, j<=9}>

         B[i][j] = 0.;

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==i, PHI2==j, TOP-LEVEL:SIZE==10,
//    0<=i, i<=9, 0<=j, j<=9}>

         B[i][j] = B[i][j]+B[i][j];

//  <B[PHI1][PHI2]-OUT-EXACT-{PHI1==i, PHI1==0, PHI2==j, PHI2==0,
//    TOP-LEVEL:SIZE==10}>

         B[i][j] = B[i][j]*B[i][j];
         // END BLOCK
      }
   // END BLOCK
}

Code after scalarization

void scalarization20(double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i;
   int j;
   double __scalar__0;
   for(i = 0; i <= SIZE-1; i += 1)
      for(j = 0; j <= SIZE-1; j += 1) {
         // BEGIN BLOCK
         __scalar__0 = 0.;
         __scalar__0 = __scalar__0+__scalar__0;
         __scalar__0 = __scalar__0*__scalar__0;
         B[i][j] = __scalar__0;
         // END BLOCK
      }
   // END BLOCK
}
