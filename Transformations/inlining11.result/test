
Initial code

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
   int i;
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, __FUNCTION__);
      freia_common_print_backtrace();
      return FREIA_SIZE_ERROR;
   }
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, __FUNCTION__);
      freia_common_print_backtrace();
      return FREIA_SIZE_ERROR;
   }

   if (size==0) {
      freia_aipo_copy(imout, imin);
      return FREIA_OK;
   }
   if (connexity==4) goto switch_1_case_4;
   if (connexity==6) goto switch_1_case_6;
   if (connexity==8) goto switch_1_case_8;

switch_1_default:   ;
   return FREIA_INVALID_PARAM;

switch_1_case_8:   ;
   freia_aipo_dilate_8c(imout, imin, kernel_8c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_8c(imout, imout, kernel_8c);
   goto break_1;

switch_1_case_6:   ;
   freia_aipo_dilate_6c(imout, imin, kernel_6c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_6c(imout, imout, kernel_6c);
   goto break_1;
switch_1_case_4:   ;
   freia_aipo_dilate_8c(imout, imin, kernel_4c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_8c(imout, imout, kernel_4c);
break_1:   ;

   return FREIA_OK;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, connexity, size);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Because %ALL is modified by code synthesis, let's get ready

 freia_cipo_outer_gradient
     freia_cipo_dilate
         freia_common_check_image_bpp_compat
         freia_common_print_backtrace
         freia_aipo_copy
         freia_aipo_dilate_8c
         freia_aipo_dilate_6c
     freia_aipo_sub

Code after inlining

freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   enum {FREIA_OK, FREIA_SIZE_ERROR, FREIA_INVALID_PARAM} E_0;
   freia_error ret;
   {
      int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
      int i;
      int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
      int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
      extern int freia_aipo_copy(freia_data2d *f1, freia_data2d *f2);
      extern int freia_aipo_dilate_6c(freia_data2d *f1, freia_data2d *f2, int *f3);
      extern int freia_aipo_dilate_8c(freia_data2d *f1, freia_data2d *f2, int *f3);
      extern int freia_common_check_image_bpp_compat(freia_data2d *f1, freia_data2d *f2, void *f3);
      extern int freia_common_print_backtrace();
      extern struct _IO_FILE *stderr;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) goto l99998;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) goto l99997;
      if (size==0) goto l99996;
      if (connexity==4) goto l99995;
      if (connexity==6) goto l99994;
      if (connexity==8) goto l99993;

      E_0 = FREIA_INVALID_PARAM;
      goto l99992;
l99993:      ;

      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
l99991:      ;

      E_0 = FREIA_OK;
      goto l99992;
l99994:      ;

      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      goto l99991;
l99995:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      goto l99991;
l99996:      ;
      freia_aipo_copy(imout, imin);
      E_0 = FREIA_OK;
      goto l99992;
l99997:      ;

      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, __FUNCTION__);
      freia_common_print_backtrace();
      E_0 = FREIA_SIZE_ERROR;
      goto l99992;
l99998:      ;

      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, __FUNCTION__);
      freia_common_print_backtrace();
      E_0 = FREIA_SIZE_ERROR;
l99992:      ;
   }
   ret = E_0;
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Unsplit resulting code

/*
 * file for inlining11.c
 */
typedef unsigned int size_t;
typedef unsigned char __u_char;
typedef unsigned short __u_short;
typedef unsigned int __u_int;
typedef unsigned long __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short __int16_t;
typedef unsigned short __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef struct {long __val[2];} __quad_t;
typedef struct {__u_long __val[2];} __u_quad_t;
typedef __u_quad_t __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long __ino_t;
typedef __u_quad_t __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long __off_t;
typedef __quad_t __off64_t;
typedef int __pid_t;
typedef struct {int __val[2];} __fsid_t;
typedef long __clock_t;
typedef unsigned long __rlim_t;
typedef __u_quad_t __rlim64_t;
typedef unsigned int __id_t;
typedef long __time_t;
typedef unsigned int __useconds_t;
typedef long __suseconds_t;
typedef int __daddr_t;
typedef long __swblk_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long __blksize_t;
typedef long __blkcnt_t;
typedef __quad_t __blkcnt64_t;
typedef unsigned long __fsblkcnt_t;
typedef __u_quad_t __fsblkcnt64_t;
typedef unsigned long __fsfilcnt_t;
typedef __u_quad_t __fsfilcnt64_t;
typedef int __ssize_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef int __intptr_t;
typedef unsigned int __socklen_t;
typedef struct _IO_FILE FILE;
typedef struct _IO_FILE __FILE;
typedef struct {int __count; union {unsigned int __wch; char __wchb[4];} __value;} __mbstate_t;
typedef struct {__off_t __pos; __mbstate_t __state;} _G_fpos_t;
typedef struct {__off64_t __pos; __mbstate_t __state;} _G_fpos64_t;
typedef int _G_int16_t;
typedef int _G_int32_t;
typedef unsigned int _G_uint16_t;
typedef unsigned int _G_uint32_t;
typedef __builtin_va_list __gnuc_va_list;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next;
   struct _IO_FILE *_sbuf;
   int _pos;
};
enum __codecvt_result {__codecvt_ok, __codecvt_partial, __codecvt_error, __codecvt_noconv};
struct _IO_FILE {
   int _flags;
   char *_IO_read_ptr;
   char *_IO_read_end;
   char *_IO_read_base;
   char *_IO_write_base;
   char *_IO_write_ptr;
   char *_IO_write_end;
   char *_IO_buf_base;
   char *_IO_buf_end;
   char *_IO_save_base;
   char *_IO_backup_base;
   char *_IO_save_end;
   struct _IO_marker *_markers;
   struct _IO_FILE *_chain;
   int _fileno;
   int _flags2;
   __off_t _old_offset;
   unsigned short _cur_column;
   signed char _vtable_offset;
   char _shortbuf[1];
   _IO_lock_t *_lock;
   __off64_t _offset;
   void *__pad1;
   void *__pad2;
   void *__pad3;
   void *__pad4;
   size_t __pad5;
   int _mode;
   char _unused2[15*sizeof(int)-4*sizeof(void *)-sizeof(size_t)];
};
typedef struct _IO_FILE _IO_FILE;
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);
typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n);
typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);
typedef int __io_close_fn(void *__cookie);
extern int __underflow(_IO_FILE *);
extern int __uflow(_IO_FILE *);
extern int __overflow(_IO_FILE *, int);
extern int _IO_getc(_IO_FILE *__fp);
extern int _IO_putc(int __c, _IO_FILE *__fp);
extern int _IO_feof(_IO_FILE *__fp);
extern int _IO_ferror(_IO_FILE *__fp);
extern int _IO_peekc_locked(_IO_FILE *__fp);
extern void _IO_flockfile(_IO_FILE *);
extern void _IO_funlockfile(_IO_FILE *);
extern int _IO_ftrylockfile(_IO_FILE *);
extern int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list, int *);
extern int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list);
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
extern void _IO_free_backup_area(_IO_FILE *);
typedef _G_fpos_t fpos_t;
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
extern int remove(const char *__filename);
extern int rename(const char *__old, const char *__new);
extern FILE *tmpfile(void);
extern char *tmpnam(char *__s);
extern char *tmpnam_r(char *__s);
extern char *tempnam(const char *__dir, const char *__pfx);
extern int fclose(FILE *__stream);
extern int fflush(FILE *__stream);
extern int fflush_unlocked(FILE *__stream);
extern FILE *fopen(const char *__filename, const char *__modes);
extern FILE *freopen(const char *__filename, const char *__modes, FILE *__stream);
extern FILE *fdopen(int __fd, const char *__modes);
extern void setbuf(FILE *__stream, char *__buf);
extern int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);
extern void setbuffer(FILE *__stream, char *__buf, size_t __size);
extern void setlinebuf(FILE *__stream);
extern int fprintf(FILE *__stream, const char *__format, ...);
extern int printf(const char *__format, ...);
extern int sprintf(char *__s, const char *__format, ...);
extern int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);
extern int vprintf(const char *__format, __gnuc_va_list __arg);
extern int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);
extern int snprintf(char *__s, size_t __maxlen, const char *__format, ...);
extern int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);
extern int fscanf(FILE *__stream, const char *__format, ...);
extern int scanf(const char *__format, ...);
extern int sscanf(const char *__s, const char *__format, ...);
extern int fgetc(FILE *__stream);
extern int getc(FILE *__stream);
extern int getchar(void);
extern int getc_unlocked(FILE *__stream);
extern int getchar_unlocked(void);
extern int fgetc_unlocked(FILE *__stream);
extern int fputc(int __c, FILE *__stream);
extern int putc(int __c, FILE *__stream);
extern int putchar(int __c);
extern int fputc_unlocked(int __c, FILE *__stream);
extern int putc_unlocked(int __c, FILE *__stream);
extern int putchar_unlocked(int __c);
extern int getw(FILE *__stream);
extern int putw(int __w, FILE *__stream);
extern char *fgets(char *__s, int __n, FILE *__stream);
extern char *gets(char *__s);
extern int fputs(const char *__s, FILE *__stream);
extern int puts(const char *__s);
extern int ungetc(int __c, FILE *__stream);
extern size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);
extern size_t fwrite(void *__ptr, size_t __size, size_t __n, FILE *__s);
extern size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);
extern size_t fwrite_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);
extern int fseek(FILE *__stream, long __off, int __whence);
extern long ftell(FILE *__stream);
extern void rewind(FILE *__stream);
extern int fseeko(FILE *__stream, __off_t __off, int __whence);
extern __off_t ftello(FILE *__stream);
extern int fgetpos(FILE *__stream, fpos_t *__pos);
extern int fsetpos(FILE *__stream, const fpos_t *__pos);
extern void clearerr(FILE *__stream);
extern int feof(FILE *__stream);
extern int ferror(FILE *__stream);
extern void clearerr_unlocked(FILE *__stream);
extern int feof_unlocked(FILE *__stream);
extern int ferror_unlocked(FILE *__stream);
extern void perror(const char *__s);
extern int sys_nerr;
extern const char *sys_errlist[];
extern int fileno(FILE *__stream);
extern int fileno_unlocked(FILE *__stream);
extern FILE *popen(const char *__command, const char *__modes);
extern int pclose(FILE *__stream);
extern char *ctermid(char *__s);
extern void flockfile(FILE *__stream);
extern int ftrylockfile(FILE *__stream);
extern void funlockfile(FILE *__stream);
typedef enum {FREIA_OK, FREIA_SIZE_ERROR, FREIA_INVALID_PARAM} freia_error;
typedef struct freia_data2d freia_data2d;
typedef int int32_t;
typedef unsigned int uint32_t;
extern freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size);
extern freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size);
freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
   int i;
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, __FUNCTION__);
      freia_common_print_backtrace();
      return FREIA_SIZE_ERROR;
   }
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, __FUNCTION__);
      freia_common_print_backtrace();
      return FREIA_SIZE_ERROR;
   }

   if (size==0) {
      freia_aipo_copy(imout, imin);
      return FREIA_OK;
   }
   if (connexity==4) goto switch_1_case_4;
   if (connexity==6) goto switch_1_case_6;
   if (connexity==8) goto switch_1_case_8;

switch_1_default:   ;
   return FREIA_INVALID_PARAM;

switch_1_case_8:   ;
   freia_aipo_dilate_8c(imout, imin, kernel_8c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_8c(imout, imout, kernel_8c);
   goto break_1;

switch_1_case_6:   ;
   freia_aipo_dilate_6c(imout, imin, kernel_6c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_6c(imout, imout, kernel_6c);
   goto break_1;
switch_1_case_4:   ;
   freia_aipo_dilate_8c(imout, imin, kernel_4c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_8c(imout, imout, kernel_4c);
break_1:   ;

   return FREIA_OK;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   enum {FREIA_OK, FREIA_SIZE_ERROR, FREIA_INVALID_PARAM} E_0;
   freia_error ret;
   {
      int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
      int i;
      int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
      int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
      extern int freia_aipo_copy(freia_data2d *f1, freia_data2d *f2);
      extern int freia_aipo_dilate_6c(freia_data2d *f1, freia_data2d *f2, int *f3);
      extern int freia_aipo_dilate_8c(freia_data2d *f1, freia_data2d *f2, int *f3);
      extern int freia_common_check_image_bpp_compat(freia_data2d *f1, freia_data2d *f2, void *f3);
      extern int freia_common_print_backtrace();
      extern struct _IO_FILE *stderr;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) goto l99998;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) goto l99997;
      if (size==0) goto l99996;
      if (connexity==4) goto l99995;
      if (connexity==6) goto l99994;
      if (connexity==8) goto l99993;

      E_0 = FREIA_INVALID_PARAM;
      goto l99992;
l99993:      ;

      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
l99991:      ;

      E_0 = FREIA_OK;
      goto l99992;
l99994:      ;

      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      goto l99991;
l99995:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      goto l99991;
l99996:      ;
      freia_aipo_copy(imout, imin);
      E_0 = FREIA_OK;
      goto l99992;
l99997:      ;

      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, __FUNCTION__);
      freia_common_print_backtrace();
      E_0 = FREIA_SIZE_ERROR;
      goto l99992;
l99998:      ;

      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, __FUNCTION__);
      freia_common_print_backtrace();
      E_0 = FREIA_SIZE_ERROR;
l99992:      ;
   }
   ret = E_0;
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}
