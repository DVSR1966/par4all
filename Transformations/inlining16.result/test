
Initial code

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret = 0;
   }
   else if (connexity==4) {
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
l4:
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      ret = 0;
   }
   else if (connexity==6) {
      freia_aipo_dilate_6c(imout, imin, kernel_6c);
l6:
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      ret = 0;
   }
   else if (connexity==8) {
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
l8:
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
   }
   else
      ret = 2;

   return ret;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, connexity, size);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Because %ALL is modified by code synthesis, let's get ready

 freia_cipo_outer_gradient
     freia_cipo_dilate
         freia_common_check_image_bpp_compat
         freia_common_print_backtrace
         freia_aipo_copy
         freia_aipo_dilate_8c
         freia_aipo_dilate_6c
     freia_aipo_sub

Code after inlining of "freia_cipo_dilate"

freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   int I_0;
   freia_error ret;
   {
      int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
      int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
      int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
      int i;
      freia_error ret;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

         fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
         freia_common_print_backtrace();
         ret = 1;
      }
      else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
         

         fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
         freia_common_print_backtrace();
         ret = 1;
      }
      else if (size==0) {
         freia_aipo_copy(imout, imin);
         ret = 0;
      }
      else if (connexity==4) {
         freia_aipo_dilate_8c(imout, imin, kernel_4c);
l4:
         for(i = 1; i <= size-1; i += 1)
            freia_aipo_dilate_8c(imout, imout, kernel_4c);
         ret = 0;
      }
      else if (connexity==6) {
         freia_aipo_dilate_6c(imout, imin, kernel_6c);
l6:
         for(i = 1; i <= size-1; i += 1)
            freia_aipo_dilate_6c(imout, imout, kernel_6c);
         ret = 0;
      }
      else if (connexity==8) {
         freia_aipo_dilate_8c(imout, imin, kernel_8c);
l8:
         for(i = 1; i <= size-1; i += 1)
            freia_aipo_dilate_8c(imout, imout, kernel_8c);
         ret = 0;
      }
      else
         ret = 2;

      I_0 = ret;
   }
   ret = I_0;
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Code after inlining of "freia_cipo_outer_gradient"

int main()
{
   int I_1;
   int I_0;
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   {
      int I_0;
      freia_error ret;
      {
         int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
         int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
         int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
         int i;
         freia_error ret;
         if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
            

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (size==0) {
            freia_aipo_copy(imout, imin);
            ret = 0;
         }
         else if (connexity==4) {
            freia_aipo_dilate_8c(imout, imin, kernel_4c);
l4:
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_4c);
            ret = 0;
         }
         else if (connexity==6) {
            freia_aipo_dilate_6c(imout, imin, kernel_6c);
l6:
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_6c(imout, imout, kernel_6c);
            ret = 0;
         }
         else if (connexity==8) {
            freia_aipo_dilate_8c(imout, imin, kernel_8c);
l8:
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_8c);
            ret = 0;
         }
         else
            ret = 2;

         I_0 = ret;
      }
      ret = I_0;
      ret |= freia_aipo_sub(imout, imout, imin);

      I_0 = ret;
   }
   (void) I_0;
   {
      int I_0;
      freia_error ret;
      {
         int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
         int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
         int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
         int i;
         freia_error ret;
         if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
            

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (size==0) {
            freia_aipo_copy(imout, imin);
            ret = 0;
         }
         else if (connexity==4) {
            freia_aipo_dilate_8c(imout, imin, kernel_4c);
l99998:
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_4c);
            ret = 0;
         }
         else if (connexity==6) {
            freia_aipo_dilate_6c(imout, imin, kernel_6c);
l99997:
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_6c(imout, imout, kernel_6c);
            ret = 0;
         }
         else if (connexity==8) {
            freia_aipo_dilate_8c(imout, imin, kernel_8c);
l99996:
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_8c);
            ret = 0;
         }
         else
            ret = 2;

         I_0 = ret;
      }
      ret = I_0;
      ret |= freia_aipo_sub(imout, imout, imin);

      I_1 = ret;
   }
   (void) I_1;
}

Code after flattening of "freia_cipo_outer_gradient"

int main()
{
   int I_1;
   int I_0;
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   int I_0_0;
   freia_error ret_0;
   int kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   int kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   int kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
   int i_0;
   freia_error ret_1;
   int I_0_1;
   freia_error ret_2;
   int kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   int kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   int kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};
   int i_1;
   freia_error ret_3;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret_1 = 0;
   }
   else if (connexity==4) {
      freia_aipo_dilate_8c(imout, imin, kernel_4c_0);
l4:
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c_0);
      ret_1 = 0;
   }
   else if (connexity==6) {
      freia_aipo_dilate_6c(imout, imin, kernel_6c_0);
l6:
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c_0);
      ret_1 = 0;
   }
   else if (connexity==8) {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_0);
l8:
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      ret_1 = 0;
   }
   else
      ret_1 = 2;

   I_0_0 = ret_1;
   ret_0 = I_0_0;
   ret_0 |= freia_aipo_sub(imout, imout, imin);

   I_0_0 = ret_0;
   (void) I_0;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret_3 = 0;
   }
   else if (connexity==4) {
      freia_aipo_dilate_8c(imout, imin, kernel_4c_1);
l99998:
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c_1);
      ret_3 = 0;
   }
   else if (connexity==6) {
      freia_aipo_dilate_6c(imout, imin, kernel_6c_1);
l99997:
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c_1);
      ret_3 = 0;
   }
   else if (connexity==8) {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);
l99996:
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      ret_3 = 0;
   }
   else
      ret_3 = 2;

   I_0_1 = ret_3;
   ret_2 = I_0_1;
   ret_2 |= freia_aipo_sub(imout, imout, imin);

   I_1 = ret_2;
   (void) I_1;
}

Unsplit resulting code

