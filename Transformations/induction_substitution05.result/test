
Initial code for "induction05"

void induction05(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = SIZE;
   for(i = 0; i <= SIZE-1; i += 1) {
      if (k--)
         A[k] = B[j-k][k]+A[k];
      if (--k)
         A[k] = B[j-k][k]+A[k];
   }
}

Transformers for "induction05"


//  T() {}

void induction05(double A[SIZE], double B[SIZE][SIZE])
{

//  T(i,j) {}

   int i, j;

//  T(k) {SIZE==k}

   int k = SIZE;

//  T(i,k) {2i+k==k#init, i+1<=SIZE, 0<=i}

   for(i = 0; i <= SIZE-1; i += 1) {

//  T(k) {k==k#init-1}

      if (k--)

//  T() {}

         A[k] = B[j-k][k]+A[k];

//  T(k) {k==k#init-1}

      if (--k)

//  T() {}

         A[k] = B[j-k][k]+A[k];
   }
}

Preconditions for "induction05"


//  P() {SIZE==10}

void induction05(double A[SIZE], double B[SIZE][SIZE])
{

//  P() {SIZE==10}

   int i, j;

//  P(i,j) {SIZE==10}

   int k = SIZE;

//  P(i,j,k) {SIZE==10, k==10}

   for(i = 0; i <= SIZE-1; i += 1) {

//  P(i,j,k) {SIZE==10, 2i+k==10, 0<=i, i<=9}

      if (k--)

//  P(i,j,k) {SIZE==10, 2i+k==9, 0<=i, i<=9}

         A[k] = B[j-k][k]+A[k];

//  P(i,j,k) {SIZE==10, 2i+k==9, 0<=i, i<=9}

      if (--k)

//  P(i,j,k) {SIZE==10, 2i+k==8, 0<=i, i<=9}

         A[k] = B[j-k][k]+A[k];
   }
}

Code for "induction05" after induction substitution

void induction05(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = SIZE;
   for(i = 0; i <= SIZE-1; i += 1) {
      if (k = -(2*i+-10)-1, k-1)
         A[-(-9+2*i)] = B[j-(-(-9+2*i))][-(-9+2*i)]+A[-(-9+2*i)];
      if (k = -2*i+9-1)
         A[8+-2*i] = B[j-(8+-2*i)][8+-2*i]+A[8+-2*i];
   }
}
