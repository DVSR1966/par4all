#
delete omp_c
create omp_c omp.c

#activate some debug mode
#setenv TEXT_DEBUG_LEVEL 9
#setenv PARSER_DEBUG_LEVEL 9
#setenv RICEDG_DEBUG_LEVEL 9
#setenv SYNTAX_DEBUG_LEVEL 9
#setenv C_SYNTAX_DEBUG_LEVEL 9
#setenv SEMANTICS_DEBUG_LEVEL 9
#setenv PRETTYPRINT_DEBUG_LEVEL 9

#SELECT C LANGUAGE
activate C_PARSER
setproperty PRETTYPRINT_C_CODE TRUE
setproperty PRETTYPRINT_STATEMENT_NUMBER TRUE
#echo If possible, transform simple for-loops into do-loop Ã  la Fortran, simpler to analyze:
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER   TRUE
#echo Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
setproperty FOR_TO_WHILE_LOOP_IN_CONTROLIZER   TRUE

#SELECT MOST PRECISE ANALYSIS
#echo Select the most precise analysis:
#activate MUST_REGIONS
#activate TRANSFORMERS_INTER_FULL
#activate INTERPROCEDURAL_SUMMARY_PRECONDITION
#activate PRECONDITIONS_INTER_FULL
#activate REGION_CHAINS
#echo Compute the intraprocedural preconditions at the same time as
#echo   transformers and use them to improve the accuracy of expression
#echo   and statement transformers:
#setproperty SEMANTICS_COMPUTE_TRANSFORMERS_IN_CONTEXT TRUE
# Use the more precise fix point operator to cope with while loops:
#setproperty SEMANTICS_FIX_POINT_OPERATOR "derivative"
#echo Try to restructure the code for more precision:
#setproperty UNSPAGHETTIFY_TEST_RESTRUCTURING=TRUE
#setproperty UNSPAGHETTIFY_RECURSIVE_DECOMPOSITION=TRUE

apply PRIVATIZE_MODULE(%ALL)
#echo ## DOALL style
#display PARALLELPRINTED_FILE(%ALL)
echo ## OMP style
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE(%ALL)
echo ## done

#display PRINTED_FILE(%ALL)


close
delete omp_c
quit
# EOF
