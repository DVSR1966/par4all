
Controlizer output

void malloc01()
{
   int *p = malloc(10*sizeof(int));
   int i;

   for(i = 0; i <= 9; i += 1)
      p[i] = (double) i;
}

Preconditions


//  P() {}

void malloc01()
{
   int *p = malloc(10*sizeof(int));
   int i;

//  P() {}


   for(i = 0; i <= 9; i += 1)

//  P(i) {0<=i, i<=9}

      p[i] = (double) i;
}

Proper effects

void malloc01()
{
   int *p = malloc(10*sizeof(int));
   int i;
//               <must be written>: i

   for(i = 0; i <= 9; i += 1)
//               <must be read   >: i
//               <must be written>: p[i]
      p[i] = (double) i;
}

Cumulated effects

void malloc01()
{
   int *p = malloc(10*sizeof(int));
   int i;
//               <may be read    >: i
//               <may be written >: p[*]
//               <must be written>: i

   for(i = 0; i <= 9; i += 1)
//               <may be written >: p[*]
//               <must be read   >: i
      p[i] = (double) i;
}

Regions

void malloc01()
{
   int *p = malloc(10*sizeof(int));
   int i;

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <p[PHI1]-W-EXACT-{0<=PHI1, PHI1<=9}>


   for(i = 0; i <= 9; i += 1)

//  <i-R-EXACT-{}>
//  <p[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      p[i] = (double) i;
}

 **************** Effective Dependence Graph ****************

	09 --> 09 with conflicts
		from <p[i]-W-MUST> to <p[i]-W-MUST> at levels  1

****************** End of Dependence Graph ******************

Parallelization

