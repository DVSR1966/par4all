
Controlizer output

void malloc02()
{
   int *p[10];                                                          /*0003*/
   int i;                                                               /*0004*/

   for(i = 0; i <= 9; i += 1) {                                         /*0006*/
      p[i] = malloc(sizeof(int));                                       /*0007*/
      p[i] = i;                                                         /*0008*/
   }
}

Preconditions


//  P() {}

void malloc02()
{

//  P() {}

   int *p[10];                                                          /*0003*/

//  P() {}

   int i;                                                               /*0004*/

//  P(i) {}


   for(i = 0; i <= 9; i += 1) {                                         /*0006*/

//  P(i) {0<=i, i<=9}

      p[i] = malloc(sizeof(int));                                       /*0007*/

//  P(i) {0<=i, i<=9}

      p[i] = i;                                                         /*0008*/
   }
}

Proper effects

void malloc02()
{
   int *p[10];                                                          /*0003*/
   int i;                                                               /*0004*/
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {                                         /*0006*/
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i] _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(int));                                       /*0007*/
//             <    is read   >: i
//             <    is written>: p[i]
      p[i] = i;                                                         /*0008*/
   }
}

Cumulated effects

//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_
void malloc02()
{
   int *p[10];                                                          /*0003*/
   int i;                                                               /*0004*/
//             <may be read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: p[*] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {                                         /*0006*/
//             <may be written>: p[*]
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(int));                                       /*0007*/
//             <may be written>: p[*]
//             <    is read   >: i
      p[i] = i;                                                         /*0008*/
   }
}

Regions


//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

void malloc02()
{
   int *p[10];                                                          /*0003*/
   int i;                                                               /*0004*/

//  <p[PHI1]-W-EXACT-{0<=PHI1, PHI1<=9}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>


   for(i = 0; i <= 9; i += 1) {                                         /*0006*/

//  <p[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=9}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      p[i] = malloc(sizeof(int));                                       /*0007*/

//  <p[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      p[i] = i;                                                         /*0008*/
   }
}

 **************** Effective Dependence Graph ****************

	07 --> 08 with conflicts
		from <p[i]-W-EXACT> to <p[i]-W-EXACT> at levels  2
	07 --> 07 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> at levels  1
	07 --> 07 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> at levels  1
	07 --> 07 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> at levels  1

****************** End of Dependence Graph ******************

Parallelization

void malloc02()
{
   int *p[10];                                                          /*0003*/
   int i;                                                               /*0004*/

   for(i = 0; i <= 9; i += 1)                                           /*0006*/
      p[i] = malloc(sizeof(int));                                       /*0007*/
#pragma omp parallel for 
   for(i = 0; i <= 9; i += 1)                                           /*0006*/
      p[i] = i;                                                         /*0008*/
}

Parallelization in Fortran (if one of the resources can be made obsolete)

void malloc02()
{
   int *p[10];                                                          /*0003*/
   int i;                                                               /*0004*/

   for(i = 0; i <= 9; i += 1)                                           /*0006*/
      p[i] = malloc(sizeof(int));                                       /*0007*/
#pragma omp parallel for 
   for(i = 0; i <= 9; i += 1)                                           /*0006*/
      p[i] = i;                                                         /*0008*/
}

