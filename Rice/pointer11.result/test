
POINTS TO


// Points To IN:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT


// Points To OUT: none

void pointer11(int n, float *p, float *q)
{

// Points To:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT

   int i;

// Points To:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT

   p = q;

// Points To:
// p -> _q_3[0] , EXACT
// q -> _q_3[0] , EXACT


   for(i = 0; i <= n-1; i += 1)

// Points To:
// p -> _q_3[0] , EXACT
// q -> _q_3[0] , EXACT

      p[i] = q[i];
}

Proper effects with points-to


// Points To IN:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT


// Points To OUT: none

void pointer11(int n, float *p, float *q)
{

// Points To:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT

   int i;

// Points To:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT

   p = q;

// Points To:
// p -> _q_3[0] , EXACT
// q -> _q_3[0] , EXACT


   for(i = 0; i <= n-1; i += 1)

// Points To:
// p -> _q_3[0] , EXACT
// q -> _q_3[0] , EXACT

      p[i] = q[i];
}

Parallel code

void pointer11(int n, float *p, float *q)
{
   int i;
   p = q;

#pragma omp parallel for 
   for(i = 0; i <= n-1; i += 1)
      p[i] = q[i];
}
