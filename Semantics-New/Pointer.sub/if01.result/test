
Points-to


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i, j, k, *p;

// Points To:
// p -> undefined , EXACT

   i = 0;

// Points To:
// p -> undefined , EXACT

   j = 1;

// Points To:
// p -> undefined , EXACT


   if (rand()) {

// Points To:
// p -> undefined , EXACT

      p = &i;

// Points To:
// p -> i , EXACT

      k = i;
   }
   else {

// Points To:
// p -> undefined , EXACT

      p = &j;

// Points To:
// p -> j , EXACT

      k = j;
   }

// Points To:
// p -> i , MAY
// p -> j , MAY


   *p = 10;

// Points To:
// p -> i , MAY
// p -> j , MAY


   return 0;
}

PROPER  EFFECTS

int main()
{
   int i, j, k, *p;
//             <    is written>: i
   i = 0;
//             <    is written>: j
   j = 1;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED

   if (rand()) {
//             <    is written>: p
      p = &i;
//             <    is read   >: i
//             <    is written>: k
      k = i;
   }
   else {
//             <    is written>: p
      p = &j;
//             <    is read   >: j
//             <    is written>: k
      k = j;
   }
//             <may be written>: i j
//             <    is read   >: p

   *p = 10;

   return 0;
}

Transformers with point-to


//  T(main) {main==0}

int main()
{

//  T(i,j,k,p) {}

   int i, j, k, *p;

//  T(i) {i==0}

   i = 0;

//  T(j) {i==0, j==1}

   j = 1;

//  T(k,p) {i==0, j==1, 0<=k, k<=1}


   if (rand()) {

//  T(p) {&i==p, i==0, j==1}

      p = &i;

//  T(k) {&i==p, i==0, j==1, k==0}

      k = i;
   }
   else {

//  T(p) {&j==p, i==0, j==1}

      p = &j;

//  T(k) {&j==p, i==0, j==1, k==1}

      k = j;
   }

//  T(i,j) {i#init==0, j#init==1, 0<=k, k<=1}


   *p = 10;

//  T(main) {main==0, 0<=k, k<=1}


   return 0;
}

Preconditions with point-to


//  P() {}

int main()
{

//  P() {}

   int i, j, k, *p;

//  P(i,j,k,p) {}

   i = 0;

//  P(i,j,k,p) {i==0}

   j = 1;

//  P(i,j,k,p) {i==0, j==1}


   if (rand()) {

//  P(i,j,k,p) {i==0, j==1}

      p = &i;

//  P(i,j,k,p) {&i==p, i==0, j==1}

      k = i;
   }
   else {

//  P(i,j,k,p) {i==0, j==1}

      p = &j;

//  P(i,j,k,p) {&j==p, i==0, j==1}

      k = j;
   }

//  P(i,j,k,p) {i==0, j==1, 0<=k, k<=1}


   *p = 10;

//  P(i,j,k,p) {0<=k, k<=1}


   return 0;
}
