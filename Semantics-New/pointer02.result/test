
Proper effects for "main"

int main()
{
//             <    is written>: x y z
   x = 1, y = 2, z = 3;

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   double *p = (int *) malloc(sizeof(double));
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   foo(p);
//             <    is read   >: x y z
   return x+y+z;
}

Transformers for "foo"


//  T() {}

void foo(double *p)
{

//  T() {}

   if (!(p!=0))

//  T() {0==-1}

      abort();

//  T() {}

   (*p)++;
}

Transformers for "main"


//  T(main) {main==6}

int main()
{

//  T(x,y,z) {x==1, y==2, z==3}

   x = 1, y = 2, z = 3;


//  T() {}

   double *p = (int *) malloc(sizeof(double));

//  T(x,y,z) {}

   foo(p);

//  T(main) {x+y+z==main}

   return x+y+z;
}

Preconditions for "main"


//  P() {}

int main()
{

//  P() {}

   x = 1, y = 2, z = 3;


//  P(x,y,z) {x==1, y==2, z==3}

   double *p = (int *) malloc(sizeof(double));

//  P(x,y,z) {x==1, y==2, z==3}

   foo(p);

//  P(x,y,z) {}

   return x+y+z;
}

Proper effects for "foo" with points-to information

void foo(double *p)
{
//             <    is read   >: p
   p!=0?(void) 0:__assert_fail("p!=0", "./pointer02.c", 13, (const char *) 0);
//             <    is read   >: _p_1 p
//             <    is written>: _p_1
   (*p)++;
}

Proper effects for "main" with points-to information

int main()
{
//             <    is written>: x y z
   x = 1, y = 2, z = 3;

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   double *p = (int *) malloc(sizeof(double));
//             <    is read   >: p foo:_p_1
//             <    is written>: foo:_p_1
   foo(p);
//             <    is read   >: x y z
   return x+y+z;
}

Cumulated effects for "foo" with points-to information

//             <    is read   >: _p_1 p
//             <    is written>: _p_1
void foo(double *p)
{
//             <    is read   >: p
   p!=0?(void) 0:__assert_fail("p!=0", "./pointer02.c", 13, (const char *) 0);
//             <    is read   >: _p_1 p
//             <    is written>: _p_1
   (*p)++;
}

Cumulated effects for "main" with points-to information

//             <    is read   >: x y z _MALLOC_EFFECTS:_MALLOC_ 
//                               foo:_p_1
//             <    is written>: x y z _MALLOC_EFFECTS:_MALLOC_ 
//                               foo:_p_1
int main()
{
//             <    is written>: x y z
   x = 1, y = 2, z = 3;

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   double *p = (int *) malloc(sizeof(double));
//             <    is read   >: p foo:_p_1
//             <    is written>: foo:_p_1
   foo(p);
//             <    is read   >: x y z
   return x+y+z;
}

Transformers for "foo" with points-to information


//  T() {}

void foo(double *p)
{

//  T() {}

   p!=0?(void) 0:__assert_fail("p!=0", "./pointer02.c", 13, (const char *) 0);

//  T() {}

   (*p)++;
}

Transformers for "main" with points-to information


//  T(main,x,y,z) {main==6, x==1, y==2, z==3}

int main()
{

//  T(x,y,z) {x==1, y==2, z==3}

   x = 1, y = 2, z = 3;


//  T() {}

   double *p = (int *) malloc(sizeof(double));

//  T() {}

   foo(p);

//  T(main) {x+y+z==main}

   return x+y+z;
}

Preconditions for "main" with points-to information


//  P() {}

int main()
{

//  P() {}

   x = 1, y = 2, z = 3;


//  P(x,y,z) {x==1, y==2, z==3}

   double *p = (int *) malloc(sizeof(double));

//  P(x,y,z) {x==1, y==2, z==3}

   foo(p);

//  P(x,y,z) {x==1, y==2, z==3}

   return x+y+z;
}
