
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T(i,j,m,n) {}

   int n, j, m, i;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T() {0<=m, n+1<=m, 1<=n}

   if (!(0<n&&n<m))

//  T() {0==-1}

      deadlock();

//  T(j) {j==n+1, 2<=j, j<=m, 0<=m}

   j = n+1;

//  T(i) {i==0, j==n+1, 2<=j, j<=m, 0<=m}

   i = 0;

//  T(i,j) {0<=i, i#init<=i, i#init+j<=i+j#init, j<=i+n+1, i<=m+1,
//    j<=m+1, n+1<=m, 1<=n}

   while (flip())

//  T(i,j) {i==i#init+1, i<=m+1, j<=j#init+1, j<=m+1, n+1<=m, 1<=n}

      if (flip()) {

//  T() {j<=m, n+1<=m, 1<=n}

         if (!(j!=n&&j<=m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==j#init+1, j<=m+1, n+1<=m, 1<=n}

         j++;

//  T(i) {i==i#init+1, j<=m+1, n+1<=m, 1<=n}

         i++;

//  T() {i<=m+1, j<=m+1, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {m+1<=j, n+1<=m, 1<=n}

         if (!(j!=n&&j>m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==0, m+1<=j#init, n+1<=m, 1<=n}

         j = 0;

//  T(i) {i==i#init+1, j==0, n+1<=m, 1<=n}

         i++;

//  T() {j==0, i<=m+1, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T(i,j,m,n) {}

   int n, j, m, i;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T() {0<=m, n+1<=m, 1<=n}

   if (!(0<n&&n<m))

//  T() {0==-1}

      deadlock();

//  T(j) {j==n+1, 2<=j, j<=m, 0<=m}

   j = n+1;

//  T(i) {i==0, j==n+1, 2<=j, j<=m, 0<=m}

   i = 0;

//  T(i,j) {i+j#init==j, i+n==j-1, i#init==0, j==m+1, 1<=j,
//    j#init+1<=j, 2<=j#init}

   if (j<=m) {

//  T(i,j) {i+j#init==i#init+j, i+n==j-1, 0<=i, i+2<=j, j#init<=j,
//    j<=m}

      while (flip()) {

//  T() {j+1<=m, n+1<=m, 1<=n}

         if (!(j!=n&&j<m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==j#init+1, j<=m, n+1<=m, 1<=n}

         j++;

//  T(i) {i==i#init+1, j<=m, n+1<=m, 1<=n}

         i++;

//  T() {i<=m+1, j<=m, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  T() {0==-1}

            checking_error();
      }

//  T() {i+n==j-1, j==m, 0<=j, n+1<=j, 1<=n}

      if (!(j!=n&&j==m))

//  T() {0==-1}

         deadlock();

//  T(j) {i+n==j-2, j==j#init+1, j==m+1, 1<=j, n+2<=j, 1<=n}

      j++;

//  T(i) {i==i#init+1, i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

      i++;

//  T() {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

      if (!(i<=m+1))

//  T() {0==-1}

         checking_error();
   }

//  T(i,j) {i#init+j==i-1, i==m+1, i#init+j==j#init-1, j==n,
//    1<=i#init, i#init+2<=j#init, 1<=j#init}

   if (flip()) {

//  T() {0==-1}

      if (!(j!=n&&j>m&&0==n))

//  T() {0==-1}

         deadlock();

//  T() {0==-1}

      j = 0;

//  T() {0==-1}

      i++;

//  T() {0==-1}

      if (!(i<=m+1))

//  T() {0==-1}

         checking_error();
   }
   else {

//  T() {i+n==j-1, j==m+1, 1<=i, i+2<=j, 1<=j}

      if (!(j!=n&&j>m&&0<n))

//  T() {0==-1}

         deadlock();

//  T(j) {i+n==j#init-1, j==0, j#init==m+1, 1<=i, i+2<=j#init,
//    1<=j#init}

      j = 0;

//  T(i) {i==i#init+1, i+n==m+1, j==0, 2<=i, 1<=i+n, 1<=n}

      i++;

//  T() {i+n==m+1, j==0, 2<=i, 1<=i+n, 1<=n}

      if (!(i<=m+1))

//  T() {0==-1}

         checking_error();

//  T(i,j) {i+j#init==i#init+j, i+n==j+m+1, i<=m, m+1<=i+n, j#init<=j,
//    n+1<=m}

      while (flip()) {

//  T() {j+2<=n, n+1<=m, 1<=n}

         if (!(j!=n&&j<n-1))

//  T() {0==-1}

            deadlock();

//  T(j) {j==j#init+1, j+1<=n, n+1<=m, 1<=n}

         j++;

//  T(i) {i==i#init+1, j+1<=n, n+1<=m, 1<=n}

         i++;

//  T() {i<=m+1, j+1<=n, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  T() {0==-1}

            checking_error();
      }

//  T() {i==m, j==n-1, 0<=i, j+2<=i, 0<=j}

      if (!(j!=n&&j==n-1))

//  T() {0==-1}

         deadlock();

//  T(j) {i==m, j==j#init+1, j==n, 0<=i, j+1<=i, 1<=j}

      j++;

//  T(i) {i==i#init+1, i==m+1, j==n, 1<=i, j+2<=i, 1<=j}

      i++;

//  T() {i==m+1, j==n, 1<=i, j+2<=i, 1<=j}

      if (!(i<=m+1))

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int n, j, m, i;

//  P(i,j,m,n) {}

   n = rand();

//  P(i,j,m,n) {0<=n}

   m = rand();

//  P(i,j,m,n) {0<=m, 0<=n}

   if (!(0<n&&n<m))

//  P(i,j,m,n) {0<=m, 0<=n}

      deadlock();

//  P(i,j,m,n) {0<=m, n+1<=m, 1<=n}

   j = n+1;

//  P(i,j,m,n) {j==n+1, 2<=j, j<=m, 0<=m}

   i = 0;

//  P(i,j,m,n) {i==0, j==n+1, 2<=j, j<=m, 0<=m}

   while (flip())

//  P(i,j,m,n) {0<=i, j<=i+n+1, i<=m+1, j<=m+1, n+1<=m, 1<=n}

      if (flip()) {

//  P(i,j,m,n) {0<=i, j<=i+n+1, i<=m+1, j<=m+1, n+1<=m, 1<=n}

         if (!(j!=n&&j<=m))

//  P(i,j,m,n) {0<=i, j<=2i+n, j<=i+n+1, i<=m+1, j<=m+1, n<=j, n+1<=m,
//    1<=n}

            deadlock();

//  P(i,j,m,n) {0<=i, j<=i+n+1, i<=m+1, j<=m, n+1<=m, 1<=n}

         j++;

//  P(i,j,m,n) {0<=i, j<=i+n+2, i<=m+1, j<=m+1, n+1<=m, 1<=n}

         i++;

//  P(i,j,m,n) {1<=i, j<=i+n+1, i<=m+2, j<=m+1, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  P(i,j,m,n) {i==m+2, 1<=i, j+1<=i, j<=i+n+1, n+3<=i, 1<=n}

            checking_error();
      }
      else {

//  P(i,j,m,n) {0<=i, j<=i+n+1, i<=m+1, j<=m+1, n+1<=m, 1<=n}

         if (!(j!=n&&j>m))

//  P(i,j,m,n) {0<=i, j<=i+n+1, i<=m+1, j<=m, n+1<=m, 1<=n}

            deadlock();

//  P(i,j,m,n) {j==m+1, 0<=i, i<=j, j<=i+n+1, n+2<=j, 1<=n}

         j = 0;

//  P(i,j,m,n) {j==0, 0<=i, i<=m+1, m<=i+n, n+1<=m, 1<=n}

         i++;

//  P(i,j,m,n) {j==0, 1<=i, i<=m+2, m+1<=i+n, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  P(i,j,m,n) {i==m+2, j==0, 1<=i, n+3<=i, 1<=n}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int n, j, m, i;

//  P(i,j,m,n) {}

   n = rand();

//  P(i,j,m,n) {0<=n}

   m = rand();

//  P(i,j,m,n) {0<=m, 0<=n}

   if (!(0<n&&n<m))

//  P(i,j,m,n) {0<=m, 0<=n}

      deadlock();

//  P(i,j,m,n) {0<=m, n+1<=m, 1<=n}

   j = n+1;

//  P(i,j,m,n) {j==n+1, 2<=j, j<=m, 0<=m}

   i = 0;

//  P(i,j,m,n) {i==0, j==n+1, 2<=j, j<=m, 0<=m}

   if (j<=m) {

//  P(i,j,m,n) {i==0, j==n+1, 2<=j, j<=m, 0<=m}

      while (flip()) {

//  P(i,j,m,n) {i+n==j-1, j<=m, n+1<=j, 1<=n}

         if (!(j!=n&&j<m))

//  P(i,j,m,n) {i+n==j-1, j==m, n+1<=j, 1<=n}

            deadlock();

//  P(i,j,m,n) {i+n==j-1, j+1<=m, n+1<=j, 1<=n}

         j++;

//  P(i,j,m,n) {i+n==j-2, j<=m, n+2<=j, n+1<=m, 1<=n}

         i++;

//  P(i,j,m,n) {i+n==j-1, j<=m, n+2<=j, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  P() {0==-1}

            checking_error();
      }

//  P(i,j,m,n) {i+n==j-1, j<=m, n+1<=j, 1<=n}

      if (!(j!=n&&j==m))

//  P(i,j,m,n) {i+n==j-1, j+1<=m, n+1<=j, 1<=n}

         deadlock();

//  P(i,j,m,n) {i+n==j-1, j==m, n+1<=j, 1<=n}

      j++;

//  P(i,j,m,n) {i+n==j-2, j==m+1, 1<=j, n+2<=j, 1<=n}

      i++;

//  P(i,j,m,n) {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

      if (!(i<=m+1))

//  P() {0==-1}

         checking_error();
   }

//  P(i,j,m,n) {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

   if (flip()) {

//  P(i,j,m,n) {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

      if (!(j!=n&&j>m&&0==n))

//  P(i,j,m,n) {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

         deadlock();

//  P() {0==-1}

      j = 0;

//  P() {0==-1}

      i++;

//  P() {0==-1}

      if (!(i<=m+1))

//  P() {0==-1}

         checking_error();
   }
   else {

//  P(i,j,m,n) {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

      if (!(j!=n&&j>m&&0<n))

//  P() {0==-1}

         deadlock();

//  P(i,j,m,n) {i+n==j-1, j==m+1, 1<=j, n+2<=j, 1<=n}

      j = 0;

//  P(i,j,m,n) {i+n==m, j==0, 0<=m, n+1<=m, 1<=n}

      i++;

//  P(i,j,m,n) {i+n==m+1, j==0, 0<=m, n+1<=m, 1<=n}

      if (!(i<=m+1))

//  P() {0==-1}

         checking_error();

//  P(i,j,m,n) {i+n==m+1, j==0, 0<=m, n+1<=m, 1<=n}

      while (flip()) {

//  P(i,j,m,n) {i+n==j+m+1, i<=m, m+1<=i+n, n+1<=m}

         if (!(j!=n&&j<n-1))

//  P(i,j,m,n) {i+n==j+m+1, i<=m, m+1<=i+n, n<=j+1, n+1<=m}

            deadlock();

//  P(i,j,m,n) {i+n==j+m+1, m+1<=i+n, j+2<=n, n+1<=m}

         j++;

//  P(i,j,m,n) {i+n==j+m, m+1<=i+n, j+1<=n, n+1<=m, 1<=n}

         i++;

//  P(i,j,m,n) {i+n==j+m+1, m+2<=i+n, j+1<=n, n+1<=m, 1<=n}

         if (!(i<=m+1))

//  P() {0==-1}

            checking_error();
      }

//  P(i,j,m,n) {i+n==j+m+1, i<=m, m+1<=i+n, n+1<=m}

      if (!(j!=n&&j==n-1))

//  P(i,j,m,n) {i+n==j+m+1, m+1<=i+n, j+2<=n, n+1<=m}

         deadlock();

//  P(i,j,m,n) {i==m, j==n-1, j+2<=i, 0<=j}

      j++;

//  P(i,j,m,n) {i==m, j==n, 0<=i, j+1<=i, 1<=j}

      i++;

//  P(i,j,m,n) {i==m+1, j==n, 1<=i, j+2<=i, 1<=j}

      if (!(i<=m+1))

//  P() {0==-1}

         checking_error();
   }
}
