
Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T(ii,jj,x0) {}

   int ii, jj, x0;

//  T() {}

   double x1;


//  T(N) {N==100}

   int N = 100;

//  T() {}

   double A[100][100];

//  T(ii,jj,x0) {ii<=N, 1<=ii}


   for(ii = 1; ii <= N; ii += 1)

//  T(jj,x0) {jj<=N, 1<=jj}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  T(x0) {}

         if (1) {

//  T(x0) {}

            x0 = ii*jj;

//  T() {}

            x1 = (double) N/2;

//  T() {}

            if (x0<x1)

//  T() {}

               if (1) {

//  T() {}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  T() {}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  T() {}

            if (ii==jj)

//  T() {}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  T(i) {}

      int i;

//  T(i) {i+1<=N, 0<=i}

      for(i = 0; i <= N-1; i += 1) {

//  T(j) {}

         int j;

//  T(j) {j+1<=N, 0<=j}

         for(j = 0; j <= N-1; j += 1)

//  T() {}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {main==0}

   return 0;
}

Preconditions for "main": first case


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P(ii,jj,x0) {}

   double x1;


//  P(ii,jj,x0) {}

   int N = 100;

//  P(N,ii,jj,x0) {N==100}

   double A[100][100];

//  P(N,ii,jj,x0) {N==100}


   for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

         if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

      int i;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99}

         int j;

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{0<=PHI1+1, PHI1<=99,
//    0<=509901PHI1+50PHI2+504901, 0<=30499PHI1+100PHI2+1978707,
//    0<=10289PHI1+34PHI2+665503, 0<=9498PHI1+97PHI2+194,
//    0<=9305PHI1+99PHI2+198, 0<=6355PHI1+21PHI2+411045,
//    0<=4721PHI1+70PHI2+228039, 0<=3934PHI1+13PHI2+254459,
//    0<=3331PHI1+65PHI2+156995, 0<=2652PHI1+77PHI2+118679,
//    0<=2626PHI1+51PHI2+492427, 0<=2421PHI1+8PHI2+156588,
//    0<=1669PHI1+11PHI2+163518, 0<=1577PHI1+46PHI2+148173,
//    0<=1513PHI1+5PHI2+97876, 0<=1299PHI1+37PHI2+238961,
//    0<=1253PHI1+57PHI2+58752, 0<=1096PHI1+27PHI2+50272,
//    0<=1062PHI1+7PHI2+104065, 0<=908PHI1+3PHI2+58720,
//    0<=871PHI1+17PHI2+41075, 0<=822PHI1+41PHI2+37595,
//    0<=691PHI1+66PHI2+30326, 0<=607PHI1+9PHI2+29319,
//    0<=489PHI1+98PHI2+9703, 0<=401PHI1+20PHI2+18338,
//    0<=397PHI1+100PHI2+9605, 84PHI2<=379PHI1+35358,
//    0<=367PHI1+92PHI2+8647, 0<=310PHI1+9PHI2+13871,
//    95PHI2<=309PHI1+29213, 0<=299PHI1+43PHI2+12333,
//    0<=296PHI1+67PHI2+5683, 0<=260PHI1+69PHI2+6100,
//    0<=246PHI1+71PHI2+10226, 0<=240PHI1+7PHI2+22547,
//    0<=218PHI1+45PHI2+4289, 0<=217PHI1+5PHI2+20785,
//    0<=205PHI1+4PHI2+9661, 0<=203PHI1+5PHI2+9307,
//    0<=201PHI1+PHI2+101, 0<=199PHI1+100PHI2+200,
//    0<=199PHI1+40PHI2+7593, 0<=197PHI1+96PHI2+192,
//    0<=189PHI1+79PHI2+3592, 0<=178PHI1+17PHI2+7811,
//    41PHI2<=178PHI1+16974, 0<=166PHI1+43PHI2+8084,
//    0<=163PHI1+43PHI2+3883, 0<=157PHI1+52PHI2+10087,
//    0<=157PHI1+15PHI2+6896, 0<=148PHI1+99PHI2+4999,
//    0<=137PHI1+4PHI2+12897, 0<=135PHI1+2PHI2+6515,
//    0<=130PHI1+3PHI2+12490, 0<=129PHI1+65PHI2+6274,
//    0<=129PHI1+26PHI2+4961, 0<=119PHI1+30PHI2+2758,
//    0<=117PHI1+34PHI2+4828, 0<=113PHI1+41PHI2+4944,
//    0<=110PHI1+57PHI2+114, 0<=109PHI1+27PHI2+2566,
//    97PHI2<=105PHI1+19408, 0<=103PHI1+41PHI2+2017,
//    97PHI2<=103PHI1+19406, 0<=102PHI1+PHI2+2, 97PHI2<=101PHI1+19501,
//    0<=100PHI1+PHI2+2, 0<=97PHI1+93PHI2+186, 0<=94PHI1+PHI2+2,
//    0<=86PHI1+25PHI2+3552, 81PHI2<=86PHI1+16287,
//    0<=81PHI1+100PHI2+2081, 0<=80PHI1+77PHI2+154,
//    0<=77PHI1+96PHI2+2073, 0<=77PHI1+74PHI2+148,
//    0<=77PHI1+73PHI2+2669, 0<=75PHI1+19PHI2+1785,
//    0<=73PHI1+97PHI2+2570, 0<=73PHI1+70PHI2+140,
//    0<=72PHI1+29PHI2+1399, 0<=72PHI1+19PHI2+1717,
//    0<=71PHI1+18PHI2+1695, 0<=69PHI1+91PHI2+2360,
//    0<=69PHI1+25PHI2+3012, 0<=69PHI1+2PHI2+3082,
//    0<=67PHI1+99PHI2+3366, 0<=67PHI1+27PHI2+1305,
//    0<=63PHI1+82PHI2+2045, 0<=63PHI1+25PHI2+1225,
//    0<=63PHI1+13PHI2+1187, 0<=61PHI1+3PHI2+2749,
//    0<=60PHI1+79PHI2+2039, 0<=59PHI1+86PHI2+2845,
//    0<=55PHI1+81PHI2+2736, 0<=55PHI1+56PHI2+5216,
//    0<=55PHI1+54PHI2+4931, 0<=54PHI1+55PHI2+5237,
//    0<=53PHI1+66PHI2+1419, 0<=53PHI1+12PHI2+1019,
//    0<=52PHI1+51PHI2+4951, 0<=52PHI1+47PHI2+5138,
//    0<=52PHI1+15PHI2+2160, 0<=51PHI1+52PHI2+5147,
//    0<=51PHI1+50PHI2+4950, 0<=51PHI1+PHI2+2439,
//    0<=50PHI1+51PHI2+5152, 0<=49PHI1+99PHI2+14998,
//    0<=49PHI1+58PHI2+1288, 0<=49PHI1+50PHI2+5150,
//    0<=49PHI1+48PHI2+4657, 0<=49PHI1+13PHI2+1149,
//    0<=48PHI1+49PHI2+5048, 0<=48PHI1+47PHI2+4560,
//    0<=47PHI1+95PHI2+13919, 0<=47PHI1+48PHI2+4755,
//    0<=46PHI1+47PHI2+4752, 0<=46PHI1+45PHI2+4726,
//    0<=45PHI1+13PHI2+1876, 0<=44PHI1+83PHI2+12039,
//    0<=44PHI1+PHI2+4157, 0<=43PHI1+11PHI2+1067, 0<=43PHI1+PHI2+4196,
//    0<=41PHI1+PHI2+1861, 0<=40PHI1+PHI2+1920, 0<=39PHI1+38PHI2+3459,
//    0<=39PHI1+10PHI2+2029, 0<=38PHI1+15PHI2+709,
//    0<=37PHI1+35PHI2+1184, 0<=35PHI1+46PHI2+1181,
//    0<=35PHI1+PHI2+1541, 0<=34PHI1+35PHI2+3284, 0<=34PHI1+7PHI2+666,
//    0<=33PHI1+65PHI2+3298, 0<=33PHI1+46PHI2+3307,
//    0<=33PHI1+31PHI2+3003, 0<=32PHI1+29PHI2+2755,
//    7PHI2<=32PHI1+2944, 0<=31PHI1+32PHI2+3075,
//    0<=31PHI1+28PHI2+3060, 0<=31PHI1+9PHI2+1277,
//    0<=31PHI1+8PHI2+835, 0<=31PHI1+7PHI2+593, 0<=29PHI1+6PHI2+555,
//    0<=27PHI1+50PHI2+9728, 0<=27PHI1+38PHI2+1275,
//    0<=27PHI1+14PHI2+29, 0<=27PHI1+7PHI2+1317,
//    0<=26PHI1+51PHI2+10072, 0<=26PHI1+25PHI2+50,
//    0<=26PHI1+17PHI2+2474, 0<=25PHI1+49PHI2+2474,
//    0<=25PHI1+48PHI2+4922, 0<=25PHI1+47PHI2+7240,
//    0<=25PHI1+31PHI2+663, 0<=25PHI1+24PHI2+48,
//    0<=25PHI1+23PHI2+2227, 8PHI2<=25PHI1+2441,
//    0<=24PHI1+47PHI2+4818, 25PHI2<=24PHI1+5049,
//    0<=23PHI1+45PHI2+6930, 0<=23PHI1+44PHI2+2167,
//    0<=23PHI1+32PHI2+2299, 0<=23PHI1+22PHI2+6711,
//    0<=23PHI1+6PHI2+627, 0<=22PHI1+5PHI2+432, 0<=22PHI1+PHI2+1030,
//    0<=21PHI1+43PHI2+8428, 0<=21PHI1+31PHI2+2099,
//    0<=21PHI1+26PHI2+660, 0<=20PHI1+37PHI2+7198, 0<=20PHI1+PHI2+921,
//    0<=19PHI1+28PHI2+1895, 0<=19PHI1+18PHI2+611,
//    0<=19PHI1+8PHI2+376, 0<=19PHI1+5PHI2+441, 6PHI2<=19PHI1+1831,
//    0<=18PHI1+35PHI2+1768, 0<=18PHI1+23PHI2+631,
//    0<=18PHI1+19PHI2+5666, 0<=18PHI1+7PHI2+329,
//    0<=17PHI1+25PHI2+1667, 0<=17PHI1+24PHI2+809,
//    0<=17PHI1+16PHI2+1714, 0<=17PHI1+5PHI2+729, 16PHI2<=17PHI1+3217,
//    0<=16PHI1+21PHI2+541, 0<=15PHI1+4PHI2+360,
//    0<=13PHI1+25PHI2+2565, 0<=13PHI1+19PHI2+640,
//    0<=13PHI1+12PHI2+24, 3PHI2<=13PHI1+1244, 0<=12PHI1+23PHI2+2358,
//    0<=12PHI1+5PHI2+227, 0<=11PHI1+18PHI2+1096,
//    0<=11PHI1+14PHI2+381, 0<=11PHI1+13PHI2+288,
//    0<=11PHI1+10PHI2+953, 0<=11PHI1+4PHI2+484, 0<=11PHI1+3PHI2+294,
//    0<=11PHI1+2PHI2+385, 0<=10PHI1+13PHI2+324, 0<=10PHI1+9PHI2+325,
//    0<=10PHI1+PHI2+505, 0<=9PHI1+17PHI2+2622, 0<=9PHI1+13PHI2+429,
//    0<=9PHI1+8PHI2+873, 0<=9PHI1+2PHI2+169, 2PHI2<=9PHI1+844,
//    0<=8PHI1+3PHI2+387, 0<=7PHI1+13PHI2+2531, 0<=7PHI1+9PHI2+232,
//    0<=7PHI1+3PHI2+153, 0<=7PHI1+2PHI2+283, 0<=7PHI1+PHI2+291,
//    0<=6PHI1+13PHI2+2578, 0<=6PHI1+11PHI2+539, 0<=5PHI1+8PHI2+486,
//    0<=5PHI1+7PHI2+234, 0<=5PHI1+4PHI2+133, 0<=5PHI1+2PHI2+96,
//    0<=5PHI1+PHI2+91, PHI2<=5PHI1+414, 0<=4PHI1+5PHI2+124,
//    0<=4PHI1+3PHI2+289, 0<=4PHI1+PHI2+88, PHI2<=4PHI1+447,
//    0<=3PHI1+100PHI2+9803, 0<=3PHI1+86PHI2+8389,
//    0<=3PHI1+61PHI2+5864, 0<=3PHI1+5PHI2+309, 0<=3PHI1+4PHI2+107,
//    0<=3PHI1+PHI2+2, PHI2<=3PHI1+317, 98PHI2<=3PHI1+19505,
//    0<=2PHI1+99PHI2+9801, 0<=2PHI1+39PHI2+3741, 0<=2PHI1+3PHI2+113,
//    0<=2PHI1+PHI2+2, 0<=PHI1+70PHI2+7561, 0<=PHI1+51PHI2+5201,
//    0<=PHI1+48PHI2+4897, 0<=PHI1+29PHI2+2872, 0<=PHI1+28PHI2+2772,
//    0<=PHI1+25PHI2+4876, 0<=PHI1+19PHI2+1822, 0<=PHI1+14PHI2+1359,
//    0<=PHI1+3PHI2+286, 0<=PHI1+2PHI2+143, 0<=PHI1+PHI2+2,
//    PHI2<=PHI1+205, 49PHI2<=PHI1+9752, PHI1<=98PHI2+9997,
//    PHI1<=97PHI2+9896, PHI1+PHI2<=198, 2PHI1+PHI2<=298,
//    3PHI1<=98PHI2+10195, 3PHI1+PHI2<=396, 3PHI1+2PHI2<=499,
//    10PHI1+11PHI2<=2234, 11PHI1+10PHI2<=2109, 14PHI1+15PHI2<=3001,
//    17PHI1+18PHI2<=3601, 18PHI1+19PHI2<=3782, 19PHI1+18PHI2<=3735,
//    20PHI1+21PHI2<=4201, 22PHI1+23PHI2<=4606, 23PHI1+24PHI2<=4801,
//    24PHI1+25PHI2<=4952, 25PHI1+24PHI2<=4921, 26PHI1+25PHI2<=5098,
//    26PHI1+27PHI2<=5428, 28PHI1+29PHI2<=5782, 30PHI1+31PHI2<=6236,
//    31PHI1<=59PHI2+9028, 31PHI1+32PHI2<=6439, 41PHI1+39PHI2<=8072,
//    41PHI1+42PHI2<=8485, 46PHI1+47PHI2<=9500, 47PHI1+49PHI2<=9704,
//    48PHI1+49PHI2<=9703, 49PHI1+50PHI2<=10193, 50PHI1+51PHI2<=10394,
//    51PHI1<=49PHI2+14849, 51PHI1+49PHI2<=10093,
//    51PHI1+50PHI2<=10098, 52PHI1+49PHI2<=10390,
//    53PHI1+51PHI2<=10497, 77PHI1+74PHI2<=15094,
//    79PHI1+76PHI2<=15494, 90PHI1<=PHI2+9024, 93PHI1+97PHI2<=19210,
//    94PHI1<=PHI2+9415, 103PHI1<=PHI2+20203, 195PHI1<=PHI2+19505,
//    281PHI1<=3PHI2+28189, 469PHI1<=5PHI2+46983,
//    563PHI1<=6PHI2+56392, 1501PHI1<=16PHI2+150348,
//    2449PHI1<=25PHI2+244976, 3662PHI1<=25PHI2+365063,
//    4801PHI1<=50PHI2+480349, 4899PHI1<=50PHI2+490051,
//    8473PHI1<=94PHI2+848321, 9996PHI1<=PHI2+999605,
//    10099PHI1<=98PHI2+1979899, 0<=PHI2+101, N==100}>


   for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1+PHI2<=198,
//    460249ii<=975549PHI1+475300PHI2+1410849,
//    460249ii<=955149PHI1+494900PHI2+1450049,
//    19109ii<=29007PHI1+19404PHI2+999011,
//    14849ii<=19899PHI1+9900PHI2+514799,
//    10199ii<=10101PHI1+100PHI2+1020001,
//    4949ii<=5049PHI1+4950PHI2+494999,
//    0<=489PHI1+9898PHI2+9409ii+10387, 101ii<=201PHI1+100PHI2+301,
//    99ii<=199PHI1+100PHI2+299, 0<=105PHI1+9506PHI2+10201ii+8811,
//    49PHI2<=51PHI1+100ii+4653, 2ii<=3PHI1+PHI2+103,
//    98PHI2<=3PHI1+101ii+9405, 49PHI2<=PHI1+50ii+4752,
//    PHI1<=98PHI2+99ii+97, 3PHI1<=98PHI2+101ii+95,
//    48PHI1+49PHI2<=ii+9603, 51PHI1<=49PHI2+100ii+4849,
//    51PHI1+50PHI2+ii<=10099, 99PHI1<=9702PHI2+295ii+960203,
//    5049PHI1<=485100PHI2+252499ii+24245051,
//    10197PHI1<=19404PHI2+20095ii+959807,
//    504951PHI1<=4900PHI2+500149ii+48980149, 1<=99PHI1+ii,
//    97ii<=99PHI1+9799, 0<=91PHI1+183ii+8371, 0<=85PHI1+43ii+3952,
//    0<=2PHI1+ii+94, ii<=PHI1+101, PHI1<=ii+97, 99PHI1<=101ii+9601,
//    99PHI1<=ii+9701, N==100, 1<=ii, ii<=100}>

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{9801ii<=19701PHI1+9900PHI2+200jj+9601,
//    4949ii+1<=5049PHI1+4950PHI2+4950jj,
//    49PHI2+49jj<=51PHI1+100ii+4702, 2ii+jj<=3PHI1+PHI2+104,
//    48PHI1+49PHI2<=ii+49jj+4703, 51PHI1+49jj<=49PHI2+100ii+4898,
//    99PHI1+9997<=9702PHI2+9801ii+196jj,
//    99PHI1+9997<=9702PHI2+295ii+9702jj,
//    5049PHI1+4950PHI2+99ii<=5050jj+494801, PHI1+PHI2<=jj+98,
//    1<=99PHI1+ii, 99PHI1<=ii+9701, N==100, 1<=ii, ii<=100, 1<=jj,
//    jj<=100}>

         if (1) {
            x0 = ii*jj;
            x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{ii+4899<=51PHI1+50PHI2+50jj,
//    49PHI2+49jj<=51PHI1+100ii+4702, 4803<=48PHI1+49PHI2+ii+49jj,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    48PHI1+49PHI2<=ii+49jj+4703, 51PHI1+49jj<=49PHI2+100ii+4898,
//    51PHI1+50PHI2+ii<=50jj+4999, 1<=99PHI1+ii, 99PHI1<=ii+9701,
//    N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}>

            if (x0<x1)

//  <A[PHI1][PHI2]-W-MAY-{ii+4899<=51PHI1+50PHI2+50jj,
//    49PHI2+49jj<=51PHI1+100ii+4702, 4803<=48PHI1+49PHI2+ii+49jj,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    48PHI1+49PHI2<=ii+49jj+4703, 51PHI1+49jj<=49PHI2+100ii+4898,
//    51PHI1+50PHI2+ii<=50jj+4999, 1<=99PHI1+ii, 99PHI1<=ii+9701,
//    N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}>

               if (1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                  A[N-ii-1][ii+jj-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100}>

               A[ii-1][jj-1] = 1.0;
         }
   {
      int i;

//  <A[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=99, N==100, ii==101,
//    jj==101, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}

Preconditions for "main": second case (after transformer refinement)


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P(ii,jj,x0) {}

   double x1;


//  P(ii,jj,x0) {}

   int N = 100;

//  P(N,ii,jj,x0) {N==100}

   double A[100][100];

//  P(N,ii,jj,x0) {N==100}


   for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

         if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100, x0<=100ii, ii<=x0}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      int i;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         int j;

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99, 100<=x0, x0<=10000}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

   return 0;
}

Regions for "main" after transformer refinement


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{N==100}>


   for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

         if (1) {
            x0 = ii*jj;
            x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

            if (x0<x1)

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

               if (1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[N-ii-1][ii+jj-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

               A[ii-1][jj-1] = 1.0;
         }
   {
      int i;

//  <A[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=99, N==100, ii==101,
//    jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}

Let us try again from scratch for the third case, when context are used to compute transformers


Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T(ii,jj,x0) {}

   int ii, jj, x0;

//  T() {}

   double x1;


//  T(N) {N==100}

   int N = 100;

//  T() {N==100}

   double A[100][100];

//  T(ii,jj,x0) {N==100, 1<=ii, ii<=100}


   for(ii = 1; ii <= N; ii += 1)

//  T(jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  T(x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

         if (1) {

//  T(x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            x0 = ii*jj;

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            x1 = (double) N/2;

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            if (x0<x1)

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

               if (1) {

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            if (ii==jj)

//  T() {N==100, ii==jj, 1<=ii, ii<=100, x0<=100ii, ii<=x0}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  T(i) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      int i;

//  T(i) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}

      for(i = 0; i <= N-1; i += 1) {

//  T(j) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}

         int j;

//  T(j) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j, j<=99, 100<=x0,
//    x0<=10000}

         for(j = 0; j <= N-1; j += 1)

//  T() {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j, j<=99, 100<=x0,
//    x0<=10000}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {N==100, ii==101, jj==101, main==0, 100<=x0, x0<=10000}

   return 0;
}

Preconditions for "main": third case


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P(ii,jj,x0) {}

   double x1;


//  P(ii,jj,x0) {}

   int N = 100;

//  P(N,ii,jj,x0) {N==100}

   double A[100][100];

//  P(N,ii,jj,x0) {N==100}


   for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

         if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100, x0<=100ii, ii<=x0}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      int i;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         int j;

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99, 100<=x0, x0<=10000}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{N==100}>


   for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

         if (1) {
            x0 = ii*jj;
            x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

            if (x0<x1)

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

               if (1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[N-ii-1][ii+jj-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

               A[ii-1][jj-1] = 1.0;
         }
   {
      int i;

//  <A[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=99, N==100, ii==101,
//    jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}
