
Initial code

void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      //c SIMD_COMMENT_0

      a[LU_IND0+4] = b[LU_IND0];
      //c SIMD_COMMENT_1

      b[LU_IND0+4] = a[LU_IND0]+c[LU_IND0];
      //c SIMD_COMMENT_0

      a[LU_IND0+5] = b[LU_IND0+1];
      //c SIMD_COMMENT_1

      b[LU_IND0+5] = a[LU_IND0+1]+c[LU_IND0+1];
      //c SIMD_COMMENT_0

      a[LU_IND0+6] = b[LU_IND0+2];
      //c SIMD_COMMENT_1

      b[LU_IND0+6] = a[LU_IND0+2]+c[LU_IND0+2];
      //c SIMD_COMMENT_0

      a[LU_IND0+7] = b[LU_IND0+3];
      //c SIMD_COMMENT_1

      b[LU_IND0+7] = a[LU_IND0+3]+c[LU_IND0+3];
   }
   i = 100;
   ;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      //c SIMD_COMMENT_0

      a[LU_IND0+4] = b[LU_IND0];
      //c SIMD_COMMENT_1

      b[LU_IND0+4] = a[LU_IND0]+c[LU_IND0];
      //c SIMD_COMMENT_0

      a[LU_IND0+5] = b[LU_IND0+1];
      //c SIMD_COMMENT_1

      b[LU_IND0+5] = a[LU_IND0+1]+c[LU_IND0+1];
      //c SIMD_COMMENT_0

      a[LU_IND0+6] = b[LU_IND0+2];
      //c SIMD_COMMENT_1

      b[LU_IND0+6] = a[LU_IND0+2]+c[LU_IND0+2];
      //c SIMD_COMMENT_0

      a[LU_IND0+7] = b[LU_IND0+3];
      //c SIMD_COMMENT_1

      b[LU_IND0+7] = a[LU_IND0+3]+c[LU_IND0+3];
   }
   i = 100;
   ;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      //c SIMD_COMMENT_0

      a[LU_IND0+4] = b[LU_IND0];
      //c SIMD_COMMENT_1

      b[LU_IND0+4] = a[LU_IND0]+c[LU_IND0];
      //c SIMD_COMMENT_0

      a[LU_IND0+5] = b[LU_IND0+1];
      //c SIMD_COMMENT_1

      b[LU_IND0+5] = a[LU_IND0+1]+c[LU_IND0+1];
      //c SIMD_COMMENT_0

      a[LU_IND0+6] = b[LU_IND0+2];
      //c SIMD_COMMENT_1

      b[LU_IND0+6] = a[LU_IND0+2]+c[LU_IND0+2];
      //c SIMD_COMMENT_0

      a[LU_IND0+7] = b[LU_IND0+3];
      //c SIMD_COMMENT_1

      b[LU_IND0+7] = a[LU_IND0+3]+c[LU_IND0+3];
   }
   i = 100;
   ;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   float v4sf_vec8[3+1];
   float v4sf_vec7[3+1];
   float v4sf_vec6[3+1];
   float v4sf_vec5[3+1];
   float v4sf_vec4[3+1];
   float v4sf_vec3[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec0[3+1];
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      SIMD_LOAD_CONSTANT_V4SF(v4sf_vec2, 1, 1, 1, 1);
      SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_SAVE_V4SF(v4sf_vec0, &a[LU_IND0+4]);
      SIMD_LOAD_V4SF(v4sf_vec5, &c[LU_IND0]);
      SIMD_LOAD_V4SF(v4sf_vec4, &a[LU_IND0]);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec4, v4sf_vec5);
      SIMD_SAVE_V4SF(v4sf_vec3, &b[LU_IND0+4]);
   }
   i = 100;
   ;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   float v4sf_vec8[3+1];
   float v4sf_vec7[3+1];
   float v4sf_vec6[3+1];
   float v4sf_vec5[3+1];
   float v4sf_vec4[3+1];
   float v4sf_vec3[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec0[3+1];
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   SIMD_LOAD_CONSTANT_V4SF(v4sf_vec2, 1, 1, 1, 1);
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_SAVE_V4SF(v4sf_vec0, &a[LU_IND0+4]);
      SIMD_LOAD_V4SF(v4sf_vec5, &c[LU_IND0]);
      SIMD_LOAD_V4SF(v4sf_vec4, &a[LU_IND0]);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec4, v4sf_vec5);
      SIMD_SAVE_V4SF(v4sf_vec3, &b[LU_IND0+4]);
   }
   i = 100;
   ;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   float v4sf_vec5[3+1];
   float v4sf_vec4[3+1];
   float v4sf_vec3[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec0[3+1];
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   SIMD_LOAD_CONSTANT_V4SF(v4sf_vec2, 1, 1, 1, 1);
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_SAVE_V4SF(v4sf_vec0, &a[LU_IND0+4]);
      SIMD_LOAD_V4SF(v4sf_vec5, &c[LU_IND0]);
      SIMD_LOAD_V4SF(v4sf_vec4, &a[LU_IND0]);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec4, v4sf_vec5);
      SIMD_SAVE_V4SF(v4sf_vec3, &b[LU_IND0+4]);
   }
   i = 100;
   ;
}

simdized code

void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   float v4sf_vec5[3+1];
   float v4sf_vec4[3+1];
   float v4sf_vec3[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec0[3+1];
   int LU_IND0;
   int LU_IB0;
   int LU_NUB0;
   int i;
   // icc cannot vectorize this
   LU_NUB0 = 100;
   LU_IB0 = 0;
   LU_IND0 = 0;
   SIMD_LOAD_CONSTANT_V4SF(v4sf_vec2, 1, 1, 1, 1);
   for(LU_IND0 = 0; LU_IND0 <= 99; LU_IND0 += 4) {
      SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_SAVE_V4SF(v4sf_vec0, &a[LU_IND0+4]);
      SIMD_LOAD_V4SF(v4sf_vec5, &c[LU_IND0]);
      SIMD_LOAD_V4SF(v4sf_vec4, &a[LU_IND0]);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec4, v4sf_vec5);
      SIMD_SAVE_V4SF(v4sf_vec3, &b[LU_IND0+4]);
   }
   i = 100;
   ;
}
