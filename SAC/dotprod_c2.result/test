
Initial code

float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   for(i = 0; i <= n-1; i += 1)
      a += inner_loop(i, b, c);
   
   
   return a;
}

After Unfolding

float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a += _return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= 4*(n/4)-1; i += 4) {
      _return0 = b[i]+c[i];
      a = a+_return0;
      _return0 = b[i+1]+c[i+1];
      a = a+_return0;
      _return0 = b[i+2]+c[i+2];
      a = a+_return0;
      _return0 = b[i+3]+c[i+3];
      a = a+_return0;
   }
   for(i = 4*(n/4); i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0, RED0[4], RED1[1];
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   for(i = 0; i <= 4*(n/4)-1; i += 4) {
      _return0 = b[i]+c[i];
      RED0[0] = RED0[0]+_return0;
      _return0 = b[i+1]+c[i+1];
      RED0[1] = RED0[1]+_return0;
      _return0 = b[i+2]+c[i+2];
      RED0[2] = RED0[2]+_return0;
      _return0 = b[i+3]+c[i+3];
      RED0[3] = RED0[3]+_return0;
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   RED1[0] = 0.000000;
   for(i = 4*(n/4); i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      RED1[0] = RED1[0]+_return0;
   }
   a = RED1[0]+a;
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0, RED0[4], RED1[1];
   //PIPS generated variable
   int i0, i1;
   //PIPS generated variable
   float _return00, _return01, _return02, _return03;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
      _return00 = b[i0]+c[i0];
      RED0[0] = RED0[0]+_return00;
      _return01 = b[i0+1]+c[i0+1];
      RED0[1] = RED0[1]+_return01;
      _return02 = b[i0+2]+c[i0+2];
      RED0[2] = RED0[2]+_return02;
      _return03 = b[i0+3]+c[i0+3];
      RED0[3] = RED0[3]+_return03;
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   RED1[0] = 0.000000;
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1) {
      _return0 = b[i1]+c[i1];
      RED1[0] = RED1[0]+_return0;
   }
   a = RED1[0]+a;
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0, RED0[4], RED1[1];
   //PIPS generated variable
   int i0, i1;
   //PIPS generated variable
   float _return00, _return01, _return02, _return03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40;
      SIMD_LOAD_V4SF(vec20, &c[i0]);
      SIMD_LOAD_V4SF(vec10, &b[i0]);
      SIMD_ADDPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec30, &RED0[0]);
      SIMD_ADDPS(vec30, vec30, vec00);
      SIMD_STORE_V4SF(vec30, &RED0[0]);
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   RED1[0] = 0.000000;
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1) {
      _return0 = b[i1]+c[i1];
      RED1[0] = RED1[0]+_return0;
   }
   a = RED1[0]+a;
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0, RED0[4], RED1[1];
   //PIPS generated variable
   int i0, i1;
   //PIPS generated variable
   float _return00, _return01, _return02, _return03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec30;
      SIMD_LOAD_V4SF(vec30, &RED0[0]);
      for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec40;
         SIMD_LOAD_V4SF(vec20, &c[i0]);
         SIMD_LOAD_V4SF(vec10, &b[i0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_ADDPS(vec30, vec30, vec00);
      }
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_STORE_V4SF(vec30, &RED0[0]);
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   RED1[0] = 0.000000;
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1) {
      _return0 = b[i1]+c[i1];
      RED1[0] = RED1[0]+_return0;
   }
   a = RED1[0]+a;
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0, RED0[4], RED1[1];
   //PIPS generated variable
   int i0, i1;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec30;
      SIMD_LOAD_V4SF(vec30, &RED0[0]);
      for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec40;
         SIMD_LOAD_V4SF(vec20, &c[i0]);
         SIMD_LOAD_V4SF(vec10, &b[i0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_ADDPS(vec30, vec30, vec00);
      }
      SIMD_STORE_V4SF(vec30, &RED0[0]);
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   RED1[0] = 0.000000;
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1) {
      _return0 = b[i1]+c[i1];
      RED1[0] = RED1[0]+_return0;
   }
   a = RED1[0]+a;
   
   
   return a;
}

simdized code

float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0, RED0[4], RED1[1];
   //PIPS generated variable
   int i0, i1;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec30;
      SIMD_LOAD_V4SF(vec30, &RED0[0]);
      for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec40;
         SIMD_LOAD_V4SF(vec20, &c[i0]);
         SIMD_LOAD_V4SF(vec10, &b[i0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_ADDPS(vec30, vec30, vec00);
      }
      SIMD_STORE_V4SF(vec30, &RED0[0]);
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   RED1[0] = 0.000000;
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1) {
      _return0 = b[i1]+c[i1];
      RED1[0] = RED1[0]+_return0;
   }
   a = RED1[0]+a;
   
   
   return a;
}
