
Initial code

short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      //c SIMD_COMMENT_0

      seed = seed+a[LU_IND0];
      //c SIMD_COMMENT_0

      seed = seed+a[LU_IND0+1];
      //c SIMD_COMMENT_0

      seed = seed+a[LU_IND0+2];
      //c SIMD_COMMENT_0

      seed = seed+a[LU_IND0+3];
   }
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   short RED0[0+1];
   short RED1[3+1];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      //c SIMD_COMMENT_0

      RED1[0] = RED1[0]+a[LU_IND0];
      //c SIMD_COMMENT_0

      RED1[1] = RED1[1]+a[LU_IND0+1];
      //c SIMD_COMMENT_0

      RED1[2] = RED1[2]+a[LU_IND0+2];
      //c SIMD_COMMENT_0

      RED1[3] = RED1[3]+a[LU_IND0+3];
   }
   seed = RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   short RED0[0+1];
   short RED1[3+1];
   short seed0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed0 = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      //c SIMD_COMMENT_0

      RED1[0] = RED1[0]+a[LU_IND0];
      //c SIMD_COMMENT_0

      RED1[1] = RED1[1]+a[LU_IND0+1];
      //c SIMD_COMMENT_0

      RED1[2] = RED1[2]+a[LU_IND0+2];
      //c SIMD_COMMENT_0

      RED1[3] = RED1[3]+a[LU_IND0+3];
   }
   seed = RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   short RED0[0+1];
   short RED1[3+1];
   short seed0;
   short v4hi_vec0[3+1];
   short v4hi_vec1[3+1];
   int v2si_vec2[1+1];
   int v2si_vec3[1+1];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed0 = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      SIMD_LOAD_V4HI(v4hi_vec1, &a[LU_IND0]);
      SIMD_LOAD_V4HI(v4hi_vec0, &RED1[0]);
      SIMD_ADDW(v4hi_vec0, v4hi_vec0, v4hi_vec1);
      SIMD_SAVE_V4HI(v4hi_vec0, &RED1[0]);
   }
   seed = RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   short RED0[0+1];
   short RED1[3+1];
   short seed0;
   short v4hi_vec0[3+1];
   short v4hi_vec1[3+1];
   int v2si_vec2[1+1];
   int v2si_vec3[1+1];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed0 = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   SIMD_LOAD_V4HI(v4hi_vec0, &RED1[0]);
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      SIMD_LOAD_V4HI(v4hi_vec1, &a[LU_IND0]);
      SIMD_ADDW(v4hi_vec0, v4hi_vec0, v4hi_vec1);
   }
   SIMD_SAVE_V4HI(v4hi_vec0, &RED1[0]);
   seed = RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   short RED0[0+1];
   short RED1[3+1];
   short seed0;
   short v4hi_vec0[3+1];
   short v4hi_vec1[3+1];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed0 = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   SIMD_LOAD_V4HI(v4hi_vec0, &RED1[0]);
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      SIMD_LOAD_V4HI(v4hi_vec1, &a[LU_IND0]);
      SIMD_ADDW(v4hi_vec0, v4hi_vec0, v4hi_vec1);
   }
   SIMD_SAVE_V4HI(v4hi_vec0, &RED1[0]);
   seed = RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
   i = MAX0(LU_NUB0, 0);
   return seed;
}

simdized code

short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   size_t LU_NUB0;
   size_t LU_IB0;
   size_t LU_IND0;
   short RED0[0+1];
   short RED1[3+1];
   short seed0;
   short v4hi_vec0[3+1];
   short v4hi_vec1[3+1];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed0 = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   SIMD_LOAD_V4HI(v4hi_vec0, &RED1[0]);
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      SIMD_LOAD_V4HI(v4hi_vec1, &a[LU_IND0]);
      SIMD_ADDW(v4hi_vec0, v4hi_vec0, v4hi_vec1);
   }
   SIMD_SAVE_V4HI(v4hi_vec0, &RED1[0]);
   seed = RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
