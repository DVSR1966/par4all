
Initial code

void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   for(i = 0; i <= 127; i += 1)
      if (data[i]>val)                                                  /*0006*/
         data[i] = val;                                                 /*0007*/
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1];
   for(i = 0; i <= 127; i += 1) {
      I_0[i] = data[i]>val;
      data[i] = I_0[i]?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   //PIPS:SAC generated long long vector(s)
   long long v2di_vec0[1+1];
   //PIPS:SAC generated double vector(s)
   double v2df_vec1[1+1];
   //PIPS:SAC generated float vector(s)
   float v2sf_vec2[1+1];
   //PIPS:SAC generated long long vector(s)
   long long v2di_vec3[1+1];
   //PIPS:SAC generated double vector(s)
   double v2df_vec4[1+1];
   //PIPS:SAC generated float vector(s)
   float v2sf_vec5[1+1];
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      SIMD_LOAD_GENERIC_V2SF(v2sf_vec2, val, val);
      SIMD_LOAD_V2DF(v2df_vec1, &data[LU_IND0]);
      SIMD_GTPD(v2di_vec0, v2df_vec1, v2sf_vec2);
      SIMD_SAVE_V2DI(v2di_vec0, &I_0[LU_IND0]);
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   //PIPS:SAC generated long long vector(s)
   long long v2di_vec0[1+1];
   //PIPS:SAC generated double vector(s)
   double v2df_vec1[1+1];
   //PIPS:SAC generated float vector(s)
   float v2sf_vec2[1+1];
   //PIPS:SAC generated long long vector(s)
   long long v2di_vec3[1+1];
   //PIPS:SAC generated double vector(s)
   double v2df_vec4[1+1];
   //PIPS:SAC generated float vector(s)
   float v2sf_vec5[1+1];
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   SIMD_LOAD_GENERIC_V2SF(v2sf_vec2, val, val);
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      SIMD_LOAD_V2DF(v2df_vec1, &data[LU_IND0]);
      SIMD_GTPD(v2di_vec0, v2df_vec1, v2sf_vec2);
      SIMD_SAVE_V2DI(v2di_vec0, &I_0[LU_IND0]);
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   //PIPS:SAC generated long long vector(s)
   long long v2di_vec0[1+1];
   //PIPS:SAC generated double vector(s)
   double v2df_vec1[1+1];
   //PIPS:SAC generated float vector(s)
   float v2sf_vec2[1+1];
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   SIMD_LOAD_GENERIC_V2SF(v2sf_vec2, val, val);
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      SIMD_LOAD_V2DF(v2df_vec1, &data[LU_IND0]);
      SIMD_GTPD(v2di_vec0, v2df_vec1, v2sf_vec2);
      SIMD_SAVE_V2DI(v2di_vec0, &I_0[LU_IND0]);
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}

simdized code

void threshold(float data[128], float val)
{
   int i;                                                               /*0004*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   //PIPS:SAC generated long long vector(s)
   long long v2di_vec0[1+1];
   //PIPS:SAC generated double vector(s)
   double v2df_vec1[1+1];
   //PIPS:SAC generated float vector(s)
   float v2sf_vec2[1+1];
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   SIMD_LOAD_GENERIC_V2SF(v2sf_vec2, val, val);
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 2) {
      SIMD_LOAD_V2DF(v2df_vec1, &data[LU_IND0]);
      SIMD_GTPD(v2di_vec0, v2df_vec1, v2sf_vec2);
      SIMD_SAVE_V2DI(v2di_vec0, &I_0[LU_IND0]);
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
   }
   i = 128;
   ;
}
seq-ok
