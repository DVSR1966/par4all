
Initial code

void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 4*(N/4)-1; j += 4) {
         C[i][j] = A[i][j]*val;
         C[i][j+1] = A[i][j+1]*val;
         C[i][j+2] = A[i][j+2]*val;
         C[i][j+3] = A[i][j+3]*val;
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 4*(N/4)-1; j += 4) {
         C[i][j] = val*A[i][j];
         C[i][1+j] = val*A[i][1+j];
         C[i][2+j] = val*A[i][2+j];
         C[i][3+j] = val*A[i][3+j];
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i][j] = val*A[i][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         C[i0][j0] = val*A[i0][j0];
         C[i0][1+j0] = val*A[i0][1+j0];
         C[i0][2+j0] = val*A[i0][2+j0];
         C[i0][3+j0] = val*A[i0][3+j0];
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec10, vec20;
         SIMD_LOAD_V4HI_TO_V4SF(vec20, &A[i0][j0]);
         SIMD_LOAD_BROADCAST_V4SF(vec10, val);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_STORE_V4SF_TO_V4SI(vec00, &C[i0][j0]);
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, val);
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         SIMD_LOAD_V4HI_TO_V4SF(vec20_0, &A[i0][j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_STORE_V4SF_TO_V4SI(vec00_0, &C[i0][j0]);
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, val);
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         SIMD_LOAD_V4HI_TO_V4SF(vec20_0, &A[i0][j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_STORE_V4SF_TO_V4SI(vec00_0, &C[i0][j0]);
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 8*(N/8)-1; j += 8) {
         A[i][j] = A[i][j]+val;
         A[i][j+1] = A[i][j+1]+val;
         A[i][j+2] = A[i][j+2]+val;
         A[i][j+3] = A[i][j+3]+val;
         A[i][j+4] = A[i][j+4]+val;
         A[i][j+5] = A[i][j+5]+val;
         A[i][j+6] = A[i][j+6]+val;
         A[i][j+7] = A[i][j+7]+val;
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 8*(N/8)-1; j += 8) {
         A[i][j] = val+A[i][j];
         A[i][1+j] = val+A[i][1+j];
         A[i][2+j] = val+A[i][2+j];
         A[i][3+j] = val+A[i][3+j];
         A[i][4+j] = val+A[i][4+j];
         A[i][5+j] = val+A[i][5+j];
         A[i][6+j] = val+A[i][6+j];
         A[i][7+j] = val+A[i][7+j];
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i][j] = val+A[i][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         A[i0][j0] = val+A[i0][j0];
         A[i0][1+j0] = val+A[i0][1+j0];
         A[i0][2+j0] = val+A[i0][2+j0];
         A[i0][3+j0] = val+A[i0][3+j0];
         A[i0][4+j0] = val+A[i0][4+j0];
         A[i0][5+j0] = val+A[i0][5+j0];
         A[i0][6+j0] = val+A[i0][6+j0];
         A[i0][7+j0] = val+A[i0][7+j0];
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i0][j] = val+A[i0][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         v8hi vec30, vec40;
         SIMD_LOAD_V8HI(vec30, &A[i0][j0]);
         SIMD_LOAD_BROADCAST_V8HI(vec40, val);
         SIMD_ADDW(vec30, vec40, vec30);
         SIMD_STORE_V8HI(vec30, &A[i0][j0]);
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i0][j] = val+A[i0][j];
   }
}
