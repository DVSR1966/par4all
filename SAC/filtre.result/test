
Initial code

void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   for(i = 4-1; i <= 99; i += 1)
loop:
      for(k = 0; k <= 3; k += 1)
         y[i] = y[i]+x[i-k]*h[k];
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   for(i = 4-1; i <= 99; i += 1)
loop:
      for(k = 0; k <= 3; k += 1) {
         F_0 = x[i-k]*h[k];
         y[i] = y[i]+F_0;
      }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   for(i = 4-1; i <= 99; i += 1) {
loop:      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
         F_0 = x[i-(LU_IND0*1+0)]*h[LU_IND0*1+0];
         RED0[0] = RED0[0]+F_0;
l99999:         ;
      }
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+0)*1+0)]*h[(LU_IND0+0)*1+0];
         //c SIMD_COMMENT_1

         RED1[0] = RED1[0]+F_0;
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+1)*1+0)]*h[(LU_IND0+1)*1+0];
         //c SIMD_COMMENT_1

         RED1[1] = RED1[1]+F_0;
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+2)*1+0)]*h[(LU_IND0+2)*1+0];
         //c SIMD_COMMENT_1

         RED1[2] = RED1[2]+F_0;
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+3)*1+0)]*h[(LU_IND0+3)*1+0];
         //c SIMD_COMMENT_1

         RED1[3] = RED1[3]+F_0;
l99998:         ;
      }
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 0+MAX0(LU_NUB0, 0)*1;
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   for(i = 4-1; i <= 99; i += 1) {
loop:      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
         F_0 = x[i-(LU_IND0*1+0)]*h[LU_IND0*1+0];
         RED0[0] = RED0[0]+F_0;
l99999:         ;
      }
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+0)*1+0)]*h[(LU_IND0+0)*1+0];
         //c SIMD_COMMENT_1

         RED1[0] = RED1[0]+F_0;
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+1)*1+0)]*h[(LU_IND0+1)*1+0];
         //c SIMD_COMMENT_1

         RED1[1] = RED1[1]+F_0;
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+2)*1+0)]*h[(LU_IND0+2)*1+0];
         //c SIMD_COMMENT_1

         RED1[2] = RED1[2]+F_0;
         //c SIMD_COMMENT_0

         F_0 = x[i-((LU_IND0+3)*1+0)]*h[(LU_IND0+3)*1+0];
         //c SIMD_COMMENT_1

         RED1[3] = RED1[3]+F_0;
l99998:         ;
      }
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 0+MAX0(LU_NUB0, 0)*1;
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   float F_00;
   float F_01;
   float F_02;
   float F_03;
   float F_04;
   for(i = 3; i <= 99; i += 1) {
      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      //c SIMD_COMMENT_0

      F_03 = x[i-LU_IND0]*h[LU_IND0];
      //c SIMD_COMMENT_1

      RED1[0] = RED1[0]+F_03;
      //c SIMD_COMMENT_0

      F_02 = x[i-LU_IND0-1]*h[LU_IND0+1];
      //c SIMD_COMMENT_1

      RED1[1] = RED1[1]+F_02;
      //c SIMD_COMMENT_0

      F_01 = x[i-LU_IND0-2]*h[LU_IND0+2];
      //c SIMD_COMMENT_1

      RED1[2] = RED1[2]+F_01;
      //c SIMD_COMMENT_0

      F_00 = x[i-LU_IND0-3]*h[LU_IND0+3];
      //c SIMD_COMMENT_1

      RED1[3] = RED1[3]+F_00;
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   float F_00;
   float F_01;
   float F_02;
   float F_03;
   float F_04;
   for(i = 3; i <= 99; i += 1) {
      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      //c SIMD_COMMENT_0

      F_03 = x[i-LU_IND0]*h[LU_IND0];
      //c SIMD_COMMENT_1

      RED1[0] = RED1[0]+F_03;
      //c SIMD_COMMENT_0

      F_02 = x[i-LU_IND0-1]*h[LU_IND0+1];
      //c SIMD_COMMENT_1

      RED1[1] = RED1[1]+F_02;
      //c SIMD_COMMENT_0

      F_01 = x[i-LU_IND0-2]*h[LU_IND0+2];
      //c SIMD_COMMENT_1

      RED1[2] = RED1[2]+F_01;
      //c SIMD_COMMENT_0

      F_00 = x[i-LU_IND0-3]*h[LU_IND0+3];
      //c SIMD_COMMENT_1

      RED1[3] = RED1[3]+F_00;
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   float F_00;
   float F_01;
   float F_02;
   float F_03;
   float F_04;
   float v4sf_vec0[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec3[3+1];
   float v4sf_vec4[3+1];
   float v4sf_vec5[3+1];
   float v4sf_vec6[3+1];
   float v4sf_vec7[3+1];
   for(i = 3; i <= 99; i += 1) {
      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &h[LU_IND0]);
      SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, &F_03, &F_02, &F_01, &F_00);
      SIMD_LOAD_V4SF(v4sf_vec3, &RED1[0]);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      SIMD_SAVE_V4SF(v4sf_vec3, &RED1[0]);
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   float F_0;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   float F_00;
   float F_01;
   float F_02;
   float F_03;
   float F_04;
   float v4sf_vec0[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec3[3+1];
   float v4sf_vec4[3+1];
   float v4sf_vec5[3+1];
   float v4sf_vec6[3+1];
   float v4sf_vec7[3+1];
   SIMD_LOAD_V4SF(v4sf_vec3, &RED1[0]);
   for(i = 3; i <= 99; i += 1) {
      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &h[LU_IND0]);
      SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, &F_03, &F_02, &F_01, &F_00);
   SIMD_SAVE_V4SF(v4sf_vec3, &RED1[0]);
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   float F_00;
   float F_01;
   float F_02;
   float F_03;
   float v4sf_vec0[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec3[3+1];
   SIMD_LOAD_V4SF(v4sf_vec3, &RED1[0]);
   for(i = 3; i <= 99; i += 1) {
      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &h[LU_IND0]);
      SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, &F_03, &F_02, &F_01, &F_00);
   SIMD_SAVE_V4SF(v4sf_vec3, &RED1[0]);
   ;
}

simdized code

void filtre(float x[100], float y[100], float h[4])
{
   int i;
   int k;
   int LU_NUB0;
   int LU_IB0;
   int LU_IND0;
   float RED0[0+1];
   float RED1[3+1];
   float F_00;
   float F_01;
   float F_02;
   float F_03;
   float v4sf_vec0[3+1];
   float v4sf_vec1[3+1];
   float v4sf_vec2[3+1];
   float v4sf_vec3[3+1];
   SIMD_LOAD_V4SF(v4sf_vec3, &RED1[0]);
   for(i = 3; i <= 99; i += 1) {
      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &h[0]);
      SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, x[i-0], x[i-0-1], x[i-0-2], x[i-0-3]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, &F_03, &F_02, &F_01, &F_00);
   SIMD_SAVE_V4SF(v4sf_vec3, &RED1[0]);
   ;
}
