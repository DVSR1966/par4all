      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
      IF (INCX.EQ.1.AND.INCY.EQ.1) GOTO 20                              0022
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      IX = 1                                                            0027
      IY = 1                                                            0028
      DO 10 I = 1, SIZE                                                 0029
         SY(IY) = SY(IY)+SA*SX(IX)                                      0030
         IX = IX+INCX                                                   0031
         IY = IY+INCY                                                   0032
10       CONTINUE                                                       0033
      RETURN
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    DO 50 I = 1, SIZE                                                 0045
         SY(I) = SY(I)+SA*SX(I)                                         0046
50       CONTINUE                                                       0047
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0045
            SY(I) = SY(I)+SA*SX(I)                                      0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0027
         IY = 1                                                         0028
         DO 10 I = 1, SIZE                                              0029
            SY(IY) = SY(IY)+SA*SX(IX)                                   0030
            IX = IX+INCX                                                0031
            IY = IY+INCY                                                0032
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0045
            SY(I) = SY(I)+SA*SX(I)                                      0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0027
         IY = 1                                                         0028
         DO 10 I = 1, SIZE                                              0029
            SY(IY) = SY(IY)+SA*SX(IX)                                   0030
            IX = IX+INCX                                                0031
            IY = IY+INCY                                                0032
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0045
            SY(I) = SY(I)+SA*SX(I)                                      0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0027
         IY = 1                                                         0028
         DO 10 I = 1, SIZE                                              0029
            SY(IY) = SY(IY)+SA*SX(IX)                                   0030
            IX = IX+INCX                                                0031
            IY = IY+INCY                                                0032
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0045
            SY(I) = SY(I)+SA*SX(I)                                      0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0027
         IY = 1                                                         0028
         DO 10 I = 1, SIZE                                              0029
            SY(IY) = SY(IY)+SA*SX(IX)                                   0030
            IX = IX+INCX                                                0031
            IY = IY+INCY                                                0032
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0045
            SY(I) = SY(I)+SA*SX(I)                                      0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0027
         IY = 1                                                         0028
         DO 10 I = 1, SIZE                                              0029
            SY(IY) = SY(IY)+SA*SX(IX)                                   0030
            IX = IX+INCX                                                0031
            IY = IY+INCY                                                0032
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0045
            SY(I) = SY(I)+SA*SX(I)                                      0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         DO 10 I = 1, SIZE                                              0029
            SY(IY) = SY(IY)+SA*SX(IX)                                   0030
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSEIF (1.EQ.1.AND.1.EQ.1) THEN                                   0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, 1000                                              0045
            F_0 = SA*SX(I)
            SY(I) = SY(I)+F_0                                           0046
50          CONTINUE                                                    0047
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         DO 10 I = 1, 1000                                              0029
            F_1 = SA*SX(IX)
            SY(IY) = SY(IY)+F_1                                         0030
10          CONTINUE                                                    0033
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       LU_NUB0 = 1000
         LU_IB0 = 0
         LU_IND0 = 0
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+1)
c SIMD_COMMENT_1
            SY(LU_IND0+1) = SY(LU_IND0+1)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+2)
c SIMD_COMMENT_1
            SY(LU_IND0+2) = SY(LU_IND0+2)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+3)
c SIMD_COMMENT_1
            SY(LU_IND0+3) = SY(LU_IND0+3)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+4)
c SIMD_COMMENT_1
            SY(LU_IND0+4) = SY(LU_IND0+4)+F_0
99998       CONTINUE
         I = 1001
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       LU_NUB0 = 1000
         LU_IB0 = 0
         LU_IND0 = 0
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+1)
c SIMD_COMMENT_1
            SY(LU_IND0+1) = SY(LU_IND0+1)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+2)
c SIMD_COMMENT_1
            SY(LU_IND0+2) = SY(LU_IND0+2)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+3)
c SIMD_COMMENT_1
            SY(LU_IND0+3) = SY(LU_IND0+3)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+4)
c SIMD_COMMENT_1
            SY(LU_IND0+4) = SY(LU_IND0+4)+F_0
99998       CONTINUE
         I = 1001
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
c
      IF (SA.EQ.0.0) THEN                                               0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+1)
c SIMD_COMMENT_1
            SY(LU_IND0+1) = SY(LU_IND0+1)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+2)
c SIMD_COMMENT_1
            SY(LU_IND0+2) = SY(LU_IND0+2)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+3)
c SIMD_COMMENT_1
            SY(LU_IND0+3) = SY(LU_IND0+3)+F_0
c SIMD_COMMENT_0
            F_0 = SA*SX(LU_IND0+4)
c SIMD_COMMENT_1
            SY(LU_IND0+4) = SY(LU_IND0+4)+F_0
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 SA0, F_03, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE), SY(1:
     &SIZE), SA

      SA0 = 3                                                           0017
c
      IF (SA0.EQ.0.0) THEN                                              0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
            F_03 = SA0*SX(LU_IND0+1)
c SIMD_COMMENT_1
            SY(LU_IND0+1) = SY(LU_IND0+1)+F_03
c SIMD_COMMENT_0
            F_02 = SA0*SX(LU_IND0+2)
c SIMD_COMMENT_1
            SY(LU_IND0+2) = SY(LU_IND0+2)+F_02
c SIMD_COMMENT_0
            F_01 = SA0*SX(LU_IND0+3)
c SIMD_COMMENT_1
            SY(LU_IND0+3) = SY(LU_IND0+3)+F_01
c SIMD_COMMENT_0
            F_00 = SA0*SX(LU_IND0+4)
c SIMD_COMMENT_1
            SY(LU_IND0+4) = SY(LU_IND0+4)+F_00
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 v4sf_vec4(0:3), v4sf_vec3(0:3), aligned0(0:3), aligned(0
     &:3), v4sf_vec2(0:3), v4sf_vec1(0:3), v4sf_vec0(0:3), SA0, F_03
     &, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA0 = 3                                                           0017
c
      IF (SA0.EQ.0.0) THEN                                              0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
            CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(1+LU_IND0))
            CALL SIMD_LOAD_V4SF(v4sf_vec1, aligned(0))
            CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
            CALL SIMD_STORE_V4SF(v4sf_vec0, aligned0(0))
            CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(1+LU_IND0))
            CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
            CALL SIMD_STORE_V4SF(v4sf_vec3, SY(1+LU_IND0))
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 v4sf_vec4(0:3), v4sf_vec3(0:3), aligned0(0:3), aligned(0
     &:3), v4sf_vec2(0:3), v4sf_vec1(0:3), v4sf_vec0(0:3), SA0, F_03
     &, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA0 = 3                                                           0017
c
      IF (SA0.EQ.0.0) THEN                                              0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
            CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(1+LU_IND0))
            CALL SIMD_LOAD_V4SF(v4sf_vec1, aligned(0))
            CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
            CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(1+LU_IND0))
            CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
            CALL SIMD_STORE_V4SF(v4sf_vec3, SY(1+LU_IND0))
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 v4sf_vec4(0:3), v4sf_vec3(0:3), aligned0(0:3), aligned(0
     &:3), v4sf_vec2(0:3), v4sf_vec1(0:3), v4sf_vec0(0:3), SA0, F_03
     &, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA0 = 3                                                           0017
c
      IF (SA0.EQ.0.0) THEN                                              0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         CALL SIMD_LOAD_V4SF(v4sf_vec1, aligned(0))
         DO 99998 LU_IND0 = 0, 999, 4
            CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(1+LU_IND0))
            CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
            CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(1+LU_IND0))
            CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
            CALL SIMD_STORE_V4SF(v4sf_vec3, SY(1+LU_IND0))
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND0
      REAL*4 v4sf_vec3(0:3), aligned(0:3), v4sf_vec2(0:3), v4sf_vec1(
     &0:3), v4sf_vec0(0:3), SA0, SX(1:SIZE), SY(1:SIZE)

      SA0 = 3                                                           0017
c
      IF (SA0.EQ.0.0) THEN                                              0021
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         CALL SIMD_LOAD_V4SF(v4sf_vec1, aligned(0))
         DO 99998 LU_IND0 = 0, 999, 4
            CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(1+LU_IND0))
            CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
            CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(1+LU_IND0))
            CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
            CALL SIMD_STORE_V4SF(v4sf_vec3, SY(1+LU_IND0))
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
nsucc = 2 
Result = if (sa == 0.0) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}

Result before = if (sa == 0.0) {
 goto 00000;
}

Result after = if (sa == 0.0) {
 goto 00000;
}

nsucc = 2 
Result = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

Result before = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

Result after = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

nsucc = 1 
nsucc = 1 
nsucc = 0 
/* C pretty print for module SAXPY. */
void
saxpy (float sx[1000], float sy[1000])
{
  float v4sf_vec3[4];
  float aligned[4];
  float v4sf_vec2[4];
  float v4sf_vec1[4];
  float v4sf_vec0[4];
  float sa0;
  int lu_ind0;
  static const float size = 1000;

  sa0 = 3;
  if (sa0 == 0.0)
    {
    }
  else
    {
      ;
      ;
      simd_load_v4sf (v4sf_vec1, aligned[0]);
      for (lu_ind0 = 0; lu_ind0 <= 999; lu_ind0 += 4)
	{
	  simd_load_v4sf (v4sf_vec2, sx[(1 + lu_ind0) - 1]);
	  simd_mulps (v4sf_vec0, v4sf_vec1, v4sf_vec2);
	  simd_load_v4sf (v4sf_vec3, sy[(1 + lu_ind0) - 1]);
	  simd_addps (v4sf_vec3, v4sf_vec3, v4sf_vec0);
	  simd_store_v4sf (v4sf_vec3, sy[(1 + lu_ind0) - 1]);
	  continue;
	}
      ;
    }
  return;
}

