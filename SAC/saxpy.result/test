      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
      IF (INCX.EQ.1.AND.INCY.EQ.1) GOTO 20                              0022
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      IX = 1                                                            0027
      IY = 1                                                            0028
      DO 10 I = 1, SIZE                                                 0029
         SY(IY) = SY(IY)+SA*SX(IX)                                      0030
         IX = IX+INCX                                                   0031
         IY = IY+INCY                                                   0032
10       CONTINUE                                                       0033
      RETURN
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    DO 50 I = 1, SIZE                                                 0045
         SY(I) = SY(I)+SA*SX(I)                                         0046
50       CONTINUE                                                       0047
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
      IF (INCX.EQ.1.AND.INCY.EQ.1) GOTO 20                              0022
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      IX = 1                                                            0027
      IY = 1                                                            0028
      DO 10 I = 1, SIZE                                                 0029
         SY(IY) = SY(IY)+SA*SX(IX)                                      0030
         IX = IX+INCX                                                   0031
         IY = IY+INCY                                                   0032
10       CONTINUE                                                       0033
      RETURN
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    DO 50 I = 1, SIZE                                                 0045
         SY(I) = SY(I)+SA*SX(I)                                         0046
50       CONTINUE                                                       0047
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
      IF (INCX.EQ.1.AND.INCY.EQ.1) GOTO 20                              0022
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      IX = 1                                                            0027
      IY = 1                                                            0028
      DO 10 I = 1, SIZE                                                 0029
         SY(IY) = SY(IY)+SA*SX(IX)                                      0030
         IX = IX+INCX                                                   0031
         IY = IY+INCY                                                   0032
10       CONTINUE                                                       0033
      RETURN
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    DO 50 I = 1, SIZE                                                 0045
         SY(I) = SY(I)+SA*SX(I)                                         0046
50       CONTINUE                                                       0047
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
      IF (1.EQ.1.AND.1.EQ.1) GOTO 20                                    0022
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      IX = 1                                                            0027
      IY = 1                                                            0028
      DO 10 I = 1, 1000                                                 0029
         F_1 = SA*SX(IX)
         SY(IY) = SY(IY)+F_1                                            0030
         IX = IX+INCX                                                   0031
         IY = IY+INCY                                                   0032
10       CONTINUE                                                       0033
      RETURN
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    DO 50 I = 1, 1000                                                 0045
         F_0 = SA*SX(I)
         SY(I) = SY(I)+F_0                                              0046
50       CONTINUE                                                       0047
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    LU_NUB0 = 1000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+1)
c SIMD_COMMENT_1
         SY(LU_IND0+1) = SY(LU_IND0+1)+F_0                              0046
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+2)
c SIMD_COMMENT_1
         SY(LU_IND0+2) = SY(LU_IND0+2)+F_0                              0046
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+3)
c SIMD_COMMENT_1
         SY(LU_IND0+3) = SY(LU_IND0+3)+F_0                              0046
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+4)
c SIMD_COMMENT_1
         SY(LU_IND0+4) = SY(LU_IND0+4)+F_0                              0046
99998    CONTINUE
      I = 1001
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    LU_NUB0 = 1000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+1)
c SIMD_COMMENT_1
         SY(LU_IND0+1) = SY(LU_IND0+1)+F_0                              0046
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+2)
c SIMD_COMMENT_1
         SY(LU_IND0+2) = SY(LU_IND0+2)+F_0                              0046
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+3)
c SIMD_COMMENT_1
         SY(LU_IND0+3) = SY(LU_IND0+3)+F_0                              0046
c SIMD_COMMENT_0
         F_0 = SA*SX(LU_IND0+4)
c SIMD_COMMENT_1
         SY(LU_IND0+4) = SY(LU_IND0+4)+F_0                              0046
99998    CONTINUE
      I = 1001
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 F_03, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE), SY(1:SIZE)
     &, SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    LU_NUB0 = 1000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      DO 99998 LU_IND0 = 0, 999, 4
c SIMD_COMMENT_0
         F_03 = SA*SX(LU_IND0+1)
c SIMD_COMMENT_1
         SY(LU_IND0+1) = SY(LU_IND0+1)+F_03                             0046
c SIMD_COMMENT_0
         F_02 = SA*SX(LU_IND0+2)
c SIMD_COMMENT_1
         SY(LU_IND0+2) = SY(LU_IND0+2)+F_02                             0046
c SIMD_COMMENT_0
         F_01 = SA*SX(LU_IND0+3)
c SIMD_COMMENT_1
         SY(LU_IND0+3) = SY(LU_IND0+3)+F_01                             0046
c SIMD_COMMENT_0
         F_00 = SA*SX(LU_IND0+4)
c SIMD_COMMENT_1
         SY(LU_IND0+4) = SY(LU_IND0+4)+F_00                             0046
99998    CONTINUE
      I = 1001
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 v4sf_vec7(0:3), v4sf_vec6(0:3), v4sf_vec5(0:3), 
     &v4sf_vec4(0:3), v4sf_vec3(0:3), v4sf_vec2(0:3), v4sf_vec1(0:3)
     &, v4sf_vec0(0:3), F_03, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE)
     &, SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    LU_NUB0 = 1000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      DO 99998 LU_IND0 = 0, 999, 4
         CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(LU_IND0+1))
         CALL SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, SA, SA, SA, SA)
         CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
         CALL SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, F_03, F_02, F_01, 
     &   F_00)
         CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(LU_IND0+1))
         CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
         CALL SIMD_SAVE_V4SF(v4sf_vec3, SY(LU_IND0+1))
99998    CONTINUE
      I = 1001
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY, M, MP1
      REAL*4 v4sf_vec7(0:3), v4sf_vec6(0:3), v4sf_vec5(0:3), 
     &v4sf_vec4(0:3), v4sf_vec3(0:3), v4sf_vec2(0:3), v4sf_vec1(0:3)
     &, v4sf_vec0(0:3), F_03, F_02, F_01, F_00, F_1, F_0, SX(1:SIZE)
     &, SY(1:SIZE), SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    LU_NUB0 = 1000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      CALL SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, SA, SA, SA, SA)
      DO 99998 LU_IND0 = 0, 999, 4
         CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(LU_IND0+1))
         CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
         CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(LU_IND0+1))
         CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
         CALL SIMD_SAVE_V4SF(v4sf_vec3, SY(LU_IND0+1))
99998    CONTINUE
      CALL SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, F_03, F_02, F_01, F_00)
      I = 1001
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      REAL*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND0, LU_IB0, LU_NUB0, I, INCX, INCY
      REAL*4 v4sf_vec3(0:3), v4sf_vec2(0:3), v4sf_vec1(0:3), 
     &v4sf_vec0(0:3), F_03, F_02, F_01, F_00, SX(1:SIZE), SY(1:SIZE)
     &, SA

      SA = 3                                                            0017
      INCX = 1                                                          0018
      INCY = 1                                                          0019
c
      IF (SA.EQ.0.0) RETURN                                             0021
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    LU_NUB0 = 1000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      CALL SIMD_LOAD_GENERIC_V4SF(v4sf_vec1, SA, SA, SA, SA)
      DO 99998 LU_IND0 = 0, 999, 4
         CALL SIMD_LOAD_V4SF(v4sf_vec2, SX(LU_IND0+1))
         CALL SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2)
         CALL SIMD_LOAD_V4SF(v4sf_vec3, SY(LU_IND0+1))
         CALL SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0)
         CALL SIMD_SAVE_V4SF(v4sf_vec3, SY(LU_IND0+1))
99998    CONTINUE
      CALL SIMD_SAVE_GENERIC_V4SF(v4sf_vec0, F_03, F_02, F_01, F_00)
      I = 1001
c      PRINT *, 'aft'
      END
nsucc = 2 
Result = if (sa == 0.0) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}

Result before = if (sa == 0.0) {
 goto 00000;
}

Result after = if (sa == 0.0) {
 goto 00000;
}

nsucc = 1 
nsucc = 0 
nsucc = 2 
Result = if (sa == 0.0) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}

Result before = if (sa == 0.0) {
 goto 00000;
}

Result after = if (sa == 0.0) {
 goto 00000;
}

nsucc = 2 
Result = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

Result before = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

Result after = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

nsucc = 1 
nsucc = 1 
nsucc = 0 
/* C pretty print for module SAXPY. */
#define size 1000

void
saxpy (float sx[1000], float sy[1000])
{
  float v4sf_vec3[4];
  float v4sf_vec2[4];
  float v4sf_vec1[4];
  float v4sf_vec0[4];
  float f_03;
  float f_02;
  float f_01;
  float f_00;
  int lu_ind0;
  int lu_ib0;
  int lu_nub0;
  float sa;
  int i;
  int incx;
  int incy;

  sa = 3;
  incx = 1;
  incy = 1;
  if (sa == 0.0)
    {
      goto 00000;
    }
  lu_nub0 = 1000;
  lu_ib0 = 0;
  lu_ind0 = 0;
  ;
  simd_load_generic_v4sf (v4sf_vec1, sa, sa, sa, sa);
  for (lu_ind0 = 0; lu_ind0 <= 999; lu_ind0 += 4)
    {
      simd_load_v4sf (v4sf_vec2, sx[(lu_ind0 + 1) - 1]);
      simd_mulps (v4sf_vec0, v4sf_vec1, v4sf_vec2);
      simd_load_v4sf (v4sf_vec3, sy[(lu_ind0 + 1) - 1]);
      simd_addps (v4sf_vec3, v4sf_vec3, v4sf_vec0);
      simd_save_v4sf (v4sf_vec3, sy[(lu_ind0 + 1) - 1]);
      continue;
    }
  simd_save_generic_v4sf (v4sf_vec0, f_03, f_02, f_01, f_00);
  i = 1001;
  ;
  return;
}

