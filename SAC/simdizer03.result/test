raw file
int main(int main, char *main[])
{
   int b, *a, c[4];
   do {
      a = malloc(sizeof(int)*4);
      a[0] = b*2;
      a[1] = b*3;
      a[2] = b*4;
      a[3] = b*5;
   }
   while (0);
   do {
      c[0] = b*2;
      c[1] = b*3;
      c[2] = b*4;
      c[3] = b*5;
   }
   while (0);
   return 0;
}
after vectorization
int main(int main, char *main[])
{
   int b, *a, c[4];
   //PIPS:SAC generated int vector(s)
   int v4si_vec0[3+1], v4si_vec1[3+1], v4si_vec2[3+1];
   //PIPS:SAC generated variable
   int aligned[3+1] = {2, 3, 4, 5}, aligned0[3+1] = {0, 0, 0, 0};
   //PIPS:SAC generated int vector(s)
   int v4si_vec3[3+1], v4si_vec4[3+1], v4si_vec5[3+1];
   //PIPS:SAC generated variable
   int aligned1[3+1] = {2, 3, 4, 5};
   do {
      a = malloc(sizeof(int)*4);
      SIMD_LOAD_V4SI(v4si_vec2, &aligned[0]);
      SIMD_LOAD_V4SI(v4si_vec1, &aligned0[0]);
      SIMD_MULD(v4si_vec0, v4si_vec1, v4si_vec2);
      SIMD_SAVE_V4SI(v4si_vec0, &a[0]);
   }
   while (0);
   do {
      SIMD_LOAD_V4SI(v4si_vec5, &aligned1[0]);
      SIMD_LOAD_V4SI(v4si_vec4, &aligned0[0]);
      SIMD_MULD(v4si_vec3, v4si_vec4, v4si_vec5);
      SIMD_SAVE_V4SI(v4si_vec3, &c[0]);
   }
   while (0);
   return 0;
}

