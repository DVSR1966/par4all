Release notes for Par4All 0.2, 2010/06/15
=========================================

Par4All is an open-source environment to do source-to-source
transformations on C and Fortran programs for parallelizing, optimizing,
instrumenting, reverse-engineering, etc. on various targets.

Ronan Keryell, HPC Project.


Introduction:
-------------

(More documentation and information is available on http://par4all.org.)

This is the first public version of Par4All. It parallelizes C programs to
OpenMP and CUDA, and Fortran programs to OpenMP.

For support: support at par4all dot org

This release presents basic features of Par4All. If you need more complex
transformations, parallelizations and optimizations, you may contact HPC
Project for business support.

The main user interface in Par4All is the command-line interface ``p4a`` to
invoke parallelization, but also back-end compilation or automatic
``CMakeFile`` generation.

But the other commands from the PIPS project included in Par4All are also
available: ``tpips`` and ``ipyps``. Of course, it is reserved for quite more
advised users. For more information, look at http://pips4u.org


Installation:
-------------

You can install Par4All in different ways, more or less automatic. The
installation is done into ``/usr/local/par4all``. If you want Par4All
installed in another location, use the compilation way at the end of this
section.

The best way if you are on GNU/Linux Debian or Ubuntu is to use
our package repository. This way, when a new version is out, your
classical package manager can automatically install it.

To use our package repository, pick *one* of the following lines, and 
append it to your /etc/apt/sources.list:

  deb http://download.par4all.org/ubuntu releases main
  deb http://download.par4all.org/ubuntu nightly main
  deb http://download.par4all.org/debian releases main
  deb http://download.par4all.org/debian nightly main
  
(Nightly packages are generated every night, and is best suited if you want
to track closely Par4All development. The stability is not guaranteed with
nightly builds.)

Once this is done, run::

  sudo aptitude update
  sudo aptitude install par4all

And you are good to go!

A less automatic way on Debian or Linux is to install the Par4All
``.deb`` package you have found on http://download.par4all.org with::

  sudo gdebi <the_package>.deb

(sudo dpkg -i <the_package>.deb would also work but does not automatically
install dependencies.)

An even less automatic way is to use a tar ball ``.tgz`` file. It should
work on any GNU/Linux distribution. The procedure is first as ``root`` to
create a repository you can write into with the user id of your choice
with something like::

  mkdir /usr/local/par4all
  chown <your-id> /usr/local/par4all

and then outside the ``root`` mode do a::

  cd /
  tar xvf <the_tar_ball>.tgz


Once you have installed Par4All with any of the previous way, you have to
do, if you use a (ba)sh script (more common case)::

  source /usr/local/par4all/etc/par4all-rc.sh

or if you use a (t)csh script::

  source /usr/local/par4all/etc/par4all-rc.csh

to initialize all the environment variables to run Par4All.

Then you can look at the manual of ``p4a`` on
http://www.par4all.org/documentation for information on how to use Par4All.

More details on the installation or how to compile Par4All from your own
can be found into the document describing all the infrastructure:
http://www.par4all.org/documentation/par4all-infrastructure



Fortran:
--------

The support for Fortran95 is not included in this release since it was not
mature enough at this release time, so only Fortran 77 with some
extensions is currently accepted.

Fortran95 support should be in the 2010/09 release.


C:
--

Full C99 support is almost complete but right now there are nevertheless
few known limitationsÂ :

- variables in functions can only be defined at the beginning of a block,
  before any normal statement (like in C89)

- for a similar reason, loop index variable can not be declared directly
  in the loop such according the C99 syntax as in::

    {
      [...]
      for(int i = 0; i < N; i++) {
        [...]
      }
      [...]
    }

  but should be replaced with the C89 syntax as::

    {
      int i;
      [...]
      for(i = 0; i < N; i++) {
        [...]
      }
      [...]
    }

- you should avoid heavy use of pointers to enable a good
  parallelization. The point-to analysis is still on-going in PIPS

- there are still issues in the part that analyzes the control graph (the
  PIPS ``controlizer``). For example, right now we cannot deal well with a
  different hierarchy between the control graph and the variable
  scoping. For example if you have a block with a variable declaration
  within and a ``goto`` to/from outside, it may probably fail. This
  happens also if you have ``break`` or ``continue`` in loops with some local
  variables since those are internally represented with ``goto``.

Full C99 support should be in the 2010/09 release.


Cuda:
-----

To compile and to run the CUDA output, you should have the following
environment variables set:

- ``CUDA_DIR`` to the directory where CUDA has been installed (default to
  ``/usr/local/cuda``)

- ``CUDA_SDK_DIR`` to where the CUDA SDK has been installed (default to
  ``$HOME/NVIDIA_GPU_Computing_SDK``)

- ``LD_LIBRARY_PATH`` should contains at least ``$CUDA_DIR/lib64``


SIMD and multimedia extensions:
-------------------------------

The SIMD (SSE) output is not included in this release yet since it was not
ready at release time but should be in the 2010/09 release.


Python:
-------

On Debian, PLY seems to be installed only with Python 2.5. It works with
Python 2.6 and 3.1 with the ``PYTHONPATH`` generated for Par4All (with a
trailing ``:/usr/share/pyshared``). Unfortunately this breaks ``ipyps``.


This text is typeset according to the reStructuredText Markup
Specification. For more information:
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html

%%% Local Variables:
%%% mode: rst
%%% ispell-local-dictionary: "american"
%%% End:
