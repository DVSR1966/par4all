#!/bin/sh

# Change the access rights while PIPS is operating on the workspace

tpips=${tpips_version:-tpips}

# In case something went wrong during a previous execution
chmod a+rwx protected_workspace2.database
Delete protected_workspace2

($tpips 2>&1 | sed '/file *\//d') <<EOF

echo
echo The message should be: workspace protected_workspace2: Permission denied
echo

# we should generate a user_error in db_update_file_time_of_resource() if we cannot 'stat'
# a file

create protected_workspace2 ${PIPS_ROOT}/Validation/Tpips/protected_workspace2.f
shell chmod u-rwx protected_workspace2.database
display PRINTED_FILE
shell chmod u+rwx protected_workspace2.database
# Fabien would like a close before the delete... but it should be useless
# since the open whould have failed
delete protected_workspace2
quit
EOF

# tpips is not too good at dealing with protection problems
# let's try to fix (temporarily) the problem
rm -f core
chmod u+rwx protected_workspace2.database
Delete protected_workspace2.database


