
Privatize scalar variables


Privatize scalar variables


 **************** Effective Dependence Graph ****************

	11 --> 11 with conflicts
		from <TOP-LEVEL:Matrix(i)-R-MUST> to <TOP-LEVEL:Matrix(i,j)-W-MUST> at levels  2
	11 --> 11 with conflicts
		from <TOP-LEVEL:Matrix(i,j)-W-MUST> to <TOP-LEVEL:Matrix(i)-R-MUST> at levels  2
	08 --> 11 with conflicts
		from <TOP-LEVEL:Matrix(i)-W-MUST> to <TOP-LEVEL:Matrix(i,j)-W-MUST> at levels  2
	08 --> 11 with conflicts
		from <TOP-LEVEL:Matrix(i)-W-MUST> to <TOP-LEVEL:Matrix(i)-R-MUST> at levels  2
	08 --> 08 with conflicts
		from <_MALLOC_-R-MUST> to <_MALLOC_-W-MUST> at levels  1
	08 --> 08 with conflicts
		from <_MALLOC_-W-MUST> to <_MALLOC_-W-MUST> at levels  1
	08 --> 08 with conflicts
		from <_MALLOC_-W-MUST> to <_MALLOC_-R-MUST> at levels  1

****************** End of Dependence Graph ******************

// OMP style

int main(void)
{
   int i;
   int j;

   Matrix = (int **) malloc(N*sizeof(int *));                           /*0005*/
   for(i = 0; i <= N-1; i += 1)                                         /*0006*/
      Matrix[i] = (int *) malloc(Z*sizeof(int));                        /*0008*/
#pragma omp parallel for private(j)
   for(i = 0; i <= N-1; i += 1)                                         /*0006*/
      for(j = 0; j <= Z-1; j += 1)                                      /*0009*/
         Matrix[i][j] = i*j;                                            /*0011*/
   return 0;                                                            /*0014*/
}

Internalize parallel code


Ompify code

typedef unsigned int size_t;
typedef int wchar_t;
typedef struct {int quot; int rem;} div_t;
typedef struct {long quot; long rem;} ldiv_t;
extern size_t __ctype_get_mb_cur_max(void);
extern double atof(const char *__nptr);
extern int atoi(const char *__nptr);
extern long atol(const char *__nptr);
extern double strtod(const char *__nptr, char **__endptr);
extern long strtol(const char *__nptr, char **__endptr, int __base);
extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
extern char *l64a(long __n);
extern long a64l(const char *__s);
typedef unsigned char __u_char;
typedef unsigned short __u_short;
typedef unsigned int __u_int;
typedef unsigned long __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short __int16_t;
typedef unsigned short __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long __int64_t;
typedef unsigned long __uint64_t;
typedef long __quad_t;
typedef unsigned long __u_quad_t;
typedef unsigned long __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long __ino_t;
typedef unsigned long __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long __nlink_t;
typedef long __off_t;
typedef long __off64_t;
typedef int __pid_t;
typedef struct {int __val[2];} __fsid_t;
typedef long __clock_t;
typedef unsigned long __rlim_t;
typedef unsigned long __rlim64_t;
typedef unsigned int __id_t;
typedef long __time_t;
typedef unsigned int __useconds_t;
typedef long __suseconds_t;
typedef int __daddr_t;
typedef long __swblk_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long __blksize_t;
typedef long __blkcnt_t;
typedef long __blkcnt64_t;
typedef unsigned long __fsblkcnt_t;
typedef unsigned long __fsblkcnt64_t;
typedef unsigned long __fsfilcnt_t;
typedef unsigned long __fsfilcnt64_t;
typedef long __ssize_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef long __intptr_t;
typedef unsigned int __socklen_t;
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
typedef __loff_t loff_t;
typedef __ino_t ino_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __off_t off_t;
typedef __pid_t pid_t;
typedef __id_t id_t;
typedef __ssize_t ssize_t;
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
typedef __key_t key_t;
typedef __time_t time_t;
typedef __clockid_t clockid_t;
typedef __timer_t timer_t;
typedef unsigned long ulong;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef unsigned char u_int8_t;
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long u_int64_t;
typedef int register_t;
typedef int __sig_atomic_t;
typedef struct {unsigned long __val[1024/(8*sizeof(unsigned long))];} __sigset_t;
typedef __sigset_t sigset_t;
struct timespec {
   __time_t tv_sec;
   long tv_nsec;
};
struct timeval {
   __time_t tv_sec;
   __suseconds_t tv_usec;
};
typedef __suseconds_t suseconds_t;
typedef long __fd_mask;
typedef struct {__fd_mask __fds_bits[1024/(8*sizeof(__fd_mask))];} fd_set;
typedef __fd_mask fd_mask;
extern int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout);
extern int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask);
typedef __blkcnt_t blkcnt_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef unsigned long pthread_t;
typedef union {char __size[56]; long __align;} pthread_attr_t;
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev;
   struct __pthread_internal_list *__next;
};
typedef struct __pthread_internal_list __pthread_list_t;
struct __pthread_mutex_s {
   int __lock;
   unsigned int __count;
   int __owner;
   unsigned int __nusers;
   int __kind;
   int __spins;
   __pthread_list_t __list;
};
typedef union {struct __pthread_mutex_s __data; char __size[40]; long __align;} pthread_mutex_t;
typedef union {char __size[4]; int __align;} pthread_mutexattr_t;
typedef union {struct {int __lock; unsigned int __futex; unsigned long long __total_seq; unsigned long long __wakeup_seq; unsigned long long __woken_seq; void *__mutex; unsigned int __nwaiters; unsigned int __broadcast_seq;} __data; char __size[48]; long long __align;} pthread_cond_t;
typedef union {char __size[4]; int __align;} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union {struct {int __lock; unsigned int __nr_readers; unsigned int __readers_wakeup; unsigned int __writer_wakeup; unsigned int __nr_readers_queued; unsigned int __nr_writers_queued; int __writer; int __shared; unsigned long __pad1; unsigned long __pad2; unsigned int __flags;} __data; char __size[56]; long __align;} pthread_rwlock_t;
typedef union {char __size[8]; long __align;} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union {char __size[32]; long __align;} pthread_barrier_t;
typedef union {char __size[4]; int __align;} pthread_barrierattr_t;
extern long random(void);
extern void srandom(unsigned int __seed);
extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen);
extern char *setstate(char *__statebuf);
struct random_data {
   int32_t *fptr;
   int32_t *rptr;
   int32_t *state;
   int rand_type;
   int rand_deg;
   int rand_sep;
   int32_t *end_ptr;
};
extern int random_r(struct random_data *__buf, int32_t *__result);
extern int srandom_r(unsigned int __seed, struct random_data *__buf);
extern int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf);
extern int setstate_r(char *__statebuf, struct random_data *__buf);
extern int rand(void);
extern void srand(unsigned int __seed);
extern int rand_r(unsigned int *__seed);
extern double drand48(void);
extern double erand48(unsigned short __xsubi[3]);
extern long lrand48(void);
extern long nrand48(unsigned short __xsubi[3]);
extern long mrand48(void);
extern long jrand48(unsigned short __xsubi[3]);
extern void srand48(long __seedval);
extern unsigned short *seed48(unsigned short __seed16v[3]);
extern void lcong48(unsigned short __param[7]);
struct drand48_data {
   unsigned short __x[3];
   unsigned short __old_x[3];
   unsigned short __c;
   unsigned short __init;
   unsigned long long __a;
};
extern int drand48_r(struct drand48_data *__buffer, double *__result);
extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *__buffer, double *__result);
extern int lrand48_r(struct drand48_data *__buffer, long *__result);
extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *__buffer, long *__result);
extern int mrand48_r(struct drand48_data *__buffer, long *__result);
extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *__buffer, long *__result);
extern int srand48_r(long __seedval, struct drand48_data *__buffer);
extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer);
extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer);
extern void *malloc(size_t __size);
extern void *calloc(size_t __nmemb, size_t __size);
extern void *realloc(void *__ptr, size_t __size);
extern void free(void *__ptr);
extern void cfree(void *__ptr);
extern void *alloca(size_t __size);
extern void *valloc(size_t __size);
extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size);
extern void abort(void);
extern int atexit(void (*__func)(void));
extern int on_exit(void (*__func)(int __status, void *__arg), void *__arg);
extern void exit(int __status);
extern char *getenv(const char *__name);
extern char *__secure_getenv(const char *__name);
extern int putenv(char *__string);
extern int setenv(const char *__name, const char *__value, int __replace);
extern int unsetenv(const char *__name);
extern int clearenv(void);
extern char *mktemp(char *__template);
extern int mkstemp(char *__template);
extern char *mkdtemp(char *__template);
extern int system(const char *__command);
extern char *realpath(const char *__name, char *__resolved);
typedef int (*__compar_fn_t)(void *, void *);
extern void *bsearch(void *__key, void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
extern int abs(int __x);
extern long labs(long __x);
extern div_t div(int __numer, int __denom);
extern ldiv_t ldiv(long __numer, long __denom);
extern char *ecvt(double __value, int __ndigit, int *__decpt, int *__sign);
extern char *fcvt(double __value, int __ndigit, int *__decpt, int *__sign);
extern char *gcvt(double __value, int __ndigit, char *__buf);
extern char *qecvt(double __value, int __ndigit, int *__decpt, int *__sign);
extern char *qfcvt(double __value, int __ndigit, int *__decpt, int *__sign);
extern char *qgcvt(double __value, int __ndigit, char *__buf);
extern int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len);
extern int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len);
extern int qecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len);
extern int qfcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len);
extern int mblen(const char *__s, size_t __n);
extern int mbtowc(wchar_t *__pwc, const char *__s, size_t __n);
extern int wctomb(char *__s, wchar_t __wchar);
extern size_t mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n);
extern size_t wcstombs(char *__s, const wchar_t *__pwcs, size_t __n);
extern int rpmatch(const char *__response);
extern int posix_openpt(int __oflag);
extern int getloadavg(double __loadavg[], int __nelem);
const int N = 10;
const int Z = 10;
int **Matrix;
extern int main(void);
int main(void)
{
   int i;
   int j;

   Matrix = (int **) malloc(N*sizeof(int *));                           /*0005*/
   for(i = 0; i <= N-1; i += 1)                                         /*0006*/
      Matrix[i] = (int *) malloc(Z*sizeof(int));                        /*0008*/
#pragma omp parallel for private(j)
   for(i = 0; i <= N-1; i += 1)                                         /*0006*/
      for(j = 0; j <= Z-1; j += 1)                                      /*0009*/
         Matrix[i][j] = i*j;                                            /*0011*/
   return 0;                                                            /*0014*/
}

Unsplit code

