setproperty ABORT_ON_USER_ERROR TRUE
delete partial_eval02
create partial_eval02 partial_eval02.c

activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate TRANSFORMERS_INTER_FULL
activate PRECONDITIONS_INTER_FULL
setproperty SEMANTICS_FIX_POINT_OPERATOR "derivative"

echo
echo Initial code for "partial_eval02"
echo

display PRINTED_FILE[partial_eval02]

echo
echo Initial code for "main"
echo

display PRINTED_FILE[main]

echo
echo Preconditions "main"
echo

activate PRINT_CODE_PRECONDITIONS
display PRINTED_FILE[main]
activate PRINT_CODE

echo
echo Preconditions "partial_eval02"
echo

activate PRINT_CODE_PRECONDITIONS
display PRINTED_FILE[partial_eval02]
activate PRINT_CODE

echo
echo Code after partial evaluation for "partial_eval02"
echo

apply PARTIAL_EVAL[partial_eval02]
display PRINTED_FILE[partial_eval02]


echo
echo Code after partial evaluation for "main"
echo

apply PARTIAL_EVAL[main]
display PRINTED_FILE[main]

echo
echo Same code with evaluation of constants
echo

setproperty EVAL_SYMBOLIC_CONSTANT TRUE
apply PARTIAL_EVAL[partial_eval02]
display PRINTED_FILE[partial_eval02]

echo
echo Unsplit resulting code
echo

apply UNSPLIT
shell (cd partial_eval02.database/Src; cc ../../partial_eval02.c -o partial_eval0)
shell (cd partial_eval02.database/Src; cc partial_eval02.c  -o partial_eval)
shell (cd partial_eval02.database/Src; if test `./partial_eval0` = `./partial_eval`; then echo "ok"; else echo "ko" ; fi)
#shell rm -rf partial_eval02.database/Src/partial_eval partial_eval

close
delete partial_eval02
quit
