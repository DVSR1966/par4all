int activate01(void)
{
   int i;
   double t, s = 0., a[100];
#pragma omp parallel for 
   for(i = 0; i <= 49; i += 1)
      a[i+50] = (a[i]+a[i+50])/2.0;
   for(i = 0; i <= 49; i += 1)
      s = s+2*a[i];
   return s;
}

Warnings

unknown[unknown] (process_user_file) No syntactic check on file "./activate02.c"
unknown[unknown] (activate_phase) Rule `PRECONDITIONS_INTER' undefined.
Check spelling and/or ACTIVE_PHASE property.
INITIAL_PRECONDITION[activate01] (add_or_kill_equivalenced_variables) storage return
PROGRAM_PRECONDITION[] (get_main_entity) no main found, returning activate01 instead
PROGRAM_PRECONDITION[] (add_or_kill_equivalenced_variables) storage return
TRANSFORMERS_INTER_FULL[activate01] (add_or_kill_equivalenced_variables) storage return
TRANSFORMERS_INTER_FULL[activate01] (any_expression_to_transformer) Implicit type coercion between int variable and double expression may reduce semantic analysis accuracy.
Apply 'type_checker' to explicit all type coercions.
PRECONDITIONS_INTRA[activate01] (add_or_kill_equivalenced_variables) storage return
