
Transformers for "foo"


C  T(foo) {s<=foo+1, foo<=s+1}

int foo(int s)
{

//  T(foo) {s<=foo+1, foo<=s+1}

   // BEGIN BLOCK

//  T(t) {s==t-2}

   int t = s+2;

//  T(t) {t#init<=t+3, t+1<=t#init}


   if (t>6)

//  T(t) {t==t#init-3}

      t -= 3;
   else

//  T(t) {t==t#init-1}

      t--;

//  T(foo) {foo==t}


   return t;
   // END BLOCK
}

Transformers for "bar"


//  T(bar) {1<=bar}

int bar()
{

//  T(bar) {1<=bar}

   // BEGIN BLOCK

//  T(x) {x==3}

   int x = 3;

//  T(y) {x==y+3}

   int y = x-3;

//  T(x,y) {x<=4, x#init+y#init<=x+y, x+y#init<=x#init+y, x#init<=4}


   while (x<=4) {

//  T(x,y) {y==y#init+1, x#init<=x+1, x<=x#init+1}

      // BEGIN BLOCK

//  T(y) {y==y#init+1}

      y++;

//  T(x) {x#init<=x+1, x<=x#init+1}

      x = foo(x);
      // END BLOCK
   }

//  T(y) {y#init<=y+1, y<=y#init+1}

   y = foo(y);

//  T(bar) {bar==y}


   return y;
   // END BLOCK
}

Preconditions for "bar"


//  P() {}

int bar()
{

//  P() {}

   // BEGIN BLOCK

//  P() {}

   int x = 3;

//  P() {x==3}

   int y = x-3;

//  P() {x==3, y==0}


   while (x<=4) {

//  P(x,y) {x<=4, 3<=x+y, x<=y+3}

      // BEGIN BLOCK

//  P(x,y) {x<=4, 3<=x+y, x<=y+3}

      y++;

//  P(x,y) {x<=4, 4<=x+y, x<=y+2}

      x = foo(x);
      // END BLOCK
   }

//  P(x,y) {x==5, 2<=y}

   y = foo(y);

//  P(x,y) {x==5, 1<=y}


   return y;
   // END BLOCK
}

Preconditions for "foo"


//  P() {}

int foo(int s)
{

//  P() {}

   // BEGIN BLOCK

//  P() {}

   int t = s+2;

//  P() {s==t-2}


   if (t>6)

//  P() {s==t-2, 5<=s}

      t -= 3;
   else

//  P() {s==t-2, s<=4}

      t--;

//  P(t) {t<=s+1, s<=t+1}


   return t;
   // END BLOCK
}

After inlining/unfolding of "bar"

int bar()
{
   // BEGIN BLOCK
   // BEGIN BLOCK
   int x = 3;
   int y = x-3;
   //PIPS generated variable
   int _return0, _return1;

   while (x<=4) {
      // BEGIN BLOCK
      // BEGIN BLOCK
      y++;
      {
         // BEGIN BLOCK
         // BEGIN BLOCK
         int t = x+2;

         if (t>6)
            t -= 3;
         else
            t--;
         // BEGIN BLOCK
         
         
         // BEGIN BLOCK
         _return0 = t;
         // END BLOCK
         // END BLOCK
         ;
         // END BLOCK
      }
      // END BLOCK
      x = _return0;
      // END BLOCK
   }
   {
      // BEGIN BLOCK
      // BEGIN BLOCK
      int t = x+2;

      if (t>6)
         t -= 3;
      else
         t--;
      // BEGIN BLOCK
      
      
      // BEGIN BLOCK
      _return1 = t;
      // END BLOCK
      // END BLOCK
      ;
      // END BLOCK
   }
   // END BLOCK
   y = _return1;
   // END BLOCK
   
   return y;
   // END BLOCK
}

After unspahettify of "bar"

int bar()
{
   // BEGIN BLOCK
   // BEGIN BLOCK
   int x = 3;
   int y = x-3;
   //PIPS generated variable
   int _return0, _return1;

   while (x<=4) {
      // BEGIN BLOCK
      // BEGIN BLOCK
      y++;
      {
         // BEGIN BLOCK
         // BEGIN BLOCK
         int t = x+2;

         if (t>6)
            t -= 3;
         else
            t--;
         // BEGIN BLOCK
         
         
         // BEGIN BLOCK
         _return0 = t;
         // END BLOCK
         // END BLOCK
         ;
         // END BLOCK
      }
      // END BLOCK
      x = _return0;
      // END BLOCK
   }
   {
      // BEGIN BLOCK
      // BEGIN BLOCK
      int t = x+2;

      if (t>6)
         t -= 3;
      else
         t--;
      // BEGIN BLOCK
      
      
      // BEGIN BLOCK
      _return1 = t;
      // END BLOCK
      // END BLOCK
      ;
      // END BLOCK
   }
   // END BLOCK
   y = _return1;
   // END BLOCK
   
   return y;
   // END BLOCK
}

Preconditions for "bar"


//  P() {}

int bar()
{

//  P() {}

   // BEGIN BLOCK
   // BEGIN BLOCK

//  P() {}

   int x = 3;

//  P() {x==3}

   int y = x-3;
   //PIPS generated variable

//  P() {x==3, y==0}

   int _return0, _return1;

//  P() {x==3, y==0}


   while (x<=4) {

//  P(_return0,x,y) {x<=4, 3<=x+y, x<=y+3}

      // BEGIN BLOCK

//  P(_return0,x,y) {x<=4, 3<=x+y, x<=y+3}

      // BEGIN BLOCK
      y++;
      {

//  P(_return0,x,y) {x<=4, 4<=x+y, x<=y+2}

         // BEGIN BLOCK
         // BEGIN BLOCK

//  P(_return0,x,y) {x<=4, 4<=x+y, x<=y+2}

         int t = x+2;

//  P() {0==-1}


         if (t>6)

//  P() {0==-1}

            t -= 3;
         else

//  P() {0==-1}

            t--;

//  P() {0==-1}

         // BEGIN BLOCK
         
         
         // BEGIN BLOCK
         _return0 = t;

//  P() {0==-1}

         // END BLOCK
         // END BLOCK
         ;
         // END BLOCK
      }

//  P() {0==-1}

      // END BLOCK
      x = _return0;
      // END BLOCK
   }
   {

//  P(_return0,x,y) {_return0==5, x==5, 2<=y}

      // BEGIN BLOCK
      // BEGIN BLOCK

//  P(_return0,x,y) {_return0==5, x==5, 2<=y}

      int t = x+2;

//  P() {0==-1}


      if (t>6)

//  P() {0==-1}

         t -= 3;
      else

//  P() {0==-1}

         t--;

//  P() {0==-1}

      // BEGIN BLOCK
      
      
      // BEGIN BLOCK
      _return1 = t;

//  P() {0==-1}

      // END BLOCK
      // END BLOCK
      ;
      // END BLOCK
   }

//  P() {0==-1}

   // END BLOCK
   y = _return1;

//  P() {0==-1}

   // END BLOCK
   
   return y;
   // END BLOCK
}

After dead code elimination of "bar"


//  P() {}

int bar()
{

//  P() {}

   // BEGIN BLOCK
   // BEGIN BLOCK

//  P() {}

   int x = 3;

//  P() {x==3}

   int y = x-3;
   //PIPS generated variable

//  P() {x==3, y==0}

   int _return0, _return1;

//  P() {x==3, y==0}


   while (x<=4) {

//  P(y) {x==3, 0<=y}

      // BEGIN BLOCK

//  P(y) {x==3, 0<=y}

      // BEGIN BLOCK
      y++;
      {

//  P(y) {x==3, 1<=y}

         // BEGIN BLOCK
         // BEGIN BLOCK

//  P(y) {x==3, 1<=y}

         int t = x+2;

//  P() {0==-1}

         
         // BEGIN BLOCK
         
         
         // BEGIN BLOCK
         // END BLOCK
         // END BLOCK
         ;
         // END BLOCK
      }

//  P() {0==-1}

      // END BLOCK
      ;
      // END BLOCK
   }
   {

//  P() {0==-1}

      // BEGIN BLOCK
      // BEGIN BLOCK

//  P() {0==-1}

      int t = x+2;

//  P() {0==-1}

      
      // BEGIN BLOCK
      
      
      // BEGIN BLOCK
      // END BLOCK
      // END BLOCK
      ;
      // END BLOCK
   }
   // END BLOCK
   // END BLOCK
   

//  P() {0==-1}

   // END BLOCK
}
