
Source code with proper effects

binary_or01()
{
   int ret = 1;
//               <may be read    >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <may be written >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: TOP-LEVEL:stderr ret
//               <must be written>: ret

   ret |= foo();                                                        /*0016*/
//               <may be read    >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <may be written >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: TOP-LEVEL:stderr ret
//               <must be written>: ret

   ret = ret||foo();                                                    /*0018*/
}

Source code with cumulated effects

//               <may be read    >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <may be written >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: TOP-LEVEL:stderr
binary_or01()
{
   int ret = 1;
//               <may be read    >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <may be written >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: TOP-LEVEL:stderr ret
//               <must be written>: ret

   ret |= foo();                                                        /*0016*/
//               <may be read    >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <may be written >: TOP-LEVEL:stderr[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: TOP-LEVEL:stderr ret
//               <must be written>: ret

   ret = ret||foo();                                                    /*0018*/
}

Source code with transformers for "binary_or01"


//  T() {}

binary_or01()
{
   int ret = 1;

//  T(ret) {}


   ret |= foo();                                                        /*0016*/

//  T(ret) {}


   ret = ret||foo();                                                    /*0018*/
}

Source code with preconditions for "binary_or01"


//  P() {}

binary_or01()
{
   int ret = 1;

//  P() {ret==1}


   ret |= foo();                                                        /*0016*/

//  P(ret) {}


   ret = ret||foo();                                                    /*0018*/
}

Warnings

unknown[unknown] (activate) Rule `C_PARSER' already active
INITIAL_PRECONDITION[foo] (add_or_kill_equivalenced_variables) storage return
PROGRAM_PRECONDITION[] (get_main_entity) no main found, returning binary_or01 instead
TRANSFORMERS_INTER_FULL[foo] (add_or_kill_equivalenced_variables) storage return
PRECONDITIONS_INTER_FULL[foo] (add_or_kill_equivalenced_variables) storage return
PRINT_CODE_PRECONDITIONS[foo] (add_or_kill_equivalenced_variables) storage return
