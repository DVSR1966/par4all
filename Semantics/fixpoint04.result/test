
C  T() {}

      PROGRAM FIXPOINT04

C  T(I,J) {}


C     Information about j should not be lost because the convex closure of j
C     unchanged and j = 5 is constrained by condition j >= 5

C     But it does not work with the derivative fixpoint because the
C     condition j <= 5 in the loop body transformer is lost by that
C     fixpoint operator and legaly so since the loop may not be entered

C     The loop may not be entered: no information about j is available
C     when it is printed

      DO I = 1, N                                                       0001

C  T(J) {J<=5, J<=J#init}

         IF (J.GE.5) J = 5                                              0002
      ENDDO

C  T() {}


      PRINT *, J                                                        0004

C  T(I,J) {}


C     The loop is entered: the fix point is not improved (alas) but the
C     loop body is applied at least once which produces a condition on
C     J, namely J <= 5

      DO I = 1, 5                                                       0005

C  T(J) {J<=5, J<=J#init}

         IF (J.GE.5) J = 5                                              0006
      ENDDO

C  T() {}


      PRINT *, J                                                        0008

C  T(I,J) {J<=5, J<=J#init}


C     Suppose J is known to be greater than 5 (in fact, equal to 5
C     because of the previous loop) and the loop certainly entered: the
C     information is lost!

      IF (J.GE.5) THEN                                                  0009

C  T(I,J) {}


         DO I = 1, 5                                                    0010

C  T(J) {J<=5, J<=J#init}

            IF (J.GE.5) J = 5                                           0011
         ENDDO

C  T() {}


         PRINT *, J                                                     0013

      ENDIF

      END

C  P() {}

      PROGRAM FIXPOINT04

C  P() {}


C     Information about j should not be lost because the convex closure of j
C     unchanged and j = 5 is constrained by condition j >= 5

C     But it does not work with the derivative fixpoint because the
C     condition j <= 5 in the loop body transformer is lost by that
C     fixpoint operator and legaly so since the loop may not be entered

C     The loop may not be entered: no information about j is available
C     when it is printed

      DO I = 1, N                                                       0001

C  P(I,J) {1<=I, I<=N}

         IF (J.GE.5) J = 5                                              0002
      ENDDO

C  P(I,J) {1<=I, N+1<=I}


      PRINT *, J                                                        0004

C  P(I,J) {1<=I, N+1<=I}


C     The loop is entered: the fix point is not improved (alas) but the
C     loop body is applied at least once which produces a condition on
C     J, namely J <= 5

      DO I = 1, 5                                                       0005

C  P(I,J) {1<=I, I<=5}

         IF (J.GE.5) J = 5                                              0006
      ENDDO

C  P(I,J) {I==6, J<=5}


      PRINT *, J                                                        0008

C  P(I,J) {I==6, J<=5}


C     Suppose J is known to be greater than 5 (in fact, equal to 5
C     because of the previous loop) and the loop certainly entered: the
C     information is lost!

      IF (J.GE.5) THEN                                                  0009

C  P(I,J) {I==6, J==5}


         DO I = 1, 5                                                    0010

C  P(I,J) {1<=I, I<=5}

            IF (J.GE.5) J = 5                                           0011
         ENDDO

C  P(I,J) {I==6, J<=5}


         PRINT *, J                                                     0013

      ENDIF

      END

