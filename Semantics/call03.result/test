
Source code with proper effects

void call03(int i, float x)
{
//               <must be read   >: i
//               <must be written>: i
   i++;                                                                 /*0004*/
//               <must be read   >: TOP-LEVEL:j
//               <must be written>: TOP-LEVEL:j
   j++;                                                                 /*0005*/
//               <must be read   >: x
//               <must be written>: x
   x++;                                                                 /*0006*/
}

Source code with cumulated effects

//               <must be read   >: TOP-LEVEL:j i x
//               <must be written>: TOP-LEVEL:j
void call03(int i, float x)
{
//               <must be read   >: i
//               <must be written>: i
   i++;                                                                 /*0004*/
//               <must be read   >: TOP-LEVEL:j
//               <must be written>: TOP-LEVEL:j
   j++;                                                                 /*0005*/
//               <must be read   >: x
//               <must be written>: x
   x++;                                                                 /*0006*/
}

Source code with transformers for "call03"


//  T(TOP-LEVEL:j) {TOP-LEVEL:j==j#init+1}

void call03(int i, float x)
{

//  T(i) {i==i#init+1}

   i++;                                                                 /*0004*/

//  T(TOP-LEVEL:j) {TOP-LEVEL:j==j#init+1}

   j++;                                                                 /*0005*/

//  T() {}

   x++;                                                                 /*0006*/
}

Source code with transformers for "main"


//  T(TOP-LEVEL:j) {TOP-LEVEL:j==j#init+1}

main()
{
   int ai = 3;
   float ax = 4.;

//  T(TOP-LEVEL:j) {TOP-LEVEL:j==j#init+1}


   call03(ai, ax);                                                      /*0017*/

//  T(ai) {ai==0}


   ai = 0;                                                              /*0019*/
}

Source code with preconditions for "call03"


//  P() {TOP-LEVEL:j==0, i==3}

void call03(int i, float x)
{

//  P() {TOP-LEVEL:j==0, i==3}

   i++;                                                                 /*0004*/

//  P(i) {TOP-LEVEL:j==0, i==4}

   j++;                                                                 /*0005*/

//  P(TOP-LEVEL:j,i) {TOP-LEVEL:j==1, i==4, j#init==0}

   x++;                                                                 /*0006*/
}

Source code with preconditions for "main"


//  P() {TOP-LEVEL:j==0}

main()
{
   int ai = 3;
   float ax = 4.;

//  P() {TOP-LEVEL:j==0, ai==3}


   call03(ai, ax);                                                      /*0017*/

//  P(TOP-LEVEL:j) {TOP-LEVEL:j==1, ai==3, j#init==0}


   ai = 0;                                                              /*0019*/
}

Warnings

unknown[unknown] (activate_phase) Rule `C_PARSER' already active
unknown[unknown] (activate_phase) Rule `PRINT_CODE_TRANSFORMERS' already active
unknown[unknown] (activate_phase) Rule `PRINT_CODE_PRECONDITIONS' already active
INTERPROCEDURAL_SUMMARY_PRECONDITION[call03!] (ordinary_summary_precondition) empty precondition to call03! because not in call tree from main.
