
Source code with proper effects

int main()
{
   int i, j, k;                                                         /*0003*/
   int a[500];                                                          /*0004*/
//               <must be written>: i

   i = 0;                                                               /*0006*/
//               <must be written>: j
   j = 1;                                                               /*0007*/
//               <must be written>: i

   for(i = 0; i <= 499; i += 1) {
//               <must be read   >: j
//               <must be written>: j
      j++;                                                              /*0010*/
//               <must be read   >: i
//               <must be written>: a[i]
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0012*/
   }
//               <must be written>: k
   /* We would have j==501 in the preconditions here... if we'd use
      // the proper activate and properties: the fast analysis exclude
      // fix points (see for01.tpips) */
   k = 2;                                                               /*0017*/
//               <must be read   >: k
   return k;                                                            /*0018*/
}

Source code with cumulated effects

int main()
{
   int i, j, k;                                                         /*0003*/
   int a[500];                                                          /*0004*/
//               <must be written>: i

   i = 0;                                                               /*0006*/
//               <must be written>: j
   j = 1;                                                               /*0007*/
//               <may be read    >: i j
//               <may be written >: a[*] j
//               <must be written>: i

   for(i = 0; i <= 499; i += 1) {
//               <must be read   >: j
//               <must be written>: j
      j++;                                                              /*0010*/
//               <may be written >: a[*]
//               <must be read   >: i
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0012*/
   }
//               <must be written>: k
   /* We would have j==501 in the preconditions here... if we'd use
      // the proper activate and properties: the fast analysis exclude
      // fix points (see for01.tpips) */
   k = 2;                                                               /*0017*/
//               <must be read   >: k
   return k;                                                            /*0018*/
}

Dependence graph


 ******** Whole Dependence Graph with Dependence Cones ******

	17 --> 18 with conflicts
		from <k-W-MUST> to <k-R-MUST>
	10 --> 10 with conflicts
		from <j-W-MUST> to <j-W-MUST> at levels  1

		from <j-W-MUST> to <j-R-MUST> at levels  1

		from <j-R-MUST> to <j-W-MUST> at levels  1

	07 --> 10 with conflicts
		from <j-W-MUST> to <j-W-MUST>
		from <j-W-MUST> to <j-R-MUST>
	06 --> -1 with conflicts
		from <i-W-MUST> to <i-W-MUST>

****************** End of Dependence Graph ******************

Source code with transformers


//  T(main) {main==2}

int main()
{

//  T(i,j,k) {}

   int i, j, k;                                                         /*0003*/

//  T() {}

   int a[500];                                                          /*0004*/

//  T(i) {i==0}


   i = 0;                                                               /*0006*/

//  T(j) {j==1}

   j = 1;                                                               /*0007*/

//  T(i,j) {}


   for(i = 0; i <= 499; i += 1) {

//  T(j) {j==j#init+1}

      j++;                                                              /*0010*/

//  T() {}

      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0012*/
   }

//  T(k) {k==2}

   /* We would have j==501 in the preconditions here... if we'd use
      // the proper activate and properties: the fast analysis exclude
      // fix points (see for01.tpips) */
   k = 2;                                                               /*0017*/

//  T(main) {k==main}

   return k;                                                            /*0018*/
}

Source code with preconditions


//  P() {}

int main()
{

//  P() {}

   int i, j, k;                                                         /*0003*/

//  P(i,j,k) {}

   int a[500];                                                          /*0004*/

//  P(i,j,k) {}


   i = 0;                                                               /*0006*/

//  P(i,j,k) {i==0}

   j = 1;                                                               /*0007*/

//  P(i,j,k) {i==0, j==1}


   for(i = 0; i <= 499; i += 1) {

//  P(i,j,k) {0<=i, i<=499}

      j++;                                                              /*0010*/

//  P(i,j,k) {0<=i, i<=499}

      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0012*/
   }

//  P(i,j,k) {i==500}

   /* We would have j==501 in the preconditions here... if we'd use
      // the proper activate and properties: the fast analysis exclude
      // fix points (see for01.tpips) */
   k = 2;                                                               /*0017*/

//  P(i,j,k) {i==500, k==2}

   return k;                                                            /*0018*/
}

Warnings

unknown[unknown] (activate_phase) Rule `C_PARSER' already active
unknown[unknown] (parse_properties) property PRETTYPRINT_STATEMENT_NUMBER redefined
unknown[unknown] (parse_properties) property SEMANTICS_FLOW_SENSITIVE redefined
unknown[unknown] (parse_properties) property COMPUTE_ALL_DEPENDENCES redefined
unknown[unknown] (parse_properties) property SEMANTICS_FIX_POINT redefined
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
ATOMIC_CHAINS[main] (references_must_conflict_p) Not completely implemented yet. Conservative under approximation is made
TRANSFORMERS_INTRA_FAST[main] (transformers_intra_fast) Property SEMANTICS_FIX_POINT is ignored
TRANSFORMERS_INTRA_FAST[main] (add_or_kill_equivalenced_variables) storage return
PRINT_CODE_TRANSFORMERS[main] (add_or_kill_equivalenced_variables) storage return
INITIAL_PRECONDITION[main] (add_or_kill_equivalenced_variables) storage return
PRECONDITIONS_INTRA[main] (add_or_kill_equivalenced_variables) storage return
PRINT_CODE_PRECONDITIONS[main] (add_or_kill_equivalenced_variables) storage return
TRANSFORMERS_INTRA_FAST[for01!] (transformers_intra_fast) Property SEMANTICS_FIX_POINT is ignored
