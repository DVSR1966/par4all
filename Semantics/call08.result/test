
Source code with proper effects

int call08(int i)
{
//               <must be read   >: i
//               <must be written>: i
   i += 10;                                                             /*0004*/
//               <must be read   >: TOP-LEVEL:j
//               <must be written>: TOP-LEVEL:j
   j++;                                                                 /*0005*/
//               <must be read   >: i

   return i;                                                            /*0007*/
}

Source code with cumulated effects

//               <must be read   >: TOP-LEVEL:j i
//               <must be written>: TOP-LEVEL:j
int call08(int i)
{
//               <must be read   >: i
//               <must be written>: i
   i += 10;                                                             /*0004*/
//               <must be read   >: TOP-LEVEL:j
//               <must be written>: TOP-LEVEL:j
   j++;                                                                 /*0005*/
//               <must be read   >: i

   return i;                                                            /*0007*/
}

Source code with transformers for "call08"


//  T(TOP-LEVEL:j,call08) {TOP-LEVEL:j==j#init+1, call08==i+10}

int call08(int i)
{

//  T(i) {i==i#init+10}

   i += 10;                                                             /*0004*/

//  T(TOP-LEVEL:j) {TOP-LEVEL:j==j#init+1}

   j++;                                                                 /*0005*/

//  T(call08) {call08==i}


   return i;                                                            /*0007*/
}

Source code with transformers for "main"


//  T(TOP-LEVEL:j) {TOP-LEVEL:j==j#init+1}

main()
{
   int ai = 3;

//  T(TOP-LEVEL:j,ai) {TOP-LEVEL:j==j#init+1, ai==ai#init+11}


   ai = call08(++ai);                                                   /*0017*/

//  T(ai) {ai==0}


   ai = 0;                                                              /*0019*/
}

Source code with preconditions for "call08"


//  P() {TOP-LEVEL:j==0, i==4}

int call08(int i)
{

//  P() {TOP-LEVEL:j==0, i==4}

   i += 10;                                                             /*0004*/

//  P(i) {TOP-LEVEL:j==0, i==14}

   j++;                                                                 /*0005*/

//  P(TOP-LEVEL:j,i) {TOP-LEVEL:j==1, i==14, j#init==0}


   return i;                                                            /*0007*/
}

Source code with preconditions for "main"


//  P() {TOP-LEVEL:j==0}

main()
{
   int ai = 3;

//  P() {TOP-LEVEL:j==0, ai==3}


   ai = call08(++ai);                                                   /*0017*/

//  P(TOP-LEVEL:j,ai) {TOP-LEVEL:j==1, ai==14, j#init==0}


   ai = 0;                                                              /*0019*/
}

Warnings

INITIAL_PRECONDITION[call08] (add_or_kill_equivalenced_variables) storage return
TRANSFORMERS_INTER_FULL[call08] (add_or_kill_equivalenced_variables) storage return
TRANSFORMERS_INTER_FULL[call08] (NormalizeExpression) expression is already normalized
PRINT_CODE_TRANSFORMERS[call08] (add_or_kill_equivalenced_variables) storage return
unknown[unknown] (activate) Rule `PRINT_CODE_TRANSFORMERS' already active
TRANSFORMERS_INTER_FULL[main] (NormalizeExpression) expression is already normalized
TRANSFORMERS_INTER_FULL[main] (any_scalar_assign_to_transformer) Variable 0`ai in lhs is uselessly updated by the rhs 'call08(++ai)'
INTERPROCEDURAL_SUMMARY_PRECONDITION[call08] (NormalizeExpression) expression is already normalized
PRECONDITIONS_INTER_FULL[call08] (add_or_kill_equivalenced_variables) storage return
PRINT_CODE_PRECONDITIONS[call08] (add_or_kill_equivalenced_variables) storage return
unknown[unknown] (activate) Rule `PRINT_CODE_PRECONDITIONS' already active
INTERPROCEDURAL_SUMMARY_PRECONDITION[call08!] (ordinary_summary_precondition) empty precondition to call08! because not in call tree from main.
