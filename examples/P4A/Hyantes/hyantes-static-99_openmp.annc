/* 
 * Command line: opannotate ./hyantes-static-99_openmp --source --assembly 
 * 
 * Interpretation of command line:
 * Output annotated assembly listing with samples
 * 
 * CPU: Intel Core/i7, speed 2933.16 MHz (estimated)
 * Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 100000
 */
               :
               :/home/janice/par4all/examples/P4A/Hyantes/hyantes-static-99_openmp:     file format elf64-x86-64
               :
               :
               :Disassembly of section .text:
               :
0000000000400cd0 <run.omp_fn.0>: /* run.omp_fn.0 total:  71031 99.9930 */
               :{
               :   size_t i, j, k;
               :
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :  400cd0:	push   %r15
               :  400cd2:	push   %r14
               :  400cd4:	push   %r13
               :  400cd6:	push   %r12
               :  400cd8:	push   %rbp
               :  400cd9:	push   %rbx
               :  400cda:	mov    %rdi,%rbx
               :  400cdd:	sub    $0x88,%rsp
               :   for(i = 0; i <= 289; i += 1)
               :  400ce4:	callq  4008d8 <omp_get_num_threads@plt>
               :  400ce9:	movslq %eax,%rbp
               :  400cec:	callq  400958 <omp_get_thread_num@plt>
               :  400cf1:	mov    $0x122,%ecx
               :  400cf6:	mov    %eax,%esi
               :  400cf8:	xor    %edx,%edx
               :  400cfa:	mov    %rcx,%rax
               :  400cfd:	movslq %esi,%rsi
               :  400d00:	div    %rbp
               :  400d03:	xor    %edx,%edx
               :  400d05:	imul   %rax,%rbp
               :  400d09:	cmp    $0x122,%rbp
               :  400d10:	setne  %dl
               :  400d13:	lea    (%rdx,%rax,1),%rax
               :  400d17:	imul   %rax,%rsi
               :  400d1b:	add    %rsi,%rax
               :  400d1e:	mov    %rsi,0x58(%rsp)
               :  400d23:	cmp    $0x122,%rax
               :  400d29:	cmovbe %rax,%rcx
               :  400d2d:	cmp    %rcx,%rsi
               :  400d30:	mov    %rcx,0x60(%rsp)
               :  400d35:	jae    400f3e <run.omp_fn.0+0x26e>
               :  400d3b:	imul   $0x1c08,%rsi,%r15
               :  400d42:	lea    0x78(%rsp),%r14
               :  400d47:	lea    0x70(%rsp),%r13
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :  400d4c:	mov    0x58(%rsp),%rax
               :   size_t i, j, k;
               :
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :   for(i = 0; i <= 289; i += 1)
               :  400d51:	movq   $0x0,0x50(%rsp)
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :  400d5a:	shr    %rax
               :  400d5d:	mov    %rax,0x68(%rsp)
               :  400d62:	mov    0x58(%rsp),%rax
               :  400d67:	and    $0x1,%eax
               :  400d6a:	or     %rax,0x68(%rsp)
               :  400d6f:	nop
               :  400d70:	cmpq   $0x0,0x58(%rsp)
               :  400d76:	js     400f77 <run.omp_fn.0+0x2a7>
               :  400d7c:	cvtsi2sdq 0x58(%rsp),%xmm0
               :  400d83:	movsd  %xmm0,0x40(%rsp)
               :  400d89:	mulsd  0x10(%rbx),%xmm0
     1  0.0014 :  400d8e:	mov    0x50(%rsp),%rcx
               :  400d93:	mov    0x20(%rbx),%rax
               :  400d97:	lea    (%rcx,%rcx,2),%rdx
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
               :  400d9b:	test   %rcx,%rcx
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :   for(i = 0; i <= 289; i += 1)
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :  400d9e:	lea    (%r15,%rdx,8),%rdx
               :  400da2:	addsd  (%rbx),%xmm0
               :  400da6:	mulsd  0x552(%rip),%xmm0        # 401300 <_IO_stdin_used+0x88>
     2  0.0028 :  400dae:	divsd  0x552(%rip),%xmm0        # 401308 <_IO_stdin_used+0x90>
    24  0.0338 :  400db6:	movsd  %xmm0,(%rdx,%rax,1)
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
     1  0.0014 :  400dbb:	js     400f50 <run.omp_fn.0+0x280>
               :  400dc1:	cvtsi2sdq 0x50(%rsp),%xmm0
     2  0.0028 :  400dc8:	movsd  %xmm0,0x38(%rsp)
               :  400dce:	mulsd  0x10(%rbx),%xmm0
     1  0.0014 :  400dd3:	mov    0x50(%rsp),%rdx
               :         pt[i][j].stock = 0.;
               :  400dd8:	xor    %ebp,%ebp
               :
               :#pragma omp parallel for private(k, j)
               :   for(i = 0; i <= 289; i += 1)
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
               :  400dda:	lea    (%rdx,%rdx,2),%rax
               :  400dde:	shl    $0x3,%rax
               :  400de2:	addsd  0x8(%rbx),%xmm0
     1  0.0014 :  400de7:	lea    (%rax,%r15,1),%rdx
               :  400deb:	mov    %rdx,%rcx
               :  400dee:	add    0x20(%rbx),%rcx
               :  400df2:	mulsd  0x506(%rip),%xmm0        # 401300 <_IO_stdin_used+0x88>
     5  0.0070 :  400dfa:	divsd  0x506(%rip),%xmm0        # 401308 <_IO_stdin_used+0x90>
    22  0.0310 :  400e02:	movsd  %xmm0,0x8(%rcx)
               :         pt[i][j].stock = 0.;
               :  400e07:	add    0x20(%rbx),%rdx
     1  0.0014 :  400e0b:	movq   $0x0,0x10(%rdx)
               :         for(k = 0; k <= 2877; k += 1) {
               :            data_t tmp = 6368.*acos(cos(xmin+step*i)*cos(t[k].latitude)*cos(ymin+step*j-t[k].longitude)+sin(xmin+step*i)*sin(t[k].latitude));
               :            if (tmp<range)
               :               pt[i][j].stock += t[k].stock/(1+tmp);
     1  0.0014 :  400e13:	mov    %rax,0x48(%rsp)
               :  400e18:	jmp    400e20 <run.omp_fn.0+0x150>
               :  400e1a:	nop
               :  400e1b:	nop
               :  400e1c:	nop
               :  400e1d:	nop
               :  400e1e:	nop
               :  400e1f:	nop
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
               :         pt[i][j].stock = 0.;
               :         for(k = 0; k <= 2877; k += 1) {
               :            data_t tmp = 6368.*acos(cos(xmin+step*i)*cos(t[k].latitude)*cos(ymin+step*j-t[k].longitude)+sin(xmin+step*i)*sin(t[k].latitude));
  2584  3.6376 :  400e20:	movsd  0x10(%rbx),%xmm1
   159  0.2238 :  400e25:	mov    %r13,%rsi
               :  400e28:	movsd  0x40(%rsp),%xmm0
  2499  3.5179 :  400e2e:	mov    %r14,%rdi
   114  0.1605 :  400e31:	movsd  %xmm1,0x20(%rsp)
   140  0.1971 :  400e37:	mov    %rbp,%r12
               :  400e3a:	mulsd  %xmm1,%xmm0
  2539  3.5742 :  400e3e:	addsd  (%rbx),%xmm0
   253  0.3562 :  400e42:	callq  400988 <sincos@plt>
  2524  3.5531 :  400e47:	add    0x28(%rbx),%r12
               :  400e4b:	movsd  0x70(%rsp),%xmm3
               :  400e51:	movsd  0x78(%rsp),%xmm2
  2563  3.6080 :  400e57:	mov    %r13,%rsi
               :  400e5a:	mov    %r14,%rdi
               :  400e5d:	movsd  (%r12),%xmm0
  5030  7.0809 :  400e63:	movsd  %xmm2,(%rsp)
               :  400e68:	movsd  %xmm3,0x10(%rsp)
               :  400e6e:	callq  400988 <sincos@plt>
  2518  3.5447 :  400e73:	movsd  0x20(%rsp),%xmm1
     1  0.0014 :  400e79:	movsd  0x38(%rsp),%xmm0
               :  400e7f:	mulsd  %xmm1,%xmm0
 17729 24.9578 :  400e83:	addsd  0x8(%rbx),%xmm0
  7577 10.6664 :  400e88:	subsd  0x8(%r12),%xmm0
  7715 10.8607 :  400e8f:	callq  400948 <cos@plt>
  2415  3.3997 :  400e94:	movsd  0x10(%rsp),%xmm3
    46  0.0648 :  400e9a:	movsd  (%rsp),%xmm2
    12  0.0169 :  400e9f:	mulsd  0x70(%rsp),%xmm3
  2530  3.5616 :  400ea5:	mulsd  0x78(%rsp),%xmm2
    14  0.0197 :  400eab:	mulsd  %xmm0,%xmm3
    46  0.0648 :  400eaf:	addsd  %xmm2,%xmm3
    29  0.0408 :  400eb3:	movapd %xmm3,%xmm0
  2584  3.6376 :  400eb7:	callq  400998 <acos@plt>
  2536  3.5700 :  400ebc:	mulsd  0x44c(%rip),%xmm0        # 401310 <_IO_stdin_used+0x98>
               :            if (tmp<range)
    19  0.0267 :  400ec4:	movsd  0x18(%rbx),%xmm1
               :  400ec9:	ucomisd %xmm0,%xmm1
    21  0.0296 :  400ecd:	jbe    400efb <run.omp_fn.0+0x22b>
               :               pt[i][j].stock += t[k].stock/(1+tmp);
   130  0.1830 :  400ecf:	addsd  0x441(%rip),%xmm0        # 401318 <_IO_stdin_used+0xa0>
  1004  1.4134 :  400ed7:	mov    0x28(%rbx),%rdx
               :  400edb:	mov    %r15,%rax
               :  400ede:	add    0x20(%rbx),%rax
    42  0.0591 :  400ee2:	add    0x48(%rsp),%rax
    68  0.0957 :  400ee7:	movsd  0x10(%rdx,%rbp,1),%xmm1
     1  0.0014 :  400eed:	divsd  %xmm0,%xmm1
  2300  3.2378 :  400ef1:	addsd  0x10(%rax),%xmm1
   335  0.4716 :  400ef6:	movsd  %xmm1,0x10(%rax)
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
               :         pt[i][j].stock = 0.;
               :         for(k = 0; k <= 2877; k += 1) {
               :            data_t tmp = 6368.*acos(cos(xmin+step*i)*cos(t[k].latitude)*cos(ymin+step*j-t[k].longitude)+sin(xmin+step*i)*sin(t[k].latitude));
               :            if (tmp<range)
  2697  3.7967 :  400efb:	add    $0x18,%rbp
               :   for(i = 0; i <= 289; i += 1)
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
               :         pt[i][j].stock = 0.;
               :         for(k = 0; k <= 2877; k += 1) {
   192  0.2703 :  400eff:	cmp    $0x10dd0,%rbp
               :  400f06:	jne    400e20 <run.omp_fn.0+0x150>
               :
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :   for(i = 0; i <= 289; i += 1)
               :      for(j = 0; j <= 298; j += 1) {
               :  400f0c:	addq   $0x1,0x50(%rsp)
     2  0.0028 :  400f12:	cmpq   $0x12b,0x50(%rsp)
     2  0.0028 :  400f1b:	jne    400d70 <run.omp_fn.0+0xa0>
               :   size_t i, j, k;
               :
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :   for(i = 0; i <= 289; i += 1)
               :  400f21:	addq   $0x1,0x58(%rsp)
               :  400f27:	add    $0x1c08,%r15
               :  400f2e:	mov    0x58(%rsp),%rdx
               :  400f33:	cmp    %rdx,0x60(%rsp)
               :  400f38:	ja     400d4c <run.omp_fn.0+0x7c>
               :{
               :   size_t i, j, k;
               :
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :  400f3e:	add    $0x88,%rsp
               :  400f45:	pop    %rbx
               :  400f46:	pop    %rbp
               :  400f47:	pop    %r12
               :  400f49:	pop    %r13
               :  400f4b:	pop    %r14
               :  400f4d:	pop    %r15
               :  400f4f:	retq   
               :   for(i = 0; i <= 289; i += 1)
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :         pt[i][j].longitude = (ymin+step*j)*180/3.14159265358979323846;
               :  400f50:	mov    0x50(%rsp),%rax
               :  400f55:	mov    0x50(%rsp),%rdx
               :  400f5a:	shr    %rax
               :  400f5d:	and    $0x1,%edx
               :  400f60:	or     %rdx,%rax
               :  400f63:	cvtsi2sd %rax,%xmm0
               :  400f68:	addsd  %xmm0,%xmm0
               :  400f6c:	movsd  %xmm0,0x38(%rsp)
               :  400f72:	jmpq   400dce <run.omp_fn.0+0xfe>
               :   fprintf(stderr, "begin computation ...\n");
               :
               :#pragma omp parallel for private(k, j)
               :   for(i = 0; i <= 289; i += 1)
               :      for(j = 0; j <= 298; j += 1) {
               :         pt[i][j].latitude = (xmin+step*i)*180/3.14159265358979323846;
               :  400f77:	cvtsi2sdq 0x68(%rsp),%xmm0
               :  400f7e:	addsd  %xmm0,%xmm0
               :  400f82:	movsd  %xmm0,0x40(%rsp)
               :  400f88:	jmpq   400d89 <run.omp_fn.0+0xb9>
               :  400f8d:	jmp    400f90 <run>
               :  400f8f:	nop
               :
               :/home/janice/par4all/examples/P4A/Hyantes/hyantes-static-99_openmp:     file format elf64-x86-64
               :
               :
               :Disassembly of section .text:
               :
0000000000400af0 <display>: /* display total:      5  0.0070 */
               :         }
               :      }
               :   fprintf(stderr, "end computation ...\n");
               :}
               :void display(town pt[290][299])
               :{
               :  400af0:	push   %r12
               :  400af2:	xor    %r12d,%r12d
               :  400af5:	push   %rbp
               :  400af6:	mov    %rdi,%rbp
               :  400af9:	push   %rbx
               :  400afa:	jmp    400b00 <display+0x10>
               :  400afc:	nop
               :  400afd:	nop
               :  400afe:	nop
               :  400aff:	nop
               :   size_t i, j;
               :   for(i = 0; i <= 289; i += 1) {
               :  400b00:	xor    %ebx,%ebx
               :  400b02:	jmp    400b08 <display+0x18>
               :  400b04:	nop
               :  400b05:	nop
               :  400b06:	nop
               :  400b07:	nop
               :}
               :
               :__extern_always_inline int
               :printf (__const char *__restrict __fmt, ...)
               :{
               :  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
     2  0.0028 :  400b08:	movsd  0x0(%rbp,%rbx,1),%xmm0
               :  400b0e:	lea    0x767(%rip),%rsi        # 40127c <_IO_stdin_used+0x4>
               :  400b15:	movsd  0x10(%rbp,%rbx,1),%xmm2
     2  0.0028 :  400b1b:	mov    $0x1,%edi
               :  400b20:	movsd  0x8(%rbp,%rbx,1),%xmm1
               :  400b26:	mov    $0x3,%eax
               :  400b2b:	add    $0x18,%rbx
               :  400b2f:	callq  400908 <__printf_chk@plt>
               :      for(j = 0; j <= 298; j += 1)
     1  0.0014 :  400b34:	cmp    $0x1c08,%rbx
               :  400b3b:	jne    400b08 <display+0x18>
               :  400b3d:	lea    0x758(%rip),%rsi        # 40129c <_IO_stdin_used+0x24>
               :  400b44:	xor    %eax,%eax
               :  400b46:	mov    $0x1,%edi
               :   fprintf(stderr, "end computation ...\n");
               :}
               :void display(town pt[290][299])
               :{
               :   size_t i, j;
               :   for(i = 0; i <= 289; i += 1) {
               :  400b4b:	add    $0x1,%r12
               :  400b4f:	add    $0x1c08,%rbp
               :  400b56:	callq  400908 <__printf_chk@plt>
               :  400b5b:	cmp    $0x122,%r12
               :  400b62:	jne    400b00 <display+0x10>
               :      for(j = 0; j <= 298; j += 1)
               :         printf("%lf %lf %lf\n", pt[i][j].latitude, pt[i][j].longitude, pt[i][j].stock);
               :      printf("\n");
               :   }
               :}
               :  400b64:	pop    %rbx
               :  400b65:	pop    %rbp
               :  400b66:	pop    %r12
               :  400b68:	retq   
               :  400b69:	jmp    400b70 <read_towns>
               :  400b6b:	nop
               :  400b6c:	nop
               :  400b6d:	nop
               :  400b6e:	nop
               :  400b6f:	nop
