setenv WKS jacobi
delete $WKS

setproperty ABORT_ON_USER_ERROR TRUE

create $WKS $WKS.c $P4A_ACCEL_DIR/p4a_stubs.c

activate C_PARSER
setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER TRUE

activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL

# Loop normalize for the C language and GPU friendly
setproperty LOOP_NORMALIZE_ONE_INCREMENT TRUE
setproperty LOOP_NORMALIZE_LOWER_BOUND 0
# It is legal in the following by construction:
setproperty LOOP_NORMALIZE_SKIP_INDEX_SIDE_EFFECT TRUE
# If we do this here, the side effect at the end of a loop on the index
# break paramemstorellelization. It would require to apply USE_DEF_ELIM...
apply LOOP_NORMALIZE[%ALLFUNC]

apply PRIVATIZE_MODULE[%ALLFUNC]

activate PRINT_CODE_REGIONS
display PRINTED_FILE[%ALLFUNC]

# Should not coredump...
#apply LOCALIZE_DECLARATION[main]

#activate PRINT_CODE_PRECONDITIONS
#display PRINTED_FILE[%ALLFUNC]

activate PRINT_CODE
apply COARSE_GRAIN_PARALLELIZATION[%ALLFUNC]
#setproperty PRETTYPRINT_BLOCKS TRUE
display PRINTED_FILE[compute]

#apply GPU_IFY[compute]
apply GPU_IFY[%ALLFUNC]

display PRINTED_FILE[%ALLFUNC]

#setproperty KERNEL_LOAD_STORE_ALLOCATE_FUNCTION "P4A_ACCEL_MALLOC"
#setproperty KERNEL_LOAD_STORE_DEALLOCATE_FUNCTION "P4A_ACCEL_FREE"
#setproperty KERNEL_LOAD_STORE_LOAD_FUNCTION "P4A_COPY_TO_ACCEL"
#setproperty KERNEL_LOAD_STORE_STORE_FUNCTION "P4A_COPY_FROM_ACCEL"

# Only apply communication generation at the level of "compute" to
# factorized out communications. SHould be automated too...
apply KERNEL_LOAD_STORE[compute,p4a_kernel_launcher_2]
display PRINTED_FILE[%ALLFUNC]

# Need pyps for automate this
apply GPU_LOOP_NEST_ANNOTATE[p4a_kernel_launcher_2,p4a_kernel_launcher_3,p4a_kernel_launcher_4]
#display PRINTED_FILE[p4a_kernel_launcher_2]
#apply UNSPLIT
#quit

# Inline back the kernel since CUDA can only deal with local functions if
# they are in the same file as the caller (by inlining them, by the
# way... :-) )
apply INLINING[p4a_kernel_2,p4a_kernel_3,p4a_kernel_4]

# Instead, do a global loop normalization above:
#apply LOOP_NORMALIZE[p4a_kernel_2,p4a_kernel_3,p4a_kernel_4]
#apply USE_DEF_ELIMINATION[p4a_kernel_launcher_0,p4a_kernel_launcher_1,p4a_kernel_launcher_2]
#display PRINTED_FILE[,p4a_kernel_launcher_2,p4a_kernel_launcher_3,p4a_kernel_launcher_4]

#apply SUPPRESS_DEAD_CODE
#display PRINTED_FILE

setproperty PREPEND_COMMENT "// Prepend here P4A_INIT_ACCEL"
apply PREPEND_COMMENT[main]

echo
echo Unsplit resulting code
echo

apply UNSPLIT

shell echo Generating P4A code:
shell echo
shell cd $WKS.database; $P4A_ACCEL_DIR/p4a_post_processor.py Src/*.c
close
#delete $WKS
quit
