You can build differents versions of these test cases, the sequential version, the openmp automatically parallelized version, the naive cuda version, and the same cuda kernels with optimized communications.
We ship also PGI and HMPP versions for each of these cases.

The targets at top level are respectively "seq", "openmp", "cuda", "cuda_opt", "pgi", "hmpp". It'll build all test cases. If you want only one, for instance polybenchs/2mm, then go in 2mm subdirectory and run "make 2mm_seq" ; "make 2mm_openmp" ; ....

You can run the test cases using "make run_seq" ; "make run_openmp" ; ....

Measure in milliseconds is recorded in a sqlite database (if sqlite3 is available) or in a .csv file. The measure doesn't include array initialization (we suppose the main process is intended to be part of a large framework) but will include all communications.

You can personnalized the name of the version for a run (no spaces allowed), for instance : 

VERSION="Cuda-optimized-12-august" make run_cuda_opt

The script scripts/generate_speedup.sh can generate a gnuplot script that draws the speedup from the sqlite DB. It can be parametrized with environment variables, for instance :

dbfile=my.timing.sqlite tests="2mm hotspot99 correlation" ref_ver="The_reference_version_name" versions="Cuda-optimized-12-august Cuda-naive OpenMP OpenMP-Fine" ./scripts/generate_speedup.sh

Here is the list of possible params:

dbfile: name of sqlite db, default to timing.sqlite
tests: spaces separated list of testcase, default to all tests in the DB
ref_ver: speedup will be computed taking this version as reference, default to "run_seq"
versions: spaces separated list of version to display, default to all available in the DB
exclude_tests: spaces separated list of testcase to exclude, default to "", cannot be used with 'tests' option
disable_mean: disable geometric mean display in the histogram, default is "" (activated)
title: set a title for the gnuplot graph
labelfontsize: set fontsize for label

