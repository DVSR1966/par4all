
POINTS-TO

//  {}
int main()
{
//  points to = {}
   int t[100][10][3];

//  points to = {}
   int (*p)[3];
//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   int *pu;

//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(pu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   int (*q)[10][3];
//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(pu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-)}
   int (*qu)[3];

//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(pu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   int (*r)[100][10][3];
//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(pu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   int (*ru)[10][3];
//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(pu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-)}
   
   
   p = &t[1][2];
//  {(p,t[1][2],-Exact-);(pu,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   (*p)[1] = 0;
//  {(p,t[1][2],-Exact-);(pu,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   p[1][1] = 0;
//  {(p,t[1][2],-Exact-);(pu,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}

   pu = &t[1][2][0];
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   *pu = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   pu[2] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(qu,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}

   q = &t[1];
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   ((*q)[2])[3] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   q[1][2][3] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}

   qu = &t[1][0];
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   (*qu)[1] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   qu[1][1] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(ru,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}

   r = &t;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-)}
   (((*r)[0])[0])[0] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-)}
   (((*r)[1])[2])[3] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-)}

   ru = &t[0];
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,t[0],-Exact-)}
   ((*ru)[0])[0] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,t[0],-Exact-)}
   ru[0][0][0] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,t[0],-Exact-)}
   ru[1][2][1] = 0;
//  {(p,t[1][2],-Exact-);(pu,t[1][2][0],-Exact-);(q,t[1],-Exact-);(qu,
//   t[1][0],-Exact-);(r,t,-Exact-);(ru,t[0],-Exact-)}

   return 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
   int t[100][10][3];

   int (*p)[3];
   int *pu;

   int (*q)[10][3];
   int (*qu)[3];

   int (*r)[100][10][3];
   int (*ru)[10][3];
//             <    is written>: p
   
   
   p = &t[1][2];
//             <    is read   >: p
//             <    is written>: t[1][2][1]
   (*p)[1] = 0;
//             <    is read   >: p
//             <    is written>: t[1][3][1]
   p[1][1] = 0;
//             <    is written>: pu

   pu = &t[1][2][0];
//             <    is read   >: pu
//             <    is written>: t[1][2][0]
   *pu = 0;
//             <    is read   >: pu
//             <    is written>: t[1][2][2]
   pu[2] = 0;
//             <    is written>: q

   q = &t[1];
//             <    is read   >: q
//             <    is written>: t[1][2][3]
   ((*q)[2])[3] = 0;
//             <    is read   >: q
//             <    is written>: t[2][2][3]
   q[1][2][3] = 0;
//             <    is written>: qu

   qu = &t[1][0];
//             <    is read   >: qu
//             <    is written>: t[1][0][1]
   (*qu)[1] = 0;
//             <    is read   >: qu
//             <    is written>: t[1][1][1]
   qu[1][1] = 0;
//             <    is written>: r

   r = &t;
//             <    is read   >: r
//             <    is written>: t[0][0][0]
   (((*r)[0])[0])[0] = 0;
//             <    is read   >: r
//             <    is written>: t[1][2][3]
   (((*r)[1])[2])[3] = 0;
//             <    is written>: ru

   ru = &t[0];
//             <    is read   >: ru
//             <    is written>: t[0][0][0]
   ((*ru)[0])[0] = 0;
//             <    is read   >: ru
//             <    is written>: t[0][0][0]
   ru[0][0][0] = 0;
//             <    is read   >: ru
//             <    is written>: t[1][2][1]
   ru[1][2][1] = 0;

   return 0;
}

 *********************** Use-Def Chains *********************

	38 --> 39 with conflicts
		from <t[0][0][0]-W-EXACT> to <t[0][0][0]-W-EXACT>
	37 --> 40 with conflicts
		from <ru-W-EXACT> to <ru-R-EXACT>
	37 --> 39 with conflicts
		from <ru-W-EXACT> to <ru-R-EXACT>
	37 --> 38 with conflicts
		from <ru-W-EXACT> to <ru-R-EXACT>
	34 --> 39 with conflicts
		from <t[0][0][0]-W-EXACT> to <t[0][0][0]-W-EXACT>
	34 --> 38 with conflicts
		from <t[0][0][0]-W-EXACT> to <t[0][0][0]-W-EXACT>
	33 --> 35 with conflicts
		from <r-W-EXACT> to <r-R-EXACT>
	33 --> 34 with conflicts
		from <r-W-EXACT> to <r-R-EXACT>
	29 --> 31 with conflicts
		from <qu-W-EXACT> to <qu-R-EXACT>
	29 --> 30 with conflicts
		from <qu-W-EXACT> to <qu-R-EXACT>
	26 --> 35 with conflicts
		from <t[1][2][3]-W-EXACT> to <t[1][2][3]-W-EXACT>
	25 --> 27 with conflicts
		from <q-W-EXACT> to <q-R-EXACT>
	25 --> 26 with conflicts
		from <q-W-EXACT> to <q-R-EXACT>
	21 --> 23 with conflicts
		from <pu-W-EXACT> to <pu-R-EXACT>
	21 --> 22 with conflicts
		from <pu-W-EXACT> to <pu-R-EXACT>
	18 --> 40 with conflicts
		from <t[1][2][1]-W-EXACT> to <t[1][2][1]-W-EXACT>
	17 --> 19 with conflicts
		from <p-W-EXACT> to <p-R-EXACT>
	17 --> 18 with conflicts
		from <p-W-EXACT> to <p-R-EXACT>

****************** End of Dependence Graph ******************
