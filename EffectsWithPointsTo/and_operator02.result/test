
POINTS-TO

//  {}
int main()
{
//  points to = {}
   int i = 0, j = 1, k = 2, l = 3;
//  points to = {}
   _Bool b;
//  points to = {}
   int *p, *q, *r, *s, *t;
//  {(p,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(q,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(s,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(t,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   p = &k;
//  {(p,k,-Exact-);(q,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(s,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(t,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   r = &i;
//  {(p,k,-Exact-);(q,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(r,i,
//   -Exact-);(s,*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(t,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   q = &j;
//  {(p,k,-Exact-);(q,j,-Exact-);(r,i,-Exact-);(s,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(t,*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-)}
   s = &l;
//  {(p,k,-Exact-);(q,j,-Exact-);(r,i,-Exact-);(s,l,-Exact-);(t,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   b = (p = q)&&(r = s);
//  {(p,j,-Exact-);(q,j,-Exact-);(r,l,-Exact-);(s,l,-Exact-);(t,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   if ((p = q)&&(r = s))
//  {(p,j,-Exact-);(q,j,-Exact-);(r,l,-Exact-);(s,l,-Exact-);(t,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
      *p++;
   else if ((p = q)||(r = s))
//  {(p,j,-Exact-);(q,j,-Exact-);(r,l,-Exact-);(s,l,-Exact-);(t,
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
      *r++;
//  {(p,*ANY_MODULE*:*ANYWHERE*_b0,-MAY-);(p,j,-MAY-);(q,j,
//   -Exact-);(r,*ANY_MODULE*:*ANYWHERE*_b0,-MAY-);(r,l,-MAY-);(s,l,
//   -Exact-);(t,*ANY_MODULE*:*NOWHERE*_b0,-Exact-)}

   return 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
//             <    is written>: i j k l
   int i = 0, j = 1, k = 2, l = 3;
   _Bool b;
   int *p, *q, *r, *s, *t;
//             <    is written>: p
   p = &k;
//             <    is written>: r
   r = &i;
//             <    is written>: q
   q = &j;
//             <    is written>: s
   s = &l;
//             <    is read   >: q s
//             <    is written>: b p r
   b = (p = q)&&(r = s);
//             <    is read   >: q s
//             <    is written>: p r
   if ((p = q)&&(r = s))
//             <    is read   >: j p
//             <    is written>: p
      *p++;
   else if ((p = q)||(r = s))
//             <    is read   >: l r
//             <    is written>: r
      *r++;

   return 0;
}

 *********************** Use-Def Chains *********************

	17 --> 23 with conflicts
		from <r-W-EXACT> to <r-W-EXACT>
		from <r-W-EXACT> to <r-R-EXACT>
	17 --> 22 with conflicts
		from <r-W-EXACT> to <r-W-EXACT>
		from <p-W-EXACT> to <p-W-EXACT>
	17 --> 21 with conflicts
		from <p-W-EXACT> to <p-W-EXACT>
		from <p-W-EXACT> to <p-R-EXACT>
	17 --> 20 with conflicts
		from <r-W-EXACT> to <r-W-EXACT>
		from <p-W-EXACT> to <p-W-EXACT>
	11 --> 22 with conflicts
		from <s-W-EXACT> to <s-R-EXACT>
	11 --> 20 with conflicts
		from <s-W-EXACT> to <s-R-EXACT>
	11 --> 17 with conflicts
		from <s-W-EXACT> to <s-R-EXACT>
	10 --> 22 with conflicts
		from <q-W-EXACT> to <q-R-EXACT>
	10 --> 20 with conflicts
		from <q-W-EXACT> to <q-R-EXACT>
	10 --> 17 with conflicts
		from <q-W-EXACT> to <q-R-EXACT>
	09 --> 17 with conflicts
		from <r-W-EXACT> to <r-W-EXACT>
	08 --> 17 with conflicts
		from <p-W-EXACT> to <p-W-EXACT>
	05 --> 23 with conflicts
		from <l-W-EXACT> to <l-R-EXACT>
	05 --> 21 with conflicts
		from <j-W-EXACT> to <j-R-EXACT>

****************** End of Dependence Graph ******************
