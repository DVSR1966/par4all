
Points-to for call02


// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_5[0] , MAY
// q[*] -> *NULL_POINTER* , MAY
// q[*] -> _q_4[*][0] , MAY


// Points To OUT:
// q[*] -> _q_4[*][0] , EXACT

void call02(int i, int j, int y[10], int *q[10], tf_t *p)
{

// Points To: none

   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;

// Points To: none

   y[i] = 0;

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_5[0] , MAY

   p->one = 1;

// Points To:
// p -> _p_5[0] , EXACT

   (p->two)[j] = 2.;

// Points To:
// p -> _p_5[0] , EXACT
// q[*] -> *NULL_POINTER* , MAY
// q[*] -> _q_4[*][0] , MAY

   *q[i] = 3;
}

Proper effects with points-to for call02

void call02(int i, int j, int y[10], int *q[10], tf_t *p)
{
//             <    is read   >: j
//             <    is written>: i
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
//             <    is read   >: i
//             <    is written>: y[i]
   y[i] = 0;
//             <    is read   >: p
//             <    is written>: _p_5[0].one
   p->one = 1;
//             <    is read   >: j p
//             <    is written>: _p_5[0].two[j]
   (p->two)[j] = 2.;
//             <may be written>: _q_4[*][0]
//             <    is read   >: i q[i]
   *q[i] = 3;
}

Cumulated effects with points-to for call02

//             <may be read   >: q[*]
//             <may be written>: _p_5[0].two[*] _q_4[*][0] y[*]
//             <    is read   >: i j p
//             <    is written>: _p_5[0].one
void call02(int i, int j, int y[10], int *q[10], tf_t *p)
{
//             <    is read   >: j
//             <    is written>: i
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
//             <may be written>: y[*]
//             <    is read   >: i
   y[i] = 0;
//             <    is read   >: p
//             <    is written>: _p_5[0].one
   p->one = 1;
//             <may be written>: _p_5[0].two[*]
//             <    is read   >: j p
   (p->two)[j] = 2.;
//             <may be read   >: q[*]
//             <may be written>: _q_4[*][0]
//             <    is read   >: i
   *q[i] = 3;
}

Points-to for "main"

