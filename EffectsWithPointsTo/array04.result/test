
PROPER  EFFECTS 

int main()
{
   int t[100][10][3];

   int (*p)[3];
   int *pu;

   int (*q)[10][3];
   int (*qu)[3];

   int (*r)[100][10][3];
   int (*ru)[10][3];
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("sizeof(t) = %zd\n", sizeof(t));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1]) = %zd\n", sizeof(t[1]));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1][2]) = %zd\n", sizeof(t[1][2]));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1][2][3]) = %zd\n", sizeof(t[1][2][3]));
//             <    is written>: p

   p = &t[1][2];
//             <    is written>: pu
   pu = t[1][2];
//             <    is written>: pu
   pu = &t[1][2][0];
//             <    is written>: q

   q = &t[1];
//             <    is written>: qu
   qu = t[1];
//             <    is written>: qu
   qu = &t[1][0];
//             <    is written>: r

   r = &t;
//             <    is written>: ru
   ru = t;
//             <    is written>: ru
   ru = &t[0];
   return 0;
}

POINTS-TO


// Points To: none

int main()
{

// Points To: none

   int t[100][10][3];


// Points To: none

   int (*p)[3];

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int *pu;


// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int (*q)[10][3];

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int (*qu)[3];


// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int (*r)[100][10][3];

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int (*ru)[10][3];

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT


   printf("sizeof(t) = %zd\n", sizeof(t));

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   printf("sizeof(t[1]) = %zd\n", sizeof(t[1]));

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   printf("sizeof(t[1][2]) = %zd\n", sizeof(t[1][2]));

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   printf("sizeof(t[1][2][3]) = %zd\n", sizeof(t[1][2][3]));

// Points To:
// p -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT


   p = &t[1][2];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   pu = t[1][2];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2] , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   pu = &t[1][2][0];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT


   q = &t[1];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &t[1] , EXACT
// qu -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   qu = t[1];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &t[1] , EXACT
// qu -> &t[1] , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   qu = &t[1][0];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &t[1] , EXACT
// qu -> &t[1][0] , EXACT
// r -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT


   r = &t;

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &t[1] , EXACT
// qu -> &t[1][0] , EXACT
// r -> &t , EXACT
// ru -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   ru = t;

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &t[1] , EXACT
// qu -> &t[1][0] , EXACT
// r -> &t , EXACT
// ru -> &t , EXACT

   ru = &t[0];

// Points To:
// p -> &t[1][2] , EXACT
// pu -> &t[1][2][0] , EXACT
// q -> &t[1] , EXACT
// qu -> &t[1][0] , EXACT
// r -> &t , EXACT
// ru -> &t[0] , EXACT

   return 0;
}

PROPER  EFFECTS WITH POINTS TO

int main()
{
   int t[100][10][3];

   int (*p)[3];
   int *pu;

   int (*q)[10][3];
   int (*qu)[3];

   int (*r)[100][10][3];
   int (*ru)[10][3];
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("sizeof(t) = %zd\n", sizeof(t));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1]) = %zd\n", sizeof(t[1]));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1][2]) = %zd\n", sizeof(t[1][2]));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1][2][3]) = %zd\n", sizeof(t[1][2][3]));
//             <    is written>: p

   p = &t[1][2];
//             <    is written>: pu
   pu = t[1][2];
//             <    is written>: pu
   pu = &t[1][2][0];
//             <    is written>: q

   q = &t[1];
//             <    is written>: qu
   qu = t[1];
//             <    is written>: qu
   qu = &t[1][0];
//             <    is written>: r

   r = &t;
//             <    is written>: ru
   ru = t;
//             <    is written>: ru
   ru = &t[0];
   return 0;
}

 *********************** Use-Def Chains *********************

	32 --> 33 with conflicts
		from <ru-W-EXACT> to <ru-W-EXACT>
	28 --> 29 with conflicts
		from <qu-W-EXACT> to <qu-W-EXACT>
	24 --> 25 with conflicts
		from <pu-W-EXACT> to <pu-W-EXACT>
	20 --> 21 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	19 --> 21 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	19 --> 20 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	18 --> 21 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	18 --> 20 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	18 --> 19 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>

****************** End of Dependence Graph ******************
