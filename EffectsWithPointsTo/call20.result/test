
POINTS-TO


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_6 , MAY

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_6 , MAY

   *p = v;

// Points To:
// p -> *HEAP*_l_6 , MAY

   return p;
}

// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   pointer p1, p2, p3;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p2 = alloc_pointer(17);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p3 = alloc_pointer(19);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   
   // 36 17 19
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   
   // 36 17 53
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_6 , MAY
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY


   pointer_free(p1);

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_6 , MAY
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   pointer_free(p2);

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_6 , MAY

   pointer_free(p3);
}

// Points To IN:
// q1 -> *NULL_POINTER* , MAY
// q1 -> _q1_1[0] , MAY
// q2 -> *NULL_POINTER* , MAY
// q2 -> _q2_2[0] , MAY
// q3 -> *NULL_POINTER* , MAY
// q3 -> _q3_3[0] , MAY


// Points To OUT: none

void pointer_add(pointer q1, const pointer q2, const pointer q3)
{

// Points To:
// q1 -> *NULL_POINTER* , MAY
// q1 -> _q1_1[0] , MAY
// q2 -> *NULL_POINTER* , MAY
// q2 -> _q2_2[0] , MAY
// q3 -> *NULL_POINTER* , MAY
// q3 -> _q3_3[0] , MAY

   *q1 = *q2+*q3;
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT:
// p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   free(p);
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT: none

int pointer_get(const pointer p)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   return *p;
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT: none

void pointer_set(pointer p, int v)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   *p = v;
}

PROPER  EFFECTS WITH POINTS TO

pointer alloc_pointer(int v)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   pointer p = malloc(sizeof(int));
//             <may be written>: *HEAP*_l_6
//             <    is read   >: p v
   *p = v;
//             <    is read   >: p
   return p;
}
int main(void)
{
   pointer p1, p2, p3;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p2 _MALLOC_EFFECTS:_MALLOC_
   p2 = alloc_pointer(17);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p3 _MALLOC_EFFECTS:_MALLOC_
   p3 = alloc_pointer(19);
//             <    is read   >: p1 p2 p3 alloc_pointer:*HEAP*_l_6
//             <    is written>: alloc_pointer:*HEAP*_l_6
   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: p1 p2 p3 stdout __IO_EFFECTS:LUNS[1] 
//                               alloc_pointer:*HEAP*_l_6
//             <    is written>: __IO_EFFECTS:LUNS[1]
   
   // 36 17 19
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));
//             <    is read   >: p3
//             <    is written>: alloc_pointer:*HEAP*_l_6
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);
//             <    is read   >: p1 p2 p3 alloc_pointer:*HEAP*_l_6
//             <    is written>: alloc_pointer:*HEAP*_l_6
   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: p1 p2 p3 stdout __IO_EFFECTS:LUNS[1] 
//                               alloc_pointer:*HEAP*_l_6
//             <    is written>: __IO_EFFECTS:LUNS[1]
   
   // 36 17 53
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_

   pointer_free(p1);
//             <    is read   >: p2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p2);
//             <    is read   >: p3 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p3);
}
void pointer_add(pointer q1, const pointer q2, const pointer q3)
{
//             <    is read   >: _q2_2[0] _q3_3[0] q1 q2 q3
//             <    is written>: _q1_1[0]
   *q1 = *q2+*q3;
}
void pointer_free(pointer p)
{
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}
int pointer_get(const pointer p)
{
//             <    is read   >: _p_1[0] p
   return *p;
}
void pointer_set(pointer p, int v)
{
//             <    is read   >: p v
//             <    is written>: _p_1[0]
   *p = v;
}

 *********************** Use-Def Chains *********************

	11 --> 12 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 16 with conflicts
		from <p1-W-EXACT> to <p1-R-EXACT>
	11 --> 19 with conflicts
		from <p1-W-EXACT> to <p1-R-EXACT>
	11 --> 25 with conflicts
		from <p1-W-EXACT> to <p1-R-EXACT>
	11 --> 28 with conflicts
		from <p1-W-EXACT> to <p1-R-EXACT>
	11 --> 30 with conflicts
		from <p1-W-EXACT> to <p1-R-EXACT>
	12 --> 13 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	12 --> 16 with conflicts
		from <p2-W-EXACT> to <p2-R-EXACT>
	12 --> 19 with conflicts
		from <p2-W-EXACT> to <p2-R-EXACT>
	12 --> 25 with conflicts
		from <p2-W-EXACT> to <p2-R-EXACT>
	12 --> 28 with conflicts
		from <p2-W-EXACT> to <p2-R-EXACT>
	12 --> 31 with conflicts
		from <p2-W-EXACT> to <p2-R-EXACT>
	13 --> 16 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
	13 --> 19 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
	13 --> 22 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
	13 --> 25 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
	13 --> 28 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
	13 --> 30 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	13 --> 32 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
	16 --> 19 with conflicts
		from <alloc_pointer:*HEAP*_l_6-W-EXACT> to <alloc_pointer:*HEAP*_l_6-R-EXACT>
	16 --> 22 with conflicts
		from <alloc_pointer:*HEAP*_l_6-W-EXACT> to <alloc_pointer:*HEAP*_l_6-W-EXACT>
		from <alloc_pointer:*HEAP*_l_6-R-EXACT> to <alloc_pointer:*HEAP*_l_6-W-EXACT>
	19 --> 22 with conflicts
		from <alloc_pointer:*HEAP*_l_6-R-EXACT> to <alloc_pointer:*HEAP*_l_6-W-EXACT>
	19 --> 28 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
	22 --> 25 with conflicts
		from <alloc_pointer:*HEAP*_l_6-W-EXACT> to <alloc_pointer:*HEAP*_l_6-W-EXACT>
		from <alloc_pointer:*HEAP*_l_6-W-EXACT> to <alloc_pointer:*HEAP*_l_6-R-EXACT>
	25 --> 28 with conflicts
		from <alloc_pointer:*HEAP*_l_6-W-EXACT> to <alloc_pointer:*HEAP*_l_6-R-EXACT>
	30 --> 31 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	31 --> 32 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>

****************** End of Dependence Graph ******************
