Select some options to deal with the C Language:
Parse as C:
Prettyprint the source as C, of course
int main(int argc, char *argv[])
{
   int i, j;

init_kernel:   i = 1;
compute_kernel:   j = i+2;

   printf("Value is %d\n", j);

   return 0;
}
int main(int argc, char *argv[])
{
   int i, j;

init_kernel:   i = 1;
compute_kernel:   j = i+2;

   printf("Value is %d\n", j);

   return 0;
}
All the kernel parameters should be passed correctly
void compute_kernel(int *j, int i)
{
compute_kernel:   *j = i+2;
}
//
//     This module was automatically generated by PIPS
//
void compute_kernel(int *j, int i);
void init_kernel(int *i)
{

init_kernel:   *i = 1;
}
//
//     This module was automatically generated by PIPS
//
void init_kernel(int *i);
int main(int argc, char *argv[])
{
   int i, j;
   {
      //PIPS generated variable
      void init_kernel(int *i);


init_kernel:      init_kernel(&i);
   }
   {
      //PIPS generated variable
      void compute_kernel(int *j, int i);

compute_kernel:      compute_kernel(&j, i);
   }

   printf("Value is %d\n", j);

   return 0;
}
extern int main(int argc, char *argv[]);
void compute_kernel(int *j, int i)
{
compute_kernel:   *j = i+2;
}
//
//     This module was automatically generated by PIPS
//
void compute_kernel(int *j, int i);
void init_kernel(int *i)
{

init_kernel:   *i = 1;
}
//
//     This module was automatically generated by PIPS
//
void init_kernel(int *i);
int main(int argc, char *argv[])
{
   int i, j;
   {
      //PIPS generated variable
      void init_kernel(int *i);


init_kernel:      init_kernel(&i);
   }
   {
      //PIPS generated variable
      void compute_kernel(int *j, int i);

compute_kernel:      compute_kernel(&j, i);
   }

   printf("Value is %d\n", j);

   return 0;
}
extern int main(int argc, char *argv[]);
