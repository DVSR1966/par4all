void outline14(int W, int H, int R, float Dst[W][H], float Src[W][H], float Kernel[R])
{
   int y, x, k;
   float sum = 0;
#pragma omp parallel for private(x)
   for(y = 0; y <= -1+H; y += 1)
#pragma omp parallel for private(k,sum)
      for(x = 0; x <= -1+W; x += 1) {
         sum = 0;
here:
         for(k = 0; k <= 2*R; k += 1) {
            int d = y+k-R;
            if (d>=0&&d<H) 
               sum += Src[y][x]*Kernel[R-(k-R)];
         }
         Dst[y][x] = sum;
      }
}
void kernel(int H, int R, int W, float *sum, int x, int y, float Kernel[R], float Src[W][H])
{
   //PIPS generated variable
   int k;
here:
   for(k = 0; k <= 2*R; k += 1) {
      int d = y+k-R;
      if (d>=0&&d<H) 
         *sum += Src[y][x]*Kernel[R-(k-R)];
   }
}
void outline14(int W, int H, int R, float Dst[W][H], float Src[W][H], float Kernel[R])
{
   int y, x, k;
   float sum = 0;
#pragma omp parallel for private(x)
   for(y = 0; y <= -1+H; y += 1)
#pragma omp parallel for private(k,sum)
      for(x = 0; x <= -1+W; x += 1) {
         sum = 0;
here:         kernel(H, R, W, &sum, x, y, Kernel, Src);
         Dst[y][x] = sum;
      }
}
