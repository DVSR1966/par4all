Select some options to deal with the C Language:
Parse as C:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Prettyprint the source as C, of course
Select the most precise analysis:
int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   for (i = 0;i<64;i++)                                                 /*0006*/
      for (j = 0;j<64;j++)                                              /*0007*/
         imagein_re[i][j] = 2*i;                                        /*0008*/

   for (i = 0;i<64;i++) {                                               /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for (j = 0;j<64;j++)                                              /*0013*/
         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>

int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0006*/

//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2,
//    PHI2<=63, 0<=i, i<=63}>

      for(j = 0; j <= 63; j += 1)                                       /*0007*/

//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         imagein_re[i][j] = 2*i;                                        /*0008*/

   for(i = 0; i <= 63; i += 1) {                                        /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for(j = 0; j <= 63; j += 1)                                       /*0013*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>

int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0006*/

//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2,
//    PHI2<=63, 0<=i, i<=63}>

      for(j = 0; j <= 63; j += 1)                                       /*0007*/

//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         imagein_re[i][j] = 2*i;                                        /*0008*/

   for(i = 0; i <= 63; i += 1) {                                        /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for(j = 0; j <= 63; j += 1)                                       /*0013*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}
The first loop nest must be parallel:

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>

int main(int argc, char *argv[])
{
   int i;
   int j;

#pragma omp parallel for private(j)
init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0006*/

//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2,
//    PHI2<=63, 0<=i, i<=63}>

#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)                                       /*0007*/

//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         imagein_re[i][j] = 2*i;                                        /*0008*/

   for(i = 0; i <= 63; i += 1) {                                        /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for(j = 0; j <= 63; j += 1)                                       /*0013*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}

//  <imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63, 0<=PHI2,
//    PHI2<=63}>

void init_kernel(float imagein_re[64][64])
{
   int i;
   int j;

init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0007*/

//  <imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=63, 0<=i,
//    i<=63}>

      for(j = 0; j <= 63; j += 1)                                       /*0008*/

//  <imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=63,
//    0<=j, j<=63}>

         imagein_re[i][j] = 2*i;                                        /*0009*/
}
void init_kernel(float imagein_re[64][64]);

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>

int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   init_kernel(imagein_re);                                             /*0006*/

   for(i = 0; i <= 63; i += 1) {                                        /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for(j = 0; j <= 63; j += 1)                                       /*0013*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}
float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
The loop nest of init_kernel should be parallel:

//  <imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63, 0<=PHI2,
//    PHI2<=63}>

void init_kernel(float imagein_re[64][64])
{
   int i;
   int j;

#pragma omp parallel for private(j)
init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0007*/

//  <imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=63, 0<=i,
//    i<=63}>

#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)                                       /*0008*/

//  <imagein_re[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=63,
//    0<=j, j<=63}>

         imagein_re[i][j] = 2*i;                                        /*0009*/
}
void init_kernel(float imagein_re[64][64]);

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=63,
//    0<=PHI2, PHI2<=63}>

int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   init_kernel(imagein_re);                                             /*0006*/

   for(i = 0; i <= 63; i += 1) {                                        /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for(j = 0; j <= 63; j += 1)                                       /*0013*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <TOP-LEVEL:imagein_re[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i,
//    i<=63, 0<=j, j<=63}>

         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}
float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
void init_kernel(float imagein_re[64][64])
{
   int i;
   int j;

init_kernel:
   forall(i = 0; i <= 63; i += 1)                                       /*0007*/
      forall(j = 0; j <= 63; j += 1)                                    /*0008*/
      PRIVATE j
         imagein_re[i][j] = 2*i;                                        /*0009*/
}
int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   init_kernel(imagein_re);                                             /*0006*/

   for(i = 0; i <= 63; i += 1) {                                        /*0011*/
      printf("Line %d:\n");                                             /*0012*/
      for(j = 0; j <= 63; j += 1)                                       /*0013*/
         printf("%d ", imagein_re[i][j]);                               /*0014*/
      puts("\n");                                                       /*0016*/
   }

   return 0;                                                            /*0019*/
}
