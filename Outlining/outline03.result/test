Select some options to deal with the C Language:
Parse as C:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Prettyprint the source as C, of course
int main(int argc, char *argv[])
{
   int i, j;

init_kernel:   for (i = 0;i<64;i++)
      for (j = 0;j<64;j++) {
         imagein_re[i][j] = 2*i;
         imagein_im[i][j] = 3*j;
      }

compute_kernel:   for (i = 0;i<64;i++)
      for (j = 0;j<64;j++)
         imagein_re[i][j] = 1+imagein_im[i][j];

   for (i = 0;i<64;i++) {
      printf("Line %d:\n");
      for (j = 0;j<64;j++)
         printf("%d ", imagein_re[i][j]);
      puts("\n");
   }

   return 0;
}
int main(int argc, char *argv[])
{
   int i, j;

init_kernel:
   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1) {
         imagein_re[i][j] = 2*i;
         imagein_im[i][j] = 3*j;
      }

compute_kernel:
   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1)
         imagein_re[i][j] = 1+imagein_im[i][j];

   for(i = 0; i <= 63; i += 1) {
      printf("Line %d:\n");
      for(j = 0; j <= 63; j += 1)
         printf("%d ", imagein_re[i][j]);
      puts("\n");
   }

   return 0;
}
All the kernel loops should be //
int main(int argc, char *argv[])
{
   int i, j;

#pragma omp parallel for private(j)
init_kernel:
   for(i = 0; i <= 63; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1) {
         imagein_re[i][j] = 2*i;
         imagein_im[i][j] = 3*j;
      }

#pragma omp parallel for private(j)
compute_kernel:
   for(i = 0; i <= 63; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)
         imagein_re[i][j] = 1+imagein_im[i][j];

   for(i = 0; i <= 63; i += 1) {
      printf("Line %d:\n");
      for(j = 0; j <= 63; j += 1)
         printf("%d ", imagein_re[i][j]);
      puts("\n");
   }

   return 0;
}

float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
The kernels should be parallel. Unfotunately, current OUTLINE version relies on reparsing the code, so parallelism information is lost...
void compute_kernel(float imagein_re[64][64], float imagein_im[64][64])
{
   //PIPS generated variable
   int i, j;

compute_kernel:
   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1)
         imagein_re[i][j] = 1+imagein_im[i][j];
}
//
//     This module was automatically generated by PIPS
//
void compute_kernel(float imagein_re[64][64], float imagein_im[64][64]);
void init_kernel(float imagein_re[64][64], float imagein_im[64][64])
{
   //PIPS generated variable
   int i, j;

init_kernel:
   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1) {
         imagein_re[i][j] = 2*i;
         imagein_im[i][j] = 3*j;
      }
}
//
//     This module was automatically generated by PIPS
//
void init_kernel(float imagein_re[64][64], float imagein_im[64][64]);
int main(int argc, char *argv[])
{
   int i, j;
   {
      //PIPS generated variable
      void init_kernel(float imagein_re[64][64], float imagein_im[64][64]);


init_kernel:      init_kernel(imagein_re, imagein_im);
   }
   {
      //PIPS generated variable
      void compute_kernel(float imagein_re[64][64], float imagein_im[64][64]);


compute_kernel:      compute_kernel(imagein_re, imagein_im);
   }

   for(i = 0; i <= 63; i += 1) {
      printf("Line %d:\n");
      for(j = 0; j <= 63; j += 1)
         printf("%d ", imagein_re[i][j]);
      puts("\n");
   }

   return 0;
}

float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
All the kernel loops should be //
void compute_kernel(float imagein_re[64][64], float imagein_im[64][64])
{
   //PIPS generated variable
   int i, j;

#pragma omp parallel for private(j)
compute_kernel:
   for(i = 0; i <= 63; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)
         imagein_re[i][j] = 1+imagein_im[i][j];
}
//
//     This module was automatically generated by PIPS
//
void compute_kernel(float imagein_re[64][64], float imagein_im[64][64]);
void init_kernel(float imagein_re[64][64], float imagein_im[64][64])
{
   //PIPS generated variable
   int i, j;

#pragma omp parallel for private(j)
init_kernel:
   for(i = 0; i <= 63; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1) {
         imagein_re[i][j] = 2*i;
         imagein_im[i][j] = 3*j;
      }
}
//
//     This module was automatically generated by PIPS
//
void init_kernel(float imagein_re[64][64], float imagein_im[64][64]);
int main(int argc, char *argv[])
{
   int i, j;
   {
      //PIPS generated variable
      void init_kernel(float imagein_re[64][64], float imagein_im[64][64]);


init_kernel:      init_kernel(imagein_re, imagein_im);
   }
   {
      //PIPS generated variable
      void compute_kernel(float imagein_re[64][64], float imagein_im[64][64]);


compute_kernel:      compute_kernel(imagein_re, imagein_im);
   }

   for(i = 0; i <= 63; i += 1) {
      printf("Line %d:\n");
      for(j = 0; j <= 63; j += 1)
         printf("%d ", imagein_re[i][j]);
      puts("\n");
   }

   return 0;
}

float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
