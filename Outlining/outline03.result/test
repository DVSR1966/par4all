Select some options to deal with the C Language:
Parse as C:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Prettyprint the source as C, of course
int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   for (i = 0;i<64;i++)                                                 /*0006*/
      for (j = 0;j<64;j++) {                                            /*0007*/
         imagein_re[i][j] = 2*i;                                        /*0008*/
         imagein_im[i][j] = 3*j;                                        /*0009*/
      }

compute_kernel:   for (i = 0;i<64;i++)                                                 /*0013*/
      for (j = 0;j<64;j++)                                              /*0014*/
         imagein_re[i][j] = 1+imagein_im[i][j];                         /*0015*/

   for (i = 0;i<64;i++) {                                               /*0018*/
      printf("Line %d:\n");                                             /*0019*/
      for (j = 0;j<64;j++)                                              /*0020*/
         printf("%d ", imagein_re[i][j]);                               /*0021*/
      puts("\n");                                                       /*0023*/
   }

   return 0;                                                            /*0026*/
}
int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0006*/
      for(j = 0; j <= 63; j += 1) {                                     /*0007*/
         imagein_re[i][j] = 2*i;                                        /*0008*/
         imagein_im[i][j] = 3*j;                                        /*0009*/
      }

compute_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0013*/
      for(j = 0; j <= 63; j += 1)                                       /*0014*/
         imagein_re[i][j] = 1+imagein_im[i][j];                         /*0015*/

   for(i = 0; i <= 63; i += 1) {                                        /*0018*/
      printf("Line %d:\n");                                             /*0019*/
      for(j = 0; j <= 63; j += 1)                                       /*0020*/
         printf("%d ", imagein_re[i][j]);                               /*0021*/
      puts("\n");                                                       /*0023*/
   }

   return 0;                                                            /*0026*/
}
All the kernel loops should be //
int main(int argc, char *argv[])
{
   int i;
   int j;

#pragma omp parallel for private(j)
init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0006*/
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1) {                                     /*0007*/
         imagein_re[i][j] = 2*i;                                        /*0008*/
         imagein_im[i][j] = 3*j;                                        /*0009*/
      }

#pragma omp parallel for private(j)
compute_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0013*/
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)                                       /*0014*/
         imagein_re[i][j] = 1+imagein_im[i][j];                         /*0015*/

   for(i = 0; i <= 63; i += 1) {                                        /*0018*/
      printf("Line %d:\n");                                             /*0019*/
      for(j = 0; j <= 63; j += 1)                                       /*0020*/
         printf("%d ", imagein_re[i][j]);                               /*0021*/
      puts("\n");                                                       /*0023*/
   }

   return 0;                                                            /*0026*/
}
float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
The kernels should be parallel. Unfotunately, current OUTLINE version relies on reparsing the code, so parallelism information is lost...
void compute_kernel(float imagein_im[64][64], float imagein_re[64][64])
{
   int j;
   int i;

compute_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0007*/
      for(j = 0; j <= 63; j += 1)                                       /*0008*/
         imagein_re[i][j] = 1+imagein_im[i][j];                         /*0009*/
}
void compute_kernel(float imagein_im[64][64], float imagein_re[64][64]);
void init_kernel(float imagein_im[64][64], float imagein_re[64][64])
{
   int j;
   int i;

init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0007*/
      for(j = 0; j <= 63; j += 1) {                                     /*0008*/
         imagein_re[i][j] = 2*i;                                        /*0009*/
         imagein_im[i][j] = 3*j;                                        /*0010*/
      }
}
void init_kernel(float imagein_im[64][64], float imagein_re[64][64]);
int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   init_kernel(imagein_im, imagein_re);                                 /*0006*/

compute_kernel:   compute_kernel(imagein_im, imagein_re);                              /*0013*/

   for(i = 0; i <= 63; i += 1) {                                        /*0018*/
      printf("Line %d:\n");                                             /*0019*/
      for(j = 0; j <= 63; j += 1)                                       /*0020*/
         printf("%d ", imagein_re[i][j]);                               /*0021*/
      puts("\n");                                                       /*0023*/
   }

   return 0;                                                            /*0026*/
}
float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
All the kernel loops should be //
void compute_kernel(float imagein_im[64][64], float imagein_re[64][64])
{
   int j;
   int i;

#pragma omp parallel for private(j)
compute_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0007*/
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)                                       /*0008*/
         imagein_re[i][j] = 1+imagein_im[i][j];                         /*0009*/
}
void compute_kernel(float imagein_im[64][64], float imagein_re[64][64]);
void init_kernel(float imagein_im[64][64], float imagein_re[64][64])
{
   int j;
   int i;

#pragma omp parallel for private(j)
init_kernel:
   for(i = 0; i <= 63; i += 1)                                          /*0007*/
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1) {                                     /*0008*/
         imagein_re[i][j] = 2*i;                                        /*0009*/
         imagein_im[i][j] = 3*j;                                        /*0010*/
      }
}
void init_kernel(float imagein_im[64][64], float imagein_re[64][64]);
int main(int argc, char *argv[])
{
   int i;
   int j;

init_kernel:   init_kernel(imagein_im, imagein_re);                                 /*0006*/

compute_kernel:   compute_kernel(imagein_im, imagein_re);                              /*0013*/

   for(i = 0; i <= 63; i += 1) {                                        /*0018*/
      printf("Line %d:\n");                                             /*0019*/
      for(j = 0; j <= 63; j += 1)                                       /*0020*/
         printf("%d ", imagein_re[i][j]);                               /*0021*/
      puts("\n");                                                       /*0023*/
   }

   return 0;                                                            /*0026*/
}
float imagein_re[64][64];
float imagein_im[64][64];
extern int main(int argc, char *argv[]);
