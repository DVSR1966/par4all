void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, const void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   const char *csrc = accel_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i+d1_offset*element_size] = csrc[i];
}
void P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, const void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   const char *csrc = (char *) accel_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
}
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, const void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   const char *csrc = host_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[d1_offset*element_size+i];
}
void P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, const void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   const char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
}
void P4A_scmp_dealloc(void *dest)
{
}
void * P4A_scmp_flow(void **flow)
{
}
void P4A_scmp_kernel_0(int32_t channel_delay1_0[1], int32_t channel_delay2_0[1], int32_t channel_delay3_0[1], int32_t channel_delay4_0[1], int32_t data_0[1], unsigned char image_in[512*1024], int32_t img_index, int32_t ovsf_code_user1[8], int32_t pilot[8*sizeof(int32_t)], int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t symbole_flow_user1[8*sizeof(int32_t)], int32_t t)
{
   //PIPS generated variable
   int32_t data_bit, i, j, write, channel_delay1, channel_delay2, channel_delay3, channel_delay4, data;
   data = *data_0;
   channel_delay4 = *channel_delay4_0;
   channel_delay3 = *channel_delay3_0;
   channel_delay2 = *channel_delay2_0;
   channel_delay1 = *channel_delay1_0;
   {
      int task;
#pragma scmp task
      task = 0;
      if (t%10!=0) {
         data = image_in[img_index]<<0|image_in[img_index+1]<<8|image_in[img_index+2]<<16|image_in[img_index+3]<<24;
         //put 4 pixels in a frame (data)
         for(i = 0; i <= 8*sizeof(int32_t)-1; i += 1) {
            data_bit = data>>i&0x01;
            symbole_flow_user1[i] = data_bit;
         }
         
         //---- Spreading
         
         for(i = 0; i <= 8*sizeof(int32_t)-1; i += 1)
            for(j = 0; j <= 7; j += 1)
               if (symbole_flow_user1[i]==0)
                  spreading_signal1[i*8+j] = -ovsf_code_user1[j];
               else
                  spreading_signal1[i*8+j] = ovsf_code_user1[j];
      }
      else {
         
         /* pdebug_info("main path delay: 0\n"); */
         channel_delay1 = (int32_t) (rand()%6);
         /* pdebug_info("path 1 delay: %i\n",channel_delay1); */
         channel_delay2 = (int32_t) (rand()%6);
         /* pdebug_info("path 2 delay: %i\n",channel_delay2); */
         channel_delay3 = (int32_t) (rand()%6);
         /* pdebug_info("path 3 delay: %i\n",channel_delay3); */
         channel_delay4 = (int32_t) (rand()%6);
         /* pdebug_info("path 4 delay: %i\n",channel_delay4); */
         //printf("%d %d %d %d\n",channel_delay1,channel_delay2,channel_delay3,channel_delay4);		
         for(i = 0; i <= 8*sizeof(int32_t)-1; i += 1) {
            write = pilot[i]==0?-1:1;
            for(j = 0; j <= 7; j += 1)
               spreading_signal1[i*8+j] = write;
         }
      }
   }
   *channel_delay1_0 = channel_delay1;
   *channel_delay2_0 = channel_delay2;
   *channel_delay3_0 = channel_delay3;
   *channel_delay4_0 = channel_delay4;
   *data_0 = data;
}
void P4A_scmp_kernel_1(int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //generate multipath
   //main path
   for(i = 0; i <= 8*8*sizeof(int32_t)-1; i += 1)
      spreading_signals[i] = spreading_signal1[i];
}
void P4A_scmp_kernel_10(float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   
   
   //---- FIR for I and Q before channel
   
   
   //initialisation
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      channel_I[u] = 0;
}
void P4A_scmp_kernel_11(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {
      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_12(float FIR_COEFF[8], float Signal_I[(8/2*8*sizeof(int32_t)+6/2)*4], float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   
   //convolution par la réponse impultionelle du filtre (FIR_COEFF)
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = Signal_I[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         channel_I[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_13(float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   
   //initialisation
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      channel_Q[u] = 0;
}
void P4A_scmp_kernel_14(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {
      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_15(float FIR_COEFF[8], float Signal_Q[(8/2*8*sizeof(int32_t)+6/2)*4], float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = Signal_Q[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         channel_Q[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_16(float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   
   
   
   //------------------------------------------ RECEPT FRAME -----------------------------------------------
   
   //---- FIR for I and Q after channel
   
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      FIR2_I_user1[u] = 0;
}
void P4A_scmp_kernel_17(float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      FIR2_Q_user1[u] = 0;
}
void P4A_scmp_kernel_18(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {

      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_19(float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4], float FIR_COEFF[8], float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   //convolution par la réponse impultionelle du filtre (FIR_COEFF)
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = channel_I[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         FIR2_I_user1[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_2(int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   //initialisation
   for(i = 8*8*sizeof(int32_t); i <= 8*8*sizeof(int32_t)+6-1; i += 1)
      spreading_signals[i] = 0;
}
void P4A_scmp_kernel_20(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {

      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_21(float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4], float FIR_COEFF[8], float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = channel_Q[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         FIR2_Q_user1[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_22(float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4], float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t R_pilot[8*8*sizeof(int32_t)+6], int32_t inv_qpsk_user1[8*8*sizeof(int32_t)+6], int32_t j_0[1], int32_t t)
{
   //PIPS generated variable
   int32_t i, j;
   j = *j_0;
   {
      
      
      
      //---- QPSK-1 (+ parallel to serial)
      int task;
#pragma scmp task
      task = 0;
      if (t%10==0) {
         j = 0;
         for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 4) {
            //It is a cosinus, so the first bit out of 4 sampled gives
            //the sign of the symbol and the amplitude of the signal.
            R_pilot[j] = (int32_t) FIR2_I_user1[i];
            R_pilot[j+1] = (int32_t) FIR2_Q_user1[i];
            j += 2;
         }
      }
      else {
         j = 0;
         for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 4) {
            //It is a cosinus, so the first bit out of 4 sampled gives
            //the sign of the symbol and the amplitude of the signal.
            inv_qpsk_user1[j] = (int32_t) FIR2_I_user1[i];
            inv_qpsk_user1[j+1] = (int32_t) FIR2_Q_user1[i];
            j += 2;
         }
      }
   }
   *j_0 = j;
}
void P4A_scmp_kernel_23(int32_t R_pilot[8*8*sizeof(int32_t)+6], int32_t S_pilot[8*sizeof(int32_t)], int32_t coeff[6], int32_t coeff2[6], int32_t finger_mat[8*sizeof(int32_t)][6], int flag_0[1], int j_bkp_0[1], int32_t max_0[1], int32_t retro_loop_count_0[1], int32_t t)
{
   //PIPS generated variable
   int32_t c, d, i;
   //PIPS generated variable
   int flag, j_bkp;
   //PIPS generated variable
   int32_t max, retro_loop_count;
   retro_loop_count = *retro_loop_count_0;
   max = *max_0;
   j_bkp = *j_bkp_0;
   flag = *flag_0;
   {
      int task, j;
#pragma scmp task
      task = 0;
      if (t%10==0) {
         //initialisation
         for(j = 0; j <= 5; j += 1) {
            coeff[j] = 0;
            coeff2[j] = 0;
         }

         retro_loop_count = 0;
         flag = 1;
         while (flag==1) {
            //estimation:
            flag = 0;
            
            //create matrix
            for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1) {
               for(i = 0; i <= 5; i += 1)
                  finger_mat[c][i] = 0;
               //initialisation
               for(j = 0; j <= 5; j += 1)
                  //for each finger... (code on the signal shifted to the right)
                  for(d = 0; d <= 7; d += 1)
                     finger_mat[c][j] += R_pilot[c*8+d+j];
            }
            
            //calculate the channel coefficients
            for(j = 0; j <= 5; j += 1) {
               coeff2[j] = 0;
               for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1)
                  if (S_pilot[c]==0)
                     coeff2[j] += finger_mat[c][j]*(-1);
                  else
                     coeff2[j] += finger_mat[c][j]*1;
            }
            
            //calculating max power received
            max = 0;
            for(j = 0; j <= 5; j += 1)
               if (coeff2[j]>max)
                  max = coeff2[j];
            if (max>=8*8*sizeof(int32_t)) {
               
               //retroaction
               j = 0;
               while (j<6) {

                  if (retro_loop_count>6) {
                     j_bkp = j;
                     j = 6;
                  }
                  else if (coeff2[j]>=max) {
                     coeff[j]++;
                     for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1)
                        for(d = 0; d <= 7; d += 1)
                           if (S_pilot[c]==1)
                              R_pilot[c*8+d+j] -= 1;
                           else
                              R_pilot[c*8+d+j] += 1;
                     retro_loop_count++;
                     flag = 1;
                     j_bkp = j;
                     j = 6;
                  }
                  j++;
               }
               j = j_bkp;
            }
         }
      }
   }
   *flag_0 = flag;
   *j_bkp_0 = j_bkp;
   *max_0 = max;
   *retro_loop_count_0 = retro_loop_count;
}
void P4A_scmp_kernel_24(int32_t coeff[6], int32_t data_0[1], int32_t finger[6], int32_t inv_qpsk_user1[8*8*sizeof(int32_t)+6], int32_t ovsf_code_user1[8], int32_t symbole_flow[8*sizeof(int32_t)], int32_t t)
{
   //PIPS generated variable
   int32_t c, d, data_bit, fingers, i, j, data;
   data = *data_0;
   {
      int task;
#pragma scmp task
      task = 0;
      if (t%10!=0) {
         data = 0;
         for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1) {
            fingers = 0;
            for(i = 0; i <= 5; i += 1)
               finger[i] = 0;
            for(j = 0; j <= 5; j += 1)
               //for each finger... (code on the signal shifted to the right)
               for(d = 0; d <= 7; d += 1)
                  finger[j] += inv_qpsk_user1[c*8+d+j]*ovsf_code_user1[d];
            //cout<<endl;
            for(i = 0; i <= 5; i += 1)
               fingers += coeff[i]*finger[i];
            if (fingers>0)
               data_bit = 1;
            else
               data_bit = 0;
            data = data|data_bit<<c;
            symbole_flow[c] = data_bit;
         }
      }
   }
   *data_0 = data;
}
void P4A_scmp_kernel_3(int32_t channel_delay1, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   
   //other path
   for(i = channel_delay1; i <= 8*8*sizeof(int32_t)+channel_delay1-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay1];
}
void P4A_scmp_kernel_4(int32_t channel_delay2, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   for(i = channel_delay2; i <= 8*8*sizeof(int32_t)+channel_delay2-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay2];
}
void P4A_scmp_kernel_5(int32_t channel_delay3, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   for(i = channel_delay3; i <= 8*8*sizeof(int32_t)+channel_delay3-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay3];
}
void P4A_scmp_kernel_6(int32_t channel_delay4, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   
   
   for(i = channel_delay4; i <= 8*8*sizeof(int32_t)+channel_delay4-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay4];
}
void P4A_scmp_kernel_7(int32_t I_user[8/2*8*sizeof(int32_t)+6/2], int32_t Q_user[8/2*8*sizeof(int32_t)+6/2], int32_t j_0[1], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i, j;
   j = *j_0;
   //printf("\n");
   
   
   
   //------------------------------------------ SEND FRAME -----------------------------------------------
   //---- Conversion serial to parallel
   for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 2) {
      I_user[j] = spreading_signals[i];
      Q_user[j] = spreading_signals[i+1];
      j++;
   }
   *j_0 = j;
}
void P4A_scmp_kernel_8(int32_t I_user[8/2*8*sizeof(int32_t)+6/2], float Signal_I[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t h, i;
   //---- Modulation QPSK on I
   for(i = 0; i <= 8/2*8*sizeof(int32_t)+6/2-1; i += 1)
      //Phase = Sign of I_user
      for(h = 0; h <= 3; h += 1)
         Signal_I[i*4+h] = 1.0*I_user[i]*cos(h*2*3.14159265358979323846/(4-1));
}
void P4A_scmp_kernel_9(int32_t Q_user[8/2*8*sizeof(int32_t)+6/2], float Signal_Q[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t h, i;
   
   //---- Modulation QPSK on Q -- we suppose that we dephase it after of PI/2
   for(i = 0; i <= 8*8*sizeof(int32_t)/2+6/2-1; i += 1)
      //Phase = Sign of Q_user
      for(h = 0; h <= 3; h += 1)
         Signal_Q[i*4+h] = 1.0*Q_user[i]*cos(h*2*3.14159265358979323846/(4-1));
}
void P4A_scmp_malloc(void **dest, size_t n)
{

   if (*dest==(void *) 0)
      *dest = malloc(n);
}
void P4A_scmp_read(size_t element_size, const void *host_address, void *accel_address)
{
   /* We can use memcpy() since we are sure there is no overlap */
   memcpy(accel_address, host_address, element_size);
}
void P4A_scmp_write(size_t element_size, void *host_address, const void *accel_address)
{
   /* We can use memcpy() since we are sure there is no overlap */
   memcpy(host_address, accel_address, element_size);
}
int main()
{

   unsigned char image_in[512*1024];
   unsigned char image_out[512*1024];

   int32_t img_index = 0;
   
   //Local variables
   //loop counter
   int32_t i, j, d, c, h, u, n, t;
   
   //Sending...	
   //generate frame
   int32_t data = 0, data_bit;
   int32_t symbole_flow_user1[8*sizeof(int32_t)];
   
   //spreading
   int32_t ovsf_code_user1[8] = {-1, -1, 1, 1, -1, -1, 1, 1};
   //user code
   int32_t pilot[8*sizeof(int32_t)] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   int32_t spreading_signal1[8*8*sizeof(int32_t)+6];
   int32_t spreading_signals[8*8*sizeof(int32_t)+6];
   int32_t channel_delay1 = 0, channel_delay2 = 0, channel_delay3 = 0, channel_delay4 = 0;
   
   //demux
   int32_t I_user[8/2*8*sizeof(int32_t)+6/2];
   int32_t Q_user[8/2*8*sizeof(int32_t)+6/2];
   
   //qpsk
   float Signal_I[(8/2*8*sizeof(int32_t)+6/2)*4];
   float Signal_Q[(8/2*8*sizeof(int32_t)+6/2)*4];
   
   //filter
   float FIR_COEFF[8] = {1, 0, 0, 0, 0, 0, 0, 0};
   //filter coeff
   float x_buffer_user1[8];
   //buffer for convolution
   int32_t ptr_x_buffer_user1;
   //ptr on buffer
   float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4];
   float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4];
   float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4];
   float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4];
   
   //inv qpsk
   int32_t *destination;
   int32_t inv_qpsk_user1[8*8*sizeof(int32_t)+6];
   int32_t R_pilot[8*8*sizeof(int32_t)+6];
   
   //channel estimation
   int32_t retro_loop_count = 0;
   int32_t finger_mat[8*sizeof(int32_t)][6];
   int32_t coeff[6];
   int32_t coeff2[6];
   //for the temporary coeff calculated before retroaction loop
   int32_t max;
   int32_t S_pilot[8*sizeof(int32_t)] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   //sent pilots
   
   //rake receiver
   int32_t finger[6];
   int32_t fingers;
   int32_t symbole_flow[8*sizeof(int32_t)];

   int32_t found_error;
   
   //for read & write
   int32_t write;
   int flag = 1;
   int j_bkp;
   unsigned char init = 0;
   srand(0);
   //init the input image
   for(i = 0; i <= 524287; i += 1)
      image_in[i] = init++;
   //(unsigned char) (rand()%256);
   
   
   //Loop on the number of frame. The number of frame is made of "nb data frame" + "nb pilot frame". 
   //Pilot frames are added to initial frames for the channel estimation.
   for(t = 0; t <= 512*1024/sizeof(int32_t)+512*1024/sizeof(int32_t)/(10-1)+1-1; t += 1) {
      P4A_scmp_kernel_0(&channel_delay1, &channel_delay2, &channel_delay3, &channel_delay4, &data, image_in, img_index, ovsf_code_user1, pilot, spreading_signal1, symbole_flow_user1, t);
      P4A_scmp_kernel_1(spreading_signal1, spreading_signals);

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      P4A_scmp_kernel_2(spreading_signals);

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      P4A_scmp_kernel_3(channel_delay1, spreading_signal1, spreading_signals);

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      P4A_scmp_kernel_4(channel_delay2, spreading_signal1, spreading_signals);

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      P4A_scmp_kernel_5(channel_delay3, spreading_signal1, spreading_signals);
      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      P4A_scmp_kernel_6(channel_delay4, spreading_signal1, spreading_signals);

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      j = 0;
      P4A_scmp_kernel_7(I_user, Q_user, &j, spreading_signals);
      P4A_scmp_kernel_8(I_user, Signal_I);
      P4A_scmp_kernel_9(Q_user, Signal_Q);
      P4A_scmp_kernel_10(channel_I);
      P4A_scmp_kernel_11(&ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_12(FIR_COEFF, Signal_I, channel_I, &ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_13(channel_Q);
      P4A_scmp_kernel_14(&ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_15(FIR_COEFF, Signal_Q, channel_Q, &ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_16(FIR2_I_user1);
      P4A_scmp_kernel_17(FIR2_Q_user1);
      P4A_scmp_kernel_18(&ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_19(FIR2_I_user1, FIR_COEFF, channel_I, &ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_20(&ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_21(FIR2_Q_user1, FIR_COEFF, channel_Q, &ptr_x_buffer_user1, x_buffer_user1);
      P4A_scmp_kernel_22(FIR2_I_user1, FIR2_Q_user1, R_pilot, inv_qpsk_user1, &j, t);
      P4A_scmp_kernel_23(R_pilot, S_pilot, coeff, coeff2, finger_mat, &flag, &j_bkp, &max, &retro_loop_count, t);
      P4A_scmp_kernel_24(coeff, &data, finger, inv_qpsk_user1, ovsf_code_user1, symbole_flow, t);
      
      //---- Store result
      if (t%10!=0) {
         //store received frame in image_out
         image_out[img_index] = (data&0x000000FF)>>0;
         image_out[img_index+1] = (data&0x0000FF00)>>8;
         image_out[img_index+2] = (data&0x00FF0000)>>16;
         image_out[img_index+3] = (data&0xFF000000)>>24;

         img_index += 4;
         //for next frame, increment index by size of frame
         
         for(d = 0; d <= 8*sizeof(int32_t)-1; d += 1)
            ;
      }
   }
   //Debug
   /* pdebug_memory("input image\n"); */
   /* for(i=0;i<sizeY;i++){ */
   /*   for(j=0;j<sizeX;j++){ */
   /*     pdebug_memory("%d\t",image_in[i*sizeX+j]); */
   /*   } */
   /*   pdebug_memory("\n"); */
   /* } */
   
   /* pdebug_memory("output image\n"); */
   /* for(i=0;i<sizeY;i++){ */
   /*   for(j=0;j<sizeX;j++){ */
   /*     pdebug_memory("%d\t",image_out[i*sizeX+j]); */
   /*   } */
   /*   pdebug_memory("\n"); */
   /* } */
   
   //WARNING NOT TO BE PORTED TO SESAM just to check result with diff
   /*  FILE * output_file= fopen("output_image","w"); */
   /*   if(output_file==NULL){ printf("ERROR when opening output file\n");exit(EXIT_FAILURE);} */
   /*   fwrite(image_out, sizeof(unsigned char), sizeX*sizeY,output_file); */
   /*   fclose(output_file); */
   
   /*   FILE * input_file= fopen("input_image","w"); */
   /*   if(input_file==NULL){ printf("ERROR when opening input file\n");exit(EXIT_FAILURE);} */
   /*   fwrite(image_in, sizeof(unsigned char), sizeX*sizeY,input_file); */
   /*   fclose(input_file); */
   
   return 0;
}
void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, const void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   const char *csrc = accel_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i+d1_offset*element_size] = csrc[i];
}
void P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, const void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   const char *csrc = (char *) accel_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
}
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, const void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   const char *csrc = host_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[d1_offset*element_size+i];
}
void P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, const void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   const char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
}
void P4A_scmp_dealloc(void *dest)
{
}
void * P4A_scmp_flow(void **flow)
{
}
void P4A_scmp_kernel_0(int32_t channel_delay1_0[1], int32_t channel_delay2_0[1], int32_t channel_delay3_0[1], int32_t channel_delay4_0[1], int32_t data_0[1], unsigned char image_in[512*1024], int32_t img_index, int32_t ovsf_code_user1[8], int32_t pilot[8*sizeof(int32_t)], int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t symbole_flow_user1[8*sizeof(int32_t)], int32_t t)
{
   //PIPS generated variable
   int32_t data_bit, i, j, write, channel_delay1, channel_delay2, channel_delay3, channel_delay4, data;
   data = *data_0;
   channel_delay4 = *channel_delay4_0;
   channel_delay3 = *channel_delay3_0;
   channel_delay2 = *channel_delay2_0;
   channel_delay1 = *channel_delay1_0;
   {
      int task;
#pragma scmp task
      task = 0;
      if (t%10!=0) {
         data = image_in[img_index]<<0|image_in[img_index+1]<<8|image_in[img_index+2]<<16|image_in[img_index+3]<<24;
         //put 4 pixels in a frame (data)
         for(i = 0; i <= 8*sizeof(int32_t)-1; i += 1) {
            data_bit = data>>i&0x01;
            symbole_flow_user1[i] = data_bit;
         }
         
         //---- Spreading
         
         for(i = 0; i <= 8*sizeof(int32_t)-1; i += 1)
            for(j = 0; j <= 7; j += 1)
               if (symbole_flow_user1[i]==0)
                  spreading_signal1[i*8+j] = -ovsf_code_user1[j];
               else
                  spreading_signal1[i*8+j] = ovsf_code_user1[j];
      }
      else {
         
         /* pdebug_info("main path delay: 0\n"); */
         channel_delay1 = (int32_t) (rand()%6);
         /* pdebug_info("path 1 delay: %i\n",channel_delay1); */
         channel_delay2 = (int32_t) (rand()%6);
         /* pdebug_info("path 2 delay: %i\n",channel_delay2); */
         channel_delay3 = (int32_t) (rand()%6);
         /* pdebug_info("path 3 delay: %i\n",channel_delay3); */
         channel_delay4 = (int32_t) (rand()%6);
         /* pdebug_info("path 4 delay: %i\n",channel_delay4); */
         //printf("%d %d %d %d\n",channel_delay1,channel_delay2,channel_delay3,channel_delay4);		
         for(i = 0; i <= 8*sizeof(int32_t)-1; i += 1) {
            write = pilot[i]==0?-1:1;
            for(j = 0; j <= 7; j += 1)
               spreading_signal1[i*8+j] = write;
         }
      }
   }
   *channel_delay1_0 = channel_delay1;
   *channel_delay2_0 = channel_delay2;
   *channel_delay3_0 = channel_delay3;
   *channel_delay4_0 = channel_delay4;
   *data_0 = data;
}
void P4A_scmp_kernel_1(int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //generate multipath
   //main path
   for(i = 0; i <= 8*8*sizeof(int32_t)-1; i += 1)
      spreading_signals[i] = spreading_signal1[i];
}
void P4A_scmp_kernel_10(float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   
   
   //---- FIR for I and Q before channel
   
   
   //initialisation
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      channel_I[u] = 0;
}
void P4A_scmp_kernel_11(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {
      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_12(float FIR_COEFF[8], float Signal_I[(8/2*8*sizeof(int32_t)+6/2)*4], float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   
   //convolution par la réponse impultionelle du filtre (FIR_COEFF)
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = Signal_I[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         channel_I[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_13(float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   
   //initialisation
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      channel_Q[u] = 0;
}
void P4A_scmp_kernel_14(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {
      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_15(float FIR_COEFF[8], float Signal_Q[(8/2*8*sizeof(int32_t)+6/2)*4], float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = Signal_Q[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         channel_Q[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_16(float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   
   
   
   //------------------------------------------ RECEPT FRAME -----------------------------------------------
   
   //---- FIR for I and Q after channel
   
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      FIR2_I_user1[u] = 0;
}
void P4A_scmp_kernel_17(float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t u;
   for(u = 0; u <= (8/2*8*sizeof(int32_t)+6/2)*4-1; u += 1)
      FIR2_Q_user1[u] = 0;
}
void P4A_scmp_kernel_18(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {

      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_19(float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4], float FIR_COEFF[8], float channel_I[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   //convolution par la réponse impultionelle du filtre (FIR_COEFF)
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = channel_I[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         FIR2_I_user1[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_2(int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   //initialisation
   for(i = 8*8*sizeof(int32_t); i <= 8*8*sizeof(int32_t)+6-1; i += 1)
      spreading_signals[i] = 0;
}
void P4A_scmp_kernel_20(int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t u, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   {

      int task;
#pragma scmp task
      task = 0;
      for(u = 0; u <= 7; u += 1)
         x_buffer_user1[u] = 0;
      ptr_x_buffer_user1 = 0;
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_21(float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4], float FIR_COEFF[8], float channel_Q[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t ptr_x_buffer_user1_0[1], float x_buffer_user1[8])
{
   //PIPS generated variable
   int32_t i, n, ptr_x_buffer_user1;
   ptr_x_buffer_user1 = *ptr_x_buffer_user1_0;
   for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 1) {
      x_buffer_user1[ptr_x_buffer_user1++] = channel_Q[i];
      ptr_x_buffer_user1 %= 8;
      for(n = 8-1; n >= 0; n += -1) {
         FIR2_Q_user1[i] += FIR_COEFF[n]*x_buffer_user1[ptr_x_buffer_user1++];
         ptr_x_buffer_user1 %= 8;
      }
   }
   *ptr_x_buffer_user1_0 = ptr_x_buffer_user1;
}
void P4A_scmp_kernel_22(float FIR2_I_user1[(8/2*8*sizeof(int32_t)+6/2)*4], float FIR2_Q_user1[(8/2*8*sizeof(int32_t)+6/2)*4], int32_t R_pilot[8*8*sizeof(int32_t)+6], int32_t inv_qpsk_user1[8*8*sizeof(int32_t)+6], int32_t j_0[1], int32_t t)
{
   //PIPS generated variable
   int32_t i, j;
   j = *j_0;
   {
      
      
      
      //---- QPSK-1 (+ parallel to serial)
      int task;
#pragma scmp task
      task = 0;
      if (t%10==0) {
         j = 0;
         for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 4) {
            //It is a cosinus, so the first bit out of 4 sampled gives
            //the sign of the symbol and the amplitude of the signal.
            R_pilot[j] = (int32_t) FIR2_I_user1[i];
            R_pilot[j+1] = (int32_t) FIR2_Q_user1[i];
            j += 2;
         }
      }
      else {
         j = 0;
         for(i = 0; i <= (8/2*8*sizeof(int32_t)+6/2)*4-1; i += 4) {
            //It is a cosinus, so the first bit out of 4 sampled gives
            //the sign of the symbol and the amplitude of the signal.
            inv_qpsk_user1[j] = (int32_t) FIR2_I_user1[i];
            inv_qpsk_user1[j+1] = (int32_t) FIR2_Q_user1[i];
            j += 2;
         }
      }
   }
   *j_0 = j;
}
void P4A_scmp_kernel_23(int32_t R_pilot[8*8*sizeof(int32_t)+6], int32_t S_pilot[8*sizeof(int32_t)], int32_t coeff[6], int32_t coeff2[6], int32_t finger_mat[8*sizeof(int32_t)][6], int flag_0[1], int j_bkp_0[1], int32_t max_0[1], int32_t retro_loop_count_0[1], int32_t t)
{
   //PIPS generated variable
   int32_t c, d, i;
   //PIPS generated variable
   int flag, j_bkp;
   //PIPS generated variable
   int32_t max, retro_loop_count;
   retro_loop_count = *retro_loop_count_0;
   max = *max_0;
   j_bkp = *j_bkp_0;
   flag = *flag_0;
   {
      int task, j;
#pragma scmp task
      task = 0;
      if (t%10==0) {
         //initialisation
         for(j = 0; j <= 5; j += 1) {
            coeff[j] = 0;
            coeff2[j] = 0;
         }

         retro_loop_count = 0;
         flag = 1;
         while (flag==1) {
            //estimation:
            flag = 0;
            
            //create matrix
            for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1) {
               for(i = 0; i <= 5; i += 1)
                  finger_mat[c][i] = 0;
               //initialisation
               for(j = 0; j <= 5; j += 1)
                  //for each finger... (code on the signal shifted to the right)
                  for(d = 0; d <= 7; d += 1)
                     finger_mat[c][j] += R_pilot[c*8+d+j];
            }
            
            //calculate the channel coefficients
            for(j = 0; j <= 5; j += 1) {
               coeff2[j] = 0;
               for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1)
                  if (S_pilot[c]==0)
                     coeff2[j] += finger_mat[c][j]*(-1);
                  else
                     coeff2[j] += finger_mat[c][j]*1;
            }
            
            //calculating max power received
            max = 0;
            for(j = 0; j <= 5; j += 1)
               if (coeff2[j]>max)
                  max = coeff2[j];
            if (max>=8*8*sizeof(int32_t)) {
               
               //retroaction
               j = 0;
               while (j<6) {

                  if (retro_loop_count>6) {
                     j_bkp = j;
                     j = 6;
                  }
                  else if (coeff2[j]>=max) {
                     coeff[j]++;
                     for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1)
                        for(d = 0; d <= 7; d += 1)
                           if (S_pilot[c]==1)
                              R_pilot[c*8+d+j] -= 1;
                           else
                              R_pilot[c*8+d+j] += 1;
                     retro_loop_count++;
                     flag = 1;
                     j_bkp = j;
                     j = 6;
                  }
                  j++;
               }
               j = j_bkp;
            }
         }
      }
   }
   *flag_0 = flag;
   *j_bkp_0 = j_bkp;
   *max_0 = max;
   *retro_loop_count_0 = retro_loop_count;
}
void P4A_scmp_kernel_24(int32_t coeff[6], int32_t data_0[1], int32_t finger[6], int32_t inv_qpsk_user1[8*8*sizeof(int32_t)+6], int32_t ovsf_code_user1[8], int32_t symbole_flow[8*sizeof(int32_t)], int32_t t)
{
   //PIPS generated variable
   int32_t c, d, data_bit, fingers, i, j, data;
   data = *data_0;
   {
      int task;
#pragma scmp task
      task = 0;
      if (t%10!=0) {
         data = 0;
         for(c = 0; c <= 8*sizeof(int32_t)-1; c += 1) {
            fingers = 0;
            for(i = 0; i <= 5; i += 1)
               finger[i] = 0;
            for(j = 0; j <= 5; j += 1)
               //for each finger... (code on the signal shifted to the right)
               for(d = 0; d <= 7; d += 1)
                  finger[j] += inv_qpsk_user1[c*8+d+j]*ovsf_code_user1[d];
            //cout<<endl;
            for(i = 0; i <= 5; i += 1)
               fingers += coeff[i]*finger[i];
            if (fingers>0)
               data_bit = 1;
            else
               data_bit = 0;
            data = data|data_bit<<c;
            symbole_flow[c] = data_bit;
         }
      }
   }
   *data_0 = data;
}
void P4A_scmp_kernel_3(int32_t channel_delay1, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   
   //other path
   for(i = channel_delay1; i <= 8*8*sizeof(int32_t)+channel_delay1-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay1];
}
void P4A_scmp_kernel_4(int32_t channel_delay2, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   for(i = channel_delay2; i <= 8*8*sizeof(int32_t)+channel_delay2-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay2];
}
void P4A_scmp_kernel_5(int32_t channel_delay3, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   for(i = channel_delay3; i <= 8*8*sizeof(int32_t)+channel_delay3-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay3];
}
void P4A_scmp_kernel_6(int32_t channel_delay4, int32_t spreading_signal1[8*8*sizeof(int32_t)+6], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i;
   //printf("\n");
   
   
   
   for(i = channel_delay4; i <= 8*8*sizeof(int32_t)+channel_delay4-1; i += 1)
      spreading_signals[i] += spreading_signal1[i-channel_delay4];
}
void P4A_scmp_kernel_7(int32_t I_user[8/2*8*sizeof(int32_t)+6/2], int32_t Q_user[8/2*8*sizeof(int32_t)+6/2], int32_t j_0[1], int32_t spreading_signals[8*8*sizeof(int32_t)+6])
{
   //PIPS generated variable
   int32_t i, j;
   j = *j_0;
   //printf("\n");
   
   
   
   //------------------------------------------ SEND FRAME -----------------------------------------------
   //---- Conversion serial to parallel
   for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 2) {
      I_user[j] = spreading_signals[i];
      Q_user[j] = spreading_signals[i+1];
      j++;
   }
   *j_0 = j;
}
void P4A_scmp_kernel_8(int32_t I_user[8/2*8*sizeof(int32_t)+6/2], float Signal_I[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t h, i;
   //---- Modulation QPSK on I
   for(i = 0; i <= 8/2*8*sizeof(int32_t)+6/2-1; i += 1)
      //Phase = Sign of I_user
      for(h = 0; h <= 3; h += 1)
         Signal_I[i*4+h] = 1.0*I_user[i]*cos(h*2*3.14159265358979323846/(4-1));
}
void P4A_scmp_kernel_9(int32_t Q_user[8/2*8*sizeof(int32_t)+6/2], float Signal_Q[(8/2*8*sizeof(int32_t)+6/2)*4])
{
   //PIPS generated variable
   int32_t h, i;
   
   //---- Modulation QPSK on Q -- we suppose that we dephase it after of PI/2
   for(i = 0; i <= 8*8*sizeof(int32_t)/2+6/2-1; i += 1)
      //Phase = Sign of Q_user
      for(h = 0; h <= 3; h += 1)
         Signal_Q[i*4+h] = 1.0*Q_user[i]*cos(h*2*3.14159265358979323846/(4-1));
}
void P4A_scmp_malloc(void **dest, size_t n)
{

   if (*dest==(void *) 0)
      *dest = malloc(n);
}
void P4A_scmp_read(size_t element_size, const void *host_address, void *accel_address)
{
   /* We can use memcpy() since we are sure there is no overlap */
   memcpy(accel_address, host_address, element_size);
}
void P4A_scmp_write(size_t element_size, void *host_address, const void *accel_address)
{
   /* We can use memcpy() since we are sure there is no overlap */
   memcpy(host_address, accel_address, element_size);
}
int main()
{

   unsigned char image_in[512*1024];
   unsigned char image_out[512*1024];

   int32_t img_index = 0;
   
   //Local variables
   //loop counter
   int32_t i, j, d, c, h, u, n, t;
   
   //Sending...	
   //generate frame
   int32_t data = 0, data_bit;
   int32_t symbole_flow_user1[8*4];
   
   //spreading
   int32_t ovsf_code_user1[8] = {-1, -1, 1, 1, -1, -1, 1, 1};
   //user code
   int32_t pilot[8*4] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   int32_t spreading_signal1[64*4+5+1];
   int32_t spreading_signals[64*4+5+1];
   int32_t channel_delay1 = 0, channel_delay2 = 0, channel_delay3 = 0, channel_delay4 = 0;
   
   //demux
   int32_t I_user[32*4+2+1];
   int32_t Q_user[32*4+2+1];
   
   //qpsk
   float Signal_I[128*4+11+1];
   float Signal_Q[128*4+11+1];
   
   //filter
   float FIR_COEFF[8] = {1, 0, 0, 0, 0, 0, 0, 0};
   //filter coeff
   float x_buffer_user1[8];
   //buffer for convolution
   int32_t ptr_x_buffer_user1;
   //ptr on buffer
   float channel_I[128*4+11+1];
   float channel_Q[128*4+11+1];
   float FIR2_I_user1[128*4+11+1];
   float FIR2_Q_user1[128*4+11+1];
   
   //inv qpsk
   int32_t *destination;
   int32_t inv_qpsk_user1[64*4+5+1];
   int32_t R_pilot[64*4+5+1];
   
   //channel estimation
   int32_t retro_loop_count = 0;
   int32_t finger_mat[8*4][6];
   int32_t coeff[6];
   int32_t coeff2[6];
   //for the temporary coeff calculated before retroaction loop
   int32_t max;
   int32_t S_pilot[8*4] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   //sent pilots
   
   //rake receiver
   int32_t finger[6];
   int32_t fingers;
   int32_t symbole_flow[8*4];

   int32_t found_error;
   
   //for read & write
   int32_t write;
   int flag = 1;
   int j_bkp;
   unsigned char init = 0;
   srand(0);
   //init the input image
   for(i = 0; i <= 524287; i += 1)
      image_in[i] = init++;
   //(unsigned char) (rand()%256);
   
   
   //Loop on the number of frame. The number of frame is made of "nb data frame" + "nb pilot frame". 
   //Pilot frames are added to initial frames for the channel estimation.
   for(t = 0; t <= 512*1024/sizeof(int32_t)+512*1024/sizeof(int32_t)/(10-1)+1-1; t += 1) {
      {
         //PIPS generated variable
         int32_t (*P4A_var_symbole_flow_user10)[32] = (int32_t (*)[32]) 0, (*P4A_var_spreading_signal10)[262] = (int32_t (*)[262]) 0, (*P4A_var_pilot0)[32] = (int32_t (*)[32]) 0, (*P4A_var_ovsf_code_user10)[8] = (int32_t (*)[8]) 0;
         //PIPS generated variable
         unsigned char (*P4A_var_image_in0)[524288] = (unsigned char (*)[524288]) 0;
         P4A_scmp_malloc((void **) &P4A_var_image_in0, sizeof(unsigned char)*524288);
         P4A_scmp_malloc((void **) &P4A_var_ovsf_code_user10, sizeof(int)*8);
         P4A_scmp_malloc((void **) &P4A_var_pilot0, sizeof(int)*32);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signal10, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_symbole_flow_user10, sizeof(int)*32);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal10);
         P4A_copy_to_accel_1d(sizeof(unsigned char), 524288, 524288, 0, &image_in[0], *P4A_var_image_in0);
         P4A_copy_to_accel_1d(sizeof(int), 8, 8, 0, &ovsf_code_user1[0], *P4A_var_ovsf_code_user10);
         P4A_copy_to_accel_1d(sizeof(int), 32, 32, 0, &pilot[0], *P4A_var_pilot0);
         P4A_copy_to_accel_1d(sizeof(int), 32, 32, 0, &symbole_flow_user1[0], *P4A_var_symbole_flow_user10);

         P4A_scmp_kernel_0(&channel_delay1, &channel_delay2, &channel_delay3, &channel_delay4, &data, *P4A_var_image_in0, img_index, *P4A_var_ovsf_code_user10, *P4A_var_pilot0, *P4A_var_spreading_signal10, *P4A_var_symbole_flow_user10, t);
         P4A_copy_from_accel_1d(sizeof(int), 32, 32, 0, &symbole_flow_user1[0], *P4A_var_symbole_flow_user10);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal10);
      }
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals0)[262] = (int32_t (*)[262]) 0, (*P4A_var_spreading_signal11)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_spreading_signal11, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals0, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals0);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal11);

         P4A_scmp_kernel_1(*P4A_var_spreading_signal11, *P4A_var_spreading_signals0);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals0);
      }

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals1)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals1, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals1);

         P4A_scmp_kernel_2(*P4A_var_spreading_signals1);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals1);
      }

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals2)[262] = (int32_t (*)[262]) 0, (*P4A_var_spreading_signal12)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_spreading_signal12, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals2, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal12);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals2);

         P4A_scmp_kernel_3(channel_delay1, *P4A_var_spreading_signal12, *P4A_var_spreading_signals2);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals2);
      }

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals3)[262] = (int32_t (*)[262]) 0, (*P4A_var_spreading_signal13)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_spreading_signal13, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals3, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal13);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals3);

         P4A_scmp_kernel_4(channel_delay2, *P4A_var_spreading_signal13, *P4A_var_spreading_signals3);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals3);
      }

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals4)[262] = (int32_t (*)[262]) 0, (*P4A_var_spreading_signal14)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_spreading_signal14, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals4, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal14);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals4);

         P4A_scmp_kernel_5(channel_delay3, *P4A_var_spreading_signal14, *P4A_var_spreading_signals4);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals4);
      }
      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals5)[262] = (int32_t (*)[262]) 0, (*P4A_var_spreading_signal15)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_spreading_signal15, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals5, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signal1[0], *P4A_var_spreading_signal15);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals5);

         P4A_scmp_kernel_6(channel_delay4, *P4A_var_spreading_signal15, *P4A_var_spreading_signals5);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals5);
      }

      for(i = 0; i <= 8*8*sizeof(int32_t)+6-1; i += 1)
         ;
      j = 0;
      {
         //PIPS generated variable
         int32_t (*P4A_var_spreading_signals6)[262] = (int32_t (*)[262]) 0, (*P4A_var_Q_user0)[131] = (int32_t (*)[131]) 0, (*P4A_var_I_user0)[131] = (int32_t (*)[131]) 0;
         P4A_scmp_malloc((void **) &P4A_var_I_user0, sizeof(int)*131);
         P4A_scmp_malloc((void **) &P4A_var_Q_user0, sizeof(int)*131);
         P4A_scmp_malloc((void **) &P4A_var_spreading_signals6, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 131, 131, 0, &Q_user[0], *P4A_var_Q_user0);
         P4A_copy_to_accel_1d(sizeof(int), 131, 131, 0, &I_user[0], *P4A_var_I_user0);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &spreading_signals[0], *P4A_var_spreading_signals6);

         P4A_scmp_kernel_7(*P4A_var_I_user0, *P4A_var_Q_user0, &j, *P4A_var_spreading_signals6);
         P4A_copy_from_accel_1d(sizeof(int), 131, 131, 0, &Q_user[0], *P4A_var_Q_user0);
         P4A_copy_from_accel_1d(sizeof(int), 131, 131, 0, &I_user[0], *P4A_var_I_user0);
      }
      {
         //PIPS generated variable
         float (*P4A_var_Signal_I0)[524] = (float (*)[524]) 0;
         //PIPS generated variable
         int32_t (*P4A_var_I_user1)[131] = (int32_t (*)[131]) 0;
         P4A_scmp_malloc((void **) &P4A_var_I_user1, sizeof(int)*131);
         P4A_scmp_malloc((void **) &P4A_var_Signal_I0, sizeof(float)*524);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &Signal_I[0], *P4A_var_Signal_I0);
         P4A_copy_to_accel_1d(sizeof(int), 131, 131, 0, &I_user[0], *P4A_var_I_user1);

         P4A_scmp_kernel_8(*P4A_var_I_user1, *P4A_var_Signal_I0);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &Signal_I[0], *P4A_var_Signal_I0);
      }
      {
         //PIPS generated variable
         float (*P4A_var_Signal_Q0)[524] = (float (*)[524]) 0;
         //PIPS generated variable
         int32_t (*P4A_var_Q_user1)[131] = (int32_t (*)[131]) 0;
         P4A_scmp_malloc((void **) &P4A_var_Q_user1, sizeof(int)*131);
         P4A_scmp_malloc((void **) &P4A_var_Signal_Q0, sizeof(float)*524);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &Signal_Q[0], *P4A_var_Signal_Q0);
         P4A_copy_to_accel_1d(sizeof(int), 131, 131, 0, &Q_user[0], *P4A_var_Q_user1);

         P4A_scmp_kernel_9(*P4A_var_Q_user1, *P4A_var_Signal_Q0);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &Signal_Q[0], *P4A_var_Signal_Q0);
      }
      {
         //PIPS generated variable
         float (*P4A_var_channel_I0)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_channel_I0, sizeof(float)*524);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &channel_I[0], *P4A_var_channel_I0);

         P4A_scmp_kernel_10(*P4A_var_channel_I0);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &channel_I[0], *P4A_var_channel_I0);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user10)[8] = (float (*)[8]) 0;
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user10, sizeof(float)*8);

         P4A_scmp_kernel_11(&ptr_x_buffer_user1, *P4A_var_x_buffer_user10);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user10);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user11)[8] = (float (*)[8]) 0, (*P4A_var_channel_I1)[524] = (float (*)[524]) 0, (*P4A_var_Signal_I1)[524] = (float (*)[524]) 0, (*P4A_var_FIR_COEFF0)[8] = (float (*)[8]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR_COEFF0, sizeof(float)*8);
         P4A_scmp_malloc((void **) &P4A_var_Signal_I1, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_channel_I1, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user11, sizeof(float)*8);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &FIR_COEFF[0], *P4A_var_FIR_COEFF0);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &Signal_I[0], *P4A_var_Signal_I1);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &channel_I[0], *P4A_var_channel_I1);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user11);

         P4A_scmp_kernel_12(*P4A_var_FIR_COEFF0, *P4A_var_Signal_I1, *P4A_var_channel_I1, &ptr_x_buffer_user1, *P4A_var_x_buffer_user11);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user11);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &channel_I[0], *P4A_var_channel_I1);
      }
      {
         //PIPS generated variable
         float (*P4A_var_channel_Q0)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_channel_Q0, sizeof(float)*524);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &channel_Q[0], *P4A_var_channel_Q0);

         P4A_scmp_kernel_13(*P4A_var_channel_Q0);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &channel_Q[0], *P4A_var_channel_Q0);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user12)[8] = (float (*)[8]) 0;
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user12, sizeof(float)*8);

         P4A_scmp_kernel_14(&ptr_x_buffer_user1, *P4A_var_x_buffer_user12);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user12);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user13)[8] = (float (*)[8]) 0, (*P4A_var_channel_Q1)[524] = (float (*)[524]) 0, (*P4A_var_Signal_Q1)[524] = (float (*)[524]) 0, (*P4A_var_FIR_COEFF1)[8] = (float (*)[8]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR_COEFF1, sizeof(float)*8);
         P4A_scmp_malloc((void **) &P4A_var_Signal_Q1, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_channel_Q1, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user13, sizeof(float)*8);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &FIR_COEFF[0], *P4A_var_FIR_COEFF1);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &Signal_Q[0], *P4A_var_Signal_Q1);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &channel_Q[0], *P4A_var_channel_Q1);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user13);

         P4A_scmp_kernel_15(*P4A_var_FIR_COEFF1, *P4A_var_Signal_Q1, *P4A_var_channel_Q1, &ptr_x_buffer_user1, *P4A_var_x_buffer_user13);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user13);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &channel_Q[0], *P4A_var_channel_Q1);
      }
      {
         //PIPS generated variable
         float (*P4A_var_FIR2_I_user10)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR2_I_user10, sizeof(float)*524);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &FIR2_I_user1[0], *P4A_var_FIR2_I_user10);

         P4A_scmp_kernel_16(*P4A_var_FIR2_I_user10);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &FIR2_I_user1[0], *P4A_var_FIR2_I_user10);
      }
      {
         //PIPS generated variable
         float (*P4A_var_FIR2_Q_user10)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR2_Q_user10, sizeof(float)*524);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &FIR2_Q_user1[0], *P4A_var_FIR2_Q_user10);

         P4A_scmp_kernel_17(*P4A_var_FIR2_Q_user10);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &FIR2_Q_user1[0], *P4A_var_FIR2_Q_user10);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user14)[8] = (float (*)[8]) 0;
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user14, sizeof(float)*8);

         P4A_scmp_kernel_18(&ptr_x_buffer_user1, *P4A_var_x_buffer_user14);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user14);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user15)[8] = (float (*)[8]) 0, (*P4A_var_channel_I2)[524] = (float (*)[524]) 0, (*P4A_var_FIR_COEFF2)[8] = (float (*)[8]) 0, (*P4A_var_FIR2_I_user11)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR2_I_user11, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_FIR_COEFF2, sizeof(float)*8);
         P4A_scmp_malloc((void **) &P4A_var_channel_I2, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user15, sizeof(float)*8);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &FIR2_I_user1[0], *P4A_var_FIR2_I_user11);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &FIR_COEFF[0], *P4A_var_FIR_COEFF2);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &channel_I[0], *P4A_var_channel_I2);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user15);

         P4A_scmp_kernel_19(*P4A_var_FIR2_I_user11, *P4A_var_FIR_COEFF2, *P4A_var_channel_I2, &ptr_x_buffer_user1, *P4A_var_x_buffer_user15);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user15);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &FIR2_I_user1[0], *P4A_var_FIR2_I_user11);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user16)[8] = (float (*)[8]) 0;
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user16, sizeof(float)*8);

         P4A_scmp_kernel_20(&ptr_x_buffer_user1, *P4A_var_x_buffer_user16);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user16);
      }
      {
         //PIPS generated variable
         float (*P4A_var_x_buffer_user17)[8] = (float (*)[8]) 0, (*P4A_var_channel_Q2)[524] = (float (*)[524]) 0, (*P4A_var_FIR_COEFF3)[8] = (float (*)[8]) 0, (*P4A_var_FIR2_Q_user11)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR2_Q_user11, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_FIR_COEFF3, sizeof(float)*8);
         P4A_scmp_malloc((void **) &P4A_var_channel_Q2, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_x_buffer_user17, sizeof(float)*8);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &FIR2_Q_user1[0], *P4A_var_FIR2_Q_user11);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &FIR_COEFF[0], *P4A_var_FIR_COEFF3);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &channel_Q[0], *P4A_var_channel_Q2);
         P4A_copy_to_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user17);

         P4A_scmp_kernel_21(*P4A_var_FIR2_Q_user11, *P4A_var_FIR_COEFF3, *P4A_var_channel_Q2, &ptr_x_buffer_user1, *P4A_var_x_buffer_user17);
         P4A_copy_from_accel_1d(sizeof(float), 8, 8, 0, &x_buffer_user1[0], *P4A_var_x_buffer_user17);
         P4A_copy_from_accel_1d(sizeof(float), 524, 524, 0, &FIR2_Q_user1[0], *P4A_var_FIR2_Q_user11);
      }
      {
         //PIPS generated variable
         int32_t (*P4A_var_inv_qpsk_user10)[262] = (int32_t (*)[262]) 0, (*P4A_var_R_pilot0)[262] = (int32_t (*)[262]) 0;
         //PIPS generated variable
         float (*P4A_var_FIR2_Q_user12)[524] = (float (*)[524]) 0, (*P4A_var_FIR2_I_user12)[524] = (float (*)[524]) 0;
         P4A_scmp_malloc((void **) &P4A_var_FIR2_I_user12, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_FIR2_Q_user12, sizeof(float)*524);
         P4A_scmp_malloc((void **) &P4A_var_R_pilot0, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_inv_qpsk_user10, sizeof(int)*262);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &inv_qpsk_user1[0], *P4A_var_inv_qpsk_user10);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &R_pilot[0], *P4A_var_R_pilot0);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &FIR2_I_user1[0], *P4A_var_FIR2_I_user12);
         P4A_copy_to_accel_1d(sizeof(float), 524, 524, 0, &FIR2_Q_user1[0], *P4A_var_FIR2_Q_user12);

         P4A_scmp_kernel_22(*P4A_var_FIR2_I_user12, *P4A_var_FIR2_Q_user12, *P4A_var_R_pilot0, *P4A_var_inv_qpsk_user10, &j, t);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &inv_qpsk_user1[0], *P4A_var_inv_qpsk_user10);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &R_pilot[0], *P4A_var_R_pilot0);
      }
      {
         //PIPS generated variable
         int32_t (*P4A_var_finger_mat0)[32][6] = (int32_t (*)[32][6]) 0, (*P4A_var_coeff20)[6] = (int32_t (*)[6]) 0, (*P4A_var_coeff0)[6] = (int32_t (*)[6]) 0, (*P4A_var_S_pilot0)[32] = (int32_t (*)[32]) 0, (*P4A_var_R_pilot1)[262] = (int32_t (*)[262]) 0;
         P4A_scmp_malloc((void **) &P4A_var_R_pilot1, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_S_pilot0, sizeof(int)*32);
         P4A_scmp_malloc((void **) &P4A_var_coeff0, sizeof(int)*6);
         P4A_scmp_malloc((void **) &P4A_var_coeff20, sizeof(int)*6);
         P4A_scmp_malloc((void **) &P4A_var_finger_mat0, sizeof(int)*192);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &R_pilot[0], *P4A_var_R_pilot1);
         P4A_copy_to_accel_1d(sizeof(int), 32, 32, 0, &S_pilot[0], *P4A_var_S_pilot0);
         P4A_copy_to_accel_1d(sizeof(int), 6, 6, 0, &coeff[0], *P4A_var_coeff0);
         P4A_copy_to_accel_1d(sizeof(int), 6, 6, 0, &coeff2[0], *P4A_var_coeff20);
         P4A_copy_to_accel_2d(sizeof(int), 32, 6, 32, 6, 0, 0, &finger_mat[0][0], *P4A_var_finger_mat0);

         P4A_scmp_kernel_23(*P4A_var_R_pilot1, *P4A_var_S_pilot0, *P4A_var_coeff0, *P4A_var_coeff20, *P4A_var_finger_mat0, &flag, &j_bkp, &max, &retro_loop_count, t);
         P4A_copy_from_accel_2d(sizeof(int), 32, 6, 32, 6, 0, 0, &finger_mat[0][0], *P4A_var_finger_mat0);
         P4A_copy_from_accel_1d(sizeof(int), 6, 6, 0, &coeff2[0], *P4A_var_coeff20);
         P4A_copy_from_accel_1d(sizeof(int), 6, 6, 0, &coeff[0], *P4A_var_coeff0);
         P4A_copy_from_accel_1d(sizeof(int), 262, 262, 0, &R_pilot[0], *P4A_var_R_pilot1);
      }
      {
         //PIPS generated variable
         int32_t (*P4A_var_symbole_flow0)[32] = (int32_t (*)[32]) 0, (*P4A_var_ovsf_code_user11)[8] = (int32_t (*)[8]) 0, (*P4A_var_inv_qpsk_user11)[262] = (int32_t (*)[262]) 0, (*P4A_var_finger0)[6] = (int32_t (*)[6]) 0, (*P4A_var_coeff1)[6] = (int32_t (*)[6]) 0;
         P4A_scmp_malloc((void **) &P4A_var_coeff1, sizeof(int)*6);
         P4A_scmp_malloc((void **) &P4A_var_finger0, sizeof(int)*6);
         P4A_scmp_malloc((void **) &P4A_var_inv_qpsk_user11, sizeof(int)*262);
         P4A_scmp_malloc((void **) &P4A_var_ovsf_code_user11, sizeof(int)*8);
         P4A_scmp_malloc((void **) &P4A_var_symbole_flow0, sizeof(int)*32);
         P4A_copy_to_accel_1d(sizeof(int), 32, 32, 0, &symbole_flow[0], *P4A_var_symbole_flow0);
         P4A_copy_to_accel_1d(sizeof(int), 6, 6, 0, &coeff[0], *P4A_var_coeff1);
         P4A_copy_to_accel_1d(sizeof(int), 6, 6, 0, &finger[0], *P4A_var_finger0);
         P4A_copy_to_accel_1d(sizeof(int), 262, 262, 0, &inv_qpsk_user1[0], *P4A_var_inv_qpsk_user11);
         P4A_copy_to_accel_1d(sizeof(int), 8, 8, 0, &ovsf_code_user1[0], *P4A_var_ovsf_code_user11);

         P4A_scmp_kernel_24(*P4A_var_coeff1, &data, *P4A_var_finger0, *P4A_var_inv_qpsk_user11, *P4A_var_ovsf_code_user11, *P4A_var_symbole_flow0, t);
         P4A_copy_from_accel_1d(sizeof(int), 32, 32, 0, &symbole_flow[0], *P4A_var_symbole_flow0);
         P4A_copy_from_accel_1d(sizeof(int), 6, 6, 0, &finger[0], *P4A_var_finger0);
      }
      
      //---- Store result
      if (t%10!=0) {
         //store received frame in image_out
         image_out[img_index] = (data&0x000000FF)>>0;
         image_out[img_index+1] = (data&0x0000FF00)>>8;
         image_out[img_index+2] = (data&0x00FF0000)>>16;
         image_out[img_index+3] = (data&0xFF000000)>>24;

         img_index += 4;
         //for next frame, increment index by size of frame
         
         for(d = 0; d <= 8*sizeof(int32_t)-1; d += 1)
            ;
      }
   }
   //Debug
   /* pdebug_memory("input image\n"); */
   /* for(i=0;i<sizeY;i++){ */
   /*   for(j=0;j<sizeX;j++){ */
   /*     pdebug_memory("%d\t",image_in[i*sizeX+j]); */
   /*   } */
   /*   pdebug_memory("\n"); */
   /* } */
   
   /* pdebug_memory("output image\n"); */
   /* for(i=0;i<sizeY;i++){ */
   /*   for(j=0;j<sizeX;j++){ */
   /*     pdebug_memory("%d\t",image_out[i*sizeX+j]); */
   /*   } */
   /*   pdebug_memory("\n"); */
   /* } */
   
   //WARNING NOT TO BE PORTED TO SESAM just to check result with diff
   /*  FILE * output_file= fopen("output_image","w"); */
   /*   if(output_file==NULL){ printf("ERROR when opening output file\n");exit(EXIT_FAILURE);} */
   /*   fwrite(image_out, sizeof(unsigned char), sizeX*sizeY,output_file); */
   /*   fclose(output_file); */
   
   /*   FILE * input_file= fopen("input_image","w"); */
   /*   if(input_file==NULL){ printf("ERROR when opening input file\n");exit(EXIT_FAILURE);} */
   /*   fwrite(image_in, sizeof(unsigned char), sizeX*sizeY,input_file); */
   /*   fclose(input_file); */
   
   return 0;
}
