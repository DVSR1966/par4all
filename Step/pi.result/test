

Source files copied in : pi/Source/
Generated source files : pi/src
###################### pi/src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc

OpenMP_FLAG = -fopenmp

FLAGS = -g -O2
LDFLAGS = 


CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.a
RUNTIME=c
DIR_STEP=step_rt


$(BIN) : $(DIR_STEP)/$(LIB_STEP) $(OBJFILES)
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -o $@; fi

$(OBJFILES):
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(FLAGS) -c $(CSOURCES); fi
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FLAGS) -fno-underscoring -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP)

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f *.o *~


.IGNORE: clean###################### pi/src/PI_PARDO10_HYBRID.f ######################
!!
!! file for PI_PARDO10_HYBRID.f
!!
      SUBROUTINE PI_PARDO10_HYBRID(I_DUMMY, I_L, I_U, X, ITER, 
     &CONTRIB)
      implicit none
      include "STEP.h"
      INTEGER I_DUMMY, I, I_L, I_U, STEP_I_LOW, STEP_I_UP
      INTEGER STEP_I_LOOPSLICES(IDX_SLICE_LOW:IDX_SLICE_UP, 1:
     &MAX_NB_LOOPSLICES)
      REAL*8 STEP_CONTRIB_REDUC, X, ITER, CONTRIB
      CALL STEP_GET_SIZE(STEP_COMM_SIZE)                                0123
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0124
      CALL STEP_INITREDUCTION(CONTRIB, STEP_CONTRIB_REDUC, STEP_SUM,    0125
     &STEP_REAL8)                                                       0125

      CALL STEP_COMPUTELOOPSLICES(I_L, I_U, 1, STEP_COMM_SIZE,          0128
     &MAX_NB_LOOPSLICES, STEP_I_LOOPSLICES)                             0128

C     Where work is done...
      STEP_I_LOW = STEP_I_LOOPSLICES(IDX_SLICE_LOW,STEP_COMM_RANK+1)    0132
      STEP_I_UP = STEP_I_LOOPSLICES(IDX_SLICE_UP,STEP_COMM_RANK+1)      0133
!$OMP parallel do reduction(+ : CONTRIB)
      DO 10 I = STEP_I_LOW, STEP_I_UP                                   0135
         X = (I-0.5)*ITER                                               0136
         CONTRIB = CONTRIB+4.0/(1.0+X*X)                                0137
         PRINT *, I, X, CONTRIB                                         0138
10       CONTINUE                                                       0139
!$OMP end parallel do

!$omp master
      CALL STEP_REDUCTION(CONTRIB, STEP_CONTRIB_REDUC, STEP_SUM,        0143
     &STEP_REAL8)                                                       0143

!$omp end master
!$omp barrier

      END
###################### pi/src/STEP.h ######################
      INCLUDE 'steprt_f.h'

      INTEGER STEP_MAX_NBNODE
      PARAMETER (STEP_MAX_NBNODE = 16)

      INTEGER max_nb_loopslices
      INTEGER step_nbrequest

      INTEGER STEP_COMM_SIZE, STEP_COMM_RANK

      PARAMETER (MAX_NB_LOOPSLICES = STEP_MAX_NBNODE)
      
      ! Globals
       INTEGER STEP_SizeRegion
       INTEGER IDX_SLICE_LOW,IDX_SLICE_UP,STEP_IDX
       PARAMETER (IDX_SLICE_LOW = 1,IDX_SLICE_UP=2)

###################### pi/src/pi.f ######################
!!
!! file for pi.f
!!
	PROGRAM PI
! 	implicit none
	INTEGER I, NUM_ITER
	DOUBLE PRECISION X, MY_PI, CONTRIB, ITER
      CALL STEP_INIT_FORTRAN_ORDER
      CONTRIB = 0.0                                                     0006
      NUM_ITER = 10                                                     0007
      ITER = 1.0/NUM_ITER                                               0008
C$STEP !$omp parallel do reduction (+:contrib)
      CALL PI_PARDO10_HYBRID(I, 1, NUM_ITER, X, ITER, CONTRIB)

      MY_PI = ITER*CONTRIB                                              0018

      PRINT *, MY_PI                                                    0020
      CALL STEP_FINALIZE
      END
###################### pi/src/steprt_f.h ######################
!*******************************************************************************
!*                                                                             *
!*   Authors 	        :       Abdellah. Kouadri                              *
!*				Daniel Millot                          	       *
!*                              Frederique Silber-Chaussumier                  *
!*				                                               *
!*   Date		:       25/06/2009                                     *
!*						                               *
!*   File		:	steprt_f.h                                     *
!*							                       *
!*   Version		:       1.1				               *
!*   Description	:	Fortran runtime interface                      *
! ******************************************************************************



! Datatype
      INTEGER STEP_INTEGER1
      INTEGER STEP_INTEGER2
      INTEGER STEP_INTEGER4
      INTEGER STEP_INTEGER8
      INTEGER STEP_REAL4
      INTEGER STEP_REAL8
      INTEGER STEP_REAL16
      INTEGER STEP_COMPLEX8
      INTEGER STEP_COMPLEX16
      INTEGER STEP_COMPLEX32
      INTEGER STEP_INTEGER
      INTEGER STEP_REAL
      INTEGER STEP_COMPLEX
      INTEGER STEP_DOUBLE_PRECISION
!
      PARAMETER (STEP_INTEGER1 = 1)
      PARAMETER (STEP_INTEGER2 = 2)
      PARAMETER (STEP_INTEGER4 = 3)
      PARAMETER (STEP_INTEGER8 = 4)
      PARAMETER (STEP_REAL4 = 5)
      PARAMETER (STEP_REAL8 = 6)
      PARAMETER (STEP_REAL16 = 7)
      PARAMETER (STEP_COMPLEX8 = 8)
      PARAMETER (STEP_COMPLEX16 = 9)
      PARAMETER (STEP_COMPLEX32 = 10)
      PARAMETER (STEP_INTEGER = 11)
      PARAMETER (STEP_REAL = 12)
      PARAMETER (STEP_COMPLEX = 13)
      PARAMETER (STEP_DOUBLE_PRECISION = 14)

! Communication tag
      INTEGER   STEP_TAG_DEFAULT
!
      PARAMETER (STEP_TAG_DEFAULT = 0)

! Communication algorithms
      INTEGER 	STEP_NBLOCKING_ALG 
      INTEGER	STEP_BLOCKING_ALG_1
      INTEGER	STEP_BLOCKING_ALG_2
      INTEGER	STEP_BLOCKING_ALG_3
      INTEGER	STEP_BLOCKING_ALG_4
! reduction operators 
      INTEGER STEP_SUM	
      INTEGER STEP_MAX_
      INTEGER STEP_MIN_
      INTEGER STEP_PROD
      INTEGER STEP_LAND	
      INTEGER STEP_BAND
      INTEGER STEP_LOR	
      INTEGER STEP_BOR	
      INTEGER STEP_LXOR	
      INTEGER STEP_BXOR	
      INTEGER STEP_MINLOC
      INTEGER STEP_MAXLOC
!
      PARAMETER (STEP_NBLOCKING_ALG  = 0)
      PARAMETER (STEP_BLOCKING_ALG_1 = 1)
      PARAMETER (STEP_BLOCKING_ALG_2 = 2)
      PARAMETER (STEP_BLOCKING_ALG_3 = 3)
      PARAMETER (STEP_BLOCKING_ALG_4 = 4)
!
      PARAMETER (STEP_SUM  =	3)
      PARAMETER (STEP_MAX_ =	1)
      PARAMETER (STEP_MIN_ =	2)
      PARAMETER (STEP_PROD =	0)
      PARAMETER (STEP_LAND =	4)
      PARAMETER (STEP_BAND =	5)
      PARAMETER (STEP_LOR  =	6)
      PARAMETER (STEP_BOR  =	7)
      PARAMETER (STEP_LXOR =	8)
      PARAMETER (STEP_BXOR =	9)
      PARAMETER (STEP_MINLOC =	10)
      PARAMETER (STEP_MAXLOC =	11)

