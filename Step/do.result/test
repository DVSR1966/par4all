

Source files copied in : do/Source/
Generated source files : do/src
###################### do/src/MY_DO_PAR1_DO1_HYBRID.f ######################
!!
!! file for MY_DO_PAR1_DO1_HYBRID.f
!!
      SUBROUTINE MY_DO_PAR1_DO1_HYBRID(I, I_L, I_U, N, A)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      include "STEP.h"
      INTEGER STEP_I_UP, STEP_I_LOW, I_UP, I_LOW, IDX, I, I_L, I_U, N
      INTEGER STEP_RR_A(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 1:
     &MAX_NB_LOOPSLICES), STEP_SR_A(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 
     &1:MAX_NB_LOOPSLICES), A(1:N, 1:2)

!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_DO)                                0109
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)                            0110
      CALL STEP_COMPUTE_LOOPSLICES(I_L, I_U, 1, STEP_COMM_SIZE)         0111

C     Put array boundaries into RECV region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0118
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0119
C  <A(PHI1,PHI2)-write-MAY-{PHI2==1, 1<=PHI1, PHI1<=10, I_LOW<=PHI1,
C    PHI1<=I_UP, PHI1<=N}>
         STEP_RR_A(IDX_SLICE_LOW,1,IDX) = MAX(I_LOW, 1)                 0122
         STEP_RR_A(IDX_SLICE_UP,1,IDX) = MIN(I_UP, 10, N)               0123
         STEP_RR_A(IDX_SLICE_LOW,2,IDX) = 1                             0124
         STEP_RR_A(IDX_SLICE_UP,2,IDX) = 1                              0125
      ENDDO
      CALL STEP_SET_RECVREGIONS(A, STEP_COMM_SIZE, STEP_RR_A)           0127

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_PARTIAL(A, STEP_NBLOCKING_ALG,                 0132
     &STEP_TAG_DEFAULT)                                                 0132
      CALL STEP_WAITALL                                                 0134

C     Put array boundaries into SEND region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0141
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0142
C  <A(PHI1,PHI2)-write-MAY-{PHI2==1, 1<=PHI1, PHI1<=10, I_LOW<=PHI1,
C    PHI1<=I_UP, PHI1<=N}>
         STEP_SR_A(IDX_SLICE_LOW,1,IDX) = MAX(I_LOW, 1)                 0145
         STEP_SR_A(IDX_SLICE_UP,1,IDX) = MIN(I_UP, 10, N)               0146
         STEP_SR_A(IDX_SLICE_LOW,2,IDX) = 1                             0147
         STEP_SR_A(IDX_SLICE_UP,2,IDX) = 1                              0148
      ENDDO
      CALL STEP_SET_SENDREGIONS(A, STEP_COMM_SIZE, STEP_SR_A)           0150

!$omp end master
!$omp barrier


C     Where work is done...
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0157
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)   0158
!$OMP do
      DO I = STEP_I_LOW, STEP_I_UP                                      0160
         A(I,1) = I                                                     0161
      ENDDO
!$OMP end do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(A, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT   0170
     &)                                                                 0170
      CALL STEP_WAITALL                                                 0172
      CALL STEP_CONSTRUCT_END(STEP_DO)                                  0173

!$omp end master
!$omp barrier

      END
###################### do/src/MY_DO_PAR1_DO20_HYBRID.f ######################
!!
!! file for MY_DO_PAR1_DO20_HYBRID.f
!!
      SUBROUTINE MY_DO_PAR1_DO20_HYBRID(I, I_L, I_U, N, A)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      include "STEP.h"
      INTEGER STEP_I_UP, STEP_I_LOW, I_UP, I_LOW, IDX, I, I_L, I_U, N
      INTEGER STEP_SR_A(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 1:
     &MAX_NB_LOOPSLICES), A(1:N, 1:2)

!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_DO)                                0108
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)                            0109
      CALL STEP_COMPUTE_LOOPSLICES(I_L, I_U, 1, STEP_COMM_SIZE)         0110

C     Put array boundaries into SEND region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0117
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0118
C  <A(PHI1,PHI2)-write-EXACT-{PHI2==2, 1<=PHI1, PHI1<=10, I_LOW<=PHI1,
C    PHI1<=I_UP, PHI1<=N}>
         STEP_SR_A(IDX_SLICE_LOW,1,IDX) = MAX(I_LOW, 1)                 0121
         STEP_SR_A(IDX_SLICE_UP,1,IDX) = MIN(I_UP, 10, N)               0122
         STEP_SR_A(IDX_SLICE_LOW,2,IDX) = 2                             0123
         STEP_SR_A(IDX_SLICE_UP,2,IDX) = 2                              0124
      ENDDO
      CALL STEP_SET_SENDREGIONS(A, STEP_COMM_SIZE, STEP_SR_A)           0126

!$omp end master
!$omp barrier


C     Where work is done...
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0133
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)   0134
!$OMP do
      DO 20 I = STEP_I_LOW, STEP_I_UP                                   0136
         A(I,2) = 2*I                                                   0137
20       CONTINUE                                                       0138
!$OMP end do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(A, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT   0146
     &)                                                                 0146
      CALL STEP_WAITALL                                                 0148
      CALL STEP_CONSTRUCT_END(STEP_DO)                                  0149

!$omp end master
!$omp barrier

      END
###################### do/src/MY_DO_PAR1_HYBRID.f ######################
!!
!! file for MY_DO_PAR1_HYBRID.f
!!
      SUBROUTINE MY_DO_PAR1_HYBRID(I, N, A)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      include "STEP.h"
      INTEGER I, N
      INTEGER A(1:N, 1:2)

!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL)                          0107
      CALL STEP_INIT_ARRAYREGIONS(A, STEP_INTEGER4, 2, 1, N, 1, 2)      0108

!$omp end master
!$omp barrier

!$OMP parallel
C$STEP !$omp do
      CALL MY_DO_PAR1_DO1_HYBRID(I, 1, N, N, A)                         0115
C$STEP !$omp do
      CALL MY_DO_PAR1_DO20_HYBRID(I, 1, N, N, A)                        0117
!$OMP end parallel

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(A, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT   0125
     &)                                                                 0125
      CALL STEP_WAITALL                                                 0127
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL)                            0128

!$omp end master
!$omp barrier

      END
###################### do/src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc


FLAGS = -g -O2

export COMPILER = gnu
export STEP_KIND = 4

ifeq ($(COMPILER) , gnu)
   OpenMP_FLAG = -fopenmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -Wall -Wno-line-truncation -Wno-unused-variable
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -fdefault-integer-8
   endif
   LDFLAGS = 
endif

ifeq ($(COMPILER) , intel)
   OpenMP_FLAG = -openmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -warn all -warn notruncated_source -warn nounused
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -i8
   endif
   LDFLAGS = 
endif



CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.a
HEADER_F=steprt_f.h
HEADER_C=steprt_c.h
RUNTIME=c
DIR_STEP=step_rt

all: gnu 

$(BIN) : $(DIR_STEP)/$(LIB_STEP) $(OBJFILES) BIN_CRITICAL_PCOORD
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -o $@; fi

BIN_CRITICAL_PCOORD: $(DIR_STEP)/critical_pcoord_program.c
	$(CC) -o $(DIR_STEP)/critical_pcoord_program  $^ 	


$(OBJFILES):
	ln -sf $(DIR_STEP)/$(HEADER_F) $(HEADER_F)
	ln -sf $(DIR_STEP)/$(HEADER_C) $(HEADER_C)
	for f in `ls *_MPI.c` ; do \
		echo $$f; \
		echo >tmp "#include \"STEP_C.h\""; \
		cat >>tmp $$f; \
		mv tmp $$f; \
	done;
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(CFLAGS) -c $(CSOURCES); fi
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FFLAGS) -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP)

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f $(HEADER_F) *.o *~ *__genmod.*

clear: clean
	rm -f $(BIN)

gnu:	clear 
	export OMPI_F77=gfortran; export OMPI_FC=gfortran; export OMPI_CC=gcc; export LANG=C;  $(MAKE) $(BIN) COMPILER=gnu

intel:	clear
	export OMPI_F77=ifort; export OMPI_FC=ifort; export OMPI_CC=icc; export LANG=C;  make $(BIN) COMPILER=intel

.IGNORE: clean clear
###################### do/src/STEP.h ######################
      INCLUDE 'steprt_f.h'

      INTEGER STEP_COMM_SIZE, STEP_COMM_RANK

      INTEGER MAX_NB_LOOPSLICES
      PARAMETER (MAX_NB_LOOPSLICES = 16)
      
      INTEGER IDX_SLICE_LOW,IDX_SLICE_UP,STEP_IDX
      PARAMETER (IDX_SLICE_LOW = 1,IDX_SLICE_UP=2)

###################### do/src/do.f ######################
!!
!! file for do.f
!!
!
! do.f
!
! Example of a parallel and do directives
!
! 2008-2009
! Creation: A. Muller, FSC

      PROGRAM MY_DO
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      INTEGER N
      PARAMETER (N=10)
      INTEGER I,A(N,2)
      CALL STEP_INIT_FORTRAN_ORDER
C$STEP !$omp parallel
      CALL MY_DO_PAR1_HYBRID(I, N, A)
C$STEP !$omp end parallel

      PRINT *, A                                                        0029
      CALL STEP_FINALIZE

      END
###################### do/src/step_directives.f ######################
!!
!! file for step_directives.f
!!
      SUBROUTINE MY_DO_PAR1(I, N, A)
      INTEGER I, N
      INTEGER A(1:N, 1:2)
C$STEP !$omp do
      CALL MY_DO_PAR1_DO1_HYBRID(I, 1, N, N, A)                         0005
C$STEP !$omp do
      CALL MY_DO_PAR1_DO20_HYBRID(I, 1, N, N, A)                        0007
      END
      SUBROUTINE MY_DO_PAR1_DO20(I, I_L, I_U, N, A)
      INTEGER I, I_L, I_U, N
      INTEGER A(1:N, 1:2)
      DO 20 I = I_L, I_U                                                0004
         A(I,2) = 2*I                                                   0005
20       CONTINUE                                                       0006
      END
      SUBROUTINE MY_DO_PAR1_DO1(I, I_L, I_U, N, A)
      INTEGER I, I_L, I_U, N
      INTEGER A(1:N, 1:2)
      DO I = I_L, I_U                                                   0004
         A(I,1) = I                                                     0005
      ENDDO
      END
###################### do/src/step_rt ######################
###################### do/src/steprt_f.h ######################
!
!   Genereted file from c/step_common.h
! 
       INTEGER STEP_C
       PARAMETER (STEP_C = 0)

       INTEGER STEP_FORTRAN
       PARAMETER (STEP_FORTRAN = 1)

       INTEGER STEP_PARALLEL
       PARAMETER (STEP_PARALLEL = 0)

       INTEGER STEP_DO
       PARAMETER (STEP_DO = 1)

       INTEGER STEP_PARALLEL_DO
       PARAMETER (STEP_PARALLEL_DO = 2)

       INTEGER STEP_NOWAIT
       PARAMETER (STEP_NOWAIT = 0)

       INTEGER STEP_WAIT
       PARAMETER (STEP_WAIT = 1)

       INTEGER STEP_INTEGER
       PARAMETER (STEP_INTEGER = 0)

       INTEGER STEP_REAL
       PARAMETER (STEP_REAL = 1)

       INTEGER STEP_DOUBLE_PRECISION
       PARAMETER (STEP_DOUBLE_PRECISION = 2)

       INTEGER STEP_COMPLEX
       PARAMETER (STEP_COMPLEX = 3)

       INTEGER STEP_INTEGER1
       PARAMETER (STEP_INTEGER1 = 4)

       INTEGER STEP_INTEGER2
       PARAMETER (STEP_INTEGER2 = 5)

       INTEGER STEP_INTEGER4
       PARAMETER (STEP_INTEGER4 = 6)

       INTEGER STEP_INTEGER8
       PARAMETER (STEP_INTEGER8 = 7)

       INTEGER STEP_REAL4
       PARAMETER (STEP_REAL4 = 8)

       INTEGER STEP_REAL8
       PARAMETER (STEP_REAL8 = 9)

       INTEGER STEP_REAL16
       PARAMETER (STEP_REAL16 = 10)

       INTEGER STEP_COMPLEX8
       PARAMETER (STEP_COMPLEX8 = 11)

       INTEGER STEP_COMPLEX16
       PARAMETER (STEP_COMPLEX16 = 12)

       INTEGER STEP_TYPE_UNDEFINED
       PARAMETER (STEP_TYPE_UNDEFINED = 13)

       INTEGER STEP_TAG_DEFAULT
       PARAMETER (STEP_TAG_DEFAULT = 0)

       INTEGER STEP_NBLOCKING_ALG
       PARAMETER (STEP_NBLOCKING_ALG = 0)

       INTEGER STEP_PROD
       PARAMETER (STEP_PROD = 0)

       INTEGER STEP_MAX
       PARAMETER (STEP_MAX = 1)

       INTEGER STEP_MIN
       PARAMETER (STEP_MIN = 2)

       INTEGER STEP_SUM
       PARAMETER (STEP_SUM = 3)

