

Source files copied in : md/Source/
Generated source files : md/src
###################### md/src/COMPUTE_PARDO1_HYBRID.f ######################
!!
!! file for COMPUTE_PARDO1_HYBRID.f
!!
      SUBROUTINE COMPUTE_PARDO1_HYBRID(I, I_L, I_U, L, ND, NP, F, J, 
     &BOX, POS, RIJ, D, POT, PI2, K, KIN, VEL)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      include "STEP.h"
      REAL*8 DOTR8
      EXTERNAL DOTR8
      INTEGER STEP_I_UP, STEP_I_LOW, I_UP, I_LOW, IDX, I, I_L, I_U, L
     &, ND, NP, J, K
      INTEGER STEP_RR_POS(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 1:
     &MAX_NB_LOOPSLICES), STEP_RR_VEL(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2
     &, 1:MAX_NB_LOOPSLICES), STEP_RR_F(IDX_SLICE_LOW:IDX_SLICE_UP, 1
     &:2, 1:MAX_NB_LOOPSLICES), STEP_SR_F(IDX_SLICE_LOW:IDX_SLICE_UP
     &, 1:2, 1:MAX_NB_LOOPSLICES)
      REAL*8 STEP_POT_REDUC, STEP_KIN_REDUC, F(1:ND, 1:NP), BOX(1:ND)
     &, POS(1:ND, 1:NP), RIJ(1:ND), D, POT, PI2, KIN, VEL(1:ND, 1:NP)

!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL_DO)                       0117
      CALL STEP_INIT_ARRAYREGIONS(F, STEP_REAL8, 2, 1, ND, 1, NP)       0118
      CALL STEP_INIT_ARRAYREGIONS(BOX, STEP_REAL8, 1, 1, ND)            0119
      CALL STEP_INIT_ARRAYREGIONS(POS, STEP_REAL8, 2, 1, ND, 1, NP)     0120
      CALL STEP_INIT_ARRAYREGIONS(VEL, STEP_REAL8, 2, 1, ND, 1, NP)     0121
      CALL STEP_INITREDUCTION(POT, STEP_SUM, STEP_REAL8)                0122
      CALL STEP_INITREDUCTION(KIN, STEP_SUM, STEP_REAL8)                0123
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)                            0124
      CALL STEP_COMPUTE_LOOPSLICES(I_L, I_U, 1, STEP_COMM_SIZE)         0125

C     Put array boundaries into RECV region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0132
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0133
C  <F(PHI1,PHI2)-write-MAY-{1<=PHI1, PHI1<=3, PHI1<=ND, 1<=PHI2,
C    PHI2<=500, I_LOW<=PHI2, PHI2<=I_UP}>
         STEP_RR_F(IDX_SLICE_LOW,1,IDX) = 1                             0136
         STEP_RR_F(IDX_SLICE_UP,1,IDX) = MIN(ND, 3)                     0137
         STEP_RR_F(IDX_SLICE_LOW,2,IDX) = MAX(I_LOW, 1)                 0138
         STEP_RR_F(IDX_SLICE_UP,2,IDX) = MIN(I_UP, 500)                 0139
C  <VEL(PHI1,PHI2)-read-EXACT-{1<=PHI1, PHI1<=ND, 1<=PHI2,
C    I_LOW<=PHI2, PHI2<=I_UP, PHI2<=NP}>
         STEP_RR_VEL(IDX_SLICE_LOW,1,IDX) = 1                           0142
         STEP_RR_VEL(IDX_SLICE_UP,1,IDX) = ND                           0143
         STEP_RR_VEL(IDX_SLICE_LOW,2,IDX) = MAX(1, I_LOW)               0144
         STEP_RR_VEL(IDX_SLICE_UP,2,IDX) = MIN(NP, I_UP)                0145
C  <POS(PHI1,PHI2)-read-MAY-{1<=PHI1, PHI1<=ND, 1<=PHI2, PHI2<=NP,
C    I_LOW<=I_UP}>
         STEP_RR_POS(IDX_SLICE_LOW,1,IDX) = 1                           0148
         STEP_RR_POS(IDX_SLICE_UP,1,IDX) = ND                           0149
         STEP_RR_POS(IDX_SLICE_LOW,2,IDX) = 1                           0150
         STEP_RR_POS(IDX_SLICE_UP,2,IDX) = NP                           0151
      ENDDO
      CALL STEP_SET_RECVREGIONS(F, STEP_COMM_SIZE, STEP_RR_F)           0153
      CALL STEP_SET_RECVREGIONS(VEL, STEP_COMM_SIZE, STEP_RR_VEL)       0154
      CALL STEP_SET_RECVREGIONS(POS, STEP_COMM_SIZE, STEP_RR_POS)       0155

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_PARTIAL(F, STEP_NBLOCKING_ALG,                 0160
     &STEP_TAG_DEFAULT)                                                 0160
      CALL STEP_ALLTOALL_PARTIAL(VEL, STEP_NBLOCKING_ALG,               0162
     &STEP_TAG_DEFAULT)                                                 0162
      CALL STEP_ALLTOALL_PARTIAL(POS, STEP_NBLOCKING_ALG,               0164
     &STEP_TAG_DEFAULT)                                                 0164
      CALL STEP_WAITALL                                                 0166

C     Put array boundaries into SEND region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0173
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0174
C  <F(PHI1,PHI2)-write-MAY-{1<=PHI1, PHI1<=3, PHI1<=ND, 1<=PHI2,
C    PHI2<=500, I_LOW<=PHI2, PHI2<=I_UP}>
         STEP_SR_F(IDX_SLICE_LOW,1,IDX) = 1                             0177
         STEP_SR_F(IDX_SLICE_UP,1,IDX) = MIN(ND, 3)                     0178
         STEP_SR_F(IDX_SLICE_LOW,2,IDX) = MAX(I_LOW, 1)                 0179
         STEP_SR_F(IDX_SLICE_UP,2,IDX) = MIN(I_UP, 500)                 0180
      ENDDO
      CALL STEP_SET_SENDREGIONS(F, STEP_COMM_SIZE, STEP_SR_F)           0182

!$omp end master
!$omp barrier


C     Where work is done...
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0189
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)   0190
!$OMP parallel do reduction(+ : KIN) reduction(+ : POT) private(I, J, K,
!$OMP& RIJ, D)

      DO I = STEP_I_LOW, STEP_I_UP                                      0194
! compute potential energy and forces

!!        f(1:nd,i) = 0.0
         DO L = 1, ND                                                   0198
            F(L,I) = 0.0                                                0199
         ENDDO


         DO J = 1, NP                                                   0203
            IF (I.NE.J) THEN                                            0204
               CALL DIST(ND, BOX, POS(1,I), POS(1,J), RIJ, D)           0205
! attribute half of the potential energy to particle 'j'

               POT = POT+0.5*SIN(MIN(D, PI2))**2.                       0208
               DO K = 1, ND                                             0209
                  F(K,I) = F(K,I)-RIJ(K)*2.*SIN(MIN(D, PI2))*COS(MIN(   0210
     &            D, PI2))/D                                            0210
               ENDDO
            ENDIF
         ENDDO
! compute kinetic energy

         KIN = KIN+DOTR8(ND, VEL(1,I), VEL(1,I))                        0217
      ENDDO
!$OMP end parallel do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_PARTIAL(F, STEP_NBLOCKING_ALG,                 0226
     &STEP_TAG_DEFAULT)                                                 0226
      CALL STEP_WAITALL                                                 0228
      CALL STEP_REDUCTION(POT)                                          0229
      CALL STEP_REDUCTION(KIN)                                          0230
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL_DO)                         0231

!$omp end master
!$omp barrier

      END
###################### md/src/MD_MASTER1_HYBRID.f ######################
!!
!! file for MD_MASTER1_HYBRID.f
!!
      SUBROUTINE MD_MASTER1_HYBRID(POTENTIAL, KINETIC, E0)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      include "STEP.h"
      REAL*8 POTENTIAL, KINETIC, E0

!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_MASTER)                            0106
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0107
      IF (STEP_COMM_RANK.EQ.0) PRINT *, POTENTIAL, KINETIC, (           0108
     &POTENTIAL+KINETIC-E0)/E0                                          0108
      CALL STEP_CONSTRUCT_END(STEP_MASTER)                              0111

!$omp end master
!$omp barrier

      END
###################### md/src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc


FLAGS = -g -O2

export COMPILER = gnu
export STEP_KIND = 4

ifeq ($(COMPILER) , gnu)
   OpenMP_FLAG = -fopenmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -Wall -Wno-line-truncation -Wno-unused-variable
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -fdefault-integer-8
   endif
   LDFLAGS = 
endif

ifeq ($(COMPILER) , intel)
   OpenMP_FLAG = -openmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -warn all -warn notruncated_source -warn nounused
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -i8
   endif
   LDFLAGS = 
endif



CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.a
HEADER_F=steprt_f.h
HEADER_C=steprt_c.h
RUNTIME=c
DIR_STEP=step_rt

all: gnu 

$(BIN) : $(DIR_STEP)/$(LIB_STEP) $(OBJFILES) BIN_CRITICAL_PCOORD
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -o $@; fi

BIN_CRITICAL_PCOORD: $(DIR_STEP)/critical_pcoord_program.c
	$(CC) -o $(DIR_STEP)/critical_pcoord_program  $^ 	


$(OBJFILES):
	ln -sf $(DIR_STEP)/$(HEADER_F) $(HEADER_F)
	ln -sf $(DIR_STEP)/$(HEADER_C) $(HEADER_C)
	for f in `ls *_MPI.c` ; do \
		echo $$f; \
		echo >tmp "#include \"STEP_C.h\""; \
		cat >>tmp $$f; \
		mv tmp $$f; \
	done;
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(CFLAGS) -c $(CSOURCES); fi
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FFLAGS) -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP)

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f $(HEADER_F) *.o *~ *__genmod.*

clear: clean
	rm -f $(BIN)

gnu:	clear 
	export OMPI_F77=gfortran; export OMPI_FC=gfortran; export OMPI_CC=gcc; export LANG=C;  $(MAKE) $(BIN) COMPILER=gnu

intel:	clear
	export OMPI_F77=ifort; export OMPI_FC=ifort; export OMPI_CC=icc; export LANG=C;  make $(BIN) COMPILER=intel

.IGNORE: clean clear
###################### md/src/STEP.h ######################
      INCLUDE 'steprt_f.h'

      INTEGER STEP_COMM_SIZE, STEP_COMM_RANK

      INTEGER MAX_NB_LOOPSLICES
      PARAMETER (MAX_NB_LOOPSLICES = 16)
      
      INTEGER IDX_SLICE_LOW,IDX_SLICE_UP,STEP_IDX
      PARAMETER (IDX_SLICE_LOW = 1,IDX_SLICE_UP=2)

###################### md/src/UPDATE_PARDO1_HYBRID.f ######################
!!
!! file for UPDATE_PARDO1_HYBRID.f
!!
      SUBROUTINE UPDATE_PARDO1_HYBRID(I, I_L, I_U, J, ND, NP, POS, 
     &VEL, DT, A, F, RMASS)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      include "STEP.h"
      INTEGER STEP_I_UP, STEP_I_LOW, I_UP, I_LOW, IDX, I, I_L, I_U, J
     &, ND, NP
      INTEGER STEP_RR_F(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 1:
     &MAX_NB_LOOPSLICES), STEP_RR_A(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 
     &1:MAX_NB_LOOPSLICES), STEP_RR_VEL(IDX_SLICE_LOW:IDX_SLICE_UP, 1
     &:2, 1:MAX_NB_LOOPSLICES), STEP_RR_POS(IDX_SLICE_LOW:
     &IDX_SLICE_UP, 1:2, 1:MAX_NB_LOOPSLICES), STEP_SR_A(
     &IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 1:MAX_NB_LOOPSLICES), 
     &STEP_SR_VEL(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 1:
     &MAX_NB_LOOPSLICES), STEP_SR_POS(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2
     &, 1:MAX_NB_LOOPSLICES)
      REAL*8 POS(1:ND, 1:NP), VEL(1:ND, 1:NP), DT, A(1:ND, 1:NP), F(1
     &:ND, 1:NP), RMASS

!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL_DO)                       0119
      CALL STEP_INIT_ARRAYREGIONS(POS, STEP_REAL8, 2, 1, ND, 1, NP)     0120
      CALL STEP_INIT_ARRAYREGIONS(VEL, STEP_REAL8, 2, 1, ND, 1, NP)     0121
      CALL STEP_INIT_ARRAYREGIONS(A, STEP_REAL8, 2, 1, ND, 1, NP)       0122
      CALL STEP_INIT_ARRAYREGIONS(F, STEP_REAL8, 2, 1, ND, 1, NP)       0123
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)                            0124
      CALL STEP_COMPUTE_LOOPSLICES(I_L, I_U, 1, STEP_COMM_SIZE)         0125

C     Put array boundaries into RECV region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0132
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0133
C  <POS(PHI1,PHI2)-read-EXACT-{1<=PHI1, PHI1<=ND, I_LOW<=PHI2,
C    PHI2<=I_UP}>
         STEP_RR_POS(IDX_SLICE_LOW,1,IDX) = 1                           0136
         STEP_RR_POS(IDX_SLICE_UP,1,IDX) = ND                           0137
         STEP_RR_POS(IDX_SLICE_LOW,2,IDX) = I_LOW                       0138
         STEP_RR_POS(IDX_SLICE_UP,2,IDX) = I_UP                         0139
C  <VEL(PHI1,PHI2)-read-EXACT-{1<=PHI1, PHI1<=ND, I_LOW<=PHI2,
C    PHI2<=I_UP}>
         STEP_RR_VEL(IDX_SLICE_LOW,1,IDX) = 1                           0142
         STEP_RR_VEL(IDX_SLICE_UP,1,IDX) = ND                           0143
         STEP_RR_VEL(IDX_SLICE_LOW,2,IDX) = I_LOW                       0144
         STEP_RR_VEL(IDX_SLICE_UP,2,IDX) = I_UP                         0145
C  <A(PHI1,PHI2)-read-EXACT-{1<=PHI1, PHI1<=ND, I_LOW<=PHI2,
C    PHI2<=I_UP}>
         STEP_RR_A(IDX_SLICE_LOW,1,IDX) = 1                             0148
         STEP_RR_A(IDX_SLICE_UP,1,IDX) = ND                             0149
         STEP_RR_A(IDX_SLICE_LOW,2,IDX) = I_LOW                         0150
         STEP_RR_A(IDX_SLICE_UP,2,IDX) = I_UP                           0151
C  <F(PHI1,PHI2)-read-EXACT-{1<=PHI1, PHI1<=ND, I_LOW<=PHI2,
C    PHI2<=I_UP}>
         STEP_RR_F(IDX_SLICE_LOW,1,IDX) = 1                             0154
         STEP_RR_F(IDX_SLICE_UP,1,IDX) = ND                             0155
         STEP_RR_F(IDX_SLICE_LOW,2,IDX) = I_LOW                         0156
         STEP_RR_F(IDX_SLICE_UP,2,IDX) = I_UP                           0157
      ENDDO
      CALL STEP_SET_RECVREGIONS(POS, STEP_COMM_SIZE, STEP_RR_POS)       0159
      CALL STEP_SET_RECVREGIONS(VEL, STEP_COMM_SIZE, STEP_RR_VEL)       0160
      CALL STEP_SET_RECVREGIONS(A, STEP_COMM_SIZE, STEP_RR_A)           0161
      CALL STEP_SET_RECVREGIONS(F, STEP_COMM_SIZE, STEP_RR_F)           0162

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_PARTIAL(POS, STEP_NBLOCKING_ALG,               0167
     &STEP_TAG_DEFAULT)                                                 0167
      CALL STEP_ALLTOALL_PARTIAL(VEL, STEP_NBLOCKING_ALG,               0169
     &STEP_TAG_DEFAULT)                                                 0169
      CALL STEP_ALLTOALL_PARTIAL(A, STEP_NBLOCKING_ALG,                 0171
     &STEP_TAG_DEFAULT)                                                 0171
      CALL STEP_ALLTOALL_PARTIAL(F, STEP_NBLOCKING_ALG,                 0173
     &STEP_TAG_DEFAULT)                                                 0173
      CALL STEP_WAITALL                                                 0175

C     Put array boundaries into SEND region arrays
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

      DO IDX = 1, STEP_COMM_SIZE                                        0182
         CALL STEP_GET_LOOPBOUNDS(IDX-1, I_LOW, I_UP)                   0183
C  <POS(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=3, PHI1<=ND, 1<=PHI2,
C    I_LOW<=PHI2, PHI2<=I_UP}>
         STEP_SR_POS(IDX_SLICE_LOW,1,IDX) = 1                           0186
         STEP_SR_POS(IDX_SLICE_UP,1,IDX) = MIN(ND, 3)                   0187
         STEP_SR_POS(IDX_SLICE_LOW,2,IDX) = MAX(I_LOW, 1)               0188
         STEP_SR_POS(IDX_SLICE_UP,2,IDX) = I_UP                         0189
C  <VEL(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=3, PHI1<=ND, 1<=PHI2,
C    I_LOW<=PHI2, PHI2<=I_UP}>
         STEP_SR_VEL(IDX_SLICE_LOW,1,IDX) = 1                           0192
         STEP_SR_VEL(IDX_SLICE_UP,1,IDX) = MIN(ND, 3)                   0193
         STEP_SR_VEL(IDX_SLICE_LOW,2,IDX) = MAX(I_LOW, 1)               0194
         STEP_SR_VEL(IDX_SLICE_UP,2,IDX) = I_UP                         0195
C  <A(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=3, PHI1<=ND, 1<=PHI2,
C    I_LOW<=PHI2, PHI2<=I_UP}>
         STEP_SR_A(IDX_SLICE_LOW,1,IDX) = 1                             0198
         STEP_SR_A(IDX_SLICE_UP,1,IDX) = MIN(ND, 3)                     0199
         STEP_SR_A(IDX_SLICE_LOW,2,IDX) = MAX(I_LOW, 1)                 0200
         STEP_SR_A(IDX_SLICE_UP,2,IDX) = I_UP                           0201
      ENDDO
      CALL STEP_SET_SENDREGIONS(POS, STEP_COMM_SIZE, STEP_SR_POS)       0203
      CALL STEP_SET_SENDREGIONS(VEL, STEP_COMM_SIZE, STEP_SR_VEL)       0204
      CALL STEP_SET_SENDREGIONS(A, STEP_COMM_SIZE, STEP_SR_A)           0205

!$omp end master
!$omp barrier


C     Where work is done...
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0212
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)   0213
!$OMP parallel do private(I, J)
      DO I = STEP_I_LOW, STEP_I_UP                                      0215
         DO J = 1, ND                                                   0216
            POS(J,I) = POS(J,I)+VEL(J,I)*DT+0.5*DT*DT*A(J,I)            0217
            VEL(J,I) = VEL(J,I)+0.5*DT*(F(J,I)*RMASS+A(J,I))            0218
            A(J,I) = F(J,I)*RMASS                                       0219
         ENDDO
      ENDDO
!$OMP end parallel do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_PARTIAL(POS, STEP_NBLOCKING_ALG,               0229
     &STEP_TAG_DEFAULT)                                                 0229
      CALL STEP_ALLTOALL_PARTIAL(VEL, STEP_NBLOCKING_ALG,               0231
     &STEP_TAG_DEFAULT)                                                 0231
      CALL STEP_ALLTOALL_PARTIAL(A, STEP_NBLOCKING_ALG,                 0233
     &STEP_TAG_DEFAULT)                                                 0233
      CALL STEP_WAITALL                                                 0235
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL_DO)                         0236

!$omp end master
!$omp barrier

      END
###################### md/src/md.f ######################
!!
!! file for md.f
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! This program implements a simple molecular dynamics simulation,
!   using the velocity Verlet time integration scheme. The particles
!   interact with a central pair potential.
!
! Author:   Bill Magro, Kuck and Associates, Inc. (KAI), 1998
!
! Parallelism is implemented via OpenMP directives.
! THIS PROGRAM USES THE FORTRAN90 RANDOM_NUMBER FUNCTION AND ARRAY 
!   SYNTAX
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      PROGRAM MD
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none

! simulation parameters
      
! dimensionality of the physical space
      INTEGER NDIM       
! number of particles
      INTEGER NPARTS     
! number of time steps in the simulation
      INTEGER NSTEPS     
      PARAMETER(NDIM=3,NPARTS=500,NSTEPS=500)
! mass of the particles
      REAL*8 MASS        
! time step
      REAL*8 DT          
! dimensions of the simulation box
      REAL*8 BOX(NDIM)   
      PARAMETER(MASS=1.0,DT=1.0E-4)

! simulation variables
      
      REAL*8 POSITION(NDIM,NPARTS)
      REAL*8 VELOCITY(NDIM,NPARTS)
      REAL*8 FORCE(NDIM,NPARTS)
      REAL*8 ACCEL(NDIM,NPARTS)
      REAL*8 POTENTIAL, KINETIC, E0
      INTEGER I , L
      CALL STEP_INIT_FORTRAN_ORDER

!!      box(1:ndim) = 10.
      DO L = 1, NDIM                                                    0044
         BOX(L) = 10.                                                   0045
      ENDDO

! set initial positions, velocities, and accelerations

      CALL INITIALIZE(NPARTS, NDIM, BOX, POSITION, VELOCITY, ACCEL)     0050

! compute the forces and energies

      CALL COMPUTE(NPARTS, NDIM, BOX, POSITION, VELOCITY, MASS, FORCE   0054
     &, POTENTIAL, KINETIC)                                             0054
      E0 = POTENTIAL+KINETIC                                            0056

! This is the main time stepping loop

      DO I = 1, NSTEPS                                                  0060
         CALL COMPUTE(NPARTS, NDIM, BOX, POSITION, VELOCITY, MASS,      0061
     &   FORCE, POTENTIAL, KINETIC)                                     0061
C$STEP !$omp master
         CALL MD_MASTER1_HYBRID(POTENTIAL, KINETIC, E0)
C$STEP !$omp end master
         CALL UPDATE(NPARTS, NDIM, POSITION, VELOCITY, FORCE, ACCEL,    0066
     &   MASS, DT)                                                      0066
      ENDDO
      CALL STEP_FINALIZE

      END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Compute the forces and energies, given positions, masses,
! and velocities
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      SUBROUTINE COMPUTE(NP,ND,BOX,POS,VEL,MASS,F,POT,KIN)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none

      INTEGER NP
      INTEGER ND
      REAL*8  BOX(ND)
      REAL*8  POS(ND,NP)
      REAL*8  VEL(ND,NP)
      REAL*8  F(ND,NP)
      REAL*8  MASS
      REAL*8  POT
      REAL*8  KIN

      REAL*8 DOTR8
      EXTERNAL DOTR8
      REAL*8 V, DV, X

      INTEGER I, J, K, L
      REAL*8  RIJ(ND)
      REAL*8  D
      REAL*8  PI2
      PARAMETER(PI2=3.14159265D0/2.0D0)

! statement function for the pair potential and its derivative

! This potential is a harmonic well which smoothly saturates to a

! maximum value at PI/2.

C$PIPS STATEMENT FUNCTION V SUBSTITUTED
C$PIPS STATEMENT FUNCTION DV SUBSTITUTED

      POT = 0.0                                                         0039
      KIN = 0.0                                                         0040
C$STEP !$omp parallel do default(shared) private(i,j,k,rij,d) reduction(+ : pot, kin)
      CALL COMPUTE_PARDO1_HYBRID(I, 1, NP, L, ND, NP, F, J, BOX, POS
     &, RIJ, D, POT, PI2, K, KIN, VEL)
      KIN = KIN*0.5*MASS                                                0072

      END
       
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Initialize the positions, velocities, and accelerations.
! The Fortran90 random_number function is used to choose positions.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      SUBROUTINE INITIALIZE(NP,ND,BOX,POS,VEL,ACC)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none

      INTEGER NP
      INTEGER ND
      REAL*8  BOX(ND)
      REAL*8  POS(ND,NP)
      REAL*8  VEL(ND,NP)
      REAL*8  ACC(ND,NP)

      INTEGER I, J
      REAL*8 X

      DO I = 1, NP                                                      0020
         DO J = 1, ND                                                   0021
            CALL RANDOM_NUMBER(X)                                       0022
            POS(J,I) = BOX(J)*X                                         0023
            VEL(J,I) = 0.0                                              0024
            ACC(J,I) = 0.0                                              0025
         ENDDO
      ENDDO

      END

	SUBROUTINE   RANDOM_NUMBER(X)
	REAL*8 X
      X = 0.0                                                           0004
      END

! Compute the displacement vector (and its norm) between two particles.
      SUBROUTINE DIST(ND,BOX,R1,R2,DR,D)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none

      INTEGER ND
      REAL*8 BOX(ND)
      REAL*8 R1(ND)
      REAL*8 R2(ND)
      REAL*8 DR(ND)
      REAL*8 D

      INTEGER I

      D = 0.0                                                           0016
      DO I = 1, ND                                                      0017
         DR(I) = R1(I)-R2(I)                                            0018
         D = D+DR(I)**2.                                                0019
      ENDDO
      D = SQRT(D)                                                       0021

      END

! Return the dot product between two vectors of type real*8 and length n
      REAL*8 FUNCTION DOTR8(N,X,Y)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none

      INTEGER N
      REAL*8 X(N)
      REAL*8 Y(N)

      INTEGER I

      DOTR8 = 0.0                                                       0013
      DO I = 1, N                                                       0014
         DOTR8 = DOTR8+X(I)*Y(I)                                        0015
      ENDDO

      END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Perform the time integration, using a velocity Verlet algorithm
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      SUBROUTINE UPDATE(NP,ND,POS,VEL,F,A,MASS,DT)
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none

      INTEGER NP
      INTEGER ND
      REAL*8  POS(ND,NP)
      REAL*8  VEL(ND,NP)
      REAL*8  F(ND,NP)
      REAL*8  A(ND,NP)
      REAL*8  MASS
      REAL*8  DT

      INTEGER I, J
      REAL*8  RMASS

      RMASS = 1.0/MASS                                                  0021
C$STEP !$omp parallel do default(shared) private(i,j)
      CALL UPDATE_PARDO1_HYBRID(I, 1, NP, J, ND, NP, POS, VEL, DT, A
     &, F, RMASS)

      END
###################### md/src/step_directives.f ######################
!!
!! file for step_directives.f
!!
      SUBROUTINE UPDATE_PARDO1(I, I_L, I_U, J, ND, NP, POS, VEL, DT, 
     &A, F, RMASS)
      INTEGER I, I_L, I_U, J, ND, NP
      REAL*8 POS(1:ND, 1:NP), VEL(1:ND, 1:NP), DT, A(1:ND, 1:NP), F(1
     &:ND, 1:NP), RMASS
      DO I = I_L, I_U                                                   0006
         DO J = 1, ND                                                   0007
            POS(J,I) = POS(J,I)+VEL(J,I)*DT+0.5*DT*DT*A(J,I)            0008
            VEL(J,I) = VEL(J,I)+0.5*DT*(F(J,I)*RMASS+A(J,I))            0009
            A(J,I) = F(J,I)*RMASS                                       0010
         ENDDO
      ENDDO
      END
      SUBROUTINE MD_MASTER1(POTENTIAL, KINETIC, E0)
      REAL*8 POTENTIAL, KINETIC, E0
      PRINT *, POTENTIAL, KINETIC, (POTENTIAL+KINETIC-E0)/E0            0003
      END
      SUBROUTINE COMPUTE_PARDO1(I, I_L, I_U, L, ND, NP, F, J, BOX, 
     &POS, RIJ, D, POT, PI2, K, KIN, VEL)
      REAL*8 DOTR8
      EXTERNAL DOTR8
      INTEGER I, I_L, I_U, L, ND, NP, J, K
      REAL*8 F(1:ND, 1:NP), BOX(1:ND), POS(1:ND, 1:NP), RIJ(1:ND), D
     &, POT, PI2, KIN, VEL(1:ND, 1:NP)

      DO I = I_L, I_U                                                   0009
! compute potential energy and forces

!!        f(1:nd,i) = 0.0
         DO L = 1, ND                                                   0013
            F(L,I) = 0.0                                                0014
         ENDDO


         DO J = 1, NP                                                   0018
            IF (I.NE.J) THEN                                            0019
               CALL DIST(ND, BOX, POS(1,I), POS(1,J), RIJ, D)           0020
! attribute half of the potential energy to particle 'j'

               POT = POT+0.5*SIN(MIN(D, PI2))**2.                       0023
               DO K = 1, ND                                             0024
                  F(K,I) = F(K,I)-RIJ(K)*2.*SIN(MIN(D, PI2))*COS(MIN(   0025
     &            D, PI2))/D                                            0025
               ENDDO
            ENDIF
         ENDDO
! compute kinetic energy

         KIN = KIN+DOTR8(ND, VEL(1,I), VEL(1,I))                        0032
      ENDDO
      END
###################### md/src/step_rt ######################
###################### md/src/steprt_f.h ######################
!
!   Genereted file from c/step_common.h
! 
       INTEGER STEP_C
       PARAMETER (STEP_C = 0)

       INTEGER STEP_FORTRAN
       PARAMETER (STEP_FORTRAN = 1)

       INTEGER STEP_PARALLEL
       PARAMETER (STEP_PARALLEL = 0)

       INTEGER STEP_DO
       PARAMETER (STEP_DO = 1)

       INTEGER STEP_PARALLEL_DO
       PARAMETER (STEP_PARALLEL_DO = 2)

       INTEGER STEP_NOWAIT
       PARAMETER (STEP_NOWAIT = 0)

       INTEGER STEP_WAIT
       PARAMETER (STEP_WAIT = 1)

       INTEGER STEP_INTEGER
       PARAMETER (STEP_INTEGER = 0)

       INTEGER STEP_REAL
       PARAMETER (STEP_REAL = 1)

       INTEGER STEP_DOUBLE_PRECISION
       PARAMETER (STEP_DOUBLE_PRECISION = 2)

       INTEGER STEP_COMPLEX
       PARAMETER (STEP_COMPLEX = 3)

       INTEGER STEP_INTEGER1
       PARAMETER (STEP_INTEGER1 = 4)

       INTEGER STEP_INTEGER2
       PARAMETER (STEP_INTEGER2 = 5)

       INTEGER STEP_INTEGER4
       PARAMETER (STEP_INTEGER4 = 6)

       INTEGER STEP_INTEGER8
       PARAMETER (STEP_INTEGER8 = 7)

       INTEGER STEP_REAL4
       PARAMETER (STEP_REAL4 = 8)

       INTEGER STEP_REAL8
       PARAMETER (STEP_REAL8 = 9)

       INTEGER STEP_REAL16
       PARAMETER (STEP_REAL16 = 10)

       INTEGER STEP_COMPLEX8
       PARAMETER (STEP_COMPLEX8 = 11)

       INTEGER STEP_COMPLEX16
       PARAMETER (STEP_COMPLEX16 = 12)

       INTEGER STEP_TYPE_UNDEFINED
       PARAMETER (STEP_TYPE_UNDEFINED = 13)

       INTEGER STEP_TAG_DEFAULT
       PARAMETER (STEP_TAG_DEFAULT = 0)

       INTEGER STEP_NBLOCKING_ALG
       PARAMETER (STEP_NBLOCKING_ALG = 0)

       INTEGER STEP_PROD
       PARAMETER (STEP_PROD = 0)

       INTEGER STEP_MAX
       PARAMETER (STEP_MAX = 1)

       INTEGER STEP_MIN
       PARAMETER (STEP_MIN = 2)

       INTEGER STEP_SUM
       PARAMETER (STEP_SUM = 3)

