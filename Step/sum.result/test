###################### sum/sum.database/Src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc


FLAGS = -g -O2 -I$(DIR_STEP)

export COMPILER = gnu
export STEP_KIND = 4

ifeq ($(COMPILER) , gnu)
   OpenMP_FLAG = -fopenmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -Wall -Wno-line-truncation -Wno-unused-variable
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -fdefault-integer-8
   endif
   LDFLAGS =
endif

ifeq ($(COMPILER) , intel)
   OpenMP_FLAG = -openmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -warn all -warn notruncated_source -warn nounused
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -i8
   endif
   LDFLAGS =
endif



CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.so
DIR_STEP=step_rt

all: gnu

$(BIN) : $(DIR_STEP)/$(LIB_STEP) compile_c compile_f
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -Wl,-rpath=$(DIR_STEP) -o $@; fi

compile_c: $(DIR_STEP)/step_api.h
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(CFLAGS) -c $(CSOURCES); fi

compile_f: $(DIR_STEP)/STEP.h
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FFLAGS) -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP) STEP.h critical_pcoord_program

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f *.o *~ *__genmod.*

clear: clean
	rm -f $(BIN)

gnu:	clear
	export OMPI_F77=gfortran; export OMPI_FC=gfortran; export OMPI_CC=gcc; export LANG=C;  $(MAKE) $(BIN) COMPILER=gnu

intel:	clear
	export OMPI_F77=ifort; export OMPI_FC=ifort; export OMPI_CC=icc; export LANG=C;  make $(BIN) COMPILER=intel

.IGNORE: clean clear
###################### sum/sum.database/Src/SUM_PARDO_HYBRID.f ######################
      SUBROUTINE SUM_PARDO_HYBRID(N, A, B, C, I)
      implicit none
      include "STEP.h"
      INTEGER IDX, STEP_COMM_RANK, STEP_I_UP, STEP_I_LOW, 
     &STEP_COMM_SIZE, N, I
      INTEGER STEP_SR_A(STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:2
     &, 1:STEP_MAX_NB_LOOPSLICES), STEP_SR_B(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:1, 1:STEP_MAX_NB_LOOPSLICES), STEP_SR_C(
     &STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:1, 1:
     &STEP_MAX_NB_LOOPSLICES), STEP_RR_B(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:1, 1:STEP_MAX_NB_LOOPSLICES), A(1:N, 1:2
     &), B(1:N), C(1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL_DO)
      CALL STEP_INIT_ARRAYREGIONS(A, STEP_INTEGER4, 2, 1, N, 1, 2)
      CALL STEP_INIT_ARRAYREGIONS(B, STEP_INTEGER4, 1, 1, N)
      CALL STEP_INIT_ARRAYREGIONS(C, STEP_INTEGER4, 1, 1, N)
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)
      CALL STEP_COMPUTE_LOOPSLICES(1, N, 1, STEP_COMM_SIZE)

C RECV REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_I_LOW, STEP_I_UP)

C  <B(PHI1)-R-MAY-{1<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1<=STEP_I_UP}>

         STEP_RR_B(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(1, STEP_I_LOW)
         STEP_RR_B(STEP_INDEX_SLICE_UP,1,IDX) = MIN(10, STEP_I_UP)
      ENDDO
      CALL STEP_SET_RECVREGIONS(B, STEP_COMM_SIZE, STEP_RR_B)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(B, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH

C SEND REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_I_LOW, STEP_I_UP)

C  <C(PHI1)-W-EXACT-{PHI1==1, STEP_I_LOW<=PHI1, PHI1<=STEP_I_UP}>

         STEP_SR_C(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(STEP_I_LOW, 1)
         STEP_SR_C(STEP_INDEX_SLICE_UP,1,IDX) = MIN(STEP_I_UP, 1)

C  <B(PHI1)-W-MAY-{1<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1<=STEP_I_UP}>

         STEP_SR_B(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(1, STEP_I_LOW)
         STEP_SR_B(STEP_INDEX_SLICE_UP,1,IDX) = MIN(10, STEP_I_UP)

C  <A(PHI1,PHI2)-W-EXACT-{1<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1<=STEP_I_UP, 1<=PHI2, PHI2<=2}>

         STEP_SR_A(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(STEP_I_LOW, 1)
         STEP_SR_A(STEP_INDEX_SLICE_UP,1,IDX) = MIN(STEP_I_UP, 10)
         STEP_SR_A(STEP_INDEX_SLICE_LOW,2,IDX) = 1
         STEP_SR_A(STEP_INDEX_SLICE_UP,2,IDX) = 2
      ENDDO
      CALL STEP_SET_SENDREGIONS(C, STEP_COMM_SIZE, STEP_SR_C)
      CALL STEP_SET_SENDREGIONS(B, STEP_COMM_SIZE, STEP_SR_B)
      CALL STEP_SET_SENDREGIONS(A, STEP_COMM_SIZE, STEP_SR_A)
!$omp end master
!$omp barrier

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)
!$omp parallel do
      DO 10 I = STEP_I_LOW, STEP_I_UP
         A(I,1) = I
         A(I,2) = 2*I
         B(I) = I*10
         C(I) = 0
10       CONTINUE
!$omp end parallel do
C END WORK
!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(A, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_ALLTOALL_FULL(B, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_ALLTOALL_FULL(C, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_FLUSH
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL_DO)
!$omp end master
!$omp barrier
      END
###################### sum/sum.database/Src/SUM_PARDO_HYBRID_1.f ######################
      SUBROUTINE SUM_PARDO_HYBRID_1(N, A, B, C, I)
      implicit none
      include "STEP.h"
      INTEGER IDX, STEP_COMM_RANK, STEP_I_UP, STEP_I_LOW, 
     &STEP_COMM_SIZE, N, I
      INTEGER STEP_SR_C(STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:1
     &, 1:STEP_MAX_NB_LOOPSLICES), STEP_RR_A(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:2, 1:STEP_MAX_NB_LOOPSLICES), STEP_RR_B(
     &STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:1, 1:
     &STEP_MAX_NB_LOOPSLICES), A(1:N, 1:2), B(1:N), C(1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL_DO)
      CALL STEP_INIT_ARRAYREGIONS(A, STEP_INTEGER4, 2, 1, N, 1, 2)
      CALL STEP_INIT_ARRAYREGIONS(B, STEP_INTEGER4, 1, 1, N)
      CALL STEP_INIT_ARRAYREGIONS(C, STEP_INTEGER4, 1, 1, N)
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)
      CALL STEP_COMPUTE_LOOPSLICES(2, N, 1, STEP_COMM_SIZE)

C RECV REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_I_LOW, STEP_I_UP)

C  <B(PHI1)-R-EXACT-{2<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1<=STEP_I_UP}>

         STEP_RR_B(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(STEP_I_LOW, 2)
         STEP_RR_B(STEP_INDEX_SLICE_UP,1,IDX) = MIN(STEP_I_UP, 10)

C  <A(PHI1,PHI2)-R-EXACT-{PHI2==1, 1<=PHI1, PHI1<=10,
C    STEP_I_LOW<=PHI1+1, PHI1<=STEP_I_UP, STEP_I_LOW<=10,
C    STEP_I_LOW<=STEP_I_UP, 2<=STEP_I_UP}>

         STEP_RR_A(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(STEP_I_LOW-1, 1)
         STEP_RR_A(STEP_INDEX_SLICE_UP,1,IDX) = MIN(STEP_I_UP, 10)
         STEP_RR_A(STEP_INDEX_SLICE_LOW,2,IDX) = 1
         STEP_RR_A(STEP_INDEX_SLICE_UP,2,IDX) = 1
      ENDDO
      CALL STEP_SET_RECVREGIONS(B, STEP_COMM_SIZE, STEP_RR_B)
      CALL STEP_SET_RECVREGIONS(A, STEP_COMM_SIZE, STEP_RR_A)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(B, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(A, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH

C SEND REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_I_LOW, STEP_I_UP)

C  <C(PHI1)-W-EXACT-{2<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1<=STEP_I_UP}>

         STEP_SR_C(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(STEP_I_LOW, 2)
         STEP_SR_C(STEP_INDEX_SLICE_UP,1,IDX) = MIN(STEP_I_UP, 10)
      ENDDO
      CALL STEP_SET_SENDREGIONS(C, STEP_COMM_SIZE, STEP_SR_C)
!$omp end master
!$omp barrier

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)
!$omp parallel do

      DO 20 I = STEP_I_LOW, STEP_I_UP
         C(I) = A(I-1,1)+A(I,1)+B(I)
20       CONTINUE
!$omp end parallel do
C END WORK
!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(A, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_ALLTOALL_FULL(B, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_ALLTOALL_FULL(C, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_FLUSH
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL_DO)
!$omp end master
!$omp barrier
      END
###################### sum/sum.database/Src/SUM_PARDO_HYBRID_2.f ######################
      SUBROUTINE SUM_PARDO_HYBRID_2(N, B, I)
      implicit none
      include "STEP.h"
      INTEGER IDX, STEP_COMM_RANK, STEP_I_UP, STEP_I_LOW, 
     &STEP_COMM_SIZE, N, I
      INTEGER STEP_SR_B(STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:1
     &, 1:STEP_MAX_NB_LOOPSLICES), STEP_RR_B(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:1, 1:STEP_MAX_NB_LOOPSLICES), B(1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL_DO)
      CALL STEP_INIT_ARRAYREGIONS(B, STEP_INTEGER4, 1, 1, N)
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)
      CALL STEP_COMPUTE_LOOPSLICES(1, N/2, 1, STEP_COMM_SIZE)

C RECV REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_I_LOW, STEP_I_UP)

C  <B(PHI1)-R-MAY-{1<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1+STEP_I_LOW<=11, STEP_I_LOW<=5, STEP_I_LOW<=STEP_I_UP,
C    1<=STEP_I_UP}>

         STEP_RR_B(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(1, STEP_I_LOW)
         STEP_RR_B(STEP_INDEX_SLICE_UP,1,IDX) = MIN(10, -STEP_I_LOW+
     &   11)
      ENDDO
      CALL STEP_SET_RECVREGIONS(B, STEP_COMM_SIZE, STEP_RR_B)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(B, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH

C SEND REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_I_LOW, STEP_I_UP)

C  <B(PHI1)-W-MAY-{1<=PHI1, PHI1<=10, STEP_I_LOW<=PHI1,
C    PHI1+STEP_I_LOW<=11, STEP_I_LOW<=5, STEP_I_LOW<=STEP_I_UP,
C    1<=STEP_I_UP}>

         STEP_SR_B(STEP_INDEX_SLICE_LOW,1,IDX) = MAX(1, STEP_I_LOW)
         STEP_SR_B(STEP_INDEX_SLICE_UP,1,IDX) = MIN(10, -STEP_I_LOW+
     &   11)
      ENDDO
      CALL STEP_SET_INTERLACED_SENDREGIONS(B, STEP_COMM_SIZE, 
     &STEP_SR_B)
!$omp end master
!$omp barrier

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_I_LOW, STEP_I_UP)
!$omp parallel do

      DO 30 I = STEP_I_LOW, STEP_I_UP
         B(I) = I
         B(N+1-I) = I
30       CONTINUE
!$omp end parallel do
C END WORK
!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(B, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_FLUSH
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL_DO)
!$omp end master
!$omp barrier
      END
###################### sum/sum.database/Src/step_rt ######################
###################### sum/sum.database/Src/sum.f ######################
!
! sum program
!
! Example of a do directive
!
! 2007,2008
! Creation: A. Muller, 2007
! Modification: F. Silber-Chaussumier

      PROGRAM SUM
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      INTEGER N
      PARAMETER (N=10)
      INTEGER I,A(N,2),B(N),C(N)
      CALL STEP_INIT_FORTRAN_ORDER

      DO 5 I = 1, N
         A(I,1) = 0
         A(I,2) = 0
         B(I) = 0
         C(I) = -1
5        CONTINUE
      CALL SUM_PARDO_HYBRID(N, A, B, C, I)
      CALL SUM_PARDO_HYBRID_1(N, A, B, C, I)
      CALL SUM_PARDO_HYBRID_2(N, B, I)



      PRINT *, A
      PRINT *, B
      PRINT *, C
      CALL STEP_FINALIZE
      END
