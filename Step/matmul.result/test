

Source files copied in : matmul/Source/
Generated source files : matmul/src
###################### matmul/src/MATMULT_PAR1_DO10_HYBRID.f ######################
!!
!! file for MATMULT_PAR1_DO10_HYBRID.f
!!
      SUBROUTINE MATMULT_PAR1_DO10_HYBRID(J_DUMMY, J_L, J_U, I, N, A
     &, B, C)
      implicit none
      include "STEP.h"
      INTEGER*4 MAX_NB_REQUEST
      PARAMETER (MAX_NB_REQUEST = 96)
      INTEGER J_DUMMY, J, J_L, J_U, I, N, IDX, J_LOW, J_UP, 
     &STEP_J_LOW, STEP_J_UP
      INTEGER STEP_J_LOOPSLICES(IDX_SLICE_LOW:IDX_SLICE_UP, 1:
     &MAX_NB_LOOPSLICES), STEP_SR_A(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 
     &0:MAX_NB_LOOPSLICES), STEP_SR_B(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2
     &, 0:MAX_NB_LOOPSLICES), STEP_SR_C(IDX_SLICE_LOW:IDX_SLICE_UP, 1
     &:2, 0:MAX_NB_LOOPSLICES), STEP_REQUESTS(1:MAX_NB_REQUEST)
      REAL*8 A(1:N, 1:N), B(1:N, 1:N), C(1:N, 1:N)
      CALL STEP_GET_SIZE(STEP_COMM_SIZE)                                0129
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0130

      CALL STEP_COMPUTELOOPSLICES(J_L, J_U, 1, STEP_COMM_SIZE,          0132
     &MAX_NB_LOOPSLICES, STEP_J_LOOPSLICES)                             0132

C     Put array boundaries into region arrays (SR: Send region)
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

C     The first element stores initial boundaries,
C     then one element for each process
      STEP_SR_A(IDX_SLICE_LOW,1,0) = 1                                  0142
      STEP_SR_A(IDX_SLICE_UP,1,0) = N                                   0143
      STEP_SR_A(IDX_SLICE_LOW,2,0) = 1                                  0144
      STEP_SR_A(IDX_SLICE_UP,2,0) = N                                   0145
      STEP_SR_B(IDX_SLICE_LOW,1,0) = 1                                  0146
      STEP_SR_B(IDX_SLICE_UP,1,0) = N                                   0147
      STEP_SR_B(IDX_SLICE_LOW,2,0) = 1                                  0148
      STEP_SR_B(IDX_SLICE_UP,2,0) = N                                   0149
      STEP_SR_C(IDX_SLICE_LOW,1,0) = 1                                  0150
      STEP_SR_C(IDX_SLICE_UP,1,0) = N                                   0151
      STEP_SR_C(IDX_SLICE_LOW,2,0) = 1                                  0152
      STEP_SR_C(IDX_SLICE_UP,2,0) = N                                   0153

C     Region computation
      DO IDX = 1, STEP_COMM_SIZE                                        0156
         J_LOW = STEP_J_LOOPSLICES(IDX_SLICE_LOW,IDX)                   0157
         J_UP = STEP_J_LOOPSLICES(IDX_SLICE_UP,IDX)                     0158
C  <A(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=N, J_LOW<=PHI2, 1<=PHI2,
C    PHI2<=J_UP, PHI2<=N}>
         STEP_SR_A(IDX_SLICE_LOW,1,IDX) = 1                             0161
         STEP_SR_A(IDX_SLICE_UP,1,IDX) = N                              0162
         STEP_SR_A(IDX_SLICE_LOW,2,IDX) = MAX(J_LOW, 1)                 0163
         STEP_SR_A(IDX_SLICE_UP,2,IDX) = MIN(J_UP, N)                   0164
C  <B(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=N, J_LOW<=PHI2, 1<=PHI2,
C    PHI2<=J_UP, PHI2<=N}>
         STEP_SR_B(IDX_SLICE_LOW,1,IDX) = 1                             0167
         STEP_SR_B(IDX_SLICE_UP,1,IDX) = N                              0168
         STEP_SR_B(IDX_SLICE_LOW,2,IDX) = MAX(J_LOW, 1)                 0169
         STEP_SR_B(IDX_SLICE_UP,2,IDX) = MIN(J_UP, N)                   0170
C  <C(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=N, J_LOW<=PHI2, 1<=PHI2,
C    PHI2<=J_UP, PHI2<=N}>
         STEP_SR_C(IDX_SLICE_LOW,1,IDX) = 1                             0173
         STEP_SR_C(IDX_SLICE_UP,1,IDX) = N                              0174
         STEP_SR_C(IDX_SLICE_LOW,2,IDX) = MAX(J_LOW, 1)                 0175
         STEP_SR_C(IDX_SLICE_UP,2,IDX) = MIN(J_UP, N)                   0176
      ENDDO

C     Where work is done...
      STEP_J_LOW = STEP_J_LOOPSLICES(IDX_SLICE_LOW,STEP_COMM_RANK+1)    0180
      STEP_J_UP = STEP_J_LOOPSLICES(IDX_SLICE_UP,STEP_COMM_RANK+1)      0181
!$OMP do
      DO 10 J = STEP_J_LOW, STEP_J_UP                                   0183
         DO 10 I = 1, N                                                 0184
            A(I,J) = 2.0                                                0185
            B(I,J) = 3.0                                                0186
            C(I,J) = 0                                                  0187
10          CONTINUE                                                    0188
!$OMP end do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
C     A nonblocking algo increment STEP_Nb_Request.
      STEP_NBREQUEST = 0                                                0197
      CALL STEP_ALLTOALLREGION(2, STEP_COMM_SIZE, STEP_SR_A,            0198
     &STEP_SIZEREGION(2, STEP_SR_A(IDX_SLICE_LOW,1,0)), A,              0198
     &STEP_TAG_DEFAULT, MAX_NB_REQUEST, STEP_REQUESTS, STEP_NBREQUEST   0198
     &, STEP_NBLOCKING_ALG, STEP_REAL8)                                 0198
      CALL STEP_ALLTOALLREGION(2, STEP_COMM_SIZE, STEP_SR_B,            0202
     &STEP_SIZEREGION(2, STEP_SR_B(IDX_SLICE_LOW,1,0)), B,              0202
     &STEP_TAG_DEFAULT, MAX_NB_REQUEST, STEP_REQUESTS, STEP_NBREQUEST   0202
     &, STEP_NBLOCKING_ALG, STEP_REAL8)                                 0202
      CALL STEP_ALLTOALLREGION(2, STEP_COMM_SIZE, STEP_SR_C,            0206
     &STEP_SIZEREGION(2, STEP_SR_C(IDX_SLICE_LOW,1,0)), C,              0206
     &STEP_TAG_DEFAULT, MAX_NB_REQUEST, STEP_REQUESTS, STEP_NBREQUEST   0206
     &, STEP_NBLOCKING_ALG, STEP_REAL8)                                 0206
C     If STEP_Nb_Request equals 0, STEP_WAITALL does nothing
      CALL STEP_WAITALL(STEP_NBREQUEST, STEP_REQUESTS)                  0211

!$omp end master
!$omp barrier

      END
###################### matmul/src/MATMULT_PAR1_DO20_HYBRID.f ######################
!!
!! file for MATMULT_PAR1_DO20_HYBRID.f
!!
      SUBROUTINE MATMULT_PAR1_DO20_HYBRID(J_DUMMY, J_L, J_U, I, N, K
     &, C, A, B)
      implicit none
      include "STEP.h"
      INTEGER*4 MAX_NB_REQUEST
      PARAMETER (MAX_NB_REQUEST = 32)
      INTEGER J_DUMMY, J, J_L, J_U, I, N, K, IDX, J_LOW, J_UP, 
     &STEP_J_LOW, STEP_J_UP
      INTEGER STEP_J_LOOPSLICES(IDX_SLICE_LOW:IDX_SLICE_UP, 1:
     &MAX_NB_LOOPSLICES), STEP_SR_C(IDX_SLICE_LOW:IDX_SLICE_UP, 1:2, 
     &0:MAX_NB_LOOPSLICES), STEP_REQUESTS(1:MAX_NB_REQUEST)
      REAL*8 C(1:N, 1:N), A(1:N, 1:N), B(1:N, 1:N)
      CALL STEP_GET_SIZE(STEP_COMM_SIZE)                                0127
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0128

      CALL STEP_COMPUTELOOPSLICES(J_L, J_U, 1, STEP_COMM_SIZE,          0130
     &MAX_NB_LOOPSLICES, STEP_J_LOOPSLICES)                             0130

C     Put array boundaries into region arrays (SR: Send region)
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

C     The first element stores initial boundaries,
C     then one element for each process
      STEP_SR_C(IDX_SLICE_LOW,1,0) = 1                                  0140
      STEP_SR_C(IDX_SLICE_UP,1,0) = N                                   0141
      STEP_SR_C(IDX_SLICE_LOW,2,0) = 1                                  0142
      STEP_SR_C(IDX_SLICE_UP,2,0) = N                                   0143

C     Region computation
      DO IDX = 1, STEP_COMM_SIZE                                        0146
         J_LOW = STEP_J_LOOPSLICES(IDX_SLICE_LOW,IDX)                   0147
         J_UP = STEP_J_LOOPSLICES(IDX_SLICE_UP,IDX)                     0148
C  <C(PHI1,PHI2)-write-EXACT-{1<=PHI1, PHI1<=N, J_LOW<=PHI2, 1<=PHI2,
C    PHI2<=J_UP, PHI2<=N}>
         STEP_SR_C(IDX_SLICE_LOW,1,IDX) = 1                             0151
         STEP_SR_C(IDX_SLICE_UP,1,IDX) = N                              0152
         STEP_SR_C(IDX_SLICE_LOW,2,IDX) = MAX(J_LOW, 1)                 0153
         STEP_SR_C(IDX_SLICE_UP,2,IDX) = MIN(J_UP, N)                   0154
      ENDDO

C     Where work is done...
      STEP_J_LOW = STEP_J_LOOPSLICES(IDX_SLICE_LOW,STEP_COMM_RANK+1)    0158
      STEP_J_UP = STEP_J_LOOPSLICES(IDX_SLICE_UP,STEP_COMM_RANK+1)      0159
!$OMP do
      DO 20 J = STEP_J_LOW, STEP_J_UP                                   0161
         DO 20 I = 1, N                                                 0162
            DO 20 K = 1, N                                              0163
               C(I,J) = C(I,J)+A(I,K)*B(K,J)                            0164
20             CONTINUE                                                 0165
!$OMP end do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
C     A nonblocking algo increment STEP_Nb_Request.
      STEP_NBREQUEST = 0                                                0174
      CALL STEP_ALLTOALLREGION(2, STEP_COMM_SIZE, STEP_SR_C,            0175
     &STEP_SIZEREGION(2, STEP_SR_C(IDX_SLICE_LOW,1,0)), C,              0175
     &STEP_TAG_DEFAULT, MAX_NB_REQUEST, STEP_REQUESTS, STEP_NBREQUEST   0175
     &, STEP_NBLOCKING_ALG, STEP_REAL8)                                 0175
C     If STEP_Nb_Request equals 0, STEP_WAITALL does nothing
      CALL STEP_WAITALL(STEP_NBREQUEST, STEP_REQUESTS)                  0180

!$omp end master
!$omp barrier

      END
###################### matmul/src/MATMULT_PAR1_HYBRID.f ######################
!!
!! file for MATMULT_PAR1_HYBRID.f
!!
      SUBROUTINE MATMULT_PAR1_HYBRID(J, N, I, A, B, C, K)
      implicit none
      include "STEP.h"
      INTEGER J, N, I, K
      REAL*8 A(1:N, 1:N), B(1:N, 1:N), C(1:N, 1:N)
!$OMP parallel
C$STEP !$omp do
      CALL MATMULT_PAR1_DO10_HYBRID(J, 1, N, I, N, A, B, C)             0122
C$STEP !$omp master
      CALL MATMULT_PAR1_MASTER1_HYBRID                                  0124
C$STEP !$omp end master
C$STEP !$omp do
      CALL MATMULT_PAR1_DO20_HYBRID(J, 1, N, I, N, K, C, A, B)          0127
C$STEP !$omp master
      CALL MATMULT_PAR1_MASTER2_HYBRID(I, N, J, C)                      0129
C$STEP !$omp end master
!$OMP end parallel
      END
###################### matmul/src/MATMULT_PAR1_MASTER1_HYBRID.f ######################
!!
!! file for MATMULT_PAR1_MASTER1_HYBRID.f
!!
      SUBROUTINE MATMULT_PAR1_MASTER1_HYBRID
      implicit none
      include "STEP.h"

!$omp master
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0120
      IF (STEP_COMM_RANK.EQ.0) THEN                                     0121
         PRINT *,                                                       0122
     &   '******************************************************'       0122
         PRINT *, 'Matrices initialized'                                0124
         PRINT *,                                                       0125
     &   '******************************************************'       0125
      ENDIF

!$omp end master
!$omp barrier

      END
###################### matmul/src/MATMULT_PAR1_MASTER2_HYBRID.f ######################
!!
!! file for MATMULT_PAR1_MASTER2_HYBRID.f
!!
      SUBROUTINE MATMULT_PAR1_MASTER2_HYBRID(I, N, J, C)
      implicit none
      include "STEP.h"
      INTEGER I, N, J
      REAL*8 C(1:N, 1:N)

!$omp master
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0122
      IF (STEP_COMM_RANK.EQ.0) THEN                                     0123
         PRINT *,                                                       0124
     &   '******************************************************'       0124
         PRINT *, 'Result Matrix:'                                      0126
         DO 50 I = 1, N                                                 0127
            DO 40 J = 1, N                                              0128
               WRITE (*, 30) C(I,J)                                     0129
30             FORMAT(2X,F8.2,$)                                        0130
40             CONTINUE                                                 0131
            PRINT *, ' '                                                0132
50          CONTINUE                                                    0133
         PRINT *,                                                       0134
     &   '******************************************************'       0134
         PRINT *, 'Done.'                                               0136
      ENDIF

!$omp end master
!$omp barrier

      END
###################### matmul/src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc

OpenMP_FLAG = -fopenmp

FLAGS = -g -O2
LDFLAGS = 


CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.a
RUNTIME=c
DIR_STEP=step_rt


$(BIN) : $(DIR_STEP)/$(LIB_STEP) $(OBJFILES)
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -o $@; fi

$(OBJFILES):
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(FLAGS) -c $(CSOURCES); fi
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FLAGS) -fno-underscoring -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP)

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f *.o *~


.IGNORE: clean###################### matmul/src/STEP.h ######################
      INCLUDE 'steprt_f.h'

      INTEGER STEP_MAX_NBNODE
      PARAMETER (STEP_MAX_NBNODE = 16)

      INTEGER max_nb_loopslices
      INTEGER step_nbrequest

      INTEGER STEP_COMM_SIZE, STEP_COMM_RANK

      PARAMETER (MAX_NB_LOOPSLICES = STEP_MAX_NBNODE)
      
      ! Globals
       INTEGER STEP_SizeRegion
       INTEGER IDX_SLICE_LOW,IDX_SLICE_UP,STEP_IDX
       PARAMETER (IDX_SLICE_LOW = 1,IDX_SLICE_UP=2)

###################### matmul/src/matmul.f ######################
!!
!! file for matmul.f
!!
	PROGRAM MATMULT
! 	implicit none
	INTEGER  N, I, J, K
	PARAMETER (N=10)
	REAL*8 A(N,N), B(N,N), C(N,N)
      CALL STEP_INIT_FORTRAN_ORDER
C$STEP !$omp parallel
      CALL MATMULT_PAR1_HYBRID(J, N, I, A, B, C, K)
C$STEP !$omp end parallel
      CALL STEP_FINALIZE

      END
###################### matmul/src/step_rt ######################
###################### matmul/src/steprt_f.h ######################
!*******************************************************************************
!*                                                                             *
!*   Authors 	        :       Abdellah. Kouadri                              *
!*				Daniel Millot                          	       *
!*                              Frederique Silber-Chaussumier                  *
!*				                                               *
!*   Date		:       25/06/2009                                     *
!*						                               *
!*   File		:	steprt_f.h                                     *
!*							                       *
!*   Version		:       1.1				               *
!*   Description	:	Fortran runtime interface                      *
! ******************************************************************************



! Datatype
      INTEGER STEP_INTEGER1
      INTEGER STEP_INTEGER2
      INTEGER STEP_INTEGER4
      INTEGER STEP_INTEGER8
      INTEGER STEP_REAL4
      INTEGER STEP_REAL8
      INTEGER STEP_REAL16
      INTEGER STEP_COMPLEX8
      INTEGER STEP_COMPLEX16
      INTEGER STEP_COMPLEX32
      INTEGER STEP_INTEGER
      INTEGER STEP_REAL
      INTEGER STEP_COMPLEX
      INTEGER STEP_DOUBLE_PRECISION
!
      PARAMETER (STEP_INTEGER1 = 1)
      PARAMETER (STEP_INTEGER2 = 2)
      PARAMETER (STEP_INTEGER4 = 3)
      PARAMETER (STEP_INTEGER8 = 4)
      PARAMETER (STEP_REAL4 = 5)
      PARAMETER (STEP_REAL8 = 6)
      PARAMETER (STEP_REAL16 = 7)
      PARAMETER (STEP_COMPLEX8 = 8)
      PARAMETER (STEP_COMPLEX16 = 9)
      PARAMETER (STEP_COMPLEX32 = 10)
      PARAMETER (STEP_INTEGER = 11)
      PARAMETER (STEP_REAL = 12)
      PARAMETER (STEP_COMPLEX = 13)
      PARAMETER (STEP_DOUBLE_PRECISION = 14)

! Communication tag
      INTEGER   STEP_TAG_DEFAULT
!
      PARAMETER (STEP_TAG_DEFAULT = 0)

! Communication algorithms
      INTEGER 	STEP_NBLOCKING_ALG 
      INTEGER	STEP_BLOCKING_ALG_1
      INTEGER	STEP_BLOCKING_ALG_2
      INTEGER	STEP_BLOCKING_ALG_3
      INTEGER	STEP_BLOCKING_ALG_4
! reduction operators 
      INTEGER STEP_SUM	
      INTEGER STEP_MAX_
      INTEGER STEP_MIN_
      INTEGER STEP_PROD
      INTEGER STEP_LAND	
      INTEGER STEP_BAND
      INTEGER STEP_LOR	
      INTEGER STEP_BOR	
      INTEGER STEP_LXOR	
      INTEGER STEP_BXOR	
      INTEGER STEP_MINLOC
      INTEGER STEP_MAXLOC
!
      PARAMETER (STEP_NBLOCKING_ALG  = 0)
      PARAMETER (STEP_BLOCKING_ALG_1 = 1)
      PARAMETER (STEP_BLOCKING_ALG_2 = 2)
      PARAMETER (STEP_BLOCKING_ALG_3 = 3)
      PARAMETER (STEP_BLOCKING_ALG_4 = 4)
!
      PARAMETER (STEP_SUM  =	3)
      PARAMETER (STEP_MAX_ =	1)
      PARAMETER (STEP_MIN_ =	2)
      PARAMETER (STEP_PROD =	0)
      PARAMETER (STEP_LAND =	4)
      PARAMETER (STEP_BAND =	5)
      PARAMETER (STEP_LOR  =	6)
      PARAMETER (STEP_BOR  =	7)
      PARAMETER (STEP_LXOR =	8)
      PARAMETER (STEP_BXOR =	9)
      PARAMETER (STEP_MINLOC =	10)
      PARAMETER (STEP_MAXLOC =	11)

