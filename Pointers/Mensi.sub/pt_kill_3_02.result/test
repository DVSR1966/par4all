
POINTS TO for pt_kill_3_02


// Points To IN:
// _fpp_2 -> *NULL_POINTER* , MAY
// _fpp_2 -> _fpp_2_2 , MAY
// fpp -> *NULL_POINTER* , MAY
// fpp -> _fpp_2 , MAY


// Points To OUT:
// _fpp_2 -> *ANY_MODULE*:*HEAP**ANYWHERE* , MAY
// _fpp_2 -> *NULL_POINTER* , MAY
// _fpp_2 -> _fpp_2_2 , MAY
// fpp -> *NULL_POINTER* , MAY
// fpp -> _fpp_2 , MAY

void my_malloc(int c, int **fpp)
{

// Points To:
// _fpp_2 -> *NULL_POINTER* , MAY
// _fpp_2 -> _fpp_2_2 , MAY
// fpp -> *NULL_POINTER* , MAY
// fpp -> _fpp_2 , MAY

   if (c)

// Points To:
// fpp -> *NULL_POINTER* , MAY
// fpp -> _fpp_2 , MAY

      *fpp = (int *) malloc(sizeof(int));

// Points To:
// _fpp_2 -> *ANY_MODULE*:*HEAP**ANYWHERE* , MAY
// _fpp_2 -> *NULL_POINTER* , MAY
// _fpp_2 -> _fpp_2_2 , MAY
// fpp -> *NULL_POINTER* , MAY
// fpp -> _fpp_2 , MAY

   return;
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i = 1, *pi = &i, **pp = &pi;

// Points To:
// pi -> i , EXACT
// pp -> pi , EXACT


   my_malloc(i, pp);

// Points To:
// pi -> *ANY_MODULE*:*HEAP**ANYWHERE* , MAY
// pi -> *NULL_POINTER* , MAY
// pi -> i , MAY
// pp -> pi , EXACT


   return 0;
}
unknown[unknown] (activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
unknown[unknown] (activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
unknown[unknown] (activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
C_PARSER[main] (simplify_C_expression) Variable "i" is probably used before it is defined
