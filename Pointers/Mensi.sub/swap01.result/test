
POINTS TO for swap01


// Points To IN:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _p_1_1 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _p_1 , MAY
// q -> *NULL_POINTER* , MAY
// q -> _q_2 , MAY


// Points To OUT:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _p_1_1 , MAY
// p -> _p_1 , EXACT
// q -> _q_2 , EXACT

void swap01(int **p, int **q)
{

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _p_1_1 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _p_1 , MAY

   int *pt = *p;

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _p_1_1 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL_POINTER* , MAY
// pt -> _p_1_1 , MAY
// q -> *NULL_POINTER* , MAY
// q -> _q_2 , MAY

   *p = *q;

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL_POINTER* , MAY
// pt -> _p_1_1 , MAY
// q -> _q_2 , EXACT

   *q = pt;

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _p_1_1 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL_POINTER* , MAY
// pt -> _p_1_1 , MAY
// q -> _q_2 , EXACT

   return;
}

PROPER EFFECTS WITH POINTS TO

void swap01(int **p, int **q)
{
//             <    is read   >: _p_1 p
//             <    is written>: pt
   int *pt = *p;
//             <    is read   >: _q_2 p q
//             <    is written>: _p_1
   *p = *q;
//             <    is read   >: pt q
//             <    is written>: _q_2
   *q = pt;
   return;
}

CUMULATED EFFECTS WITH POINTS TO

//             <    is read   >: _q_2 p q
//             <    is written>: _p_1 _q_2
void swap01(int **p, int **q)
{
//             <    is read   >: _p_1 p
//             <    is written>: pt
   int *pt = *p;
//             <    is read   >: _q_2 p q
//             <    is written>: _p_1
   *p = *q;
//             <    is read   >: pt q
//             <    is written>: _q_2
   *q = pt;
   return;
}

POINTS TO for swap01


// Points To IN:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _p_1_1 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _p_1 , MAY
// q -> *NULL_POINTER* , MAY
// q -> _q_2 , MAY


// Points To OUT:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _p_1_1 , MAY
// p -> _p_1 , EXACT
// q -> _q_2 , EXACT

void swap01(int **p, int **q)
{

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _p_1_1 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _p_1 , MAY

   int *pt = *p;

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _p_1_1 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL_POINTER* , MAY
// pt -> _p_1_1 , MAY
// q -> *NULL_POINTER* , MAY
// q -> _q_2 , MAY

   *p = *q;

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL_POINTER* , MAY
// pt -> _p_1_1 , MAY
// q -> _q_2 , EXACT

   *q = pt;

// Points To:
// _p_1 -> *NULL_POINTER* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL_POINTER* , MAY
// _q_2 -> _p_1_1 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL_POINTER* , MAY
// pt -> _p_1_1 , MAY
// q -> _q_2 , EXACT

   return;
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i = 1, j = 2, z = 3, *pi = &i, *pj = &j, *pz = &z, **ppi = &pi, **ppj = &pj;

// Points To:
// pi -> i , EXACT
// pj -> j , EXACT
// ppi -> pi , EXACT
// ppj -> pj , EXACT
// pz -> z , EXACT

   swap01(ppi, ppj);

// Points To:
// pi -> *NULL_POINTER* , MAY
// pi -> j , MAY
// pj -> *NULL_POINTER* , MAY
// pj -> i , MAY
// ppi -> pi , EXACT
// ppj -> pj , EXACT
// pz -> z , EXACT


   return 0;
}
unknown[unknown] (activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
unknown[unknown] (activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
unknown[unknown] (activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
C_PARSER[main] (simplify_C_expression) Variable "i" is probably used before it is defined
C_PARSER[main] (simplify_C_expression) Variable "j" is probably used before it is defined
C_PARSER[main] (simplify_C_expression) Variable "z" is probably used before it is defined
