
POINTS TO for "allocate_array"


// Points To IN:
// pa -> _pa_1 , EXACT


// Points To OUT:
// _pa_1.data -> *HEAP*_l_7[0] , MAY

void allocate_array(parray_t pa)
{

// Points To:
// pa -> _pa_1 , EXACT

   pa->data = (float *) malloc(pa->dim*sizeof(float));

// Points To:
// _pa_1.data -> *HEAP*_l_7[0] , MAY
// pa -> _pa_1 , EXACT

   return;
}

POINTS TO for "init_array"


// Points To IN:
// pa -> _pa_1 , EXACT


// Points To OUT: none

void init_array(parray_t pa)
{

// Points To: none

   int i;

// Points To: none

   for(i = 0; i <= pa->dim-1; i += 1)

// Points To:
// pa -> _pa_1 , EXACT

      (pa->data)[i] = (float) i;

// Points To:
// pa -> _pa_1 , EXACT


   return;
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   parray_t ma = (parray_t) malloc(sizeof(darray_t));

// Points To:
// ma -> *HEAP*_l_20 , MAY

   allocate_array(ma);

// Points To:
// *HEAP*_l_20.data -> allocate_array:*HEAP*_l_7[0] , MAY
// ma -> *HEAP*_l_20 , MAY

   init_array(ma);

// Points To:
// *HEAP*_l_20.data -> allocate_array:*HEAP*_l_7[0] , MAY
// ma -> *HEAP*_l_20 , MAY


   return 0;
}

PROPER EFFECTS WITH POINTS TO

int main()
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: ma _MALLOC_EFFECTS:_MALLOC_
   parray_t ma = (parray_t) malloc(sizeof(darray_t));
//             <    is read   >: *HEAP*_l_20.dim ma 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: *HEAP*_l_20.data 
//                               _MALLOC_EFFECTS:_MALLOC_
   allocate_array(ma);
//             <may be read   >: *HEAP*_l_20.data *HEAP*_l_20.dim
//             <    is read   >: ma
   init_array(ma);

   return 0;
}

CUMULATED EFFECTS WITH POINTS TO

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
int main()
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: ma _MALLOC_EFFECTS:_MALLOC_
   parray_t ma = (parray_t) malloc(sizeof(darray_t));
//             <    is read   >: *HEAP*_l_20.dim ma 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: *HEAP*_l_20.data 
//                               _MALLOC_EFFECTS:_MALLOC_
   allocate_array(ma);
//             <may be read   >: *HEAP*_l_20.data *HEAP*_l_20.dim
//             <    is read   >: ma
   init_array(ma);

   return 0;
}
unknown[unknown] (activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
unknown[unknown] (activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
