
Points-to for "foo"


// Points To IN:
// _pi_1 -> _pi_1_1 , EXACT
// _pj_2 -> _pj_2_2 , EXACT
// pi -> _pi_1 , EXACT
// pj -> _pj_2 , EXACT


// Points To OUT:
// _pi_1 -> _pi_1_1 , EXACT
// _pj_2 -> _pj_2_2 , EXACT
// pi -> _pi_1 , EXACT
// pj -> _pj_2 , EXACT

void foo(int **pi, int **pj)
{

// Points To: none

   int *r, *s;

// Points To:
// _pi_1 -> _pi_1_1 , EXACT
// pi -> _pi_1 , EXACT
// r -> undefined , EXACT
// s -> undefined , EXACT

   r = *pi;

// Points To:
// _pi_1 -> _pi_1_1 , EXACT
// _pj_2 -> _pj_2_2 , EXACT
// pi -> _pi_1 , EXACT
// pj -> _pj_2 , EXACT
// r -> _pi_1_1 , EXACT
// s -> undefined , EXACT

   s = *pj;

// Points To:
// _pi_1 -> _pi_1_1 , EXACT
// _pj_2 -> _pj_2_2 , EXACT
// pi -> _pi_1 , EXACT
// pj -> _pj_2 , EXACT
// r -> _pi_1_1 , EXACT
// s -> _pj_2_2 , EXACT

   **pi = 1, **pj = 2;

// Points To:
// _pi_1 -> _pi_1_1 , EXACT
// _pj_2 -> _pj_2_2 , EXACT
// pi -> _pi_1 , EXACT
// pj -> _pj_2 , EXACT
// r -> _pi_1_1 , EXACT
// s -> _pj_2_2 , EXACT


   return;
}

Proper effects with points-to for "foo"

void foo(int **pi, int **pj)
{
   int *r, *s;
//             <    is read   >: _pi_1 pi
//             <    is written>: r
   r = *pi;
//             <    is read   >: _pj_2 pj
//             <    is written>: s
   s = *pj;
//             <    is read   >: _pi_1 _pj_2 pi pj
//             <    is written>: _pi_1_1 _pj_2_2
   **pi = 1, **pj = 2;

   return;
}

Cumulated effects with points-to for "foo"

//             <    is read   >: _pi_1 _pj_2 pi pj
//             <    is written>: _pi_1_1 _pj_2_2
void foo(int **pi, int **pj)
{
   int *r, *s;
//             <    is read   >: _pi_1 pi
//             <    is written>: r
   r = *pi;
//             <    is read   >: _pj_2 pj
//             <    is written>: s
   s = *pj;
//             <    is read   >: _pi_1 _pj_2 pi pj
//             <    is written>: _pi_1_1 _pj_2_2
   **pi = 1, **pj = 2;

   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int **qq, **pp, *q, *p, i = 0, j = 1;

// Points To:
// p -> undefined , EXACT
// pp -> undefined , EXACT
// q -> undefined , EXACT
// qq -> undefined , EXACT

   p = &i, q = &j;

// Points To:
// p -> i , EXACT
// pp -> undefined , EXACT
// q -> j , EXACT
// qq -> undefined , EXACT

   pp = &p, qq = &q;

// Points To:
// p -> i , EXACT
// pp -> p , EXACT
// q -> j , EXACT
// qq -> q , EXACT

   
   
   foo(pp, qq);

// Points To:
// p -> i , EXACT
// pp -> p , EXACT
// q -> j , EXACT
// qq -> q , EXACT

   return 0;
}

Proper effects with points-to for "main"

int main()
{
//             <    is written>: i j
   int **qq, **pp, *q, *p, i = 0, j = 1;
//             <    is written>: p q
   p = &i, q = &j;
//             <    is written>: pp qq
   pp = &p, qq = &q;
//             <    is read   >: p pp q qq
//             <    is written>: i j
   
   
   foo(pp, qq);
   return 0;
}

Cumulated effects with points-to for "main"

int main()
{
//             <    is written>: i j
   int **qq, **pp, *q, *p, i = 0, j = 1;
//             <    is written>: p q
   p = &i, q = &j;
//             <    is written>: pp qq
   pp = &p, qq = &q;
//             <    is read   >: p pp q qq
//             <    is written>: i j
   
   
   foo(pp, qq);
   return 0;
}
unknown[unknown] (activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
