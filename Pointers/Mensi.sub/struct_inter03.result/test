
POINTS TO for struct_inter03


// Points To IN:
// _t1_1 -> _t1_1_1 , EXACT
// _t2_2 -> _t2_2_2 , EXACT
// _t2_2_2.ip2 -> _t2_2_2_2__2 , EXACT
// t1 -> _t1_1 , EXACT
// t2 -> _t2_2 , EXACT


// Points To OUT:
// _t1_1 -> _t1_1_1 , EXACT
// _t1_1_1.ip1 -> _t2_2_2_2__2 , EXACT
// _t2_2 -> _t2_2_2 , EXACT
// _t2_2_2.ip2 -> _t2_2_2_2__2 , EXACT

void assignment(struct foo **t1, struct foo **t2)
{

// Points To:
// _t1_1 -> _t1_1_1 , EXACT
// _t2_2 -> _t2_2_2 , EXACT
// _t2_2_2.ip2 -> _t2_2_2_2__2 , EXACT
// t1 -> _t1_1 , EXACT
// t2 -> _t2_2 , EXACT

   (**t1).ip1 = (**t2).ip2;
}

// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   struct foo s1;

// Points To:
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct foo s2;

// Points To:
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct foo **ppt, **pps;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct foo *pt = &s1, *ps = &s2;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   int i11 = 1, i12 = 2, i21 = 3, i22 = 4;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT


   s1.ip1 = &i11;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip1 -> i11 , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   s1.ip2 = &i12;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i11 , EXACT
// s1.ip2 -> i12 , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   s2.ip1 = &i21;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i11 , EXACT
// s1.ip2 -> i12 , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> i21 , EXACT

   s2.ip2 = &i22;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i11 , EXACT
// s1.ip2 -> i12 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT


   *pt = s2;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT

   ppt = &pt;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> pt , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT

   pps = &ps;

// Points To:
// pps -> ps , EXACT
// ppt -> pt , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT

   assignment(pps, ppt);

// Points To:
// *ANY_MODULE*:*ANYWHERE* -> *ANY_MODULE*:*ANYWHERE* , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT


   return 0;
}

PROPER  EFFECTS WITH POINTS TO

void assignment(struct foo **t1, struct foo **t2)
{
//             <    is read   >: _t1_1 _t2_2 _t2_2_2.ip2 t1 t2
//             <    is written>: _t1_1_1.ip1
   (**t1).ip1 = (**t2).ip2;
}
int main()
{
   struct foo s1;
   struct foo s2;
   struct foo **ppt, **pps;
//             <    is written>: ps pt
   struct foo *pt = &s1, *ps = &s2;
//             <    is written>: i11 i12 i21 i22
   int i11 = 1, i12 = 2, i21 = 3, i22 = 4;
//             <    is written>: s1.ip1

   s1.ip1 = &i11;
//             <    is written>: s1.ip2
   s1.ip2 = &i12;
//             <    is written>: s2.ip1
   s2.ip1 = &i21;
//             <    is written>: s2.ip2
   s2.ip2 = &i22;
//             <    is read   >: pt s2.ip1 s2.ip2
//             <    is written>: s1.ip1 s1.ip2

   *pt = s2;
//             <    is written>: ppt
   ppt = &pt;
//             <    is written>: pps
   pps = &ps;
//             <    is read   >: pps ppt assignment:_t1_1 
//                               assignment:_t2_2 
//                               assignment:_t2_2_2.ip2
//             <    is written>: assignment:_t1_1_1.ip1
   assignment(pps, ppt);

   return 0;
}

CUMULATED  EFFECTS WITH POINTS TO

//             <    is read   >: _t1_1 _t2_2 _t2_2_2.ip2 t1 t2
//             <    is written>: _t1_1_1.ip1
void assignment(struct foo **t1, struct foo **t2)
{
//             <    is read   >: _t1_1 _t2_2 _t2_2_2.ip2 t1 t2
//             <    is written>: _t1_1_1.ip1
   (**t1).ip1 = (**t2).ip2;
}
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
int main()
{
   struct foo s1;
   struct foo s2;
   struct foo **ppt, **pps;
//             <    is written>: ps pt
   struct foo *pt = &s1, *ps = &s2;
//             <    is written>: i11 i12 i21 i22
   int i11 = 1, i12 = 2, i21 = 3, i22 = 4;
//             <    is written>: s1.ip1

   s1.ip1 = &i11;
//             <    is written>: s1.ip2
   s1.ip2 = &i12;
//             <    is written>: s2.ip1
   s2.ip1 = &i21;
//             <    is written>: s2.ip2
   s2.ip2 = &i22;
//             <    is read   >: pt s2.ip1 s2.ip2
//             <    is written>: s1.ip1 s1.ip2

   *pt = s2;
//             <    is written>: ppt
   ppt = &pt;
//             <    is written>: pps
   pps = &ps;
//             <    is read   >: pps ppt assignment:_t1_1 
//                               assignment:_t2_2 
//                               assignment:_t2_2_2.ip2
//             <    is written>: assignment:_t1_1_1.ip1
   assignment(pps, ppt);

   return 0;
}

POINTS TO for struct_inter03


// Points To IN:
// _t1_1 -> _t1_1_1 , EXACT
// _t2_2 -> _t2_2_2 , EXACT
// _t2_2_2.ip2 -> _t2_2_2_2__2 , EXACT
// t1 -> _t1_1 , EXACT
// t2 -> _t2_2 , EXACT


// Points To OUT:
// _t1_1 -> _t1_1_1 , EXACT
// _t1_1_1.ip1 -> _t2_2_2_2__2 , EXACT
// _t2_2 -> _t2_2_2 , EXACT
// _t2_2_2.ip2 -> _t2_2_2_2__2 , EXACT

void assignment(struct foo **t1, struct foo **t2)
{

// Points To:
// _t1_1 -> _t1_1_1 , EXACT
// _t2_2 -> _t2_2_2 , EXACT
// _t2_2_2.ip2 -> _t2_2_2_2__2 , EXACT
// t1 -> _t1_1 , EXACT
// t2 -> _t2_2 , EXACT

   (**t1).ip1 = (**t2).ip2;
}

// Points To IN:
// assignment:_t1_1_1.ip1 -> _t1_1_1_1__1 , EXACT


// Points To OUT: none

int main()
{

// Points To: none

   struct foo s1;

// Points To:
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct foo s2;

// Points To:
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct foo **ppt, **pps;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct foo *pt = &s1, *ps = &s2;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   int i11 = 1, i12 = 2, i21 = 3, i22 = 4;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT


   s1.ip1 = &i11;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s1.ip1 -> i11 , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   s1.ip2 = &i12;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i11 , EXACT
// s1.ip2 -> i12 , EXACT
// s2.ip1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   s2.ip1 = &i21;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i11 , EXACT
// s1.ip2 -> i12 , EXACT
// s2.ip2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// s2.ip1 -> i21 , EXACT

   s2.ip2 = &i22;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i11 , EXACT
// s1.ip2 -> i12 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT


   *pt = s2;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> *ANY_MODULE*:*NOWHERE* , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT

   ppt = &pt;

// Points To:
// pps -> *ANY_MODULE*:*NOWHERE* , EXACT
// ppt -> pt , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT

   pps = &ps;

// Points To:
// assignment:_t1_1_1.ip1 -> _t1_1_1_1__1 , EXACT
// pps -> ps , EXACT
// ppt -> pt , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i21 , EXACT
// s2.ip2 -> i22 , EXACT

   assignment(pps, ppt);

// Points To:
// pps -> ps , EXACT
// ppt -> pt , EXACT
// ps -> s2 , EXACT
// pt -> s1 , EXACT
// s1.ip1 -> i21 , EXACT
// s1.ip2 -> i22 , EXACT
// s2.ip1 -> i22 , EXACT
// s2.ip2 -> i22 , EXACT


   return 0;
}
