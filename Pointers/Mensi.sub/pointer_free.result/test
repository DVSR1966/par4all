
POINTS TO for "alloc_pointer"


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_7 , MAY

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_7 , MAY

   *p = v;

// Points To:
// p -> *HEAP*_l_7 , MAY

   return p;
}

POINTS TO for "pointer_free"


// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT:
// p -> undefined , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> _p_1 , EXACT

   free(p);

// Points To:
// p -> undefined , EXACT

   return;
}

POINTS TO for "main"


// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT:
// p -> undefined , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> _p_1 , EXACT

   free(p);

// Points To:
// p -> undefined , EXACT

   return;
}

PROPER EFFECTS WITH POINTS TO

int main(void)
{
   pointer p1, p2;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <    is read   >: p1
//             <    is written>: p2
   p2 = p1;
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p1);

   return;
}

CUMULATED EFFECTS WITH POINTS TO

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
int main(void)
{
   pointer p1, p2;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <    is read   >: p1
//             <    is written>: p2
   p2 = p1;
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p1);

   return;
}
unknown[unknown] (activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
unknown[unknown] (activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
