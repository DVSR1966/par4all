
POINTS-TO


// Points To IN:
// t -> _t_3 , EXACT
// x -> _x_1 , EXACT
// y -> _y_2 , EXACT


// Points To OUT: none

int main(int *x, int *y, int *t)
{

// Points To: none

   // BEGIN BLOCK

// Points To: none

   int i, n = 100;

// Points To: none

   
   
   for(i = 0; i <= n-1; i += 1) {

// Points To:
// t -> _t_3 , EXACT
// x -> _x_1 , EXACT
// y -> _y_2 , EXACT

      // BEGIN BLOCK

// Points To:
// t -> _t_3 , EXACT
// x -> _x_1 , EXACT
// y -> _y_2 , MAY

      t[i] = x[i];

// Points To:
// t -> _t_3 , EXACT
// x -> _x_1 , EXACT
// y -> _y_2 , EXACT

      x[i] = y[i];

// Points To:
// t -> _t_3 , EXACT
// x -> _x_1 , EXACT
// y -> _y_2 , EXACT

      y[i] = t[i];
      // END BLOCK
   }
   // END BLOCK
}

PROPER  EFFECTS WITH POINTS TO

int main(int *x, int *y, int *t)
{
   // BEGIN BLOCK
//             <    is written>: n
   int i, n = 100;
//             <    is read   >: n
//             <    is written>: i
   
   
   for(i = 0; i <= n-1; i += 1) {
      // BEGIN BLOCK
//             <    is read   >: _x_1 i n t x
//             <    is written>: _t_3
      t[i] = x[i];
//             <    is read   >: _y_2 i n x y
//             <    is written>: _x_1
      x[i] = y[i];
//             <    is read   >: _t_3 i n t y
//             <    is written>: _y_2
      y[i] = t[i];
      // END BLOCK
   }
   // END BLOCK
}

RW regions

int main(int *x, int *y, int *t)
{
   // BEGIN BLOCK
   int i, n = 100;
   
   
   for(i = 0; i <= n-1; i += 1) {
      // BEGIN BLOCK

//  <t-R-EXACT-{}>
//  <x-R-EXACT-{}>

      t[i] = x[i];

//  <x-R-EXACT-{}>
//  <y-R-EXACT-{}>

      x[i] = y[i];

//  <t-R-EXACT-{}>
//  <y-R-EXACT-{}>

      y[i] = t[i];
      // END BLOCK
   }
   // END BLOCK
}

IN regions


//  <t-IN-EXACT-{}>
//  <x-IN-EXACT-{}>
//  <y-IN-EXACT-{}>

int main(int *x, int *y, int *t)
{

//  <t-IN-EXACT-{}>
//  <x-IN-EXACT-{}>
//  <y-IN-EXACT-{}>

   // BEGIN BLOCK
   int i, n = 100;

//  <t-IN-EXACT-{}>
//  <x-IN-EXACT-{}>
//  <y-IN-EXACT-{}>

   
   
   for(i = 0; i <= n-1; i += 1) {

//  <t-IN-EXACT-{}>
//  <x-IN-EXACT-{}>
//  <y-IN-EXACT-{}>

      // BEGIN BLOCK

//  <t-IN-EXACT-{}>
//  <x-IN-EXACT-{}>

      t[i] = x[i];

//  <x-IN-EXACT-{}>
//  <y-IN-EXACT-{}>

      x[i] = y[i];

//  <t-IN-EXACT-{}>
//  <y-IN-EXACT-{}>

      y[i] = t[i];
      // END BLOCK
   }
   // END BLOCK
}

Privatized regions

int main(int *x, int *y, int *t)
{

//  <_t_3-PRIVATE-EXACT-{}>

   // BEGIN BLOCK
   int i, n = 100;
   
   
#pragma omp for private(i,_t_3)
   for(i = 0; i <= n-1; i += 1) {

//  <_t_3-PRIVATE-EXACT-{}>

      // BEGIN BLOCK
      t[i] = x[i];
      x[i] = y[i];
      y[i] = t[i];
      // END BLOCK
   }
   // END BLOCK
}

Code after scalarization

int main(int *x, int *y, int *t)
{
   // BEGIN BLOCK
   int i, n = 100;
   
   
   for(i = 0; i <= n-1; i += 1) {
      // BEGIN BLOCK
      t[i] = x[i];
      x[i] = y[i];
      y[i] = t[i];
      // END BLOCK
   }
   // END BLOCK
}
