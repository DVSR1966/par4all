
PROPER  EFFECTS

ATOM * a_m_serial(int serial)
{
   static ATOM *ap = (void *) 0;
   static ATOM *lastmatched = (void *) 0;
   int i, n, a_number();
//             <    is read   >: atomUPDATE
   if (atomUPDATE)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: atomNUMBER atomUPDATE
//             <    is written>: n
      n = a_number();
   else
//             <    is read   >: atomNUMBER
//             <    is written>: n
      n = atomNUMBER;
//             <    is read   >: first
//             <    is written>: ap

   ap = first;
//             <    is read   >: ap
   /* static pointer is hook for more efficient search */
   if (ap==(void *) 0)
      return (void *) 0;
//             <    is read   >: lastmatched
   if (lastmatched==(void *) 0)
//             <    is read   >: first
//             <    is written>: lastmatched
      lastmatched = first;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*

   if (serial==lastmatched->serial)
//             <    is read   >: lastmatched
      return lastmatched;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (serial>lastmatched->serial)
//             <    is read   >: lastmatched
//             <    is written>: ap
      ap = lastmatched;
//             <    is read   >: n
//             <    is written>: i
   for(i = 0; i <= n-1; i += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      if (ap->serial==serial) {
//             <    is read   >: ap n
//             <    is written>: lastmatched
         lastmatched = ap;
//             <    is read   >: ap n
         return ap;
      }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      if (ap==ap->next)
//             <    is read   >: first n
//             <    is written>: ap
         ap = first;
      else
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: ap
         ap = ap->next;
   }
   return (void *) 0;
}
ATOM * a_next(int flag)
{
   static ATOM *ap = (void *) 0;
//             <    is read   >: ap
   if (ap==(void *) 0)
//             <    is read   >: first
//             <    is written>: ap
      ap = first;
//             <    is read   >: ap
   if (ap==(void *) 0)
      return (void *) 0;
//             <    is read   >: flag
   if (flag<=0) {
//             <    is read   >: first
//             <    is written>: ap
      ap = first;
//             <    is read   >: ap
      return ap;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (ap==ap->next)
      return (void *) 0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: ap
   ap = ap->next;
//             <    is read   >: ap
   return ap;
}
int a_number()
{
   ATOM *ap;
//             <    is read   >: atomUPDATE
   if (atomUPDATE) {
//             <    is written>: atomUPDATE
      atomUPDATE = 0;
//             <    is written>: atomNUMBER
      atomNUMBER = 0;
//             <    is read   >: first
      if (first==(void *) 0)
         return 0;
//             <    is read   >: first
//             <    is written>: ap
      ap = first;
l99999:      ;
      if (!1) goto _break_1;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      if (ap->next==(void *) 0) goto _break_1;
//             <    is read   >: atomNUMBER
//             <    is written>: atomNUMBER
      atomNUMBER++;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      if (ap->next==ap) goto _break_1;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: ap
      ap = ap->next;
      goto l99999;
_break_1:      ;
   }
//             <    is read   >: atomNUMBER
   return atomNUMBER;
}
int activate(int i1, int i2)
{
   int upper, lower;
   ATOM *ap, *a_m_serial(int), *a_next(int);
   int i, numatm, a_number();
//             <    is read   >: i2

   if (i2==0) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: atomNUMBER atomUPDATE 
//                               a_m_serial:0`lastmatched
//             <    is written>: ap a_m_serial:0`ap
      ap = a_m_serial(i1);
//             <    is read   >: ap
      if (ap!=(void *) 0)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ap
         ap->active = 1;
      return 0;
   }
//             <    is read   >: i2
//             <    is written>: upper

   upper = i2;
//             <    is read   >: i1
//             <    is written>: lower
   lower = i1;
//             <    is read   >: i1 i2
   if (i2<i1) {
//             <    is read   >: i2
//             <    is written>: lower
      lower = i2;
//             <    is read   >: i1
//             <    is written>: upper
      upper = i1;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: atomNUMBER atomUPDATE
//             <    is written>: numatm

   numatm = a_number();
//             <    is read   >: numatm
//             <    is written>: i
   for(i = 0; i <= numatm-1; i += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: ap a_next:0`ap
      ap = a_next(i);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      if (ap->serial>=lower&&ap->serial<=upper)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ap numatm
         ap->active = 1;
   }
   return 0;
}

POINTS-TO


// Points To IN:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY


// Points To OUT:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , EXACT
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

ATOM * a_m_serial(int serial)
{

// Points To: none

   static ATOM *ap = (void *) 0;

// Points To:
// ap -> *NULL_POINTER* , EXACT

   static ATOM *lastmatched = (void *) 0;

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

   int i, n, a_number();

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

   if (atomUPDATE)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

      n = a_number();
   else

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

      n = atomNUMBER;

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT


   ap = first;

// Points To:
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , EXACT

   /* static pointer is hook for more efficient search */
   if (ap==(void *) 0)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , EXACT

      return (void *) 0;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , EXACT

   if (lastmatched==(void *) 0)

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , EXACT

      lastmatched = first;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY


   if (serial==lastmatched->serial)

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY

      return lastmatched;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY

   if (serial>lastmatched->serial)

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY

      ap = lastmatched;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY

   for(i = 0; i <= n-1; i += 1) {

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

      if (ap->serial==serial) {

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

         lastmatched = ap;

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

         return ap;
      }

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

      if (ap==ap->next)

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

         ap = first;
      else

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

         ap = ap->next;
   }

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// _first_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8.next -> _first_8_8_8 , MAY
// _first_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8.next -> _first_8_8_8_8 , MAY
// _first_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8.next -> _first_8_8_8_8_8 , MAY
// _first_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8.next -> _first_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> *NULL_POINTER* , MAY
// _first_8_8_8_8_8_8_8_8_8_8.next -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8 , MAY
// a_m_serial -> _first_8_8 , MAY
// a_m_serial -> _first_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8 , MAY
// a_m_serial -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// ap -> _first_8_8 , MAY
// ap -> _first_8_8_8 , MAY
// ap -> _first_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8 , MAY
// ap -> _first_8_8_8_8_8_8_8_8_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8 , MAY
// lastmatched -> _first_8_8 , MAY
// lastmatched -> _first_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8 , MAY
// lastmatched -> _first_8_8_8_8_8_8_8_8_8_8 , MAY

   return (void *) 0;
}

// Points To IN:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY


// Points To OUT:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

ATOM * a_next(int flag)
{

// Points To: none

   static ATOM *ap = (void *) 0;

// Points To:
// ap -> *NULL_POINTER* , EXACT

   if (ap==(void *) 0)

// Points To:
// ap -> *NULL_POINTER* , EXACT

      ap = first;

// Points To:
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

   if (ap==(void *) 0)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

      return (void *) 0;

// Points To:
// a_next -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

   if (flag<=0) {

// Points To:
// a_next -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

      ap = first;

// Points To:
// a_next -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

      return ap;
   }

// Points To:
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

   if (ap==ap->next)

// Points To:
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

      return (void *) 0;

// Points To:
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

   ap = ap->next;

// Points To:
// _first_8.next -> *NULL_POINTER* , MAY
// _first_8.next -> _first_8_8 , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8_8 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8 , MAY

   return ap;
}

// Points To IN: none


// Points To OUT:
// first -> *NULL_POINTER* , MAY

int a_number()
{

// Points To: none

   ATOM *ap;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   if (atomUPDATE) {

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      atomUPDATE = 0;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      atomNUMBER = 0;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      if (first==(void *) 0)

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// first -> *NULL_POINTER* , EXACT

         return 0;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// first -> *NULL_POINTER* , MAY

      ap = first;
l99999:      ;

// Points To: none

      if (!1) goto _break_1;

// Points To: none

      if (ap->next==(void *) 0) goto _break_1;

// Points To: none

      atomNUMBER++;

// Points To: none

      if (ap->next==ap) goto _break_1;

// Points To: none

      ap = ap->next;
      goto l99999;

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY

_break_1:      ;
   }

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY
// first -> *NULL_POINTER* , MAY

   return atomNUMBER;
}

// Points To IN: none


// Points To OUT: none

int activate(int i1, int i2)
{

// Points To: none

   int upper, lower;

// Points To: none

   ATOM *ap, *a_m_serial(int), *a_next(int);

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int i, numatm, a_number();

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT


   if (i2==0) {

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      ap = a_m_serial(i1);

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

      if (ap!=(void *) 0)

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

         ap->active = 1;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      return 0;
   }

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY


   upper = i2;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   lower = i1;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   if (i2<i1) {

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      lower = i2;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      upper = i1;
   }

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY


   numatm = a_number();

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   for(i = 0; i <= numatm-1; i += 1) {

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      ap = a_next(i);

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

      if (ap->serial>=lower&&ap->serial<=upper)

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

         ap->active = 1;
   }

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   return 0;
}
C_PARSER[activate] (check_C_function_type) Type updated for function "a_m_serial"
C_PARSER[activate] (check_C_function_type) Type updated for function "a_next"
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[activate] (user_call_to_points_to) The function call to "a_m_serial" is still ignored
On going implementation...
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[activate] (user_call_to_points_to) The function call to "a_next" is still ignored
On going implementation...
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[activate] (user_call_to_points_to) The function call to "a_next" is still ignored
On going implementation...
