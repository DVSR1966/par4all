
Proper effects for "initialize"

list * initialize()
{
   int *pi, i;
//               <must be written>: l
   list *l = (void *) 0, *nl;
//               <may be read    >: stdin[0]
//               <may be written >: stdin[0]
//               <must be read   >: stdin __IO_EFFECTS:LUNS[0]
//               <must be written>: __IO_EFFECTS:LUNS[0]

   while (!feof(stdin)) {
//               <must be written>: i
      scanf("%d", &i);
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ pi
      pi = malloc(sizeof(int));
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: i pi
      *pi = i;
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ nl
      nl = malloc(sizeof(list *));
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: nl pi
      nl->val = pi;
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: l nl
      nl->next = l;
   }
//               <must be read   >: l

   return l;
}

POINTS TO for "initialize"

//  {}
list * initialize()
{
//  points to = {}
   int *pi, i;
//  points to = {}
   list *l = (void *) 0, *nl;
//  points to = {}

   while (!feof(stdin)) {
//  points to = {}
      scanf("%d", &i);
//  points to = {}
      pi = malloc(sizeof(int));
//  points to = {}
      *pi = i;
//  points to = {}
      nl = malloc(sizeof(list *));
//  points to = {}
      nl->val = pi;
//  points to = {}
      nl->next = l;
   }
//  {(nl[0][val],*HEAP*_l_17,-MAY-);(nl,*HEAP*_l_19,-MAY-);(pi,
//   *HEAP*_l_17,-MAY-)}

   return l;
}

