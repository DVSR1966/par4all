
Parsed code for "call06"

void call06(int r, int m, int *x)
{
   int j;

   for (j = 0;j<m;j++)
      x[j] = 10*r+j;
   return;
}

Code for "call06"

void call06(int r, int m, int *x)
{
   int j;

   for(j = 0; j <= m-1; j += 1)
      x[j] = 10*r+j;
   return;
}

Proper effects for "call06"

void call06(int r, int m, int *x)
{
   int j;
//               <must be read   >: m
//               <must be written>: j

   for(j = 0; j <= m-1; j += 1)
//               <must be read   >: j m r x
//               <must be written>: x[j]
      x[j] = 10*r+j;
   return;
}

Cumulated effects for "call06"

//               <may be read    >: r x
//               <may be written >: x[*]
//               <must be read   >: m
void call06(int r, int m, int *x)
{
   int j;
//               <may be read    >: j r x
//               <may be written >: x[*]
//               <must be read   >: m
//               <must be written>: j

   for(j = 0; j <= m-1; j += 1)
//               <may be written >: x[*]
//               <must be read   >: j m r x
      x[j] = 10*r+j;
   return;
}

Proper effects for "main"

int main()
{
//               <must be written>: d1
   int d1 = 4;
//               <must be written>: d2
   int d2 = 4;
   int y[d1][d2];
   int i, j;
//               <must be read   >: d1
//               <must be written>: i

   for(i = 0; i <= d1-1; i += 1)
//               <may be written >: y[i][*]
//               <must be read   >: d1 d2 i
      call06(i, d2, &y[i][0]);
   exit(0);
}

POINTS TO

//  {(x,_x_1,-Exact-)}
void call06(int r, int m, int *x)
{
//  {(x,_x_1,-Exact-)}
   int j;
//  {(x,_x_1,-Exact-)}

   for(j = 0; j <= m-1; j += 1)
//  {(x,_x_1,-Exact-)}
      x[j] = 10*r+j;
//  {(x,_x_1,-Exact-)}
   return;
}

POINTS TO

//  {}
int main()
{
//  points to = {}
   int d1 = 4;
//  points to = {}
   int d2 = 4;
//  points to = {}
   int y[d1][d2];
//  points to = {}
   int i, j;
//  points to = {}

   for(i = 0; i <= d1-1; i += 1)
//  points to = {}
      call06(i, d2, &y[i][0]);
//  points to = {}
   exit(0);
}
