
PROPER EFFECTS

void flgr1d_arith_add_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *data1, FLGR_Data1D *data2)
{
   int j;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: psrc1
   fgINT32 *psrc1 = (fgINT32 *) data1->array;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: psrc2
   fgINT32 *psrc2 = (fgINT32 *) data2->array;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: pdest
   fgINT32 *pdest = (fgINT32 *) datdest->array;
   fgINT32 v1;
   fgINT32 v2;
   fgINT32 result;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: spp
   int spp = datdest->spp;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: length
   int length = datdest->length*spp;
//             <    is read   >: length
//             <    is written>: j
   for(j = 0; j <= length-1; j += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: v1
      v1 = flgr1d_get_data_array_fgINT32(psrc1, j);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: v2
      v2 = flgr1d_get_data_array_fgINT32(psrc2, j);
//             <    is read   >: length v1 v2
//             <    is written>: result
      result = flgr_defop_add_fgINT32(v1, v2);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: j length pdest result
      flgr1d_set_data_array_fgINT32(pdest, j, result);
   }
   return;
}
FLGR_Ret flgr2d_arith_add(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
   FLGR_Ret ret;
//             <    is read   >: data1 data2 datdest
   if (datdest==(void *) 0||data1==(void *) 0||data2==(void *) 0) {
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5102);
      return FLGR_RET_NULL_OBJECT;
   }
//             <    is read   >: data1 datdest
//             <    is written>: ret
   if ((ret = flgr2d_is_data_same_attributes(datdest, data1))!=FLGR_RET_OK)
//             <    is read   >: ret
      return ret;
//             <    is read   >: data1 data2
//             <    is written>: ret
   if ((ret = flgr2d_is_data_same_attributes(data2, data1))!=FLGR_RET_OK)
//             <    is read   >: ret
      return ret;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*

   if (datdest->type==FLGR_BIT) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgBIT(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_UINT8) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT8(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_UINT16) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT16(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_UINT32) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_INT8) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgINT8(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_INT16) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgINT16(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_INT32) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
      flgr2d_arith_add_fgINT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_FLOAT32) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgFLOAT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_FLOAT64) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgFLOAT64(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: stderr[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
   fprintf(stderr, "type <%s> unknown!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5109, flgr_get_type_string(datdest->type));
   return FLGR_RET_TYPE_UNKNOWN;
}
void flgr2d_arith_add_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: pdest
   FLGR_Data1D **pdest = datdest->row;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: p1
   FLGR_Data1D **p1 = data1->row;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: p2
   FLGR_Data1D **p2 = data2->row;
   int i;
//             <    is written>: i
   i = 0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   while (i<data1->size_y) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
      flgr1d_arith_add_fgINT32(*pdest, *p1, *p2);
//             <    is read   >: i p1 p2 pdest
//             <    is written>: i p1 p2 pdest
      i++, pdest++, p1++, p2++;
   }
   return;
}
static fgINT32 flgr1d_get_data_array_fgINT32(fgINT32 *array, int pos)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   return flgr_get_array_fgINT32(array, pos);
}
static void flgr1d_set_data_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: array pos value
   flgr_set_array_fgINT32(array, pos, value);
}
static fgINT32 flgr_defop_add_fgINT32(fgINT32 a, fgINT32 b)
{
//             <    is read   >: a b
   return a+b;
}
static fgINT32 flgr_get_array_fgINT32(fgINT32 *array, int pos)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   return array[pos];
}
static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: array pos value
   array[pos] = value;
}

PROPER POINTER EFFECTS

static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <    is read   >: array pos value
//             <    is written>: array[pos]
   array[pos] = value;
}

POINTS TO


// Points To:
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT

void flgr1d_arith_add_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *data1, FLGR_Data1D *data2)
{

// Points To:
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT

   int j;

// Points To:
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT

   fgINT32 *psrc1 = (fgINT32 *) data1->array;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   fgINT32 *psrc2 = (fgINT32 *) data2->array;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_1 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   fgINT32 *pdest = (fgINT32 *) datdest->array;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_10 , EXACT
// datdest -> _datdest_1 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   fgINT32 v1;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_10 , EXACT
// datdest -> _datdest_1 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   fgINT32 v2;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_10 , EXACT
// datdest -> _datdest_1 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   fgINT32 result;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_10 , EXACT
// datdest -> _datdest_1 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   int spp = datdest->spp;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_10 , EXACT
// datdest -> _datdest_1 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   int length = datdest->length*spp;

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_3 , EXACT
// data2 -> _data2_7 , EXACT
// datdest -> _datdest_10 , EXACT
// datdest -> _datdest_1 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   for(j = 0; j <= length-1; j += 1) {

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_7 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT
// datdest -> _datdest_10 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

      v1 = flgr1d_get_data_array_fgINT32(psrc1, j);

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_7 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT
// datdest -> _datdest_10 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

      v2 = flgr1d_get_data_array_fgINT32(psrc2, j);

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_7 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT
// datdest -> _datdest_10 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

      result = flgr_defop_add_fgINT32(v1, v2);

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_7 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT
// datdest -> _datdest_10 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

      flgr1d_set_data_array_fgINT32(pdest, j, result);
   }

// Points To:
// data1 -> _data1_4 , EXACT
// data1 -> _data1_2 , EXACT
// data2 -> _data2_7 , EXACT
// data2 -> _data2_3 , EXACT
// datdest -> _datdest_1 , EXACT
// datdest -> _datdest_10 , EXACT
// pdest -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc1 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// psrc2 -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   return;
}

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

FLGR_Ret flgr2d_arith_add(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   FLGR_Ret ret;

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest==(void *) 0||data1==(void *) 0||data2==(void *) 0) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5102);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_NULL_OBJECT;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if ((ret = flgr2d_is_data_same_attributes(datdest, data1))!=FLGR_RET_OK)

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return ret;

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if ((ret = flgr2d_is_data_same_attributes(data2, data1))!=FLGR_RET_OK)

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return ret;

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT


   if (datdest->type==FLGR_BIT) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgBIT(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_UINT8) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgUINT8(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_UINT16) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgUINT16(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_UINT32) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgUINT32(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_INT8) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgINT8(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_INT16) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgINT16(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_INT32) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgINT32(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_FLOAT32) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgFLOAT32(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   if (datdest->type==FLGR_FLOAT64) {

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      flgr2d_arith_add_fgFLOAT64(datdest, data1, data2);

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

      return FLGR_RET_OK;
   }

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   fprintf(stderr, "type <%s> unknown!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5109, flgr_get_type_string(datdest->type));

// Points To:
// data1 -> _data1_14 , EXACT
// data2 -> _data2_15 , EXACT
// datdest -> _datdest_13 , EXACT

   return FLGR_RET_TYPE_UNKNOWN;
}

// Points To:
// f1 -> _f1_16 , EXACT
// f2 -> _f2_17 , EXACT
// f3 -> _f3_18 , EXACT

int flgr2d_arith_add_fgBIT(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}

// Points To:
// f1 -> _f1_19 , EXACT
// f2 -> _f2_20 , EXACT
// f3 -> _f3_21 , EXACT

int flgr2d_arith_add_fgFLOAT32(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}

// Points To:
// f1 -> _f1_22 , EXACT
// f2 -> _f2_23 , EXACT
// f3 -> _f3_24 , EXACT

int flgr2d_arith_add_fgFLOAT64(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}

// Points To:
// f1 -> _f1_25 , EXACT
// f2 -> _f2_26 , EXACT
// f3 -> _f3_27 , EXACT

int flgr2d_arith_add_fgINT16(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
