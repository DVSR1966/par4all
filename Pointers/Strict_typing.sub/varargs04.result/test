
Points-to for "f2"


// Points To IN:
// array[*] -> *NULL_POINTER* , MAY
// array[*] -> _array_2[*] , MAY
// stderr -> *NULL_POINTER* , MAY
// stderr -> _stderr_ , MAY


// Points To OUT:
// stderr -> *NULL_POINTER* , MAY
// stderr -> _stderr_ , MAY

void f2(int n_ptrs, char *array[31])
{

// Points To: none

   int ptr_no;

// Points To: none

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)

// Points To:
// array[*] -> *NULL_POINTER* , MAY
// array[*] -> _array_2[*] , MAY
// stderr -> *NULL_POINTER* , MAY
// stderr -> _stderr_ , MAY

      fprintf(stderr, "%s\n", array[ptr_no]);

// Points To:
// array[*] -> *NULL_POINTER* , MAY
// array[*] -> _array_2[*] , MAY
// stderr -> *NULL_POINTER* , MAY
// stderr -> _stderr_ , MAY

   return;
}

Points-to for "f4"


// Points To IN:
// array[*] -> *NULL_POINTER* , MAY
// array[*] -> _array_2[*] , MAY
// stdout -> *NULL_POINTER* , MAY
// stdout -> _stdout_ , MAY


// Points To OUT:
// stdout -> *NULL_POINTER* , MAY
// stdout -> _stdout_ , MAY

void f4(int n_ptrs, char *array[31])
{

// Points To: none

   int ptr_no;

// Points To: none

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)

// Points To:
// array[*] -> *NULL_POINTER* , MAY
// array[*] -> _array_2[*] , MAY
// stdout -> *NULL_POINTER* , MAY
// stdout -> _stdout_ , MAY

      fprintf(stdout, "%s\n", array[ptr_no]);

// Points To:
// array[*] -> *NULL_POINTER* , MAY
// array[*] -> _array_2[*] , MAY
// stdout -> *NULL_POINTER* , MAY
// stdout -> _stdout_ , MAY

   return;
}

Points-to for "f3"


// Points To IN: none


// Points To OUT: none

void f3(int n_ptrs, int f4_after, ...)
{

// Points To: none

   va_list ap, ap_save;

// Points To: none

   char *array[31];

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int ptr_no = 0;

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   if (n_ptrs>31)

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      n_ptrs = 31;

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   va_start(ap, f4_after);

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1) {

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

      array[ptr_no] = va_arg(ap, char *);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

      if (ptr_no==f4_after)

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

         va_copy(ap_save, ap);
   }

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   va_end(ap);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   f2(n_ptrs, array);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   // Now process the saved copy.
   n_ptrs -= f4_after;

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

      array[ptr_no] = va_arg(ap_save, char *);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   va_end(ap_save);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   f4(n_ptrs, array);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   f3(6, 4, "ch1", "ch2", "ch3", "ch4", "ch5", "ch6");

// Points To: none

   return 0;
}
