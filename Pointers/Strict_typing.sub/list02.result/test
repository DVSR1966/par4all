
POINTS-TO


// Points To IN:
// nil -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _p_1 , MAY


// Points To OUT:
// _p_1 -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

void list_clean(list *p)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1 , MAY

   list_free(*p);

// Points To:
// nil -> *NULL_POINTER* , EXACT
// p -> _p_1 , EXACT

   *p = nil;

// Points To:
// _p_1 -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT
// p -> _p_1 , EXACT

   return;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_2 , MAY


// Points To OUT:
// *HEAP*_l_15.next -> *NULL_POINTER* , MAY
// *HEAP*_l_15.next -> _l_2 , MAY
// list_cons -> *HEAP*_l_15 , MAY

list list_cons(double v, list l)
{

// Points To: none

   list n = (list) malloc(sizeof(struct cons_t ));

// Points To:
// n -> *HEAP*_l_15 , MAY

   n->value = v;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_2 , MAY
// n -> *HEAP*_l_15 , MAY

   n->next = l;

// Points To:
// *HEAP*_l_15.next -> *NULL_POINTER* , MAY
// *HEAP*_l_15.next -> _l_2 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_2 , MAY
// n -> *HEAP*_l_15 , MAY

   return n;
}

// Points To IN:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1_2__1 , MAY
// _l_1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1.next -> _l_1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1_2__1
//     , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

void list_free(list l)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   list n = l, p = l;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY

   while (n!=nil) {

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1_2__1 , MAY
// _l_1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1.next -> _l_1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1_2__1
//     , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// l -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// l -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// n -> _l_1 , MAY
// n -> _l_1_2__1 , MAY
// n -> _l_1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY
// p -> _l_1_2__1 , MAY
// p -> _l_1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY

      n = n->next;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1_2__1 , MAY
// _l_1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1.next -> _l_1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1_2__1
//     , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// l -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// l -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1 , MAY
// n -> _l_1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY
// p -> _l_1_2__1 , MAY
// p -> _l_1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1 , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY

      free(p);

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1_2__1 , MAY
// _l_1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1.next -> _l_1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1.next -> _l_1_2__1_2__1_2__1_2__1_2__1
//     , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// l -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// l -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1 , MAY
// n -> _l_1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      p = n;
   }

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY

   return;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

int list_len(list l)
{

// Points To: none

   int n = 0;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   list c = l;

// Points To:
// c -> *NULL_POINTER* , MAY
// c -> _l_1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

   while (c!=nil) {

// Points To:
// c -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// c -> _l_1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

      // we know that c!=nil...
      c = list_next(c);

// Points To:
// c -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

      n++;
   }

// Points To:
// c -> *NULL_POINTER* , EXACT
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

   return n;
}

// Points To IN:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// list_next -> *NULL_POINTER* , MAY
// list_next -> _l_1_2__1 , MAY
// nil -> *NULL_POINTER* , EXACT

list list_next(list l)
{
   //if (l==nil)
   //  return nil;
   //else
   //  return l->next;

// Points To: none

   list n;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

   if (l==nil)

// Points To:
// l -> *NULL_POINTER* , EXACT
// n -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

      n = nil;
   else

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// l -> _l_1 , EXACT
// n -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

      n = l->next;

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1 , MAY
// nil -> *NULL_POINTER* , EXACT

   return n;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _n_2 , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _n_2 , MAY
// list_set_next -> *NULL_POINTER* , MAY
// list_set_next -> _l_1 , MAY
// list_set_next -> _n_2 , MAY
// nil -> *NULL_POINTER* , EXACT

list list_set_next(list l, list n)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

   if (l!=nil)

// Points To:
// l -> _l_1 , EXACT
// n -> *NULL_POINTER* , MAY
// n -> _n_2 , MAY
// nil -> *NULL_POINTER* , EXACT

      l->next = n;
   else

// Points To:
// l -> *NULL_POINTER* , EXACT
// n -> *NULL_POINTER* , MAY
// n -> _n_2 , MAY
// nil -> *NULL_POINTER* , EXACT

      l = n;

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _n_2 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// l -> _n_2 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _n_2 , MAY
// nil -> *NULL_POINTER* , EXACT

   return l;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY


// Points To OUT:
// list_set_value -> _l_1 , EXACT

list list_set_value(list l, double v)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   // could fail?!
   l->value = v;

// Points To:
// l -> _l_1 , EXACT

   return l;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

double list_value(list l)
{
   /* if (l==nil) */
   /*   return 0.0; */
   /* else */
   /*   return l->value; */

// Points To: none

   double v;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

   if (l==nil)

// Points To:
// l -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

      v = 0.0;
   else

// Points To:
// l -> _l_1 , EXACT
// nil -> *NULL_POINTER* , EXACT

      v = l->value;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// nil -> *NULL_POINTER* , EXACT

   return v;
}

// Points To IN:
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

int main(void)
{

// Points To:
// nil -> *NULL_POINTER* , EXACT

   list l = nil;

// Points To:
// l -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

   int n;

// Points To:
// l -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

   fscanf(stdin, "%d", &n);

// Points To:
// l -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

   while (n--)

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// nil -> *NULL_POINTER* , EXACT

      l = list_cons((double) n, l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// nil -> *NULL_POINTER* , EXACT

   n = list_len(l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// nil -> *NULL_POINTER* , EXACT

   fprintf(stdout, "n=%d", n);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// nil -> *NULL_POINTER* , EXACT

   list_clean(&l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// nil -> *NULL_POINTER* , EXACT

   return 0;
}
