int main(int argc, char *argv[])
{
   // BEGIN BLOCK
   int t, i;
//               <must be written>: i

   for(i = 1; i <= 62; i += 1)
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: tab3 _MALLOC_EFFECTS:_MALLOC_ i
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
      tab3[i] = malloc(64*sizeof(float));
//               <must be written>: t
   for(t = 0; t <= 63; t += 1)
//               <may be read    >: tab3
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
      compute();
//               <must be written>: i

   for(i = 1; i <= 62; i += 1)
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
      free(tab3[i]);

   return 0;
   // END BLOCK
}
POINTS TO
//  {}
void compute()
{
//  points to = {}
   // BEGIN BLOCK
//  points to = {}
   int i, j;
//  points to = {}

   for(i = 1; i <= 62; i += 1)
//  points to = {}
      for(j = 1; j <= 62; j += 1) {
//  points to = {}
         // BEGIN BLOCK
//  points to = {}
         tab1[i][j] = i*j;
//  points to = {}
         tab2[i][j] = i*j;
//  points to = {}
         tab3[i][j] = i*j;
         // END BLOCK
      }
   // END BLOCK
}
//  {}
int main(int argc, char *argv[])
{
//  points to = {}
   // BEGIN BLOCK
//  points to = {}
   int t, i;
//  points to = {}

   for(i = 1; i <= 62; i += 1)
//  {(tab3[i],*ANY_MODULE*:*HEAP**ANYWHERE*,-MAY-)}
      tab3[i] = malloc(64*sizeof(float));
//  {(tab3[i],*ANY_MODULE*:*HEAP**ANYWHERE*,-MAY-)}
   for(t = 0; t <= 63; t += 1)
//  {(tab3[i],*ANY_MODULE*:*HEAP**ANYWHERE*,-MAY-)}
      compute();
//  {(tab3[i],*ANY_MODULE*:*HEAP**ANYWHERE*,-MAY-)}

   for(i = 1; i <= 62; i += 1)
//  {(tab3[i],*ANY_MODULE*:*HEAP**ANYWHERE*,-MAY-)}
      free(tab3[i]);
//  {(tab3[i],*ANY_MODULE*:*HEAP**ANYWHERE*,-MAY-)}

   return 0;
   // END BLOCK
}
