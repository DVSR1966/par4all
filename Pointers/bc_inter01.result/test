
Points-to for "foo"


// Points To IN:
// a1 -> *NULL_POINTER* , MAY
// a1 -> _a1_1[0] , MAY
// b2 -> *NULL_POINTER* , MAY
// b2 -> _b2_3[0] , MAY
// pa2 -> *NULL_POINTER* , MAY
// pa2 -> _pa2_2[0] , MAY


// Points To OUT:
// _a1_1[*].q -> *NULL_POINTER* , MAY
// _a1_1[0].q -> *NULL_POINTER* , MAY
// _a1_1[*].q -> _b2_3[0] , MAY
// _a1_1[0].q -> _b2_3[0] , MAY
// _pa2_2[*] -> *NULL_POINTER* , MAY
// _pa2_2[*] -> _a1_1[0] , MAY
// _pa2_2[0] -> _a1_1[0] , MAY

void foo(struct2 *a1, struct2 **pa2, struct1 *b2)
{

// Points To:
// a1 -> *NULL_POINTER* , MAY
// a1 -> _a1_1[0] , MAY
// pa2 -> *NULL_POINTER* , MAY
// pa2 -> _pa2_2[0] , MAY


   *pa2 = a1;

// Points To:
// _pa2_2[*] -> *NULL_POINTER* , MAY
// _pa2_2[0] -> *NULL_POINTER* , MAY
// _pa2_2[*] -> _a1_1[0] , MAY
// _pa2_2[0] -> _a1_1[0] , MAY
// a1 -> *NULL_POINTER* , MAY
// a1 -> _a1_1[0] , MAY
// b2 -> *NULL_POINTER* , MAY
// b2 -> _b2_3[0] , MAY
// pa2 -> _pa2_2[0] , EXACT

   (*pa2)->q = b2;

// Points To:
// _a1_1[*].q -> *NULL_POINTER* , MAY
// _a1_1[0].q -> *NULL_POINTER* , MAY
// _a1_1[*].q -> _b2_3[0] , MAY
// _a1_1[0].q -> _b2_3[0] , MAY
// _pa2_2[*] -> *NULL_POINTER* , MAY
// _pa2_2[*] -> _a1_1[0] , MAY
// _pa2_2[0] -> _a1_1[0] , MAY
// a1 -> *NULL_POINTER* , MAY
// a1 -> _a1_1[0] , MAY
// b2 -> *NULL_POINTER* , MAY
// b2 -> _b2_3[0] , MAY
// pa2 -> _pa2_2[0] , EXACT

   printf("adress of (*pa2)->q = %p", (*pa2)->q);
}

Proper effects for "foo"

void foo(struct2 *a1, struct2 **pa2, struct1 *b2)
{
//             <    is read   >: a1 pa2
//             <    is written>: _pa2_2[0]

   *pa2 = a1;
//             <may be written>: _a1_1[0].q _a1_1[0].q
//             <    is read   >: _pa2_2[0] b2 pa2
   (*pa2)->q = b2;
//             <may be read   >: _a1_1[0].q _a1_1[0].q stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: _pa2_2[0] pa2 stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("adress of (*pa2)->q = %p", (*pa2)->q);
}

Cumulated effects for "foo"

//             <may be read   >: _a1_1[0].q stdout[0]
//             <may be written>: _a1_1[0].q stdout[0]
//             <    is read   >: _pa2_2[0] a1 b2 pa2 stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: _pa2_2[0] __IO_EFFECTS:LUNS[1]
void foo(struct2 *a1, struct2 **pa2, struct1 *b2)
{
//             <    is read   >: a1 pa2
//             <    is written>: _pa2_2[0]

   *pa2 = a1;
//             <may be written>: _a1_1[0].q
//             <    is read   >: _pa2_2[0] b2 pa2
   (*pa2)->q = b2;
//             <may be read   >: _a1_1[0].q stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: _pa2_2[0] pa2 stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("adress of (*pa2)->q = %p", (*pa2)->q);
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   struct2 *p1, *p2;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   struct1 *q1, *q2;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q2 -> *ANY_MODULE*:*NOWHERE* , EXACT


   q1 = (struct1 *) malloc(sizeof(struct1));

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *ANY_MODULE*:*NOWHERE* , EXACT

   q2 = (struct1 *) malloc(sizeof(struct1));

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY


   q1->r = 10;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY

   q2->r = 20;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY


   p1 = (struct2 *) malloc(sizeof(struct2));

// Points To:
// p1 -> *HEAP*_l_29 , MAY
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY


   p1->q = q1;

// Points To:
// *HEAP*_l_29.q -> *HEAP*_l_23 , MAY
// p1 -> *HEAP*_l_29 , MAY
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY


   foo(p1, &p2, q2);

// Points To:
// *HEAP*_l_29.q -> *HEAP*_l_23 , MAY
// *HEAP*_l_29.q -> *HEAP*_l_24 , MAY
// *HEAP*_l_29.q -> *NULL_POINTER* , MAY
// p1 -> *HEAP*_l_29 , MAY
// p2 -> *HEAP*_l_29 , MAY
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY


   printf("%d\n", p1->q->r);

// Points To:
// *HEAP*_l_29.q -> *HEAP*_l_23 , MAY
// *HEAP*_l_29.q -> *HEAP*_l_24 , MAY
// *HEAP*_l_29.q -> *NULL_POINTER* , MAY
// p1 -> *HEAP*_l_29 , MAY
// p2 -> *HEAP*_l_29 , MAY
// q1 -> *HEAP*_l_23 , MAY
// q2 -> *HEAP*_l_24 , MAY

   return 0;
}

