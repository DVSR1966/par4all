
PROPER  EFFECTS

void flgr2d_set_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: array_s
   fgUINT16 *array_s = (fgUINT16 *) vct->array;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: array_d
   fgUINT16 *array_d = (fgUINT16 *) (dat->array)[row];
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: I_0
   int I_0 = vct->spp;
   {
      register fgUINT16 val;
      register int i;
      register int k;
      unsigned short _return0;
//             <    is read   >: I_0 col
//             <    is written>: i
      i = col*I_0;
//             <    is read   >: I_0
//             <    is written>: k
      for(k = 0; k <= I_0-1; k += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: _return0
         _return0 = array_s[k];
//             <    is read   >: I_0 _return0
//             <    is written>: val
         val = _return0;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: I_0 array_d i val
         array_d[i] = val;
//             <    is read   >: I_0 i
//             <    is written>: i
         i++;
      }
   }
}

POINTS-TO


// Points To IN:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY


// Points To OUT:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY

void flgr2d_set_data_vector_fgUINT16(FLGR_Data2D *dat, int row, int col, FLGR_Vector *vct)
{

// Points To:
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

   fgUINT16 *array_s = (fgUINT16 *) vct->array;

// Points To:
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

   fgUINT16 *array_d = (fgUINT16 *) (dat->array)[row];

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

   int I_0 = vct->spp;
   {

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

      register fgUINT16 val;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

      register int i;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

      register int k;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

      unsigned short _return0;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

      i = col*I_0;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

      for(k = 0; k <= I_0-1; k += 1) {

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> *NULL_POINTER* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

         _return0 = array_s[k];

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

         val = _return0;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> *NULL_POINTER* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

         array_d[i] = val;

// Points To:
// _dat_1.array[*] -> *NULL_POINTER* , MAY
// _dat_1.array[*] -> _dat_1_1[0] , MAY
// _vct_4.array -> *NULL_POINTER* , MAY
// _vct_4.array -> _vct_4_4[0] , MAY
// array_d -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_d -> _dat_1_1[0] , MAY
// array_s -> *ANY_MODULE*:*ANYWHERE* , MAY
// array_s -> _vct_4_4[0] , MAY
// dat -> *NULL_POINTER* , MAY
// dat -> _dat_1 , MAY
// vct -> *NULL_POINTER* , MAY
// vct -> _vct_4 , MAY

         i++;
      }
   }
}
