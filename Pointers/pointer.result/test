
INTRAPROCEDURAL POINTS-TO


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_14 , MAY

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_14 , MAY

   *p = v;

// Points To:
// p -> *HEAP*_l_14 , MAY

   return p;
}

// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   pointer p1 = alloc_pointer(1);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   pointer p2 = alloc_pointer(0);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   pointer p3 = alloc_pointer(0);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p3 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   pointer_set(p2, 2);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p3 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   pointer_add(p3, p1, p2);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p3 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   pointer_free(p1);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p3 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   pointer_free(p2);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p3 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   printf("*p3=%d\n", pointer_get(p3));

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p3 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY

   return 0;
}

// Points To IN:
// q1 -> *NULL_POINTER* , MAY
// q1 -> _q1_1[0] , MAY
// q2 -> *NULL_POINTER* , MAY
// q2 -> _q2_2[0] , MAY
// q3 -> *NULL_POINTER* , MAY
// q3 -> _q3_3[0] , MAY


// Points To OUT: none

void pointer_add(pointer q1, const pointer q2, const pointer q3)
{

// Points To:
// q1 -> *NULL_POINTER* , MAY
// q1 -> _q1_1[0] , MAY
// q2 -> *NULL_POINTER* , MAY
// q2 -> _q2_2[0] , MAY
// q3 -> *NULL_POINTER* , MAY
// q3 -> _q3_3[0] , MAY

   *q1 = *q2+*q3;

// Points To:
// q1 -> _q1_1[0] , EXACT
// q2 -> _q2_2[0] , EXACT
// q3 -> _q3_3[0] , EXACT

   return;
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT: none

void pointer_free(pointer p)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   free(p);

// Points To:
// p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   return;
}

// Points To IN: none


// Points To OUT: none

int pointer_get(const pointer p)
{

// Points To: none

   int i = *p;

// Points To: none

   return i;
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT: none

void pointer_set(pointer p, int v)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   *p = v;

// Points To:
// p -> _p_1[0] , EXACT

   return;
}

INTERPROCEDURAL POINTS-TO


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_14 , MAY

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_14 , MAY

   *p = v;

// Points To:
// p -> *HEAP*_l_14 , MAY

   return p;
}

// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   pointer p1 = alloc_pointer(1);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY

   pointer p2 = alloc_pointer(0);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY

   pointer p3 = alloc_pointer(0);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY
// p3 -> alloc_pointer:*HEAP*_l_14 , MAY

   pointer_set(p2, 2);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY
// p3 -> alloc_pointer:*HEAP*_l_14 , MAY

   pointer_add(p3, p1, p2);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY
// p3 -> alloc_pointer:*HEAP*_l_14 , MAY

   pointer_free(p1);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY
// p3 -> alloc_pointer:*HEAP*_l_14 , MAY

   pointer_free(p2);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY
// p3 -> alloc_pointer:*HEAP*_l_14 , MAY

   printf("*p3=%d\n", pointer_get(p3));

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_14 , MAY
// p2 -> alloc_pointer:*HEAP*_l_14 , MAY
// p3 -> alloc_pointer:*HEAP*_l_14 , MAY

   return 0;
}

// Points To IN:
// q1 -> *NULL_POINTER* , MAY
// q1 -> _q1_1[0] , MAY
// q2 -> *NULL_POINTER* , MAY
// q2 -> _q2_2[0] , MAY
// q3 -> *NULL_POINTER* , MAY
// q3 -> _q3_3[0] , MAY


// Points To OUT: none

void pointer_add(pointer q1, const pointer q2, const pointer q3)
{

// Points To:
// q1 -> *NULL_POINTER* , MAY
// q1 -> _q1_1[0] , MAY
// q2 -> *NULL_POINTER* , MAY
// q2 -> _q2_2[0] , MAY
// q3 -> *NULL_POINTER* , MAY
// q3 -> _q3_3[0] , MAY

   *q1 = *q2+*q3;

// Points To:
// q1 -> _q1_1[0] , EXACT
// q2 -> _q2_2[0] , EXACT
// q3 -> _q3_3[0] , EXACT

   return;
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT: none

void pointer_free(pointer p)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   free(p);

// Points To:
// p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   return;
}

// Points To IN: none


// Points To OUT: none

int pointer_get(const pointer p)
{

// Points To: none

   int i = *p;

// Points To: none

   return i;
}

// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT: none

void pointer_set(pointer p, int v)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   *p = v;

// Points To:
// p -> _p_1[0] , EXACT

   return;
}

EFFECTS WITH INTERPROCEDURAL POINTS-TO

int main()
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   pointer p1 = alloc_pointer(1);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p2 _MALLOC_EFFECTS:_MALLOC_
   pointer p2 = alloc_pointer(0);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p3 _MALLOC_EFFECTS:_MALLOC_
   pointer p3 = alloc_pointer(0);
//             <may be written>: pointer_set:_p_1[0]
//             <    is read   >: p2
   pointer_set(p2, 2);
//             <may be read   >: pointer_add:_q2_2[0] 
//                               pointer_add:_q3_3[0]
//             <may be written>: pointer_add:_q1_1[0]
//             <    is read   >: p1 p2 p3
   pointer_add(p3, p1, p2);
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p1);
//             <    is read   >: p2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p2);
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("*p3=%d\n", pointer_get(p3));
   return 0;
}
