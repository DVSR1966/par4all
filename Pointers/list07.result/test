
POINTS-TO


// Points To IN:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

int list_len(list l)
{

// Points To: none

   int n = 0;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY

   list c = l;

// Points To:
// c -> *NULL_POINTER* , MAY
// c -> _l_1[0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   while (c!=nil) {

// Points To:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// c -> _l_1[0] , MAY
// c -> _l_1_2__1[0][0] , MAY
// c -> _l_1_2__1_2__1[0][0][0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

      // we know that c!=nil... and this has no impact as c->next might be NULL!
      c = c==nil?nil:c->next;

// Points To:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// c -> *NULL_POINTER* , MAY
// c -> _l_1_2__1[0][0] , MAY
// c -> _l_1_2__1_2__1[0][0][0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

      n++;
   }

// Points To:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// c -> *NULL_POINTER* , EXACT
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   return n;
}
