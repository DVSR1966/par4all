int ptr_to_field()
{
   // BEGIN BLOCK
   typedef struct {
      int *q;
      int *p;
   } my_str;

   my_str *m, *n;
//             <    is written>: i j
   int i = 0, j = 1;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   m = (my_str *) malloc(sizeof(my_str));
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: n _MALLOC_EFFECTS:_MALLOC_
   n = (my_str *) malloc(sizeof(my_str));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: m
   m->q = &i;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: m
   m->p = &j;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   n->q = m->p;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   n->p = m->q;

   return 0;
   // END BLOCK
}
POINTS TO
//  {}
int ptr_to_field()
{
//  points to = {}
   // BEGIN BLOCK
//  points to = {}
   typedef struct {
      int *q;
      int *p;
   } my_str;

//  {(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(my_str[q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-)}
   my_str *m, *n;
//  {(m[0][p],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*NOWHERE*_b1,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*NOWHERE*_b1,
//   -Exact-)}
   int i = 0, j = 1;
//  {(m[0][p],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*NOWHERE*_b1,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*NOWHERE*_b1,
//   -Exact-)}
   m = (my_str *) malloc(sizeof(my_str));
//  {(m[0][p],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*HEAP*,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*NOWHERE*_b1,
//   -Exact-)}
   n = (my_str *) malloc(sizeof(my_str));
//  {(m[0][p],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*HEAP*,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*HEAP*,
//   -Exact-)}
   m->q = &i;
//  {(*ANY_MODULE*:*ANYWHERE*_b0,i,-Exact-);(m[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*HEAP*,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*HEAP*,
//   -Exact-)}
   m->p = &j;
//  {(*ANY_MODULE*:*ANYWHERE*_b0,i,
//   -Exact-);(*ANY_MODULE*:*ANYWHERE*_b0,j,-Exact-);(m[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*HEAP*,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*HEAP*,
//   -Exact-)}
   n->q = m->p;
//  {(*ANY_MODULE*:*ANYWHERE*_b0,i,
//   -Exact-);(*ANY_MODULE*:*ANYWHERE*_b0,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(*ANY_MODULE*:*ANYWHERE*_b0,j,-Exact-);(m[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*HEAP*,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*HEAP*,
//   -Exact-)}
   n->p = m->q;
//  {(*ANY_MODULE*:*ANYWHERE*_b0,i,
//   -Exact-);(*ANY_MODULE*:*ANYWHERE*_b0,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(*ANY_MODULE*:*ANYWHERE*_b0,j,-Exact-);(m[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(m,*ANY_MODULE*:*HEAP*,
//   -Exact-);(my_str[p],*ANY_MODULE*:*NOWHERE*_b0,
//   -Exact-);(my_str[q],*ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][p],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n[0][q],
//   *ANY_MODULE*:*NOWHERE*_b0,-Exact-);(n,*ANY_MODULE*:*HEAP*,
//   -Exact-)}

   return 0;
   // END BLOCK
}
