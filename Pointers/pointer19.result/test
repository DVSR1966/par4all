
Points-to for "foo"


// Points To IN:
// _t_1[2][3][0][0][0][0] -> *NULL* , MAY
// _t_1[2][3][0][0][0][0] -> _t_1_1[2][3][0][0][0][0][0] , MAY
// t[2][3] -> *NULL* , MAY
// t[2][3] -> _t_1[2][3][0][0][0][0] , MAY


// Points To OUT:
// _t_1[2][3][0][0][0][0] -> *NULL* , MAY
// _t_1[2][3][0][0][0][0] -> _t_1_1[2][3][0][0][0][0][0] , MAY
// t[2][3] -> _t_1[2][3][0][0][0][0] , EXACT

void foo(double *(*t[3][4])[5][6][7])
{

// Points To:
// _t_1[2][3][0][0][0][0] -> *NULL* , MAY
// _t_1[2][3][0][0][0][0] -> _t_1_1[2][3][0][0][0][0][0] , MAY
// t[2][3] -> *NULL* , MAY
// t[2][3] -> _t_1[2][3][0][0][0][0] , MAY

   *(((*t[2][3])[1])[2])[3] = 2.5;

// Points To:
// _t_1[2][3][0][0][0][0] -> *NULL* , MAY
// _t_1[2][3][0][0][0][0] -> _t_1_1[2][3][0][0][0][0][0] , MAY
// t[2][3] -> _t_1[2][3][0][0][0][0] , EXACT

   return;
}

Proper effects with points-to for "foo"

void foo(double *(*t[3][4])[5][6][7])
{
//             <    is read   >: _t_1_1[2][3][0][0][0][0][1][2][3] 
//                               t[2][3]
//             <    is written>: _t_1_1[2][3][0][0][0][0][1][2][3][0]
   *(((*t[2][3])[1])[2])[3] = 2.5;
   return;
}

Cumulated effects for "foo"

//             <    is read   >: _t_1_1[2][3][0][0][0][0][1][2][3] 
//                               t[2][3]
//             <    is written>: _t_1_1[2][3][0][0][0][0][1][2][3][0]
void foo(double *(*t[3][4])[5][6][7])
{
//             <    is read   >: _t_1_1[2][3][0][0][0][0][1][2][3] 
//                               t[2][3]
//             <    is written>: _t_1_1[2][3][0][0][0][0][1][2][3][0]
   *(((*t[2][3])[1])[2])[3] = 2.5;
   return;
}
