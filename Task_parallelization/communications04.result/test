// OMP style
int main()
{
   //PIPS generated variable
   int a[100], b[100], i, bi, j, bj;
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
         scanf("%d", &bi);
      }
#pragma omp single
      {
#pragma omp task
         {
            for(i = bi; i <= 99; i += 1)
               a[i] = i;
         }
#pragma omp task
         {
            scanf("%d", &bj);
         }
#pragma omp task
         {
            for(i = 0; i <= bi-1; i += 1)
               a[i] = i;
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            0<=bi&&bi<100&&0<=bj&&bj<100?(void) 0:__assert_fail("0<=bi && bi<100 && 0<=bj && bj<100", "./communications04.c", 24, (const char *) 0);
            for(j = bj; j <= 99; j += 1)
               b[j] = 2*a[j];
         }
#pragma omp task
         {
            for(j = 0; j <= bj-1; j += 1)
               b[j] = 2*a[j];
         }
      }
#pragma omp single
      {
         for(j = 0; j <= 99; j += 1)
            printf("%d\n", b[j]);
      }
   }
   return 0;
}
// MPI style
int main()
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      int a[100], b[100], i, bi, j, bj, _rtl_0_0, _rtl_0_0_0, _rtl_0_0_1, _rtl_0_0_2, _rtl_0_0_3, _rtl_0_0_4, _rtl_0_0_5, _rtl_1_0, _rtl_0_0_6, _rtl_0_0_7;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         scanf("%d", &bi);
         MPI_Isend(&bi, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bi, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         for(i = bi; i <= 99; i += 1)
            a[i] = i;
         for(_rtl_0_0_6 = MAX(bi, bj); _rtl_0_0_6 <= 99; _rtl_0_0_6 += 1)
            MPI_Isend(&a[_rtl_0_0_6], 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         for(_rtl_0_0_7 = bi; _rtl_0_0_7 <= bj-1; _rtl_0_0_7 += 1)
            MPI_Isend(&a[_rtl_0_0_7], 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==1) {
         _rtl_1_0 = 0;
         MPI_Recv(&LUNS[_rtl_1_0], 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         _rtl_0_0_5 = 0;
         MPI_Recv(&stdin[_rtl_0_0_5], 1, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         scanf("%d", &bj);
         MPI_Isend(&bj, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==2) {
         MPI_Recv(&bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= bi-1; i += 1)
            a[i] = i;
         for(_rtl_0_0_4 = bj; _rtl_0_0_4 <= bi-1; _rtl_0_0_4 += 1)
            MPI_Isend(&a[_rtl_0_0_4], 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==1) {
         MPI_Recv(&bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         0<=bi&&bi<100&&0<=bj&&bj<100?(void) 0:__assert_fail("0<=bi && bi<100 && 0<=bj && bj<100", "./communications04.c", 24, (const char *) 0);
         for(_rtl_0_0_2 = bj; _rtl_0_0_2 <= bi-1; _rtl_0_0_2 += 1)
            MPI_Recv(&a[_rtl_0_0_2], 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(_rtl_0_0_1 = MAX(bi, bj); _rtl_0_0_1 <= 99; _rtl_0_0_1 += 1)
            MPI_Recv(&a[_rtl_0_0_1], 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = bj; j <= 99; j += 1)
            b[j] = 2*a[j];
         for(_rtl_0_0_3 = bj; _rtl_0_0_3 <= 99; _rtl_0_0_3 += 1)
            MPI_Isend(&b[_rtl_0_0_3], 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==2) {
         MPI_Recv(&bj, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(_rtl_0_0_0 = bi; _rtl_0_0_0 <= bj-1; _rtl_0_0_0 += 1)
            MPI_Recv(&a[_rtl_0_0_0], 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = 0; j <= bj-1; j += 1)
            b[j] = 2*a[j];
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==2) {
         for(_rtl_0_0 = bj; _rtl_0_0 <= 99; _rtl_0_0 += 1)
            MPI_Recv(&b[_rtl_0_0], 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = 0; j <= 99; j += 1)
            printf("%d\n", b[j]);
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();
   return 0;
}
