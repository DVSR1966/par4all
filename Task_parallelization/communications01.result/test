// OMP style
int main()
{
   //PIPS generated variable
   int bj, j, bi, i, b[size], a[size], size;
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
#pragma omp task
         {
            scanf("%d", &size);
         }
#pragma omp task
         {
            return 0;
         }
      }
#pragma omp single
      {
         scanf("%d", &bi);
      }
#pragma omp single
      {
#pragma omp task
         {
            scanf("%d", &bj);
         }
#pragma omp task
         {
            for(i = 0; i <= bi-1; i += 1)
               a[i] = i;
         }
#pragma omp task
         {
            for(i = bi; i <= size-1; i += 1)
               a[i] = i;
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "./communications01.c", 19, (const char *) 0);
         }
#pragma omp task
         {
            for(j = 0; j <= bj-1; j += 1)
               b[j] = 2*a[j];
         }
#pragma omp task
         {
            for(j = bj; j <= size-1; j += 1)
               b[j] = 2*a[j];
         }
      }
#pragma omp single
      {
         for(j = 0; j <= size-1; j += 1)
            printf("%d\n", b[j]);
      }
   }
}
// MPI style
int main()
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      //PIPS generated variable
      int bj, j, bi, i, b[size], a[size], size;
      if (rank0==0) {
         scanf("%d", &size);
         MPI_Isend(size, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(size, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(size, 1, MPI_INT, 3, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==4)
         return 0;
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         scanf("%d", &bi);
         MPI_Isend(bi, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(bi, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         scanf("%d", &bj);
         MPI_Isend(bj, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(bj, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==1) {
         MPI_Recv(bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= bi-1; i += 1)
            a[i] = i;
         MPI_Isend(a, -1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==2) {
         MPI_Recv(bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = bi; i <= size-1; i += 1)
            a[i] = i;
         MPI_Isend(a, -1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0)
         0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "./communications01.c", 19, (const char *) 0);
      if (rank0==1) {
         MPI_Recv(a, -1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(bj, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = 0; j <= bj-1; j += 1)
            b[j] = 2*a[j];
      }
      if (rank0==2) {
         MPI_Recv(a, -1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(bj, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = bj; j <= size-1; j += 1)
            b[j] = 2*a[j];
         MPI_Isend(b, -1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==1) {
         MPI_Recv(b, -1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = 0; j <= size-1; j += 1)
            printf("%d\n", b[j]);
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();
}
