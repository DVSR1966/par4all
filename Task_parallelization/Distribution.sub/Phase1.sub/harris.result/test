
Init Code

void main(int argc, char *argv[])
{
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/

#pragma distributed on_cluster=0
   InitHarris(in);                                                      /*0057*/
   /* Now we run the Harris procedure */
   
   //Sobel
#pragma distributed on_cluster=0
   SobelX(Gx, in);                                                      /*0061*/
#pragma distributed on_cluster=1
   SobelY(Gy, in);                                                      /*0062*/
   
   //Multiply
#pragma distributed on_cluster=0
   MultiplY(Ixx, Gx, Gx);                                               /*0065*/
#pragma distributed on_cluster=1
   MultiplY(Iyy, Gy, Gy);                                               /*0066*/
#pragma distributed on_cluster=2
   MultiplY(Ixy, Gx, Gy);                                               /*0067*/
   
   //Gauss
#pragma distributed on_cluster=0
   Gauss(Sxx, Ixx);                                                     /*0070*/
#pragma distributed on_cluster=1
   Gauss(Syy, Iyy);                                                     /*0071*/
#pragma distributed on_cluster=2
   Gauss(Sxy, Ixy);                                                     /*0072*/
   
   //Coarsity
#pragma distributed on_cluster=0
   CoarsitY(out, Sxx, Syy, Sxy);                                        /*0075*/
}

TASK_MAPPING

void main(int argc, char *argv[])
{
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/

#pragma distributed on_cluster=0
   InitHarris(in);                                                      /*0057*/
   /* Now we run the Harris procedure */
   
   //Sobel
#pragma distributed on_cluster=0
   SobelX(Gx, in);                                                      /*0061*/
#pragma distributed on_cluster=1
   SobelY(Gy, in);                                                      /*0062*/
   
   //Multiply
#pragma distributed on_cluster=0
   MultiplY(Ixx, Gx, Gx);                                               /*0065*/
#pragma distributed on_cluster=1
   MultiplY(Iyy, Gy, Gy);                                               /*0066*/
#pragma distributed on_cluster=2
   MultiplY(Ixy, Gx, Gy);                                               /*0067*/
   
   //Gauss
#pragma distributed on_cluster=0
   Gauss(Sxx, Ixx);                                                     /*0070*/
#pragma distributed on_cluster=1
   Gauss(Syy, Iyy);                                                     /*0071*/
#pragma distributed on_cluster=2
   Gauss(Sxy, Ixy);                                                     /*0072*/
   
   //Coarsity
#pragma distributed on_cluster=0
   CoarsitY(out, Sxx, Syy, Sxy);                                        /*0075*/
}

VARIABLE_REPLICATION

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __dpvar__Gx_0[1024*1024], __dpvar__Gx_1[1024*1024], __dpvar__Gx_2[1024*1024], __dpvar__Gx_3[1024*1024], __dpvar__Gy_0[1024*1024], __dpvar__Gy_1[1024*1024], __dpvar__Gy_2[1024*1024], __dpvar__Gy_3[1024*1024], __dpvar__Ixx_0[1024*1024], __dpvar__Ixx_1[1024*1024], __dpvar__Ixx_2[1024*1024], __dpvar__Ixx_3[1024*1024], __dpvar__Iyy_0[1024*1024], __dpvar__Iyy_1[1024*1024], __dpvar__Iyy_2[1024*1024], __dpvar__Iyy_3[1024*1024], __dpvar__Ixy_0[1024*1024], __dpvar__Ixy_1[1024*1024], __dpvar__Ixy_2[1024*1024], __dpvar__Ixy_3[1024*1024], __dpvar__Sxx_0[1024*1024], __dpvar__Sxx_1[1024*1024], __dpvar__Sxx_2[1024*1024], __dpvar__Sxx_3[1024*1024], __dpvar__Sxy_0[1024*1024], __dpvar__Sxy_1[1024*1024], __dpvar__Sxy_2[1024*1024], __dpvar__Sxy_3[1024*1024], __dpvar__Syy_0[1024*1024], __dpvar__Syy_1[1024*1024], __dpvar__Syy_2[1024*1024], __dpvar__Syy_3[1024*1024], __dpvar__in_0[1024*1024], __dpvar__in_1[1024*1024], __dpvar__in_2[1024*1024], __dpvar__in_3[1024*1024], __dpvar__out_0[1024*1024], __dpvar__out_1[1024*1024], __dpvar__out_2[1024*1024], __dpvar__out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/

#pragma distributed on_cluster=0
   InitHarris(in);                                                      /*0057*/
   /* Now we run the Harris procedure */
   
   //Sobel
#pragma distributed on_cluster=0
   SobelX(Gx, in);                                                      /*0061*/
#pragma distributed on_cluster=1
   SobelY(Gy, in);                                                      /*0062*/
   
   //Multiply
#pragma distributed on_cluster=0
   MultiplY(Ixx, Gx, Gx);                                               /*0065*/
#pragma distributed on_cluster=1
   MultiplY(Iyy, Gy, Gy);                                               /*0066*/
#pragma distributed on_cluster=2
   MultiplY(Ixy, Gx, Gy);                                               /*0067*/
   
   //Gauss
#pragma distributed on_cluster=0
   Gauss(Sxx, Ixx);                                                     /*0070*/
#pragma distributed on_cluster=1
   Gauss(Syy, Iyy);                                                     /*0071*/
#pragma distributed on_cluster=2
   Gauss(Sxy, Ixy);                                                     /*0072*/
   
   //Coarsity
#pragma distributed on_cluster=0
   CoarsitY(out, Sxx, Syy, Sxy);                                        /*0075*/
}

COPY_VALUE_OF_WRITE

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __dpvar__Gx_0[1024*1024], __dpvar__Gx_1[1024*1024], __dpvar__Gx_2[1024*1024], __dpvar__Gx_3[1024*1024], __dpvar__Gy_0[1024*1024], __dpvar__Gy_1[1024*1024], __dpvar__Gy_2[1024*1024], __dpvar__Gy_3[1024*1024], __dpvar__Ixx_0[1024*1024], __dpvar__Ixx_1[1024*1024], __dpvar__Ixx_2[1024*1024], __dpvar__Ixx_3[1024*1024], __dpvar__Iyy_0[1024*1024], __dpvar__Iyy_1[1024*1024], __dpvar__Iyy_2[1024*1024], __dpvar__Iyy_3[1024*1024], __dpvar__Ixy_0[1024*1024], __dpvar__Ixy_1[1024*1024], __dpvar__Ixy_2[1024*1024], __dpvar__Ixy_3[1024*1024], __dpvar__Sxx_0[1024*1024], __dpvar__Sxx_1[1024*1024], __dpvar__Sxx_2[1024*1024], __dpvar__Sxx_3[1024*1024], __dpvar__Sxy_0[1024*1024], __dpvar__Sxy_1[1024*1024], __dpvar__Sxy_2[1024*1024], __dpvar__Sxy_3[1024*1024], __dpvar__Syy_0[1024*1024], __dpvar__Syy_1[1024*1024], __dpvar__Syy_2[1024*1024], __dpvar__Syy_3[1024*1024], __dpvar__in_0[1024*1024], __dpvar__in_1[1024*1024], __dpvar__in_2[1024*1024], __dpvar__in_3[1024*1024], __dpvar__out_0[1024*1024], __dpvar__out_1[1024*1024], __dpvar__out_2[1024*1024], __dpvar__out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/
#pragma distributed on_cluster=0
   {

      InitHarris(in);                                                   /*0057*/
      __dpvar__in_0[*] = in[*];
      __dpvar__in_1[*] = in[*];
      __dpvar__in_2[*] = in[*];
      __dpvar__in_3[*] = in[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(Gx, in);                                                   /*0061*/
      __dpvar__Gx_0[*] = Gx[*];
      __dpvar__Gx_1[*] = Gx[*];
      __dpvar__Gx_2[*] = Gx[*];
      __dpvar__Gx_3[*] = Gx[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(Gy, in);                                                   /*0062*/
      __dpvar__Gy_0[*] = Gy[*];
      __dpvar__Gy_1[*] = Gy[*];
      __dpvar__Gy_2[*] = Gy[*];
      __dpvar__Gy_3[*] = Gy[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(Ixx, Gx, Gx);                                            /*0065*/
      __dpvar__Ixx_0[*] = Ixx[*];
      __dpvar__Ixx_1[*] = Ixx[*];
      __dpvar__Ixx_2[*] = Ixx[*];
      __dpvar__Ixx_3[*] = Ixx[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(Iyy, Gy, Gy);                                            /*0066*/
      __dpvar__Iyy_0[*] = Iyy[*];
      __dpvar__Iyy_1[*] = Iyy[*];
      __dpvar__Iyy_2[*] = Iyy[*];
      __dpvar__Iyy_3[*] = Iyy[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(Ixy, Gx, Gy);                                            /*0067*/
      __dpvar__Ixy_0[*] = Ixy[*];
      __dpvar__Ixy_1[*] = Ixy[*];
      __dpvar__Ixy_2[*] = Ixy[*];
      __dpvar__Ixy_3[*] = Ixy[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(Sxx, Ixx);                                                  /*0070*/
      __dpvar__Sxx_0[*] = Sxx[*];
      __dpvar__Sxx_1[*] = Sxx[*];
      __dpvar__Sxx_2[*] = Sxx[*];
      __dpvar__Sxx_3[*] = Sxx[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(Syy, Iyy);                                                  /*0071*/
      __dpvar__Syy_0[*] = Syy[*];
      __dpvar__Syy_1[*] = Syy[*];
      __dpvar__Syy_2[*] = Syy[*];
      __dpvar__Syy_3[*] = Syy[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(Sxy, Ixy);                                                  /*0072*/
      __dpvar__Sxy_0[*] = Sxy[*];
      __dpvar__Sxy_1[*] = Sxy[*];
      __dpvar__Sxy_2[*] = Sxy[*];
      __dpvar__Sxy_3[*] = Sxy[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(out, Sxx, Syy, Sxy);                                     /*0075*/
      __dpvar__out_0[*] = out[*];
      __dpvar__out_1[*] = out[*];
      __dpvar__out_2[*] = out[*];
      __dpvar__out_3[*] = out[*];
   }
}

ELIMINATE_ORIGINAL_VARIABLES

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __dpvar__Gx_0[1024*1024], __dpvar__Gx_1[1024*1024], __dpvar__Gx_2[1024*1024], __dpvar__Gx_3[1024*1024], __dpvar__Gy_0[1024*1024], __dpvar__Gy_1[1024*1024], __dpvar__Gy_2[1024*1024], __dpvar__Gy_3[1024*1024], __dpvar__Ixx_0[1024*1024], __dpvar__Ixx_1[1024*1024], __dpvar__Ixx_2[1024*1024], __dpvar__Ixx_3[1024*1024], __dpvar__Iyy_0[1024*1024], __dpvar__Iyy_1[1024*1024], __dpvar__Iyy_2[1024*1024], __dpvar__Iyy_3[1024*1024], __dpvar__Ixy_0[1024*1024], __dpvar__Ixy_1[1024*1024], __dpvar__Ixy_2[1024*1024], __dpvar__Ixy_3[1024*1024], __dpvar__Sxx_0[1024*1024], __dpvar__Sxx_1[1024*1024], __dpvar__Sxx_2[1024*1024], __dpvar__Sxx_3[1024*1024], __dpvar__Sxy_0[1024*1024], __dpvar__Sxy_1[1024*1024], __dpvar__Sxy_2[1024*1024], __dpvar__Sxy_3[1024*1024], __dpvar__Syy_0[1024*1024], __dpvar__Syy_1[1024*1024], __dpvar__Syy_2[1024*1024], __dpvar__Syy_3[1024*1024], __dpvar__in_0[1024*1024], __dpvar__in_1[1024*1024], __dpvar__in_2[1024*1024], __dpvar__in_3[1024*1024], __dpvar__out_0[1024*1024], __dpvar__out_1[1024*1024], __dpvar__out_2[1024*1024], __dpvar__out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/
#pragma distributed on_cluster=0
   {

      InitHarris(__dpvar__in_0);                                        /*0057*/
      __dpvar__in_0[*] = __dpvar__in_0[*];
      __dpvar__in_1[*] = __dpvar__in_0[*];
      __dpvar__in_2[*] = __dpvar__in_0[*];
      __dpvar__in_3[*] = __dpvar__in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__dpvar__Gx_0, __dpvar__in_0);                             /*0061*/
      __dpvar__Gx_0[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_1[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_2[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_3[*] = __dpvar__Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__dpvar__Gy_1, __dpvar__in_1);                             /*0062*/
      __dpvar__Gy_0[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_1[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_2[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_3[*] = __dpvar__Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__dpvar__Ixx_0, __dpvar__Gx_0, __dpvar__Gx_0);           /*0065*/
      __dpvar__Ixx_0[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_1[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_2[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_3[*] = __dpvar__Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__dpvar__Iyy_1, __dpvar__Gy_1, __dpvar__Gy_1);           /*0066*/
      __dpvar__Iyy_0[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_1[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_2[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_3[*] = __dpvar__Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__dpvar__Ixy_2, __dpvar__Gx_2, __dpvar__Gy_2);           /*0067*/
      __dpvar__Ixy_0[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_1[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_2[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_3[*] = __dpvar__Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__dpvar__Sxx_0, __dpvar__Ixx_0);                            /*0070*/
      __dpvar__Sxx_0[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_1[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_2[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_3[*] = __dpvar__Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__dpvar__Syy_1, __dpvar__Iyy_1);                            /*0071*/
      __dpvar__Syy_0[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_1[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_2[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_3[*] = __dpvar__Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__dpvar__Sxy_2, __dpvar__Ixy_2);                            /*0072*/
      __dpvar__Sxy_0[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_1[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_2[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_3[*] = __dpvar__Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__dpvar__out_0, __dpvar__Sxx_0, __dpvar__Syy_0, __dpvar__Sxy_0);        /*0075*/
      __dpvar__out_0[*] = __dpvar__out_0[*];
      __dpvar__out_1[*] = __dpvar__out_0[*];
      __dpvar__out_2[*] = __dpvar__out_0[*];
      __dpvar__out_3[*] = __dpvar__out_0[*];
   }
}

CLEAN_DECLARATIONS

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __dpvar__Gx_0[1024*1024], __dpvar__Gx_1[1024*1024], __dpvar__Gx_2[1024*1024], __dpvar__Gx_3[1024*1024], __dpvar__Gy_0[1024*1024], __dpvar__Gy_1[1024*1024], __dpvar__Gy_2[1024*1024], __dpvar__Gy_3[1024*1024], __dpvar__Ixx_0[1024*1024], __dpvar__Ixx_1[1024*1024], __dpvar__Ixx_2[1024*1024], __dpvar__Ixx_3[1024*1024], __dpvar__Iyy_0[1024*1024], __dpvar__Iyy_1[1024*1024], __dpvar__Iyy_2[1024*1024], __dpvar__Iyy_3[1024*1024], __dpvar__Ixy_0[1024*1024], __dpvar__Ixy_1[1024*1024], __dpvar__Ixy_2[1024*1024], __dpvar__Ixy_3[1024*1024], __dpvar__Sxx_0[1024*1024], __dpvar__Sxx_1[1024*1024], __dpvar__Sxx_2[1024*1024], __dpvar__Sxx_3[1024*1024], __dpvar__Sxy_0[1024*1024], __dpvar__Sxy_1[1024*1024], __dpvar__Sxy_2[1024*1024], __dpvar__Sxy_3[1024*1024], __dpvar__Syy_0[1024*1024], __dpvar__Syy_1[1024*1024], __dpvar__Syy_2[1024*1024], __dpvar__Syy_3[1024*1024], __dpvar__in_0[1024*1024], __dpvar__in_1[1024*1024], __dpvar__in_2[1024*1024], __dpvar__in_3[1024*1024], __dpvar__out_0[1024*1024], __dpvar__out_1[1024*1024], __dpvar__out_2[1024*1024], __dpvar__out_3[1024*1024];
#pragma distributed on_cluster=0
   {

      InitHarris(__dpvar__in_0);                                        /*0057*/
      __dpvar__in_0[*] = __dpvar__in_0[*];
      __dpvar__in_1[*] = __dpvar__in_0[*];
      __dpvar__in_2[*] = __dpvar__in_0[*];
      __dpvar__in_3[*] = __dpvar__in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__dpvar__Gx_0, __dpvar__in_0);                             /*0061*/
      __dpvar__Gx_0[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_1[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_2[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_3[*] = __dpvar__Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__dpvar__Gy_1, __dpvar__in_1);                             /*0062*/
      __dpvar__Gy_0[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_1[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_2[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_3[*] = __dpvar__Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__dpvar__Ixx_0, __dpvar__Gx_0, __dpvar__Gx_0);           /*0065*/
      __dpvar__Ixx_0[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_1[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_2[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_3[*] = __dpvar__Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__dpvar__Iyy_1, __dpvar__Gy_1, __dpvar__Gy_1);           /*0066*/
      __dpvar__Iyy_0[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_1[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_2[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_3[*] = __dpvar__Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__dpvar__Ixy_2, __dpvar__Gx_2, __dpvar__Gy_2);           /*0067*/
      __dpvar__Ixy_0[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_1[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_2[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_3[*] = __dpvar__Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__dpvar__Sxx_0, __dpvar__Ixx_0);                            /*0070*/
      __dpvar__Sxx_0[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_1[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_2[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_3[*] = __dpvar__Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__dpvar__Syy_1, __dpvar__Iyy_1);                            /*0071*/
      __dpvar__Syy_0[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_1[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_2[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_3[*] = __dpvar__Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__dpvar__Sxy_2, __dpvar__Ixy_2);                            /*0072*/
      __dpvar__Sxy_0[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_1[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_2[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_3[*] = __dpvar__Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__dpvar__out_0, __dpvar__Sxx_0, __dpvar__Syy_0, __dpvar__Sxy_0);        /*0075*/
      __dpvar__out_0[*] = __dpvar__out_0[*];
      __dpvar__out_1[*] = __dpvar__out_0[*];
      __dpvar__out_2[*] = __dpvar__out_0[*];
      __dpvar__out_3[*] = __dpvar__out_0[*];
   }
}

IDENTITY_ELIMINATION

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __dpvar__Gx_0[1024*1024], __dpvar__Gx_1[1024*1024], __dpvar__Gx_2[1024*1024], __dpvar__Gx_3[1024*1024], __dpvar__Gy_0[1024*1024], __dpvar__Gy_1[1024*1024], __dpvar__Gy_2[1024*1024], __dpvar__Gy_3[1024*1024], __dpvar__Ixx_0[1024*1024], __dpvar__Ixx_1[1024*1024], __dpvar__Ixx_2[1024*1024], __dpvar__Ixx_3[1024*1024], __dpvar__Iyy_0[1024*1024], __dpvar__Iyy_1[1024*1024], __dpvar__Iyy_2[1024*1024], __dpvar__Iyy_3[1024*1024], __dpvar__Ixy_0[1024*1024], __dpvar__Ixy_1[1024*1024], __dpvar__Ixy_2[1024*1024], __dpvar__Ixy_3[1024*1024], __dpvar__Sxx_0[1024*1024], __dpvar__Sxx_1[1024*1024], __dpvar__Sxx_2[1024*1024], __dpvar__Sxx_3[1024*1024], __dpvar__Sxy_0[1024*1024], __dpvar__Sxy_1[1024*1024], __dpvar__Sxy_2[1024*1024], __dpvar__Sxy_3[1024*1024], __dpvar__Syy_0[1024*1024], __dpvar__Syy_1[1024*1024], __dpvar__Syy_2[1024*1024], __dpvar__Syy_3[1024*1024], __dpvar__in_0[1024*1024], __dpvar__in_1[1024*1024], __dpvar__in_2[1024*1024], __dpvar__in_3[1024*1024], __dpvar__out_0[1024*1024], __dpvar__out_1[1024*1024], __dpvar__out_2[1024*1024], __dpvar__out_3[1024*1024];
#pragma distributed on_cluster=0
   {

      InitHarris(__dpvar__in_0);                                        /*0057*/

      __dpvar__in_1[*] = __dpvar__in_0[*];
      __dpvar__in_2[*] = __dpvar__in_0[*];
      __dpvar__in_3[*] = __dpvar__in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__dpvar__Gx_0, __dpvar__in_0);                             /*0061*/

      __dpvar__Gx_1[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_2[*] = __dpvar__Gx_0[*];
      __dpvar__Gx_3[*] = __dpvar__Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__dpvar__Gy_1, __dpvar__in_1);                             /*0062*/
      __dpvar__Gy_0[*] = __dpvar__Gy_1[*];

      __dpvar__Gy_2[*] = __dpvar__Gy_1[*];
      __dpvar__Gy_3[*] = __dpvar__Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__dpvar__Ixx_0, __dpvar__Gx_0, __dpvar__Gx_0);           /*0065*/

      __dpvar__Ixx_1[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_2[*] = __dpvar__Ixx_0[*];
      __dpvar__Ixx_3[*] = __dpvar__Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__dpvar__Iyy_1, __dpvar__Gy_1, __dpvar__Gy_1);           /*0066*/
      __dpvar__Iyy_0[*] = __dpvar__Iyy_1[*];

      __dpvar__Iyy_2[*] = __dpvar__Iyy_1[*];
      __dpvar__Iyy_3[*] = __dpvar__Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__dpvar__Ixy_2, __dpvar__Gx_2, __dpvar__Gy_2);           /*0067*/
      __dpvar__Ixy_0[*] = __dpvar__Ixy_2[*];
      __dpvar__Ixy_1[*] = __dpvar__Ixy_2[*];

      __dpvar__Ixy_3[*] = __dpvar__Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__dpvar__Sxx_0, __dpvar__Ixx_0);                            /*0070*/

      __dpvar__Sxx_1[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_2[*] = __dpvar__Sxx_0[*];
      __dpvar__Sxx_3[*] = __dpvar__Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__dpvar__Syy_1, __dpvar__Iyy_1);                            /*0071*/
      __dpvar__Syy_0[*] = __dpvar__Syy_1[*];

      __dpvar__Syy_2[*] = __dpvar__Syy_1[*];
      __dpvar__Syy_3[*] = __dpvar__Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__dpvar__Sxy_2, __dpvar__Ixy_2);                            /*0072*/
      __dpvar__Sxy_0[*] = __dpvar__Sxy_2[*];
      __dpvar__Sxy_1[*] = __dpvar__Sxy_2[*];

      __dpvar__Sxy_3[*] = __dpvar__Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__dpvar__out_0, __dpvar__Sxx_0, __dpvar__Syy_0, __dpvar__Sxy_0);        /*0075*/

      __dpvar__out_1[*] = __dpvar__out_0[*];
      __dpvar__out_2[*] = __dpvar__out_0[*];
      __dpvar__out_3[*] = __dpvar__out_0[*];
   }
}
