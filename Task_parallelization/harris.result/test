// OMP style
void main(int argc, char *argv[])
{
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
         InitHarris(in);
      }
#pragma omp single
      {
#pragma omp task
         {
            /* Now we run the Harris procedure */
            //Sobel
            SobelX(Gx, in);
         }
#pragma omp task
         {
            SobelY(Gy, in);
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            //Multiply
            MultiplY(Ixx, Gx, Gx);
         }
#pragma omp task
         {
            MultiplY(Iyy, Gy, Gy);
         }
#pragma omp task
         {
            MultiplY(Ixy, Gx, Gy);
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            //Gauss
            Gauss(Sxx, Ixx);
         }
#pragma omp task
         {
            Gauss(Syy, Iyy);
         }
#pragma omp task
         {
            Gauss(Sxy, Ixy);
         }
      }
#pragma omp single
      {
         //Coarsity
         CoarsitY(out, Sxx, Syy, Sxy);
      }
   }
}
// MPI style
void main(int argc, char *argv[])
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      int autogen_0_0, autogen_0_0_0, autogen_0_0_1, autogen_0_0_2, autogen_0_0_3, autogen_0_0_4, autogen_0_0_5, autogen_0_0_6, autogen_0_0_7, autogen_0_0_8, autogen_0_0_9, autogen_0_0_10, autogen_0_0_11, autogen_0_0_12, autogen_0_0_13, autogen_0_0_14, autogen_0_0_15, autogen_0_0_16, autogen_0_0_17, autogen_0_0_18;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         InitHarris(in);
         for(autogen_0_0_18 = 0; autogen_0_0_18 <= 1048575; autogen_0_0_18 += 1)
            MPI_Isend(&in[autogen_0_0_18], 1, MPI_FLOAT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         /* Now we run the Harris procedure */
         //Sobel
         SobelX(Gx, in);
         for(autogen_0_0_17 = 1025; autogen_0_0_17 <= 1047550; autogen_0_0_17 += 1)
            MPI_Isend(&Gx[autogen_0_0_17], 1, MPI_FLOAT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==1) {
         for(autogen_0_0_15 = 0; autogen_0_0_15 <= 1048575; autogen_0_0_15 += 1)
            MPI_Recv(&in[autogen_0_0_15], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         SobelY(Gy, in);
         for(autogen_0_0_16 = 1025; autogen_0_0_16 <= 1047550; autogen_0_0_16 += 1)
            MPI_Isend(&Gy[autogen_0_0_16], 1, MPI_FLOAT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0)
         //Multiply
         MultiplY(Ixx, Gx, Gx);
      if (rank0==1)
         MultiplY(Iyy, Gy, Gy);
      if (rank0==2) {
         for(autogen_0_0_14 = 1025; autogen_0_0_14 <= 1047550; autogen_0_0_14 += 1)
            MPI_Recv(&Gy[autogen_0_0_14], 1, MPI_FLOAT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(autogen_0_0_13 = 1025; autogen_0_0_13 <= 1047550; autogen_0_0_13 += 1)
            MPI_Recv(&Gx[autogen_0_0_13], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MultiplY(Ixy, Gx, Gy);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0)
         //Gauss
         Gauss(Sxx, Ixx);
      if (rank0==1) {
         Gauss(Syy, Iyy);
         for(autogen_0_0_12 = 1025; autogen_0_0_12 <= 1047550; autogen_0_0_12 += 1)
            MPI_Isend(&Syy[autogen_0_0_12], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==2) {
         Gauss(Sxy, Ixy);
         for(autogen_0_0_11 = 1025; autogen_0_0_11 <= 1047550; autogen_0_0_11 += 1)
            MPI_Isend(&Sxy[autogen_0_0_11], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         for(autogen_0_0_10 = 1025; autogen_0_0_10 <= 1047550; autogen_0_0_10 += 1)
            MPI_Recv(&Sxy[autogen_0_0_10], 1, MPI_FLOAT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(autogen_0_0_9 = 1025; autogen_0_0_9 <= 1047550; autogen_0_0_9 += 1)
            MPI_Recv(&Syy[autogen_0_0_9], 1, MPI_FLOAT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         //Coarsity
         CoarsitY(out, Sxx, Syy, Sxy);
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();
}
