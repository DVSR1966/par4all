// MPI style
int main()
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      int size, a[size], b[size], i, bi, j, bj, autogen_0_0, autogen_0_0_0, autogen_0_0_1, autogen_0_0_2, autogen_0_0_3, autogen_0_0_4, autogen_0_0_5, autogen_0_0_6, autogen_0_0_7, autogen_0_0_8, autogen_0_0_9, autogen_0_0_10, autogen_0_0_11, autogen_0_0_12;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         scanf("%d", &bi);
         MPI_Isend(&bi, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bi, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==2) {
         size = 100;
         MPI_Isend(&size, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         scanf("%d", &bj);
         MPI_Isend(&bj, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bj, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==1) {
         MPI_Recv(&bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= bi-1; i += 1)
            a[i] = i;
         for(autogen_0_0_11 = 0; autogen_0_0_11 <= MIN(bi-1, bj-1); autogen_0_0_11 += 1)
            MPI_Isend(&a[autogen_0_0_11], 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         for(autogen_0_0_12 = bj; autogen_0_0_12 <= bi-1; autogen_0_0_12 += 1)
            MPI_Isend(&a[autogen_0_0_12], 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==2) {
         MPI_Recv(&bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = bi; i <= size-1; i += 1)
            a[i] = i;
         for(autogen_0_0_10 = bi; autogen_0_0_10 <= bj-1; autogen_0_0_10 += 1)
            MPI_Isend(&a[autogen_0_0_10], 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         for(autogen_0_0_8 = bi; autogen_0_0_8 <= bj-1; autogen_0_0_8 += 1)
            MPI_Recv(&a[autogen_0_0_8], 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(autogen_0_0_7 = 0; autogen_0_0_7 <= MIN(bi-1, bj-1); autogen_0_0_7 += 1)
            MPI_Recv(&a[autogen_0_0_7], 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = 0; j <= bj-1; j += 1)
            b[j] = 2*a[j];
         for(autogen_0_0_9 = 0; autogen_0_0_9 <= bj-1; autogen_0_0_9 += 1)
            MPI_Isend(&b[autogen_0_0_9], 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      if (rank0==1) {
         MPI_Recv(&size, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(&bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "./communications03.c", 22, (const char *) 0);
      }
      if (rank0==2) {
         for(autogen_0_0_6 = bj; autogen_0_0_6 <= bi-1; autogen_0_0_6 += 1)
            MPI_Recv(&a[autogen_0_0_6], 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(&bj, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = bj; j <= size-1; j += 1)
            b[j] = 2*a[j];
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==2) {
         for(autogen_0_0_5 = 0; autogen_0_0_5 <= bj-1; autogen_0_0_5 += 1)
            MPI_Recv(&b[autogen_0_0_5], 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(j = 0; j <= size-1; j += 1)
            printf("%d\n", b[j]);
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();
}
// OMP style
int main()
{
   //PIPS generated variable
   int size, a[size], b[size], i, bi, j, bj;
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
#pragma omp task
         {
            scanf("%d", &bi);
         }
#pragma omp task
         {
            size = 100;
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            scanf("%d", &bj);
         }
#pragma omp task
         {
            for(i = 0; i <= bi-1; i += 1)
               a[i] = i;
         }
#pragma omp task
         {
            for(i = bi; i <= size-1; i += 1)
               a[i] = i;
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            for(j = 0; j <= bj-1; j += 1)
               b[j] = 2*a[j];
         }
#pragma omp task
         {
            0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "./communications03.c", 22, (const char *) 0);
         }
#pragma omp task
         {
            for(j = bj; j <= size-1; j += 1)
               b[j] = 2*a[j];
         }
      }
#pragma omp single
      {
         for(j = 0; j <= size-1; j += 1)
            printf("%d\n", b[j]);
      }
   }
}
