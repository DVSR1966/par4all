// MPI style
int main()
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      int size, a[size][size], b[size][size], i, bi, j, bj, autogen_0_1, autogen_0_0, autogen_0_1_0, autogen_0_0_0, autogen_0_1_1, autogen_0_0_1, autogen_0_1_2, autogen_0_0_2, autogen_0_1_3, autogen_0_0_3, autogen_0_1_4, autogen_0_0_4, autogen_0_1_5, autogen_0_0_5, autogen_0_1_6, autogen_0_0_6, autogen_0_1_7, autogen_0_0_7, autogen_0_1_8, autogen_0_0_8, autogen_0_1_9, autogen_0_0_9, autogen_0_1_10, autogen_0_0_10, autogen_0_1_11, autogen_0_0_11, autogen_0_1_12, autogen_0_0_12, autogen_0_1_13, autogen_0_0_13, autogen_0_1_14, autogen_0_0_14, autogen_0_1_15, autogen_0_0_15, autogen_0_1_16, autogen_0_0_16, autogen_0_1_17, autogen_0_0_17, autogen_0_1_18, autogen_0_0_18, autogen_0_1_19, autogen_0_0_19, autogen_0_1_20, autogen_0_0_20, autogen_0_1_21, autogen_0_0_21, autogen_0_1_22, autogen_0_0_22, autogen_0_1_23, autogen_0_0_23, autogen_0_1_24, autogen_0_0_24, autogen_0_1_25, autogen_0_0_25, autogen_0_1_26, autogen_0_0_26;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         scanf("%d", &size);
         MPI_Isend(&size, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&size, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&size, 1, MPI_INT, 3, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&size, 1, MPI_INT, 4, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&size, 1, MPI_INT, 5, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         scanf("%d", &bi);
         MPI_Isend(&bi, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bi, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bi, 1, MPI_INT, 3, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bi, 1, MPI_INT, 4, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bi, 1, MPI_INT, 5, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         scanf("%d", &bj);
         MPI_Isend(&bj, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bj, 1, MPI_INT, 2, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bj, 1, MPI_INT, 3, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bj, 1, MPI_INT, 4, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
         MPI_Isend(&bj, 1, MPI_INT, 5, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0)
         0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "./communications05.c", 23, (const char *) 0);
      if (rank0==1) {
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         
         /* Initialization of a with four tasks */
         for(i = 0; i <= bi-1; i += 1)
            for(j = 0; j <= bj-1; j += 1)
               a[i][j] = i*size+j;
      }
      if (rank0==2) {
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= bi-1; i += 1)
            for(j = bj; j <= size-1; j += 1)
               a[i][j] = i*size+j;
         for(autogen_0_0_26 = 0; autogen_0_0_26 <= bi-1; autogen_0_0_26 += 1)
            for(autogen_0_1_26 = bj; autogen_0_1_26 <= size-1; autogen_0_1_26 += 1)
               ;
      }
      if (rank0==4) {
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = bi; i <= size-1; i += 1)
            for(j = 0; j <= bj-1; j += 1)
               a[i][j] = i*size+j;
         for(autogen_0_0_25 = bi; autogen_0_0_25 <= size-1; autogen_0_0_25 += 1)
            for(autogen_0_1_25 = 0; autogen_0_1_25 <= bj-1; autogen_0_1_25 += 1)
               ;
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = bi; i <= size-1; i += 1)
            for(j = bj; j <= size-1; j += 1)
               a[i][j] = i*size+j;
         for(autogen_0_0_24 = bi; autogen_0_0_24 <= size-1; autogen_0_0_24 += 1)
            for(autogen_0_1_24 = bj; autogen_0_1_24 <= size-1; autogen_0_1_24 += 1)
               ;
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==1) {
         MPI_Recv(&bi, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         
         /* Computation of b with four tasks perfectly aligned on the
              previous four ones */
         for(i = 0; i <= bi-1; i += 1)
            for(j = 0; j <= bj-1; j += 1)
               b[i][j] = 2*a[i][j];
         for(autogen_0_0_23 = 0; autogen_0_0_23 <= bi-1; autogen_0_0_23 += 1)
            for(autogen_0_1_23 = 0; autogen_0_1_23 <= bj-1; autogen_0_1_23 += 1)
               ;
      }
      if (rank0==2) {
         for(autogen_0_0_21 = bi; autogen_0_0_21 <= size-1; autogen_0_0_21 += 1)
            for(autogen_0_1_21 = bj; autogen_0_1_21 <= size-1; autogen_0_1_21 += 1)
               ;
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = bi; i <= size-1; i += 1)
            for(j = bj; j <= size-1; j += 1)
               b[i][j] = 2*a[i][j];
         for(autogen_0_0_22 = bi; autogen_0_0_22 <= size-1; autogen_0_0_22 += 1)
            for(autogen_0_1_22 = bj; autogen_0_1_22 <= size-1; autogen_0_1_22 += 1)
               ;
      }
      if (rank0==3) {
         for(autogen_0_0_19 = 0; autogen_0_0_19 <= bi-1; autogen_0_0_19 += 1)
            for(autogen_0_1_19 = bj; autogen_0_1_19 <= size-1; autogen_0_1_19 += 1)
               ;
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= bi-1; i += 1)
            for(j = bj; j <= size-1; j += 1)
               b[i][j] = 2*a[i][j];
         for(autogen_0_0_20 = 0; autogen_0_0_20 <= bi-1; autogen_0_0_20 += 1)
            for(autogen_0_1_20 = bj; autogen_0_1_20 <= size-1; autogen_0_1_20 += 1)
               ;
      }
      if (rank0==5) {
         for(autogen_0_0_17 = bi; autogen_0_0_17 <= size-1; autogen_0_0_17 += 1)
            for(autogen_0_1_17 = 0; autogen_0_1_17 <= bj-1; autogen_0_1_17 += 1)
               ;
         MPI_Recv(&size, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = bi; i <= size-1; i += 1)
            for(j = 0; j <= bj-1; j += 1)
               b[i][j] = 2*a[i][j];
         for(autogen_0_0_18 = bi; autogen_0_0_18 <= size-1; autogen_0_0_18 += 1)
            for(autogen_0_1_18 = 0; autogen_0_1_18 <= bj-1; autogen_0_1_18 += 1)
               ;
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         for(autogen_0_0_16 = bi; autogen_0_0_16 <= size-1; autogen_0_0_16 += 1)
            for(autogen_0_1_16 = 0; autogen_0_1_16 <= bj-1; autogen_0_1_16 += 1)
               ;
         for(autogen_0_0_15 = 0; autogen_0_0_15 <= bi-1; autogen_0_0_15 += 1)
            for(autogen_0_1_15 = bj; autogen_0_1_15 <= size-1; autogen_0_1_15 += 1)
               ;
         for(autogen_0_0_14 = bi; autogen_0_0_14 <= size-1; autogen_0_0_14 += 1)
            for(autogen_0_1_14 = bj; autogen_0_1_14 <= size-1; autogen_0_1_14 += 1)
               ;
         for(autogen_0_0_13 = 0; autogen_0_0_13 <= bi-1; autogen_0_0_13 += 1)
            for(autogen_0_1_13 = 0; autogen_0_1_13 <= bj-1; autogen_0_1_13 += 1)
               ;

         for(i = 0; i <= size-1; i += 1)
            for(j = 0; j <= size-1; j += 1)
               printf("%d\n", b[i][j]);
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();

   return 0;
}
// OMP style
int main()
{
   //PIPS generated variable
   int size, a[size][size], b[size][size], i, bi, j, bj;
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
         scanf("%d", &size);
      }
#pragma omp single
      {
         scanf("%d", &bi);
      }
#pragma omp single
      {
         scanf("%d", &bj);
      }
#pragma omp single
      {
#pragma omp task
         {
            0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "./communications05.c", 23, (const char *) 0);
         }
#pragma omp task
         {
            
            /* Initialization of a with four tasks */
            for(i = 0; i <= bi-1; i += 1)
               for(j = 0; j <= bj-1; j += 1)
                  a[i][j] = i*size+j;
         }
#pragma omp task
         {
            for(i = 0; i <= bi-1; i += 1)
               for(j = bj; j <= size-1; j += 1)
                  a[i][j] = i*size+j;
         }
#pragma omp task
         {
            for(i = bi; i <= size-1; i += 1)
               for(j = 0; j <= bj-1; j += 1)
                  a[i][j] = i*size+j;
            for(i = bi; i <= size-1; i += 1)
               for(j = bj; j <= size-1; j += 1)
                  a[i][j] = i*size+j;
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            
            /* Computation of b with four tasks perfectly aligned on the
                 previous four ones */
            for(i = 0; i <= bi-1; i += 1)
               for(j = 0; j <= bj-1; j += 1)
                  b[i][j] = 2*a[i][j];
         }
#pragma omp task
         {
            for(i = bi; i <= size-1; i += 1)
               for(j = bj; j <= size-1; j += 1)
                  b[i][j] = 2*a[i][j];
         }
#pragma omp task
         {
            for(i = 0; i <= bi-1; i += 1)
               for(j = bj; j <= size-1; j += 1)
                  b[i][j] = 2*a[i][j];
         }
#pragma omp task
         {
            for(i = bi; i <= size-1; i += 1)
               for(j = 0; j <= bj-1; j += 1)
                  b[i][j] = 2*a[i][j];
         }
      }
#pragma omp single
      {

         for(i = 0; i <= size-1; i += 1)
            for(j = 0; j <= size-1; j += 1)
               printf("%d\n", b[i][j]);
      }
   }

   return 0;
}
