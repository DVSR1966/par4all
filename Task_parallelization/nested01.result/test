// MPI style
void main(int argc, char *argv[])
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      unsigned int i;
      //PIPS generated variable
      double A[100], B[100], C[100], D[100];
      //PIPS generated variable
      int N;
      //PIPS generated variable
      double a, b;
      //PIPS generated variable
      int autogen_0_0, autogen_0_0_0, autogen_0_0_5, autogen_0_0_6;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         N = 100;
         MPI_Isend(&N, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0)
         for(i = 0; i <= N-1; i += 1) {






            B[i] = 3;
            autogen_0_0_9 = i;



            A[i] = 5;
            autogen_0_0_7 = i;

            autogen_0_0_8 = i;

            autogen_0_0_10 = i;

         }
      if (rank0==1) {
         MPI_Recv(&N, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= N-1; i += 1)
            C[i] = 5;
         for(autogen_0_0_6 = 0; autogen_0_0_6 <= 99; autogen_0_0_6 += 1)
            MPI_Isend(&C[autogen_0_0_6], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         for(autogen_0_0_5 = 0; autogen_0_0_5 <= 99; autogen_0_0_5 += 1)
            MPI_Recv(&C[autogen_0_0_5], 1, MPI_FLOAT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i <= N-1; i += 1)
            D[i] = A[i]+B[i]+C[i];
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();
}
// OMP style
void main(int argc, char *argv[])
{
   //PIPS generated variable
   unsigned int i;
   //PIPS generated variable
   double A[100], B[100], C[100], D[100];
   //PIPS generated variable
   int N;
   //PIPS generated variable
   double a, b;
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
         N = 100;
      }
#pragma omp single
      {
#pragma omp task
         {
            for(i = 0; i <= N-1; i += 1) {
#pragma omp task
               {
                  B[i] = 3;
               }
#pragma omp task
               {
                  A[i] = 5;
               }
#pragma omp taskwait 

            }
         }
#pragma omp task
         {
            for(i = 0; i <= N-1; i += 1)
               C[i] = 5;
         }
      }
#pragma omp single
      {
         for(i = 0; i <= N-1; i += 1)
            D[i] = A[i]+B[i]+C[i];
      }
   }
}
