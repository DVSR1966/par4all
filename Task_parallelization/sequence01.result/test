// OMP style
void main(int argc, char *argv[])
{
   //PIPS generated variable
   unsigned int i, N;
   //PIPS generated variable
   double A[10], B[10], C[10];
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
         N = 10;
      }
#pragma omp single
      {
#pragma omp task
         {
            for(i = 0; i < N; i += 1)
               A[i] = 5;
         }
#pragma omp task
         {
            for(i = 0; i < N; i += 1)
               B[i] = 3;
         }
      }
#pragma omp single
      {
         for(i = 0; i < N; i += 1)
            C[i] += A[i]+B[i];
      }
   }
}
void main(int argc, char *argv[])
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      unsigned int i, N;
      //PIPS generated variable
      double A[10], B[10], C[10];
      //PIPS generated variable
      int autogen_0_0, autogen_0_0_0, autogen_0_0_1, autogen_0_0_2;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         N = 10;
         MPI_Isend(&N, 1, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0)
         for(i = 0; i < N; i += 1)
            A[i] = 5;
      if (rank0==1) {
         MPI_Recv(&N, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i < N; i += 1)
            B[i] = 3;
         for(autogen_0_0_2 = 0; autogen_0_0_2 <= 9; autogen_0_0_2 += 1)
            MPI_Isend(&B[autogen_0_0_2], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &request0);
      }
      MPI_Barrier(MPI_COMM_WORLD);
      if (rank0==0) {
         for(autogen_0_0_1 = 0; autogen_0_0_1 <= 9; autogen_0_0_1 += 1)
            MPI_Recv(&B[autogen_0_0_1], 1, MPI_FLOAT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i < N; i += 1)
            C[i] += A[i]+B[i];
      }
      MPI_Barrier(MPI_COMM_WORLD);
   }
   MPI_Finalize();
}
