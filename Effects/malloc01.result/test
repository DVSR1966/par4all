Select some options to deal with the C Language:
Parse as C:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Prettyprint the source as C, of course
Select the most precise analysis:
int main(int argc, char *argv[])
{
   int i,  j;                                                           /*0003*/
   int *a[64];                                                          /*0004*/

   for (i = 0;i<64;i++) {                                               /*0006*/
      a[i] = malloc(64*sizeof(float));                                  /*0007*/
      for (j = 0;j<64;j++)                                              /*0008*/
         a[i][j] = 0.;                                                  /*0009*/
   }

   return 0;                                                            /*0013*/
}
int main(int argc, char *argv[])
{
   int i,  j;                                                           /*0003*/
   int *a[64];                                                          /*0004*/

   for(i = 0; i <= 63; i += 1) {                                        /*0006*/
      a[i] = malloc(64*sizeof(float));                                  /*0007*/
      for(j = 0; j <= 63; j += 1)                                       /*0008*/
         a[i][j] = 0.;                                                  /*0009*/
   }

   return 0;                                                            /*0013*/
}
int main(int argc, char *argv[])
{
   int i,  j;                                                           /*0003*/
   int *a[64];                                                          /*0004*/

#pragma omp parallel for private(j)
   for(i = 0; i <= 63; i += 1) {                                        /*0006*/
      a[i] = malloc(64*sizeof(float));                                  /*0007*/
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)                                       /*0008*/
         a[i][j] = 0.;                                                  /*0009*/
   }

   return 0;                                                            /*0013*/
}
int main(int argc, char *argv[])
{
   int i,  j;                                                           /*0003*/
   int *a[64];                                                          /*0004*/

#pragma omp parallel for private(j)
   for(i = 0; i <= 63; i += 1) {                                        /*0006*/
      a[i] = malloc(64*sizeof(float));                                  /*0007*/
#pragma omp parallel for 
      for(j = 0; j <= 63; j += 1)                                       /*0008*/
         a[i][j] = 0.;                                                  /*0009*/
   }

   return 0;                                                            /*0013*/
}
