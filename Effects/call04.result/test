
Parsed code for "call04"

void call04(int n, int m, int x[n][m])
{
   int i;
   int j;

   for (i = 0;i<n;i++)
      for (j = 0;j<m;j++)
         x[i][j] = 0;
}

Code for "call04"

void call04(int n, int m, int x[n][m])
{
   int i;
   int j;

   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= m-1; j += 1)
         x[i][j] = 0;
}

Proper effects for "call04"

void call04(int n, int m, int x[n][m])
{
   int i;
   int j;
//               <must be read   >: n
//               <must be written>: i

   for(i = 0; i <= n-1; i += 1)
//               <must be read   >: m n
//               <must be written>: j
      for(j = 0; j <= m-1; j += 1)
//               <must be read   >: i j m n
//               <must be written>: x[i][j]
         x[i][j] = 0;
}

Cumulated effects for "call04"

//               <may be read    >: m
//               <may be written >: x[*][*]
//               <must be read   >: m n n
void call04(int n, int m, int x[n][m])
{
   int i;
   int j;
//               <may be read    >: i j m
//               <may be written >: j x[*][*]
//               <must be read   >: n
//               <must be written>: i

   for(i = 0; i <= n-1; i += 1)
//               <may be read    >: i j
//               <may be written >: x[*][*]
//               <must be read   >: m n
//               <must be written>: j
      for(j = 0; j <= m-1; j += 1)
//               <may be written >: x[*][*]
//               <must be read   >: i j m n
         x[i][j] = 0;
}

Proper effects for "main"

main()
{
   int d1 = 10;
   int d2 = 10;
   int y[d1][d2];
//               <must be read   >: d1 d2 y

   call04(d1, d2, y);
}

Cumulated effects for "main"

main()
{
   int d1 = 10;
   int d2 = 10;
   int y[d1][d2];
//               <must be read   >: d1 d2 y

   call04(d1, d2, y);
}

Regions for "call04"


//  <m-R-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1+1<=n, 0<=PHI2, PHI2+1<=m}>

void call04(int n, int m, int x[n][m])
{
   int i;
   int j;

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1+1<=n, 0<=PHI2, PHI2+1<=m}>


   for(i = 0; i <= n-1; i += 1)

//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-MAY-{PHI1==i, 0<=PHI2, PHI2+1<=m, 0<=i, 1+i<=n}>

      for(j = 0; j <= m-1; j += 1)

//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i, 1+i<=n, 0<=j,
//    1+j<=m}>

         x[i][j] = 0;
}

Regions for "main"

main()
{
   int d1 = 10;
   int d2 = 10;
   int y[d1][d2];

//  <d1-R-EXACT-{}>
//  <d2-R-EXACT-{}>
//  <y[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1+1<=d1, 0<=PHI2, PHI2+1<=d2}>


   call04(d1, d2, y);
}
