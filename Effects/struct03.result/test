
Parsed printed file for "struct03"

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   };
   struct four x[10];
   int i = 0;

   for (i = 0;i<10;i++) {
      x[i].un.first = 1;
      x[i].deux.second = 0;
   }
}

Proper effetcs for "struct03"

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   };
   struct four x[10];
   int i = 0;
//               <must be written>: i

   for(i = 0; i <= 9; i += 1) {
//               <must be read   >: i
//               <must be written>: x[i][1][1]
      x[i].un.first = 1;
//               <must be read   >: i
//               <must be written>: x[i][2][2]
      x[i].deux.second = 0;
   }
}

Cumulated effetcs for "struct03"

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   };
   struct four x[10];
   int i = 0;
//               <may be read    >: i
//               <may be written >: x[*][1][1] x[*][2][2]
//               <must be written>: i

   for(i = 0; i <= 9; i += 1) {
//               <may be written >: x[*][1][1]
//               <must be read   >: i
      x[i].un.first = 1;
//               <may be written >: x[*][2][2]
//               <must be read   >: i
      x[i].deux.second = 0;
   }
}

Printed files with regions

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   };
   struct four x[10];
   int i = 0;

//  <x[PHI1][PHI2][PHI3]-W-MAY-{PHI2==PHI3, 0<=PHI1, PHI1<=9, 1<=PHI2,
//    PHI2<=2}>


   for(i = 0; i <= 9; i += 1) {

//  <x[PHI1][PHI2][PHI3]-W-EXACT-{PHI1==i, PHI2==1, PHI3==1, 0<=i,
//    i<=9}>

      x[i].un.first = 1;

//  <x[PHI1][PHI2][PHI3]-W-EXACT-{PHI1==i, PHI2==2, PHI3==2, 0<=i,
//    i<=9}>

      x[i].deux.second = 0;
   }
}

Dependence graph for "struct07"


 **************** Effective Dependence Graph ****************


****************** End of Dependence Graph ******************

Printed files after parallelization

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   };
   struct four x[10];
   int i = 0;


#pragma omp parallel for 
   for(i = 0; i <= 9; i += 1)
      x[i].un.first = 1;
#pragma omp parallel for 
   for(i = 0; i <= 9; i += 1)
      x[i].deux.second = 0;
}
