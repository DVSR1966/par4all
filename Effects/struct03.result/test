
Parsed printed file for "struct03"

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   } x[10];
   int i = 0;

   for (i = 0;i<10;i++) {
      x[i].un.first = 1;
      x[i].deux.second = 0;
   }
}

Proper effetcs for "struct03"

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   } x[10];
//             <    is written>: i
   int i = 0;
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i
//             <    is written>: x[i].un.first
      x[i].un.first = 1;
//             <    is read   >: i
//             <    is written>: x[i].deux.second
      x[i].deux.second = 0;
   }
}

Cumulated effetcs for "struct03"

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   } x[10];
//             <    is written>: i
   int i = 0;
//             <may be read   >: i
//             <may be written>: x[*].deux.second x[*].un.first
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {
//             <may be written>: x[*].un.first
//             <    is read   >: i
      x[i].un.first = 1;
//             <may be written>: x[*].deux.second
//             <    is read   >: i
      x[i].deux.second = 0;
   }
}

Printed files with regions

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   } x[10];
   int i = 0;

//  <x[PHI1].un.first-W-MAY-{0<=PHI1, PHI1<=9}>
//  <x[PHI1].deux.second-W-MAY-{0<=PHI1, PHI1<=9}>


   for(i = 0; i <= 9; i += 1) {

//  <x[PHI1].un.first-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      x[i].un.first = 1;

//  <x[PHI1].deux.second-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      x[i].deux.second = 0;
   }
}

Dependence graph for "struct07"


 **************** Effective Dependence Graph ****************


****************** End of Dependence Graph ******************

Printed files after parallelization

int struct03()
{
   struct three {
      int first;
      int second;
   };
   struct four {
      struct three un;
      struct three deux;
   } x[10];
   int i = 0;

#pragma omp parallel for 
   for(i = 0; i <= 9; i += 1)
      x[i].un.first = 1;
#pragma omp parallel for 
   for(i = 0; i <= 9; i += 1)
      x[i].deux.second = 0;
}
