#
# AIPO
#
#
# compile generated freia_44
#

! initial function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t;                                                     /*0006*/
   t = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0007*/
   freia_aipo_copy(t, in);                                              /*0008*/
   freia_aipo_copy(out, t);                                             /*0009*/
   freia_common_destruct_data(t);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_44" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "9 =" [shape=circle];
  "9 =" -> "out";
  "8 =" [shape=circle];
  "8 =" -> "9 =" [label="t"];
  "in" -> "8 =";
}
// graph for dag "dag_cleaned_0" of module "freia_44" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! updated function for

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0011*/
}
#
# SPOC
#

! initial function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t;                                                     /*0006*/
   t = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0007*/
   freia_aipo_copy(t, in);                                              /*0008*/
   freia_aipo_copy(out, t);                                             /*0009*/
   freia_common_destruct_data(t);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_44" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "9 =" [shape=circle];
  "9 =" -> "out";
  "8 =" [shape=circle];
  "8 =" -> "9 =" [label="t"];
  "in" -> "8 =";
}
// graph for dag "dag_cleaned_0" of module "freia_44" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 2 copies, optimized to 0 ops and 0+1 copies
// # SPOC calls: 0

! updated function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0011*/
}

! cleaned up function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return 0;                                                            /*0011*/
}
#
# TERAPIX
#

! initial function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t;                                                     /*0006*/
   t = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0007*/
   freia_aipo_copy(t, in);                                              /*0008*/
   freia_aipo_copy(out, t);                                             /*0009*/
   freia_common_destruct_data(t);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_44" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "9 =" [shape=circle];
  "9 =" -> "out";
  "8 =" [shape=circle];
  "8 =" -> "9 =" [label="t"];
  "in" -> "8 =";
}
// graph for dag "dag_cleaned_0" of module "freia_44" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 2 copies, optimized to 0 ops and 0+1 copies

! updated function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0011*/
}

! cleaned up function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return 0;                                                            /*0011*/
}
#
# OPENCL
#

! initial function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t;                                                     /*0006*/
   t = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0007*/
   freia_aipo_copy(t, in);                                              /*0008*/
   freia_aipo_copy(out, t);                                             /*0009*/
   freia_common_destruct_data(t);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_44" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "9 =" [shape=circle];
  "9 =" -> "out";
  "8 =" [shape=circle];
  "8 =" -> "9 =" [label="t"];
  "in" -> "8 =";
}
// graph for dag "dag_cleaned_0" of module "freia_44" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"

// FREIA OpenCL runtime helper
extern freia_status freia_op_compile_kernel(
   const char*, const char*, const char*, cl_kernel *);

// dag 0: 0 ops and 2 copies, optimized to 0 ops and 0+1 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_44

// opencl for dag 0

! updated function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0011*/
}

! cleaned up function

freia_status freia_44(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return 0;                                                            /*0011*/
}
#
# FREIA COMPILATION DONE
#

