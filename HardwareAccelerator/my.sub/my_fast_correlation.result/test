#
# AIPO
#

! initial function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_fast_correlation" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "dag_cleaned_0" of module "my_fast_correlation" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}

! updated function for

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}
#
# SPOC
#

! initial function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_fast_correlation" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "dag_cleaned_0" of module "my_fast_correlation" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

! updated function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! cleaned up function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}
#
# TERAPIX
#

! initial function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_fast_correlation" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "dag_cleaned_0" of module "my_fast_correlation" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "my_fast_correlation_helper_0_0_0" of module "my_fast_correlation" in dot format
digraph "my_fast_correlation_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module my_fast_correlation
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 0 image operations in dag
 * dag length is 2, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 0
 * - communication: 96
 */
freia_status my_fast_correlation_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1,
  uint32_t pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: corr(1,2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_3;
  mcu_macro[1][0].xmin3 = imagelet_3;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart =   mcu_macro[1][0].addrStart =   // output copy 3 -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return my_fast_correlation_helper_0_0_0(o, i0, i1, p0);              /*0005*/
}

! cleaned up function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return my_fast_correlation_helper_0_0_0(o, i0, i1, p0);              /*0005*/
}
#
# FREIA COMPILATION DONE
#

