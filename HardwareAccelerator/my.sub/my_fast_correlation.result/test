#
# AIPO
#

! initial function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_fast_correlation" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "dag_cleaned_0" of module "my_fast_correlation" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}

! updated function for

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}
#
# SPOC
#

! initial function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_fast_correlation" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "dag_cleaned_0" of module "my_fast_correlation" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

! updated function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! cleaned up function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}
#
# TERAPIX
#

! initial function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_fast_correlation" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}
// graph for dag "dag_cleaned_0" of module "my_fast_correlation" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 corr" [shape=circle];
  "5 corr" -> "o";
  "i1" -> "5 corr";
  "i0" -> "5 corr";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

! updated function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}

! cleaned up function

freia_status my_fast_correlation(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, uint32_t p0)
{
   return freia_aipo_fast_correlation(o, i0, i1, p0);                   /*0005*/
}
#
# FREIA COMPILATION DONE
#

