#
# AIPO
#
#
# compile generated my_cast
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! updated function for

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# SPOC
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 1+0 copies
// # SPOC calls: 0

! updated function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! cleaned up function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# TERAPIX
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 1+0 copies

! updated function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! cleaned up function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# OPENCL
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "my_cast_helper_0_0" of module "my_cast" in dot format
digraph "my_cast_helper_0_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/OpenCL.h>
#include <private/freiaGatewayOpenCL.h>

// support function, should be in FREIA runtime?
static freia_status get_compiled_opencl(
  const char * source, // opencl source
  const char * kname, // expected kernel name
  const char * option // compiler option
  cl_kernel * kernel) // where to put the kernel
{
  freia_status err;
  char * opts;
  int n = asprint(&ops, "%s %s ", frclTarget.compileOptions, option);
  if (n==-1) return FREIA_UNLISTED_ERROR;
  cl_program prg =
    freia_op_compile_string_opencl(source, ops, &err);
  if (err != FREIA_OK) return err;
  *kernel = freia_op_get_kernel(prg, kname, &err);
  return err;
}

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 1+0 copies
// FREIA OpenCL specific includes
#include <freiaAtomicOpCommonOpenCL.hcl>
// generated OpenCL kernels for function my_cast

// opencl for dag 0

! updated function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! cleaned up function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# FREIA COMPILATION DONE
#

