
! initial function

freia_status my_set_constant(freia_data2d *o, int32_t p0)
{
   return freia_aipo_set_constant(o, p0);                               /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_set_constant" in dot format
digraph "dag_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 C" [shape=trapezium,orientation=270];
  "4 C" -> "o";
}
// graph for dag "dag_cleaned_0" of module "my_set_constant" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 C" [shape=trapezium,orientation=270];
  "4 C" -> "o";
}
// graph for dag "my_set_constant_helper_0_0" of module "my_set_constant" in dot format
digraph "my_set_constant_helper_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 C" [shape=trapezium,orientation=270];
  "4 C" -> "o";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module my_set_constant
freia_status my_set_constant_helper_0_0_0(freia_data2d * o0, , int32_t cst0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // alu 4 set_constant stage 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[0][0].constant = cst0;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, NULL, NULL);

  return ret;
}

! updated function

freia_status my_set_constant(freia_data2d *o, int32_t p0)
{
   return my_set_constant_helper_0_0_0(o, p0);                          /*0004*/
}
