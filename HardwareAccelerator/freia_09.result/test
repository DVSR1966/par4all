
! initial function

freia_status freia_09(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2)
{
   freia_data2d *g0 = freia_common_create_data(16, 128, 128);
   freia_data2d *g1 = freia_common_create_data(16, 128, 128);
   freia_data2d *g2 = freia_common_create_data(16, 128, 128);
   freia_data2d *d0 = freia_common_create_data(16, 128, 128);
   freia_data2d *d1 = freia_common_create_data(16, 128, 128);
   int connexity = 8;
   int size = 1;
   
   // T-rex motion detection
   // i0, i1, i2 are successive input images
   // the could be a loop with a pipeline
   freia_cipo_inner_gradient(g0, i0, connexity, size);                  /*0029*/
   freia_cipo_inner_gradient(g1, i1, connexity, size);                  /*0030*/
   freia_cipo_inner_gradient(g2, i2, connexity, size);                  /*0031*/
   freia_aipo_absdiff(d1, g2, g1);                                      /*0032*/
   freia_aipo_absdiff(d0, g1, g0);                                      /*0033*/
   freia_aipo_inf(o, d1, d0);                                           /*0034*/

   freia_common_destruct_data(g0);                                      /*0036*/
   freia_common_destruct_data(g1);                                      /*0037*/
   freia_common_destruct_data(g2);                                      /*0038*/
   freia_common_destruct_data(d0);                                      /*0039*/
   freia_common_destruct_data(d1);                                      /*0040*/

   return FREIA_OK;                                                     /*0042*/
}

! graphs

// graph for dag "dag_0" of module "freia_09" in dot format
digraph "dag_0" {
  // inputs
  "0`g0" [shape=circle];
  "0`g1" [shape=circle];
  "0`g2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 inf" [shape=trapezium,orientation=270];
  "34 inf" -> "o";
  "33 absdiff" [shape=trapezium,orientation=270];
  "33 absdiff" -> "34 inf";
  "0`g1" -> "33 absdiff";
  "0`g0" -> "33 absdiff";
  "32 absdiff" [shape=trapezium,orientation=270];
  "32 absdiff" -> "34 inf";
  "0`g2" -> "32 absdiff";
  "0`g1" -> "32 absdiff";
}
// graph for dag "dag_cleaned_0" of module "freia_09" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "0`g0" [shape=circle];
  "0`g1" [shape=circle];
  "0`g2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 inf" [shape=trapezium,orientation=270];
  "34 inf" -> "o";
  "33 absdiff" [shape=trapezium,orientation=270];
  "33 absdiff" -> "34 inf";
  "0`g1" -> "33 absdiff";
  "0`g0" -> "33 absdiff";
  "32 absdiff" [shape=trapezium,orientation=270];
  "32 absdiff" -> "34 inf";
  "0`g2" -> "32 absdiff";
  "0`g1" -> "32 absdiff";
}
// graph for dag "freia_09_helper_0_0" of module "freia_09" in dot format
digraph "freia_09_helper_0_0" {
  // inputs
  "0`g1" [shape=circle];
  "0`g2" [shape=circle];

  // outputs
  "0`d1" [shape=circle];

  // computation vertices
  "32 absdiff" [shape=trapezium,orientation=270];
  "0`g2" -> "32 absdiff";
  "0`g1" -> "32 absdiff";
  "32 absdiff" -> "0`d1";
}
// graph for dag "freia_09_helper_0_1" of module "freia_09" in dot format
digraph "freia_09_helper_0_1" {
  // inputs
  "0`g0" [shape=circle];
  "0`g1" [shape=circle];

  // outputs
  "0`d0" [shape=circle];

  // computation vertices
  "33 absdiff" [shape=trapezium,orientation=270];
  "0`g1" -> "33 absdiff";
  "0`g0" -> "33 absdiff";
  "33 absdiff" -> "0`d0";
}
// graph for dag "freia_09_helper_0_2" of module "freia_09" in dot format
digraph "freia_09_helper_0_2" {
  // inputs
  "0`d0" [shape=circle];
  "0`d1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 inf" [shape=trapezium,orientation=270];
  "0`d1" -> "34 inf";
  "0`d0" -> "34 inf";
  "34 inf" -> "o";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_09
freia_status freia_09_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`g1 [0 input 0] -> [0 alu] 32 absdiff
  // nope
  // 0`g2 [0 input 1] -> [0 alu] 32 absdiff
  // nope
  // alu 32 absdiff stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN1_IN0;


  // output image 0`d1 on 0
  // 0`d1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_09
freia_status freia_09_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`g0 [0 input 0] -> [0 alu] 33 absdiff
  // nope
  // 0`g1 [0 input 1] -> [0 alu] 33 absdiff
  // nope
  // alu 33 absdiff stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN1_IN0;


  // output image 0`d0 on 0
  // 0`d0 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_09
freia_status freia_09_helper_0_2_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`d0 [0 input 0] -> [0 alu] 34 inf
  // nope
  // 0`d1 [0 input 1] -> [0 alu] 34 inf
  // nope
  // alu 34 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_09(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2)
{
   freia_data2d *g0 = freia_common_create_data(16, 128, 128);
   freia_data2d *g1 = freia_common_create_data(16, 128, 128);
   freia_data2d *g2 = freia_common_create_data(16, 128, 128);
   freia_data2d *d0 = freia_common_create_data(16, 128, 128);
   freia_data2d *d1 = freia_common_create_data(16, 128, 128);
   int connexity = 8;
   int size = 1;
   
   // T-rex motion detection
   // i0, i1, i2 are successive input images
   // the could be a loop with a pipeline
   freia_cipo_inner_gradient(g0, i0, connexity, size);                  /*0029*/
   freia_cipo_inner_gradient(g1, i1, connexity, size);                  /*0030*/
   freia_cipo_inner_gradient(g2, i2, connexity, size);                  /*0031*/
   freia_09_helper_0_0_0(d1, g1, g2);                                   /*0032*/
   freia_09_helper_0_1_0(d0, g0, g1);                                   /*0033*/
   freia_09_helper_0_2_0(o, d0, d1);                                    /*0034*/

   freia_common_destruct_data(g0);                                      /*0036*/
   freia_common_destruct_data(g1);                                      /*0037*/
   freia_common_destruct_data(g2);                                      /*0038*/
   freia_common_destruct_data(d0);                                      /*0039*/
   freia_common_destruct_data(d1);                                      /*0040*/

   return FREIA_OK;                                                     /*0042*/
}
