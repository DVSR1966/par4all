
! initial function

freia_status freia_dup_02(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t *k)
{
   // same operation performed twice
   // o0 = D6(i)
   // o1 = D6(i)
   freia_aipo_dilate_6c(o0, i, k);                                      /*0008*/
   freia_aipo_dilate_6c(o1, i, k);                                      /*0009*/
   return FREIA_OK;                                                     /*0010*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_02" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "9 D6" [shape=box];
  "9 D6" -> "o1";
  "8 D6" [shape=box];
  "8 D6" -> "o0";
  "i" -> "9 D6";
  "i" -> "8 D6";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_02" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];

  // computation vertices
  "8 D6" [shape=box];
  "8 D6" -> "o0";
  "i" -> "8 D6";
}
// graph for dag "freia_dup_02_helper_0_0" of module "freia_dup_02" in dot format
digraph "freia_dup_02_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];

  // computation vertices
  "8 D6" [shape=box];
  "8 D6" -> "o0";
  "i" -> "8 D6";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_dup_02
freia_status freia_dup_02_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, int32_t *kern0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 8 dilate_6c
  // nope
  // poc 8 dilate_6c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = kern0[i];


  // output image o0 on 0
  // o0 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [0 output 0] -> [7 output 0] 0 null
  // o0 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_dup_02(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t *k)
{
   // same operation performed twice
   // o0 = D6(i)
   // o1 = D6(i)
   freia_dup_02_helper_0_0_0(o0, i, k);
   freia_aipo_copy(o1, o0);
   return FREIA_OK;                                                     /*0010*/
}
