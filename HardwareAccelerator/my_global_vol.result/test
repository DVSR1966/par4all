
! initial function

freia_status my_global_vol(freia_data2d *image, int32_t *vol)
{
   return freia_aipo_global_vol(image, vol);                            /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_global_vol" in dot format
digraph "dag_0" {
  // inputs
  "image" [shape=circle];

  // outputs

  // computation vertices
  "4 vol" [shape=diamond];
  "image" -> "4 vol";
}
// graph for dag "dag_cleaned_0" of module "my_global_vol" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "image" [shape=circle];

  // outputs

  // computation vertices
  "4 vol" [shape=diamond];
  "image" -> "4 vol";
}
// graph for dag "my_global_vol_helper_0_0" of module "my_global_vol" in dot format
digraph "my_global_vol_helper_0_0" {
  // inputs
  "image" [shape=circle];

  // outputs

  // computation vertices
  "4 vol" [shape=diamond];
  "image" -> "4 vol";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module my_global_vol
freia_status my_global_vol_helper_0_0_0(freia_data2d * i0, int32_t * red0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // image [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;


  // no output image

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(param, NULL, NULL, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 4 global_vol stage 0 side 0
  *red0 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

! updated function

freia_status my_global_vol(freia_data2d *image, int32_t *vol)
{
   return my_global_vol_helper_0_0_0(image, vol);                       /*0004*/
}
