#
# AIPO
#
#
# compile generated cst_03
#

! initial function

freia_status cst_03(freia_data2d *o)
{
   freia_aipo_xor(o, o, o);                                             /*0005*/
   freia_aipo_addsat_const(o, o, 1);                                    /*0006*/
   freia_aipo_absdiff_const(o, o, 2);                                   /*0007*/
   freia_aipo_subsat_const(o, o, 3);                                    /*0008*/
   return FREIA_OK;                                                     /*0009*/
}

! graphs

// graph for dag "dag_0" of module "cst_03" in dot format
digraph "dag_0" {
  // inputs
  "o" [shape=circle];

  // outputs
  "o'" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o'";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o"];
  "5 ^" [shape=trapezium,orientation=270];
  "5 ^" -> "6 +s." [label="o"];
  "o" -> "5 ^";
  "o" -> "5 ^";
}
// graph for dag "dag_cleaned_0" of module "cst_03" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o_1"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o_2"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o_3"];
}

! updated function for

freia_status cst_03(freia_data2d *o)
{
   freia_aipo_set_constant(o, 0);                                       /*0005*/
   freia_aipo_addsat_const(o, o, 1);                                    /*0006*/
   freia_aipo_absdiff_const(o, o, 2);                                   /*0007*/
   freia_aipo_subsat_const(o, o, 3);                                    /*0008*/
   return FREIA_OK;                                                     /*0009*/
}
#
# SPOC
#

! initial function

freia_status cst_03(freia_data2d *o)
{
   freia_aipo_xor(o, o, o);                                             /*0005*/
   freia_aipo_addsat_const(o, o, 1);                                    /*0006*/
   freia_aipo_absdiff_const(o, o, 2);                                   /*0007*/
   freia_aipo_subsat_const(o, o, 3);                                    /*0008*/
   return FREIA_OK;                                                     /*0009*/
}

! graphs

// graph for dag "cst_03_helper_0_0" of module "cst_03" in dot format
digraph "cst_03_helper_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o_1"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o_2"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o_3"];
}
// graph for dag "dag_0" of module "cst_03" in dot format
digraph "dag_0" {
  // inputs
  "o" [shape=circle];

  // outputs
  "o'" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o'";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o"];
  "5 ^" [shape=trapezium,orientation=270];
  "5 ^" -> "6 +s." [label="o"];
  "o" -> "5 ^";
  "o" -> "5 ^";
}
// graph for dag "dag_cleaned_0" of module "cst_03" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o"];
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module cst_03
freia_status cst_03_helper_0_0_0(
  freia_data2d * o0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // alu 5 set_constant stage 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // o_3 [0 alu] -> [1 alu] 6 addsat_const
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // o_3 [1 input 0] -> [1 alu] 6 addsat_const
  // nope
  // alu 6 addsat_const stage 1
  si.alu[1][0].op = SPOC_ALU_ADDSAT_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // o_2 [1 alu] -> [2 alu] 7 absdiff_const
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // o_2 [2 input 0] -> [2 alu] 7 absdiff_const
  // nope
  // alu 7 absdiff_const stage 2
  si.alu[2][0].op = SPOC_ALU_ABSSUB_IN0_CONST;
  sp.alu[2][0].constant = pi2;


  // STAGE 3
  // o_1 [2 alu] -> [3 alu] 8 subsat_const
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // o_1 [3 input 0] -> [3 alu] 8 subsat_const
  // nope
  // alu 8 subsat_const stage 3
  si.alu[3][0].op = SPOC_ALU_SUBSAT_IN0_CONST;
  sp.alu[3][0].constant = pi3;


  // output image o on 0
  // o [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [3 output 0] -> [7 output 0] 0 null
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, NULL, NULL);

  return ret;
}

! updated function

freia_status cst_03(freia_data2d *o)
{
   cst_03_helper_0_0_0(o, 0, 1, 2, 3);                                  /*0005*/
   return FREIA_OK;                                                     /*0009*/
}

! cleaned up function

freia_status cst_03(freia_data2d *o)
{
   cst_03_helper_0_0_0(o, 0, 1, 2, 3);                                  /*0005*/
   return 0;                                                            /*0009*/
}
#
# TERAPIX
#

! initial function

freia_status cst_03(freia_data2d *o)
{
   freia_aipo_xor(o, o, o);                                             /*0005*/
   freia_aipo_addsat_const(o, o, 1);                                    /*0006*/
   freia_aipo_absdiff_const(o, o, 2);                                   /*0007*/
   freia_aipo_subsat_const(o, o, 3);                                    /*0008*/
   return FREIA_OK;                                                     /*0009*/
}

! graphs

// graph for dag "cst_03_helper_0_0_0" of module "cst_03" in dot format
digraph "cst_03_helper_0_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o_1"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o_2"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o_3"];
}
// graph for dag "dag_0" of module "cst_03" in dot format
digraph "dag_0" {
  // inputs
  "o" [shape=circle];

  // outputs
  "o'" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o'";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o"];
  "5 ^" [shape=trapezium,orientation=270];
  "5 ^" -> "6 +s." [label="o"];
  "o" -> "5 ^";
  "o" -> "5 ^";
}
// graph for dag "dag_cleaned_0" of module "cst_03" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o"];
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies

/* FREIA terapix helper function for module cst_03
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 0 input image, 1 output image
 * 4 image operations in dag
 * dag length is 4, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 11
 * - communication: 32
 */
freia_status cst_03_helper_0_0_0(
  freia_data2d * o0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 2;
  const int32_t y_2 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 3;
  const int32_t y_3 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 512;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: C() -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi1;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SET_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SET_CONST;
  // 1: +s.(1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi2;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ADDSAT_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ADDSAT_CONST;
  // 2: -|.(1) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi3;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ABSDIFF_CONST;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ABSDIFF_CONST;
  // 3: -s.(1) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi4;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_SUBSAT_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_SUBSAT_CONST;


  // no input

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 0;
  mcu_instr.in0 = NULL;
  mcu_instr.in1 = NULL;

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0);

  // extract measures

  return ret;
}


! updated function

freia_status cst_03(freia_data2d *o)
{
   cst_03_helper_0_0_0(o, 0, 1, 2, 3);                                  /*0005*/
   return FREIA_OK;                                                     /*0009*/
}

! cleaned up function

freia_status cst_03(freia_data2d *o)
{
   cst_03_helper_0_0_0(o, 0, 1, 2, 3);                                  /*0005*/
   return 0;                                                            /*0009*/
}
#
# OPENCL
#

! initial function

freia_status cst_03(freia_data2d *o)
{
   freia_aipo_xor(o, o, o);                                             /*0005*/
   freia_aipo_addsat_const(o, o, 1);                                    /*0006*/
   freia_aipo_absdiff_const(o, o, 2);                                   /*0007*/
   freia_aipo_subsat_const(o, o, 3);                                    /*0008*/
   return FREIA_OK;                                                     /*0009*/
}

! graphs

// graph for dag "cst_03_helper_0_0" of module "cst_03" in dot format
digraph "cst_03_helper_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o_1"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o_2"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o_3"];
}
// graph for dag "cst_03_helper_0_0_0" of module "cst_03" in dot format
digraph "cst_03_helper_0_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o_1"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o_2"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o_3"];
}
// graph for dag "dag_0" of module "cst_03" in dot format
digraph "dag_0" {
  // inputs
  "o" [shape=circle];

  // outputs
  "o'" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o'";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o"];
  "5 ^" [shape=trapezium,orientation=270];
  "5 ^" -> "6 +s." [label="o"];
  "o" -> "5 ^";
  "o" -> "5 ^";
}
// graph for dag "dag_cleaned_0" of module "cst_03" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -s." [shape=trapezium,orientation=270];
  "8 -s." -> "o";
  "7 -|." [shape=trapezium,orientation=270];
  "7 -|." -> "8 -s." [label="o_1"];
  "6 +s." [shape=trapezium,orientation=270];
  "6 +s." -> "7 -|." [label="o_2"];
  "5 C" [shape=trapezium,orientation=270];
  "5 C" -> "6 +s." [label="o_3"];
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies

// hold kernels for cst_03_helper_0_0_0
static cl_kernel cst_03_helper_0_0_0_kernel[2];

// compile kernels for cst_03_helper_0_0_0
static freia_status cst_03_helper_0_0_0_compile(void)
{
  // OpenCL source for cst_03_helper_0_0_0
  const char * cst_03_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function cst_03_helper_0_0_0\n"
    "KERNEL void cst_03_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // pixel computations\n"
    "    PIXEL t5 = PIXEL_SET(c0);\n"
    "    PIXEL t6 = PIXEL_ADDSAT(t5, c1);\n"
    "    PIXEL t7 = PIXEL_ABSDIFF(t6, c2);\n"
    "    PIXEL t8 = PIXEL_SUBSAT(t7, c3);\n"
    "    // set output pixels\n"
    "    p0[i] = t8;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(cst_03_helper_0_0_0_source, "cst_03_helper_0_0_0", "-DPIXEL8", &cst_03_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(cst_03_helper_0_0_0_source, "cst_03_helper_0_0_0", "-DPIXEL16", &cst_03_helper_0_0_0_kernel[1]);
  return err;
}

// helper function cst_03_helper_0_0_0
freia_status cst_03_helper_0_0_0(
  freia_data2d * o0,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[1];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    freia_status cerr = cst_03_helper_0_0_0_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled.
  cl_kernel kernel = cst_03_helper_0_0_0_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_int), &c0);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &c1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_int), &c2);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &c3);

  // call kernel cst_03_helper_0_0_0
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function cst_03

// opencl for dag 0

// opencl function cst_03_helper_0_0_0
KERNEL void cst_03_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  int width,
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // pixel computations
    PIXEL t5 = PIXEL_SET(c0);
    PIXEL t6 = PIXEL_ADDSAT(t5, c1);
    PIXEL t7 = PIXEL_ABSDIFF(t6, c2);
    PIXEL t8 = PIXEL_SUBSAT(t7, c3);
    // set output pixels
    p0[i] = t8;
  }
}

! updated function

freia_status cst_03(freia_data2d *o)
{
   cst_03_helper_0_0_0(o, 0, 1, 2, 3);                                  /*0005*/
   return FREIA_OK;                                                     /*0009*/
}

! cleaned up function

freia_status cst_03(freia_data2d *o)
{
   cst_03_helper_0_0_0(o, 0, 1, 2, 3);                                  /*0005*/
   return 0;                                                            /*0009*/
}
#
# FREIA COMPILATION DONE
#

