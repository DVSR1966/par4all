#
# AIPO
#

! initial function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_aipo_add_const(o0, i, c);                                      /*0008*/
   freia_aipo_erode_6c(o1, i, k);                                       /*0009*/
   freia_aipo_global_min(i, r0);                                        /*0010*/
   freia_aipo_global_max(i, r1);                                        /*0011*/
   freia_aipo_global_vol(i, r2);                                        /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_16" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_16" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}

! updated function for

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_aipo_add_const(o0, i, c);                                      /*0008*/
   freia_aipo_erode_6c(o1, i, k);                                       /*0009*/
   freia_aipo_global_min(i, r0);                                        /*0010*/
   freia_aipo_global_max(i, r1);                                        /*0011*/
   freia_aipo_global_vol(i, r2);                                        /*0012*/
   return FREIA_OK;                                                     /*0013*/
}
#
# SPOC
#

! initial function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_aipo_add_const(o0, i, c);                                      /*0008*/
   freia_aipo_erode_6c(o1, i, k);                                       /*0009*/
   freia_aipo_global_min(i, r0);                                        /*0010*/
   freia_aipo_global_max(i, r1);                                        /*0011*/
   freia_aipo_global_vol(i, r2);                                        /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_16" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_16" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "freia_16_helper_0_0" of module "freia_16" in dot format
digraph "freia_16_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "i" -> "8 +.";
  "i" -> "9 E6";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_16
freia_status freia_16_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0,
  int32_t * po0,
  int32_t * po1,
  int32_t * po2,
  const int32_t * pi3,
  int32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope


  // STAGE 1
  // i [0 measure 0] -> [1 poc 0] 9 erode_6c
  // i [1 input 0] -> [1 poc 0] 9 erode_6c
  // nope
  // poc 9 erode_6c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi3[i];


  // STAGE 0
  // i [0 input 1] -> [0 alu] 8 add_const
  // nope
  // alu 8 add_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ADD_IN1_CONST;
  sp.alu[0][0].constant = pi4;


  // output image o0 on 1 and image o1 on 0
  // o0 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // o0 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // o0 [1 output 1] -> [7 output 1] 0 null
  // o0 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // o0 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o0 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o0 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o0 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o0 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // o1 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [1 output 0] -> [7 output 0] 0 null
  // o1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 10 global_min stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].minimum;

  // measure 11 global_max stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].maximum;

  // measure 12 global_vol stage 0 side 0
  *po2 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

! updated function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_16_helper_0_0_0(o0, o1, i, r0, r1, r2, k, c);                  /*0008*/
   return FREIA_OK;                                                     /*0013*/
}

! cleaned up function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_16_helper_0_0_0(o0, o1, i, r0, r1, r2, k, c);                  /*0008*/
   return 0;                                                            /*0013*/
}
#
# TERAPIX
#

! initial function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_aipo_add_const(o0, i, c);                                      /*0008*/
   freia_aipo_erode_6c(o1, i, k);                                       /*0009*/
   freia_aipo_global_min(i, r0);                                        /*0010*/
   freia_aipo_global_max(i, r1);                                        /*0011*/
   freia_aipo_global_vol(i, r2);                                        /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_16" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_16" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "freia_16_helper_0_0" of module "freia_16" in dot format
digraph "freia_16_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "i" -> "8 +.";
  "i" -> "9 E6";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_16
 * 1 input image, 2 output images
 * 6 image operations in dag
 * dag length is 2, dag width is 2
 * cost is 22 cycles per imagelet row
 */
freia_status freia_16_helper_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * i0,
  int32_t * po3,
  int32_t * po4,
  int32_t * po5,
  const int32_t * pi6,
  int32_t pi7)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 3 parameters
  int16_t p_3[9];
  const int32_t x_3 = 0;
  const int32_t y_3 = 0;
  // operation 4 parameters
  int16_t p_4[1];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  terapix_mcu_macro mcu_macro[2][5];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 255;
  int imagelet_1 = 0;
  int imagelet_2 = 255;
  int imagelet_3 = 510;
  int imagelet_4 = 765;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = -1; // not used
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // set measure min at 1023
  // 0: min(1)
  mcu_macro[0][0].macrocode.xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].macrocode.xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].macrocode.ymin1 = 0;
  mcu_macro[1][0].macrocode.ymin1 = 0;
  mcu_macro[0][0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].macrocode.iter2 = imagelet_size;
  mcu_macro[1][0].macrocode.iter2 = imagelet_size;
  mcu_macro[0][0].macrocode.addrStart = TERAPIX_UCODE_MIN?;
  mcu_macro[1][0].macrocode.addrStart = TERAPIX_UCODE_MIN?;
  // set measure max at 1022
  // 1: max(1)
  mcu_macro[0][1].macrocode.xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].macrocode.xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].macrocode.ymin1 = 0;
  mcu_macro[1][1].macrocode.ymin1 = 0;
  mcu_macro[0][1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].macrocode.iter2 = imagelet_size;
  mcu_macro[1][1].macrocode.iter2 = imagelet_size;
  mcu_macro[0][1].macrocode.addrStart = TERAPIX_UCODE_MAX?;
  mcu_macro[1][1].macrocode.addrStart = TERAPIX_UCODE_MAX?;
  // set measure vol at 1020
  // 2: vol(1)
  mcu_macro[0][2].macrocode.xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].macrocode.xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].macrocode.ymin1 = 0;
  mcu_macro[1][2].macrocode.ymin1 = 0;
  mcu_macro[0][2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].macrocode.iter2 = imagelet_size;
  mcu_macro[1][2].macrocode.iter2 = imagelet_size;
  mcu_macro[0][2].macrocode.addrStart = TERAPIX_UCODE_VOL?;
  mcu_macro[1][2].macrocode.addrStart = TERAPIX_UCODE_VOL?;
  // 3: E6(1) -> 2
  mcu_macro[0][3].macrocode.xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].macrocode.xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].macrocode.ymin1 = 0;
  mcu_macro[1][3].macrocode.ymin1 = 0;
  mcu_macro[0][3].macrocode.xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].macrocode.xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].macrocode.ymin2 = 0;
  mcu_macro[1][3].macrocode.ymin2 = 0;
  // copy of operation 3 parameters
  for(i=0; i<9; i++)
    p_3[i] = pi6[i];
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].macrocode.xmin3 = x_3;
  mcu_macro[1][3].macrocode.xmin3 = x_3;
  mcu_macro[0][3].macrocode.ymin3 = y_3;
  mcu_macro[1][3].macrocode.ymin3 = y_3;
  mcu_macro[0][3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].macrocode.iter2 = imagelet_size;
  mcu_macro[1][3].macrocode.iter2 = imagelet_size;
  mcu_macro[0][3].macrocode.addrStart = TERAPIX_UCODE_ERODE_3_3?;
  mcu_macro[1][3].macrocode.addrStart = TERAPIX_UCODE_ERODE_3_3?;
  // 4: +.(1) -> 1
  mcu_macro[0][4].macrocode.xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].macrocode.xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].macrocode.ymin1 = 0;
  mcu_macro[1][4].macrocode.ymin1 = 0;
  mcu_macro[0][4].macrocode.xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].macrocode.xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].macrocode.ymin2 = 0;
  mcu_macro[1][4].macrocode.ymin2 = 0;
  // copy of operation 4 parameters
  p_4[0] = pi7;
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].macrocode.xmin3 = x_4;
  mcu_macro[1][4].macrocode.xmin3 = x_4;
  mcu_macro[0][4].macrocode.ymin3 = y_4;
  mcu_macro[1][4].macrocode.ymin3 = y_4;
  mcu_macro[0][4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].macrocode.iter2 = imagelet_size;
  mcu_macro[1][4].macrocode.iter2 = imagelet_size;
  mcu_macro[0][4].macrocode.addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][4].macrocode.addrStart = TERAPIX_UCODE_ADD_CONST;

  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].u = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for o1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].u = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out = tile_out;

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in = tile_in;

  // actual instructions
  mcu_instr.nbinstr = 5;
  mcu_instr.instr   = mcu_macro;

  // call terapix runtime
  ret = freia_cg_template_process(&param, o0, o1, i0);

  // extract measures
  // get measure min result from 1023
  // get measure max result from 1022
  // get measure vol result from 1020

  return ret;
}


! updated function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_16_helper_0_0(o0, o1, i, r0, r1, r2, k, c);                    /*0008*/
   return FREIA_OK;                                                     /*0013*/
}

! cleaned up function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_16_helper_0_0(o0, o1, i, r0, r1, r2, k, c);                    /*0008*/
   return 0;                                                            /*0013*/
}
#
# FREIA COMPILATION DONE
#

