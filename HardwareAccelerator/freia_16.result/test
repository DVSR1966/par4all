
! initial function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_aipo_add_const(o0, i, c);                                      /*0007*/
   freia_aipo_erode_6c(o1, i, k);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_16" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "i" -> "11 vol";
  "10 max" [shape=diamond];
  "i" -> "10 max";
  "9 min" [shape=diamond];
  "i" -> "9 min";
  "8 E6" [shape=box];
  "i" -> "8 E6";
  "8 E6" -> "o1";
  "7 +." [shape=trapezium,orientation=270];
  "i" -> "7 +.";
  "7 +." -> "o0";
}
// graph for dag "dag_cleaned_0" of module "freia_16" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "i" -> "11 vol";
  "10 max" [shape=diamond];
  "i" -> "10 max";
  "9 min" [shape=diamond];
  "i" -> "9 min";
  "8 E6" [shape=box];
  "i" -> "8 E6";
  "8 E6" -> "o1";
  "7 +." [shape=trapezium,orientation=270];
  "i" -> "7 +.";
  "7 +." -> "o0";
}
// graph for dag "freia_16_helper_0_0" of module "freia_16" in dot format
digraph "freia_16_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "7 +." [shape=trapezium,orientation=270];
  "i" -> "7 +.";
  "7 +." -> "o0";
  "8 E6" [shape=box];
  "i" -> "8 E6";
  "8 E6" -> "o1";
  "11 vol" [shape=diamond];
  "i" -> "11 vol";
  "10 max" [shape=diamond];
  "i" -> "10 max";
  "9 min" [shape=diamond];
  "i" -> "9 min";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_16
freia_status freia_16_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, int32_t * red0, int32_t * red1, int32_t * red2, int32_t *kern3, int32_t cst4)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // i [0 measure 0] -> [0 measure 0] 0 null
  // nope

  // i [0 measure 0] -> [0 measure 0] 0 null
  // nope


  // STAGE 1
  // i [0 measure 0] -> [1 poc 0] 8 erode_6c
  // i [1 input 0] -> [1 poc 0] 8 erode_6c
  // nope
  // poc 8 erode_6c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = kern3[i];

  // i [1 input 0] -> [1 alu] 7 add_const
  // nope
  // alu 7 add_const stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_CONST;
  si.alu[1][0].constant = cst4;


  // output image o0 on 1 and image o1 on 0
  // o0 [1 alu] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // o1 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o1, o0, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 9 global_min stage 0 side 0
  *red0 = (int32_t) reduc.measure[0][0].minimum;

  // measure 10 global_max stage 0 side 0
  *red1 = (int32_t) reduc.measure[0][0].maximum;

  // measure 11 global_vol stage 0 side 0
  *red2 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

! updated function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_16_helper_0_0_0(o0, o1, i, r0, r1, r2, k, c);                  /*0007*/
   return FREIA_OK;                                                     /*0012*/
}
