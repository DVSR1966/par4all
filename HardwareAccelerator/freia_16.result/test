
! initial function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_aipo_add_const(o0, i, c);                                      /*0008*/
   freia_aipo_erode_6c(o1, i, k);                                       /*0009*/
   freia_aipo_global_min(i, r0);                                        /*0010*/
   freia_aipo_global_max(i, r1);                                        /*0011*/
   freia_aipo_global_vol(i, r2);                                        /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_16" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_16" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
  "i" -> "9 E6";
  "i" -> "8 +.";
}
// graph for dag "freia_16_helper_0_0" of module "freia_16" in dot format
digraph "freia_16_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o0";
  "9 E6" [shape=box];
  "9 E6" -> "o1";
  "12 vol" [shape=diamond];
  "11 max" [shape=diamond];
  "10 min" [shape=diamond];
  "i" -> "8 +.";
  "i" -> "9 E6";
  "i" -> "12 vol";
  "i" -> "11 max";
  "i" -> "10 min";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_16
freia_status freia_16_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0,
  int32_t * po0,
  int32_t * po1,
  int32_t * po2,
  const int32_t * pi3,
  int32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope


  // STAGE 1
  // i [0 measure 0] -> [1 poc 0] 9 erode_6c
  // i [1 input 0] -> [1 poc 0] 9 erode_6c
  // nope
  // poc 9 erode_6c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi3[i];


  // STAGE 0
  // i [0 input 1] -> [0 alu] 8 add_const
  // nope
  // alu 8 add_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ADD_IN1_CONST;
  sp.alu[0][0].constant = pi4;


  // output image o0 on 1 and image o1 on 0
  // o0 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // o0 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // o0 [1 output 1] -> [7 output 1] 0 null
  // o0 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // o0 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o0 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o0 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o0 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o0 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // o1 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [1 output 0] -> [7 output 0] 0 null
  // o1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 10 global_min stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].minimum;

  // measure 11 global_max stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].maximum;

  // measure 12 global_vol stage 0 side 0
  *po2 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

! updated function

freia_status freia_16(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t c, int32_t *k, int32_t *r0, int32_t *r1, int32_t *r2)
{
   // test re ordering of mes
   freia_16_helper_0_0_0(o0, o1, i, r0, r1, r2, k, c);                  /*0008*/
   return FREIA_OK;                                                     /*0013*/
}

