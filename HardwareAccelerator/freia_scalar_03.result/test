#
# AIPO
#
#
# compile generated freia_scalar_03
#

! initial function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = false;                                                    /*0008*/
   // break pipeline on scalar dependency
   freia_aipo_add(tmp, i0, i1);                                         /*0010*/
   freia_aipo_global_max(tmp, &max);                                    /*0011*/
   freia_aipo_threshold(o, tmp, min, max, bin);                         /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "11 max" [shape=diamond];
  "11 max" -> "12 thr" [arrowhead=empty,label="max"];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "12 thr" [label="tmp"];
  "10 +" -> "11 max" [label="tmp"];
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "11 max" [shape=diamond];
  "11 max" -> "12 thr" [arrowhead=empty,label="max"];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "12 thr" [label="tmp"];
  "10 +" -> "11 max" [label="tmp"];
  "i1" -> "10 +";
  "i0" -> "10 +";
}

! updated function for

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = false;                                                    /*0008*/
   // break pipeline on scalar dependency
   freia_aipo_add(tmp, i0, i1);                                         /*0010*/
   freia_aipo_global_max(tmp, &max);                                    /*0011*/
   freia_aipo_threshold(o, tmp, min, max, bin);                         /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return FREIA_OK;                                                     /*0014*/
}
#
# SPOC
#

! initial function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = false;                                                    /*0008*/
   // break pipeline on scalar dependency
   freia_aipo_add(tmp, i0, i1);                                         /*0010*/
   freia_aipo_global_max(tmp, &max);                                    /*0011*/
   freia_aipo_threshold(o, tmp, min, max, bin);                         /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "11 max" [shape=diamond];
  "11 max" -> "12 thr" [arrowhead=empty,label="max"];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "12 thr" [label="tmp"];
  "10 +" -> "11 max" [label="tmp"];
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "11 max" [shape=diamond];
  "11 max" -> "12 thr" [arrowhead=empty,label="max"];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "12 thr" [label="tmp"];
  "10 +" -> "11 max" [label="tmp"];
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "freia_scalar_03_helper_0_0" of module "freia_scalar_03" in dot format
digraph "freia_scalar_03_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "11 max" [shape=diamond];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "11 max" [label="tmp"];
  "10 +" -> "tmp";
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "freia_scalar_03_helper_0_1" of module "freia_scalar_03" in dot format
digraph "freia_scalar_03_helper_0_1" {
  // inputs
  "tmp" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "tmp" -> "12 thr";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 3 ops (0 copies), optimized to 3 (0 copies)
// split 0: 1 cut
// split 1: 1 cut
// # SPOC calls: 2

// FREIA-SPoC helper function for module freia_scalar_03
freia_status freia_scalar_03_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  int32_t * po0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 10 add
  // nope
  // i1 [0 input 1] -> [0 alu] 10 add
  // nope
  // alu 10 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;

  // 0`tmp [0 alu] -> [0 measure 0] 10 add
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;


  // output image 0`tmp on 0
  // 0`tmp [0 measure 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`tmp [0 output 0] -> [7 output 0] 0 null
  // 0`tmp [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tmp [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tmp [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tmp [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tmp [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tmp [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tmp [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 11 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_03
freia_status freia_scalar_03_helper_0_1_0(freia_data2d * o0, freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tmp [0 input 0] -> [0 threshold 0] 12 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 12 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // output image o on 0
  // o [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = false;                                                    /*0008*/
   // break pipeline on scalar dependency
   freia_scalar_03_helper_0_0_0(tmp, i0, i1, &max);                     /*0010*/
   freia_scalar_03_helper_0_1_0(o, tmp, min, max, bin);                 /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = 0;                                                        /*0008*/
   // break pipeline on scalar dependency
   freia_scalar_03_helper_0_0_0(tmp, i0, i1, &max);                     /*0010*/
   freia_scalar_03_helper_0_1_0(o, tmp, 10, max, bin);                  /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return 0;                                                            /*0014*/
}
#
# TERAPIX
#

! initial function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = false;                                                    /*0008*/
   // break pipeline on scalar dependency
   freia_aipo_add(tmp, i0, i1);                                         /*0010*/
   freia_aipo_global_max(tmp, &max);                                    /*0011*/
   freia_aipo_threshold(o, tmp, min, max, bin);                         /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "11 max" [shape=diamond];
  "11 max" -> "12 thr" [arrowhead=empty,label="max"];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "12 thr" [label="tmp"];
  "10 +" -> "11 max" [label="tmp"];
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "11 max" [shape=diamond];
  "11 max" -> "12 thr" [arrowhead=empty,label="max"];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "12 thr" [label="tmp"];
  "10 +" -> "11 max" [label="tmp"];
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "freia_scalar_03_helper_0_0_0" of module "freia_scalar_03" in dot format
digraph "freia_scalar_03_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "11 max" [shape=diamond];
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "11 max" [label="tmp"];
  "10 +" -> "tmp";
  "i1" -> "10 +";
  "i0" -> "10 +";
}
// graph for dag "freia_scalar_03_helper_0_1_0" of module "freia_scalar_03" in dot format
digraph "freia_scalar_03_helper_0_1_0" {
  // inputs
  "tmp" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 thr" [shape=parallelogram];
  "12 thr" -> "o";
  "tmp" -> "12 thr";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_scalar_03
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 2 image operations in dag
 * dag length is 3, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 7
 * - communication: 96
 */
freia_status freia_scalar_03_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1,
  int32_t * po3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1_val initialization
  int16_t p_1_val[1];
  const int32_t x_1_val = 0;
  const int32_t y_1_val = 0;
  // array for reduction 1 extraction
  int32_t red_1[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 255;
  int imagelet_1 = 0;
  int imagelet_2 = 255;
  int imagelet_3 = 510;
  int imagelet_4 = 765;

  // memory for reductions
  int reduction_1 = 1023;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +(1,2) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_1_0;
  mcu_macro[1][0].xmin3 = imagelet_io_1_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD3;
  // 1: max(1)
  // initializing  1_val
  p_1_val[0] = INT16_MIN;
  gram.xoffset = x_1_val;
  gram.yoffset = y_1_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_val
  mem_init.xmin1 = reduction_1;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max at reduction_1
  mcu_macro[0][1].xmin2 = reduction_1;
  mcu_macro[1][1].xmin2 = reduction_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = 0;
  mcu_macro[1][1].xmin3 = 0;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for tmp
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure max result from reduction_1
  redter.xres = reduction_1;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_1;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MAX;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po3 = (int32_t) red_1[0];

  return ret;
}


/* FREIA terapix helper function for module freia_scalar_03
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 1 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 5
 * - communication: 64
 */
freia_status freia_scalar_03_helper_0_1_0(
  freia_data2d * o0,
  freia_data2d * i0,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][1];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 512;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: thr(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  p_0[1] = pi3;
  p_0[2] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_THRESHOLD;


  // inputs:
  // - imagelet 1 is i0 for tmp
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 1;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = false;                                                    /*0008*/
   // break pipeline on scalar dependency
   freia_scalar_03_helper_0_0_0(tmp, i0, i1, &max);                     /*0010*/
   freia_scalar_03_helper_0_1_0(o, tmp, min, max, bin);                 /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_scalar_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   int max, min = 10;                                                   /*0007*/
   bool bin = 0;                                                        /*0008*/
   // break pipeline on scalar dependency
   freia_scalar_03_helper_0_0_0(tmp, i0, i1, &max);                     /*0010*/
   freia_scalar_03_helper_0_1_0(o, tmp, 10, max, bin);                  /*0012*/
   freia_common_destruct_data(tmp);                                     /*0013*/
   return 0;                                                            /*0014*/
}
#
# FREIA COMPILATION DONE
#

