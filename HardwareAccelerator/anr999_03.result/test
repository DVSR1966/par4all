
! initial function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   freia_data2d *t;                                                     /*0017*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0025*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0029*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0030*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0032*/
   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, t, og);                                           /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(t);                                       /*0040*/
   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! graphs

// graph for dag "anr999_03_helper_0_0" of module "anr999_03" in dot format
digraph "anr999_03_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od"];
  "29 D8" -> "34 -" [label="od"];
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "in" -> "29 D8";
  "in" -> "33 E8";
}
// graph for dag "dag_0" of module "anr999_03" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "32 D8" [shape=box];
  "32 D8" -> "34 -" [label="t"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "32 D8";
  "in" -> "29 D8";
}
// graph for dag "dag_cleaned_0" of module "anr999_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od"];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "29 D8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module anr999_03
freia_status anr999_03_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, int32_t *kern0, int32_t *kern1, int32_t *kern2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 33 erode_8c
  // nope
  // poc 33 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = kern0[i];

  // 0`in [0 input 1] -> [0 poc 1] 29 dilate_8c
  // nope
  // poc 29 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = kern1[i];

  // 0`og [0 poc 0] -> [0 alu] 34 sub
  // nope
  // 0`od [0 poc 1] -> [0 alu] 34 sub
  // nope
  // alu 34 sub stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_SUB_IN1_IN0;


  // STAGE 1
  // 0`od [0 poc 1] -> [1 poc 1] 30 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`od [1 input 1] -> [1 poc 1] 30 dilate_8c
  // nope
  // poc 30 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = kern2[i];


  // output image 0`od on 1 and image 0`og on 0
  // 0`od [1 poc 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`od [1 output 1] -> [7 output 1] 0 null
  // 0`od [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`od [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`od [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`od [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`od [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`od [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`og [0 alu] -> [1 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`og [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`og [1 output 0] -> [7 output 0] 0 null
  // 0`og [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`og [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`og [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`og [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`og [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`og [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o1, o0, i0, i0);

  return ret;
}

! updated function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   anr999_03_helper_0_0_0(od, og, in, freia_morpho_kernel_8c, freia_morpho_kernel_8c, freia_morpho_kernel_8c);       /*0029*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}
