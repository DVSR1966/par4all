#
# AIPO
#

! initial function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out, *t0, *t1, *t2, *t3, *t4, *t5;                /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_aipo_erode_8c(out, in, k);                                     /*0012*/
   freia_aipo_erode_8c(t1, in, k);                                      /*0013*/
   freia_aipo_sub(t1, in, t1);                                          /*0014*/
   freia_aipo_not(out, in);                                             /*0015*/

   t4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);               /*0017*/

   freia_aipo_set_constant(t3, 255);                                    /*0019*/
   freia_aipo_dilate_8c(t2, out, k);                                    /*0020*/
   freia_aipo_inf(t3, t3, t2);                                          /*0021*/
   freia_aipo_copy(out, t3);                                            /*0022*/
   freia_aipo_sub(t0, in, out);                                         /*0023*/
   freia_aipo_set_constant(t5, 255);                                    /*0024*/
   freia_aipo_dilate_8c(t4, out, k);                                    /*0025*/
   freia_aipo_inf(t5, t5, t4);                                          /*0026*/
   freia_aipo_dilate_8c(t4, out, k);                                    /*0027*/
   freia_aipo_inf(out, t5, t4);                                         /*0028*/
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_aipo_sub(out, in, out);                                        /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(t1);                                      /*0040*/
   freia_common_destruct_data(t0);                                      /*0041*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_51" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "dag_1" of module "freia_51" in dot format
digraph "dag_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "27 D8" [shape=box];
  "27 D8" -> "28 <" [label="t4"];
  "26 <" [shape=trapezium,orientation=270];
  "26 <" -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "26 <" [label="t4"];
  "24 C" [shape=trapezium,orientation=270];
  "24 C" -> "26 <" [label="t5"];
  "23 -" [shape=trapezium,orientation=270];
  "22 =" [shape=circle];
  "22 =" -> "27 D8" [label="out"];
  "22 =" -> "25 D8" [label="out"];
  "22 =" -> "23 -" [label="out"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "22 =" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <" [label="t2"];
  "19 C" [shape=trapezium,orientation=270];
  "19 C" -> "21 <" [label="t3"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "14 -" [shape=trapezium,orientation=270];
  "13 E8" [shape=box];
  "13 E8" -> "14 -" [label="t1"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "23 -";
  "in" -> "15 !";
  "in" -> "14 -";
  "in" -> "13 E8";
  "in" -> "12 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_51" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "dag_cleaned_1" of module "freia_51" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "26 <." [shape=trapezium,orientation=270];
  "26 <." -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "28 <" [label="t4"];
  "25 D8" -> "26 <." [label="t4"];
  "21 <." [shape=trapezium,orientation=270];
  "21 <." -> "25 D8" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <." [label="t2"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "15 !";
  "in" -> "12 E8";
}

! updated function for

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out, *t2, *t3, *t4, *t5;                          /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_aipo_erode_8c(out, in, k);                                     /*0012*/
   freia_aipo_not(out, in);                                             /*0015*/

   t4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);               /*0017*/

   freia_aipo_dilate_8c(t2, out, k);                                    /*0020*/
   freia_aipo_inf_const(t3, t2, 255);                                   /*0021*/
   freia_aipo_dilate_8c(t4, t3, k);                                     /*0025*/
   freia_aipo_inf_const(t5, t4, 255);                                   /*0026*/
   freia_aipo_inf(out, t5, t4);                                         /*0028*/
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_aipo_sub(out, in, out);                                        /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}
#
# SPOC
#

! initial function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out, *t0, *t1, *t2, *t3, *t4, *t5;                /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_aipo_erode_8c(out, in, k);                                     /*0012*/
   freia_aipo_erode_8c(t1, in, k);                                      /*0013*/
   freia_aipo_sub(t1, in, t1);                                          /*0014*/
   freia_aipo_not(out, in);                                             /*0015*/

   t4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);               /*0017*/

   freia_aipo_set_constant(t3, 255);                                    /*0019*/
   freia_aipo_dilate_8c(t2, out, k);                                    /*0020*/
   freia_aipo_inf(t3, t3, t2);                                          /*0021*/
   freia_aipo_copy(out, t3);                                            /*0022*/
   freia_aipo_sub(t0, in, out);                                         /*0023*/
   freia_aipo_set_constant(t5, 255);                                    /*0024*/
   freia_aipo_dilate_8c(t4, out, k);                                    /*0025*/
   freia_aipo_inf(t5, t5, t4);                                          /*0026*/
   freia_aipo_dilate_8c(t4, out, k);                                    /*0027*/
   freia_aipo_inf(out, t5, t4);                                         /*0028*/
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_aipo_sub(out, in, out);                                        /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(t1);                                      /*0040*/
   freia_common_destruct_data(t0);                                      /*0041*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_51" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "dag_1" of module "freia_51" in dot format
digraph "dag_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "27 D8" [shape=box];
  "27 D8" -> "28 <" [label="t4"];
  "26 <" [shape=trapezium,orientation=270];
  "26 <" -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "26 <" [label="t4"];
  "24 C" [shape=trapezium,orientation=270];
  "24 C" -> "26 <" [label="t5"];
  "23 -" [shape=trapezium,orientation=270];
  "22 =" [shape=circle];
  "22 =" -> "27 D8" [label="out"];
  "22 =" -> "25 D8" [label="out"];
  "22 =" -> "23 -" [label="out"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "22 =" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <" [label="t2"];
  "19 C" [shape=trapezium,orientation=270];
  "19 C" -> "21 <" [label="t3"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "14 -" [shape=trapezium,orientation=270];
  "13 E8" [shape=box];
  "13 E8" -> "14 -" [label="t1"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "23 -";
  "in" -> "15 !";
  "in" -> "14 -";
  "in" -> "13 E8";
  "in" -> "12 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_51" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "dag_cleaned_1" of module "freia_51" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "26 <." [shape=trapezium,orientation=270];
  "26 <." -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "28 <" [label="t4"];
  "25 D8" -> "26 <." [label="t4"];
  "21 <." [shape=trapezium,orientation=270];
  "21 <." -> "25 D8" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <." [label="t2"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "15 !";
  "in" -> "12 E8";
}
// graph for dag "freia_51_helper_0_0" of module "freia_51" in dot format
digraph "freia_51_helper_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "freia_51_helper_1_0" of module "freia_51" in dot format
digraph "freia_51_helper_1_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "t4" [shape=circle];

  // computation vertices
  "25 D8" [shape=box];
  "25 D8" -> "t4";
  "21 <." [shape=trapezium,orientation=270];
  "21 <." -> "25 D8" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <." [label="t2"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "15 !";
  "in" -> "12 E8";
}
// graph for dag "freia_51_helper_1_1" of module "freia_51" in dot format
digraph "freia_51_helper_1_1" {
  // inputs
  "t4" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "26 <." [shape=trapezium,orientation=270];
  "26 <." -> "28 <" [label="t5"];
  "t4" -> "28 <";
  "t4" -> "26 <.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_51
freia_status freia_51_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 35 sub
  // nope
  // 0`out [0 input 1] -> [0 alu] 35 sub
  // nope
  // alu 35 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [7 output 0] 0 null
  // 0`out [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_51
freia_status freia_51_helper_1_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 12 erode_8c
  // nope
  // poc 12 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`in [0 input 1] -> [0 alu] 15 not
  // nope
  // alu 15 not stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_NOT_IN1;


  // STAGE 1
  // 0`out [0 poc 0] -> [1 poc 0] 20 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`out [1 input 0] -> [1 poc 0] 20 dilate_8c
  // nope
  // poc 20 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`t2 [1 poc 0] -> [1 alu] 21 inf_const
  // nope
  // alu 21 inf_const stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`t3 [1 alu] -> [2 poc 0] 25 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`t3 [2 input 0] -> [2 poc 0] 25 dilate_8c
  // nope
  // poc 25 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // output image 0`out on 1 and image 0`t4 on 0
  // 0`out [0 poc 0] -> [2 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`out [1 input 1] -> [2 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out [2 input 1] -> [2 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out [2 output 1] -> [7 output 1] 0 null
  // 0`out [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`t4 [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t4 [2 output 0] -> [7 output 0] 0 null
  // 0`t4 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t4 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t4 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`t4 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t4 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_51
freia_status freia_51_helper_1_1_0(freia_data2d * o0, freia_data2d * i0,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t4 [0 input 0] -> [0 alu] 26 inf_const
  // nope
  // alu 26 inf_const stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`t5 [0 alu] -> [1 alu] 28 inf
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t5 [1 input 0] -> [1 alu] 28 inf
  // nope
  // 0`t4 [0 input 1] -> [1 alu] 28 inf
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`t4 [1 input 1] -> [1 alu] 28 inf
  // nope
  // alu 28 inf stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image 0`out on 0
  // 0`out [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [1 output 0] -> [7 output 0] 0 null
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

! updated function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out, *t4;                                         /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_51_helper_1_0_0(out, t4, in, k, 255);                          /*0012*/

   t4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);               /*0017*/

   freia_51_helper_1_1_0(out, t4, 255);                                 /*0026*/
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_51_helper_0_0_0(out, in, out);                                 /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}

! cleaned up function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out, *t4;                                         /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_51_helper_1_0_0(out, t4, in, k, 255);                          /*0012*/

   t4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);               /*0017*/

   freia_51_helper_1_1_0(out, t4, 255);                                 /*0026*/
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_51_helper_0_0_0(out, in, out);                                 /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}
#
# TERAPIX
#

! initial function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out, *t0, *t1, *t2, *t3, *t4, *t5;                /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_aipo_erode_8c(out, in, k);                                     /*0012*/
   freia_aipo_erode_8c(t1, in, k);                                      /*0013*/
   freia_aipo_sub(t1, in, t1);                                          /*0014*/
   freia_aipo_not(out, in);                                             /*0015*/

   t4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);               /*0017*/

   freia_aipo_set_constant(t3, 255);                                    /*0019*/
   freia_aipo_dilate_8c(t2, out, k);                                    /*0020*/
   freia_aipo_inf(t3, t3, t2);                                          /*0021*/
   freia_aipo_copy(out, t3);                                            /*0022*/
   freia_aipo_sub(t0, in, out);                                         /*0023*/
   freia_aipo_set_constant(t5, 255);                                    /*0024*/
   freia_aipo_dilate_8c(t4, out, k);                                    /*0025*/
   freia_aipo_inf(t5, t5, t4);                                          /*0026*/
   freia_aipo_dilate_8c(t4, out, k);                                    /*0027*/
   freia_aipo_inf(out, t5, t4);                                         /*0028*/
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_aipo_sub(out, in, out);                                        /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(t1);                                      /*0040*/
   freia_common_destruct_data(t0);                                      /*0041*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_51" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "dag_1" of module "freia_51" in dot format
digraph "dag_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "27 D8" [shape=box];
  "27 D8" -> "28 <" [label="t4"];
  "26 <" [shape=trapezium,orientation=270];
  "26 <" -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "26 <" [label="t4"];
  "24 C" [shape=trapezium,orientation=270];
  "24 C" -> "26 <" [label="t5"];
  "23 -" [shape=trapezium,orientation=270];
  "22 =" [shape=circle];
  "22 =" -> "27 D8" [label="out"];
  "22 =" -> "25 D8" [label="out"];
  "22 =" -> "23 -" [label="out"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "22 =" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <" [label="t2"];
  "19 C" [shape=trapezium,orientation=270];
  "19 C" -> "21 <" [label="t3"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "14 -" [shape=trapezium,orientation=270];
  "13 E8" [shape=box];
  "13 E8" -> "14 -" [label="t1"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "23 -";
  "in" -> "15 !";
  "in" -> "14 -";
  "in" -> "13 E8";
  "in" -> "12 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_51" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "dag_cleaned_1" of module "freia_51" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "26 <." [shape=trapezium,orientation=270];
  "26 <." -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "28 <" [label="t4"];
  "25 D8" -> "26 <." [label="t4"];
  "21 <." [shape=trapezium,orientation=270];
  "21 <." -> "25 D8" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <." [label="t2"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "15 !";
  "in" -> "12 E8";
}
// graph for dag "freia_51_helper_0_0_0" of module "freia_51" in dot format
digraph "freia_51_helper_0_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "35 -" [shape=trapezium,orientation=270];
  "35 -" -> "out";
  "out" -> "35 -";
  "in" -> "35 -";
}
// graph for dag "freia_51_helper_1_0_0" of module "freia_51" in dot format
digraph "freia_51_helper_1_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "28 <" [shape=trapezium,orientation=270];
  "28 <" -> "out";
  "26 <." [shape=trapezium,orientation=270];
  "26 <." -> "28 <" [label="t5"];
  "25 D8" [shape=box];
  "25 D8" -> "28 <" [label="t4"];
  "25 D8" -> "26 <." [label="t4"];
  "21 <." [shape=trapezium,orientation=270];
  "21 <." -> "25 D8" [label="t3"];
  "20 D8" [shape=box];
  "20 D8" -> "21 <." [label="t2"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "20 D8" [label="out"];
  "12 E8" [shape=box];
  "12 E8" -> "out";
  "in" -> "15 !";
  "in" -> "12 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_51
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 1 image operations in dag
 * dag length is 2, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 4
 * - communication: 96
 */
freia_status freia_51_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][1];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: -(1,2) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_1_0;
  mcu_macro[1][0].xmin3 = imagelet_io_1_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SUB3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 1;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module freia_51
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 7 image operations in dag
 * dag length is 7, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 59
 * - communication: 96
 */
freia_status freia_51_helper_1_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * i0,
  const int32_t * pi3,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 3;
  const int32_t y_3 = 0;
  // operation 5 parameters
  int16_t p_5[1];
  const int32_t x_5 = 4;
  const int32_t y_5 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][7];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: !(1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_NOT;
  // 2: D8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: <.(3) -> 3
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi4;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_INF_CONST?;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_INF_CONST?;
  // 4: D8(3) -> 1
  mcu_macro[0][4].xmin1 = imagelet_3;
  mcu_macro[1][4].xmin1 = imagelet_3;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: <.(1) -> 3
  mcu_macro[0][5].xmin1 = imagelet_io_1_0;
  mcu_macro[1][5].xmin1 = imagelet_io_1_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_3;
  mcu_macro[1][5].xmin2 = imagelet_3;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  // copy of operation 5 parameters
  p_5[0] = pi5;
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][5].xmin3 = x_5;
  mcu_macro[1][5].xmin3 = x_5;
  mcu_macro[0][5].ymin3 = y_5;
  mcu_macro[1][5].ymin3 = y_5;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_INF_CONST?;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_INF_CONST?;
  // 6: <(3,1) -> 1
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_1_0;
  mcu_macro[1][6].xmin2 = imagelet_io_1_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_io_1_0;
  mcu_macro[1][6].xmin3 = imagelet_io_1_1;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_INF3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 2 is o0 for out
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 7;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


! updated function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_51_helper_1_0_0(out, out, in, k, 255, 255);                    /*0012*/
   
   
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_51_helper_0_0_0(out, in, out);                                 /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}

! cleaned up function

int freia_51(int32_t *k)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t volcurrent, volprevious;                                     /*0008*/

   freia_common_rx_image(in, &fdin);                                    /*0010*/

   freia_51_helper_1_0_0(out, out, in, k, 255, 255);                    /*0012*/
   
   
   do {                                                                 /*0033*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0031*/
   }
   while (volcurrent!=volprevious);                                     /*0033*/

   freia_51_helper_0_0_0(out, in, out);                                 /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/

   freia_common_destruct_data(in);                                      /*0039*/
   freia_common_destruct_data(out);                                     /*0042*/

   return 0;                                                            /*0044*/
}
#
# FREIA COMPILATION DONE
#

