#
# AIPO
#
#
# compile generated freia_30
#

! initial function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_aipo_threshold(o0, i, 10, 20, true);                           /*0009*/
   freia_aipo_add(o1, i, i);                                            /*0010*/

   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_30" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "i" -> "10 +";
  "i" -> "10 +";
  "i" -> "9 thr";
}
// graph for dag "dag_cleaned_0" of module "freia_30" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "i" -> "10 +";
  "i" -> "10 +";
  "i" -> "9 thr";
}

! updated function for

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_aipo_threshold(o0, i, 10, 20, true);                           /*0009*/
   freia_aipo_add(o1, i, i);                                            /*0010*/

   return FREIA_OK;                                                     /*0012*/
}
#
# SPOC
#

! initial function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_aipo_threshold(o0, i, 10, 20, true);                           /*0009*/
   freia_aipo_add(o1, i, i);                                            /*0010*/

   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_30" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "i" -> "10 +";
  "i" -> "10 +";
  "i" -> "9 thr";
}
// graph for dag "dag_cleaned_0" of module "freia_30" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "i" -> "10 +";
  "i" -> "10 +";
  "i" -> "9 thr";
}
// graph for dag "freia_30_helper_0_0" of module "freia_30" in dot format
digraph "freia_30_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "i" -> "9 thr";
  "i" -> "10 +";
  "i" -> "10 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_30
freia_status freia_30_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 alu] 10 add
  // nope
  // i [0 input 1] -> [0 alu] 10 add
  // nope
  // alu 10 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;

  // i [0 input 1] -> [0 threshold 1] 9 threshold
  si.mux[0][3].op = SPOC_MUX_IN1;
  // threshold 9 threshold stage 0 side 1
  si.th[0][1].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = pi0;
  sp.th[0][1].boundmax = pi1;


  // output image o0 on 1 and image o1 on 0
  // o0 [0 threshold 1] -> [0 output 1] 0 null
  // nope

  // fill in to the end...
  // o0 [0 output 1] -> [7 output 1] 0 null
  // o0 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // o0 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // o0 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o0 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o0 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o0 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o0 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // o1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [0 output 0] -> [7 output 0] 0 null
  // o1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i0);

  return ret;
}

! updated function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_30_helper_0_0_0(o0, o1, i, 10, 20, true);                      /*0009*/

   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_30_helper_0_0_0(o0, o1, i, 10, 20, 1);                         /*0009*/

   return 0;                                                            /*0012*/
}
#
# TERAPIX
#

! initial function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_aipo_threshold(o0, i, 10, 20, true);                           /*0009*/
   freia_aipo_add(o1, i, i);                                            /*0010*/

   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_30" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "i" -> "10 +";
  "i" -> "10 +";
  "i" -> "9 thr";
}
// graph for dag "dag_cleaned_0" of module "freia_30" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "i" -> "10 +";
  "i" -> "10 +";
  "i" -> "9 thr";
}
// graph for dag "freia_30_helper_0_0_0" of module "freia_30" in dot format
digraph "freia_30_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "9 thr" [shape=parallelogram];
  "9 thr" -> "o0";
  "10 +" [shape=trapezium,orientation=270];
  "10 +" -> "o1";
  "i" -> "9 thr";
  "i" -> "10 +";
  "i" -> "10 +";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0 copies

/* FREIA terapix helper function for module freia_30
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 2 image operations in dag
 * dag length is 2, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 9
 * - communication: 96
 */
freia_status freia_30_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1 parameters
  int16_t p_1[3];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +(1,1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_2_0;
  mcu_macro[1][0].xmin3 = imagelet_io_2_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD3;
  // 1: thr(1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi3;
  p_1[1] = pi4;
  p_1[2] = pi5;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_THRESHOLD;


  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for o1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


! updated function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_30_helper_0_0_0(o0, o1, i, 10, 20, true);                      /*0009*/

   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_30(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses (similar to freia_27)
   // o0 = f(i)
   // o1 = i + i
   freia_30_helper_0_0_0(o0, o1, i, 10, 20, 1);                         /*0009*/

   return 0;                                                            /*0012*/
}
#
# FREIA COMPILATION DONE
#

