
! initial function

freia_status freia_34(freia_data2d *o, freia_data2d *i, int32_t *k)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0007*/
   
   // 1 stage pipeline
   // t1 = f(i)
   // t2 = g(i)
   // o  = t1 - t2
   freia_aipo_erode_8c(t1, i, k);                                       /*0013*/
   freia_aipo_dilate_8c(t2, i, k);                                      /*0014*/
   freia_aipo_sub(o, t1, t2);                                           /*0015*/

   freia_common_destruct_data(t1);                                      /*0017*/
   freia_common_destruct_data(t2);                                      /*0018*/

   return FREIA_OK;                                                     /*0020*/
}

! graphs

// graph for dag "dag_0" of module "freia_34" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 -" [shape=trapezium,orientation=270];
  "15 -" -> "o";
  "14 D8" [shape=box];
  "14 D8" -> "15 -" [label="t2"];
  "13 E8" [shape=box];
  "13 E8" -> "15 -" [label="t1"];
  "i" -> "14 D8";
  "i" -> "13 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_34" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 -" [shape=trapezium,orientation=270];
  "15 -" -> "o";
  "14 D8" [shape=box];
  "14 D8" -> "15 -" [label="t2"];
  "13 E8" [shape=box];
  "13 E8" -> "15 -" [label="t1"];
  "i" -> "14 D8";
  "i" -> "13 E8";
}
// graph for dag "freia_34_helper_0_0" of module "freia_34" in dot format
digraph "freia_34_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 -" [shape=trapezium,orientation=270];
  "15 -" -> "o";
  "14 D8" [shape=box];
  "14 D8" -> "15 -" [label="t2"];
  "13 E8" [shape=box];
  "13 E8" -> "15 -" [label="t1"];
  "i" -> "14 D8";
  "i" -> "13 E8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_34
freia_status freia_34_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, int32_t *kern0, int32_t *kern1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 13 erode_8c
  // nope
  // poc 13 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = kern0[i];

  // i [0 input 1] -> [0 poc 1] 14 dilate_8c
  // nope
  // poc 14 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = kern1[i];

  // 0`t1 [0 poc 0] -> [0 alu] 15 sub
  // nope
  // 0`t2 [0 poc 1] -> [0 alu] 15 sub
  // nope
  // alu 15 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

! updated function

freia_status freia_34(freia_data2d *o, freia_data2d *i, int32_t *k)
{
   
   
   
   // 1 stage pipeline
   // t1 = f(i)
   // t2 = g(i)
   // o  = t1 - t2
   freia_34_helper_0_0_0(o, i, k, k);                                   /*0013*/
   
   
   return FREIA_OK;                                                     /*0020*/
}

