
! initial function

freia_status my_copy(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_copy(o, i0);                                       /*0004*/
}

! accelerated function

// graph for dag "dag_0" of module "my_copy" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "4 copy" [shape=circle];
  "i0" -> "4 copy";
  "4 copy" -> "o";
}
// graph for dag "my_copy_helper_0" of module "my_copy" in dot format
digraph "my_copy_helper_0" {
  // inputs
  "i0" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "4 copy" [shape=circle];
  "i0" -> "4 copy";
  "4 copy" -> "o";
}
#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module my_copy
freia_status my_copy_helper_0(freia_data2d * o0, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 input 0] o
  // nope


  // output image o on 0
  // o [0 input 0] -> [0 output 0] o
  si.mux[0][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, NULL);

  return ret;
}

! new function

freia_status my_copy(freia_data2d *o, freia_data2d *i0)
{
   return my_copy_helper_0(o, i0);                                      /*0004*/
}
