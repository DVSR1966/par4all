
! initial function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);
   freia_data2d *t1 = freia_common_create_data(16, 128, 128);
   freia_data2d *t2 = freia_common_create_data(16, 128, 128);
   freia_data2d *t3 = freia_common_create_data(16, 128, 128);
   freia_data2d *t4 = freia_common_create_data(16, 128, 128);
   freia_data2d *t5 = freia_common_create_data(16, 128, 128);
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(t0, i);                                              /*0021*/
   freia_aipo_copy(t1, t0);                                             /*0022*/
   freia_aipo_copy(t2, t1);                                             /*0023*/
   freia_aipo_copy(o, t2);                                              /*0024*/
   freia_aipo_copy(t3, t1);                                             /*0025*/
   freia_aipo_copy(t4, t0);                                             /*0026*/
   freia_aipo_copy(t5, o);                                              /*0027*/

   freia_common_destruct_data(t0);                                      /*0029*/
   freia_common_destruct_data(t1);                                      /*0030*/
   freia_common_destruct_data(t2);                                      /*0031*/
   freia_common_destruct_data(t3);                                      /*0032*/
   freia_common_destruct_data(t4);                                      /*0033*/
   freia_common_destruct_data(t5);                                      /*0034*/

   return FREIA_OK;                                                     /*0036*/
}

! graphs

// graph for dag "dag_0" of module "freia_17" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];
  "t3" [shape=circle];
  "t4" [shape=circle];
  "t5" [shape=circle];

  // computation vertices
  "27 =" [shape=circle];
  "27 =" -> "t5";
  "26 =" [shape=circle];
  "26 =" -> "t4";
  "25 =" [shape=circle];
  "25 =" -> "t3";
  "24 =" [shape=circle];
  "24 =" -> "27 =" [label="o"];
  "24 =" -> "o";
  "23 =" [shape=circle];
  "23 =" -> "24 =" [label="t2"];
  "22 =" [shape=circle];
  "22 =" -> "25 =" [label="t1"];
  "22 =" -> "23 =" [label="t1"];
  "21 =" [shape=circle];
  "21 =" -> "26 =" [label="t0"];
  "21 =" -> "22 =" [label="t0"];
  "i" -> "21 =";
}
// graph for dag "dag_cleaned_0" of module "freia_17" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];
  "t3" [shape=circle];
  "t4" [shape=circle];
  "t5" [shape=circle];

  // computation vertices
  "27 =" [shape=circle];
  "27 =" -> "t5";
  "26 =" [shape=circle];
  "26 =" -> "t4";
  "25 =" [shape=circle];
  "25 =" -> "t3";
  "24 =" [shape=circle];
  "24 =" -> "o";
  "i" -> "26 =";
  "i" -> "24 =";
  "i" -> "27 =";
  "i" -> "25 =";
}
// graph for dag "freia_17_helper_0_0" of module "freia_17" in dot format
digraph "freia_17_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];
  "t3" [shape=circle];

  // computation vertices
  "25 =" [shape=circle];
  "25 =" -> "t3";
  "24 =" [shape=circle];
  "24 =" -> "o";
  "i" -> "25 =";
  "i" -> "24 =";
}
// graph for dag "freia_17_helper_0_1" of module "freia_17" in dot format
digraph "freia_17_helper_0_1" {
  // inputs
  "i" [shape=circle];

  // outputs
  "t4" [shape=circle];
  "t5" [shape=circle];

  // computation vertices
  "27 =" [shape=circle];
  "27 =" -> "t5";
  "26 =" [shape=circle];
  "26 =" -> "t4";
  "i" -> "27 =";
  "i" -> "26 =";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_17
freia_status freia_17_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 input 0] 24 copy
  // nope
  // i [0 input 1] -> [0 input 1] 25 copy
  // nope

  // output image o on 0 and image 0`t3 on 1
  // o [0 input 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`t3 [0 input 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`t3 [0 output 1] -> [7 output 1] 0 null
  // 0`t3 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`t3 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`t3 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`t3 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`t3 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`t3 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`t3 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_17
freia_status freia_17_helper_0_1_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 input 0] 26 copy
  // nope
  // i [0 input 1] -> [0 input 1] 27 copy
  // nope

  // output image 0`t4 on 0 and image 0`t5 on 1
  // 0`t4 [0 input 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t4 [0 output 0] -> [7 output 0] 0 null
  // 0`t4 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t4 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t4 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t4 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t4 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`t4 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t4 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`t5 [0 input 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`t5 [0 output 1] -> [7 output 1] 0 null
  // 0`t5 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`t5 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`t5 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`t5 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`t5 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`t5 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`t5 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, o1, i0, i0);

  return ret;
}

! updated function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t3 = freia_common_create_data(16, 128, 128);
   freia_data2d *t4 = freia_common_create_data(16, 128, 128);
   freia_data2d *t5 = freia_common_create_data(16, 128, 128);
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_17_helper_0_0_0(o, t3, i);                                     /*0024*/
   freia_17_helper_0_1_0(t4, t5, i);                                    /*0026*/

   freia_common_destruct_data(t3);                                      /*0032*/
   freia_common_destruct_data(t4);                                      /*0033*/
   freia_common_destruct_data(t5);                                      /*0034*/

   return FREIA_OK;                                                     /*0036*/
}
