
! initial function

freia_status freia_23(freia_data2d *o, freia_data2d *io, freia_data2d *i1)
{
   // external input variable reuse
   // o = io ^ i1
   // io' = o - io
   // o = o + io'
   freia_aipo_xor(o, io, i1);                                           /*0009*/
   freia_aipo_sub(io, o, io);                                           /*0010*/
   freia_aipo_add(o, o, io);                                            /*0011*/

   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_23" in dot format
digraph "dag_0" {
  // inputs
  "i1" [shape=circle];
  "io" [shape=circle];

  // outputs
  "io" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 -" [shape=trapezium,orientation=270];
  "10 -" -> "11 +";
  "io" -> "10 -";
  "10 -" -> "io";
  "9 ^" [shape=trapezium,orientation=270];
  "9 ^" -> "11 +";
  "9 ^" -> "10 -";
  "io" -> "9 ^";
  "i1" -> "9 ^";
}
// graph for dag "dag_cleaned_0" of module "freia_23" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i1" [shape=circle];
  "io" [shape=circle];

  // outputs
  "io" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 -" [shape=trapezium,orientation=270];
  "10 -" -> "11 +";
  "io" -> "10 -";
  "10 -" -> "io";
  "9 ^" [shape=trapezium,orientation=270];
  "9 ^" -> "11 +";
  "9 ^" -> "10 -";
  "io" -> "9 ^";
  "i1" -> "9 ^";
}
// graph for dag "freia_23_helper_0_0" of module "freia_23" in dot format
digraph "freia_23_helper_0_0" {
  // inputs
  "i1" [shape=circle];
  "io" [shape=circle];

  // outputs
  "io" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 -" [shape=trapezium,orientation=270];
  "10 -" -> "11 +";
  "io" -> "10 -";
  "10 -" -> "io";
  "9 ^" [shape=trapezium,orientation=270];
  "9 ^" -> "11 +";
  "9 ^" -> "10 -";
  "io" -> "9 ^";
  "i1" -> "9 ^";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_23
freia_status freia_23_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i1 [0 input 0] -> [0 alu] 9 xor
  // nope
  // io [0 input 1] -> [0 alu] 9 xor
  // nope
  // alu 9 xor stage 0
  si.alu[0][0].op = SPOC_ALU_XOR_IN0_IN1;


  // STAGE 1
  // o [0 alu] -> [1 alu] 10 sub
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // o [1 input 0] -> [1 alu] 10 sub
  // nope
  // io [0 input 1] -> [1 alu] 10 sub
  si.mux[0][3].op = SPOC_MUX_IN1;
  // io [1 input 1] -> [1 alu] 10 sub
  // nope
  // alu 10 sub stage 1
  si.alu[1][0].op = SPOC_ALU_SUB_IN0_IN1;


  // STAGE 2
  // o [1 input 0] -> [2 alu] 11 add
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [2 alu] 11 add
  // nope
  // io [1 alu] -> [2 alu] 11 add
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // io [2 input 1] -> [2 alu] 11 add
  // nope
  // alu 11 add stage 2
  si.alu[2][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image io on 1 and image o on 0
  // io [2 input 1] -> [2 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // o [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o1, o0, i0, i1);

  return ret;
}

! updated function

freia_status freia_23(freia_data2d *o, freia_data2d *io, freia_data2d *i1)
{
   // external input variable reuse
   // o = io ^ i1
   // io' = o - io
   // o = o + io'
   freia_23_helper_0_0_0(io, o, i1, io);                                /*0009*/

   return FREIA_OK;                                                     /*0013*/
}
