
! initial function

freia_status freia_23(freia_data2d *o, freia_data2d *io, freia_data2d *i1)
{
   // external input variable reuse
   // BUG io is not extracted from the pipe
   // o = io ^ i1
   // io' = o - io
   // o = o + io'
   freia_aipo_xor(o, io, i1);                                           /*0010*/
   freia_aipo_sub(io, o, io);                                           /*0011*/
   freia_aipo_add(o, o, io);                                            /*0012*/

   return FREIA_OK;                                                     /*0014*/
}

! accelerated function

// graph for dag "dag_0" of module "freia_23" in dot format
digraph "dag_0" {
  // inputs
  "io" [shape=box];
  "i1" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "12 add" [shape=circle];
  "12 add" -> "o";
  "11 sub" [shape=circle];
  "11 sub" -> "12 add";
  "io" -> "11 sub";
  "10 xor" [shape=circle];
  "10 xor" -> "12 add";
  "10 xor" -> "11 sub";
  "io" -> "10 xor";
  "i1" -> "10 xor";
}
// graph for dag "dag_cleaned_0" of module "freia_23" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "io" [shape=box];
  "i1" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "12 add" [shape=circle];
  "12 add" -> "o";
  "11 sub" [shape=circle];
  "11 sub" -> "12 add";
  "io" -> "11 sub";
  "10 xor" [shape=circle];
  "10 xor" -> "12 add";
  "10 xor" -> "11 sub";
  "io" -> "10 xor";
  "i1" -> "10 xor";
}
// graph for dag "freia_23_helper_0_0" of module "freia_23" in dot format
digraph "freia_23_helper_0_0" {
  // inputs
  "io" [shape=box];
  "i1" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "12 add" [shape=circle];
  "12 add" -> "o";
  "11 sub" [shape=circle];
  "11 sub" -> "12 add";
  "io" -> "11 sub";
  "10 xor" [shape=circle];
  "10 xor" -> "12 add";
  "10 xor" -> "11 sub";
  "io" -> "10 xor";
  "i1" -> "10 xor";
}
#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_23
freia_status freia_23_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // io [0 input 0] -> [0 alu] 10 xor
  // nope
  // i1 [0 input 1] -> [0 alu] 10 xor
  // nope
  // alu 10 xor stage 0
  si.alu[0][0].op = SPOC_ALU_XOR_IN0_IN1;


  // STAGE 1
  // io [0 input 0] -> [1 alu] 11 sub
  si.mux[0][0].op = SPOC_MUX_IN0;
  // io [1 input 0] -> [1 alu] 11 sub
  // nope
  // o [0 alu] -> [1 alu] 11 sub
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // o [1 input 1] -> [1 alu] 11 sub
  // nope
  // alu 11 sub stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_SUB_IN1_IN0;


  // STAGE 2
  // io [1 alu] -> [2 alu] 12 add
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // io [2 input 0] -> [2 alu] 12 add
  // nope
  // o [1 input 1] -> [2 alu] 12 add
  si.mux[1][3].op = SPOC_MUX_IN1;
  // o [2 input 1] -> [2 alu] 12 add
  // nope
  // alu 12 add stage 2
  si.alu[2][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image o on 0
  // o [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

! what about io extraction?

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

! new function

freia_status freia_23(freia_data2d *o, freia_data2d *io, freia_data2d *i1)
{
   // external input variable reuse
   // BUG io is not extracted from the pipe
   // o = io ^ i1
   // io' = o - io
   // o = o + io'
   freia_23_helper_0_0_0(o, io, i1);                                    /*0010*/

   return FREIA_OK;                                                     /*0014*/
}
