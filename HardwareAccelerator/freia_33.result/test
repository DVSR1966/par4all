
! initial function

freia_status freia_33(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   
   
   
   
   
   
   
   freia_data2d *X0 = freia_common_create_data(16, 128, 128), *X1 = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);   /*0013*/
   int sA, sB, sC;                                                      /*0014*/
   
   // complex dag for split
   // A
   freia_aipo_global_max(i, &sA);                                       /*0018*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0020*/
   // A
   freia_aipo_erode_8c(X0, i, k);                                       /*0022*/
   // A
   freia_aipo_global_min(X0, &sB);                                      /*0024*/
   // C
   freia_aipo_threshold(tC, X0, sB-10, sB-1, false);                    /*0026*/
   freia_aipo_add(tC2, tC, tC);                                         /*0027*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0029*/
   freia_aipo_mul(X1, tB2, tB);                                         /*0030*/
   freia_aipo_global_vol(X1, &sC);                                      /*0031*/
   // D
   freia_aipo_threshold(tD, X1, sC-10, sC-1, false);                    /*0033*/
   freia_aipo_add(o, tC2, tD);                                          /*0034*/

   freia_common_destruct_data(X0);                                      /*0036*/
   freia_common_destruct_data(X1);                                      /*0037*/
   freia_common_destruct_data(tB);                                      /*0038*/
   freia_common_destruct_data(tB2);                                     /*0039*/
   freia_common_destruct_data(tC);                                      /*0040*/
   freia_common_destruct_data(tC2);                                     /*0041*/
   freia_common_destruct_data(tD);                                      /*0042*/
   return FREIA_OK;                                                     /*0043*/
}

! graphs

// graph for dag "dag_0" of module "freia_33" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 +" [shape=trapezium,orientation=270];
  "34 +" -> "o";
  "33 thr" [shape=parallelogram];
  "33 thr" -> "34 +" [label="tD"];
  "31 vol" [shape=diamond];
  "31 vol" -> "33 thr" [arrowhead=empty,label="sC"];
  "30 *" [shape=trapezium,orientation=270];
  "30 *" -> "33 thr" [label="X1"];
  "30 *" -> "31 vol" [label="X1"];
  "29 D8" [shape=box];
  "29 D8" -> "30 *" [label="tB2"];
  "27 +" [shape=trapezium,orientation=270];
  "27 +" -> "34 +" [label="tC2"];
  "26 thr" [shape=parallelogram];
  "26 thr" -> "27 +" [label="tC"];
  "26 thr" -> "27 +" [label="tC"];
  "24 min" [shape=diamond];
  "24 min" -> "26 thr" [arrowhead=empty,label="sB"];
  "22 E8" [shape=box];
  "22 E8" -> "26 thr" [label="X0"];
  "22 E8" -> "24 min" [label="X0"];
  "20 thr" [shape=parallelogram];
  "20 thr" -> "30 *" [label="tB"];
  "20 thr" -> "29 D8" [label="tB"];
  "18 max" [shape=diamond];
  "18 max" -> "20 thr" [arrowhead=empty,label="sA"];
  "i" -> "22 E8";
  "i" -> "20 thr";
  "i" -> "18 max";
}
// graph for dag "dag_cleaned_0" of module "freia_33" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 +" [shape=trapezium,orientation=270];
  "34 +" -> "o";
  "33 thr" [shape=parallelogram];
  "33 thr" -> "34 +" [label="tD"];
  "31 vol" [shape=diamond];
  "31 vol" -> "33 thr" [arrowhead=empty,label="sC"];
  "30 *" [shape=trapezium,orientation=270];
  "30 *" -> "33 thr" [label="X1"];
  "30 *" -> "31 vol" [label="X1"];
  "29 D8" [shape=box];
  "29 D8" -> "30 *" [label="tB2"];
  "27 +" [shape=trapezium,orientation=270];
  "27 +" -> "34 +" [label="tC2"];
  "26 thr" [shape=parallelogram];
  "26 thr" -> "27 +" [label="tC"];
  "26 thr" -> "27 +" [label="tC"];
  "24 min" [shape=diamond];
  "24 min" -> "26 thr" [arrowhead=empty,label="sB"];
  "22 E8" [shape=box];
  "22 E8" -> "26 thr" [label="X0"];
  "22 E8" -> "24 min" [label="X0"];
  "20 thr" [shape=parallelogram];
  "20 thr" -> "30 *" [label="tB"];
  "20 thr" -> "29 D8" [label="tB"];
  "18 max" [shape=diamond];
  "18 max" -> "20 thr" [arrowhead=empty,label="sA"];
  "i" -> "22 E8";
  "i" -> "20 thr";
  "i" -> "18 max";
}
// graph for dag "freia_33_helper_0_0" of module "freia_33" in dot format
digraph "freia_33_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X0" [shape=circle];

  // computation vertices
  "24 min" [shape=diamond];
  "22 E8" [shape=box];
  "22 E8" -> "24 min" [label="X0"];
  "22 E8" -> "X0";
  "18 max" [shape=diamond];
  "i" -> "22 E8";
  "i" -> "18 max";
}
// graph for dag "freia_33_helper_0_1" of module "freia_33" in dot format
digraph "freia_33_helper_0_1" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X1" [shape=circle];

  // computation vertices
  "31 vol" [shape=diamond];
  "30 *" [shape=trapezium,orientation=270];
  "30 *" -> "31 vol" [label="X1"];
  "30 *" -> "X1";
  "29 D8" [shape=box];
  "29 D8" -> "30 *" [label="tB2"];
  "20 thr" [shape=parallelogram];
  "20 thr" -> "30 *" [label="tB"];
  "20 thr" -> "29 D8" [label="tB"];
  "i" -> "20 thr";
}
// graph for dag "freia_33_helper_0_2" of module "freia_33" in dot format
digraph "freia_33_helper_0_2" {
  // inputs
  "X0" [shape=circle];
  "X1" [shape=circle];

  // outputs
  "tC" [shape=circle];
  "tD" [shape=circle];

  // computation vertices
  "26 thr" [shape=parallelogram];
  "26 thr" -> "tC";
  "X0" -> "26 thr";
  "33 thr" [shape=parallelogram];
  "33 thr" -> "tD";
  "X1" -> "33 thr";
}
// graph for dag "freia_33_helper_0_3" of module "freia_33" in dot format
digraph "freia_33_helper_0_3" {
  // inputs
  "tC" [shape=circle];

  // outputs
  "tC2" [shape=circle];

  // computation vertices
  "27 +" [shape=trapezium,orientation=270];
  "27 +" -> "tC2";
  "tC" -> "27 +";
  "tC" -> "27 +";
}
// graph for dag "freia_33_helper_0_4" of module "freia_33" in dot format
digraph "freia_33_helper_0_4" {
  // inputs
  "tC2" [shape=circle];
  "tD" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 +" [shape=trapezium,orientation=270];
  "34 +" -> "o";
  "tD" -> "34 +";
  "tC2" -> "34 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_33
freia_status freia_33_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, int32_t * red0, int32_t *kern1, int32_t * red2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;


  // STAGE 1
  // i [0 measure 0] -> [1 poc 0] 22 erode_8c
  // i [1 input 0] -> [1 poc 0] 22 erode_8c
  // nope
  // poc 22 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = kern1[i];

  // 0`X0 [1 poc 0] -> [1 measure 0] 22 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;


  // output image 0`X0 on 0
  // 0`X0 [1 measure 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`X0 [1 output 0] -> [7 output 0] 0 null
  // 0`X0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`X0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`X0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`X0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`X0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`X0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 18 global_max stage 0 side 0
  *red0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 24 global_min stage 1 side 0
  *red2 = (int32_t) reduc.measure[1][0].minimum;

  return ret;
}

// FREIA-SPoC helper function for module freia_33
freia_status freia_33_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, int32_t inf0, int32_t sup1, bool bin2, int32_t *kern3, int32_t * red4)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 threshold 0] 20 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 20 threshold stage 0 side 0
  si.th[0][0].op = bin2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = inf0;
  sp.th[0][0].boundmax = sup1;


  // STAGE 3
  // 0`tB [0 threshold 0] -> [3 poc 0] 29 dilate_8c
  // 0`tB [1 input 0] -> [3 poc 0] 29 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tB [2 input 0] -> [3 poc 0] 29 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tB [3 input 0] -> [3 poc 0] 29 dilate_8c
  // nope
  // poc 29 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = kern3[i];

  // 0`tB [2 poc 0] -> [3 alu] 30 mul
  si.mux[2][1].op = SPOC_MUX_IN0;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`tB [3 input 1] -> [3 alu] 30 mul
  // nope
  // 0`tB2 [3 poc 0] -> [3 alu] 30 mul
  // nope
  // alu 30 mul stage 3
  si.alu[3][0].op = SPOC_ALU_MUL_IN0_IN1;

  // 0`X1 [3 alu] -> [3 measure 0] 30 mul
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;


  // output image 0`X1 on 0
  // 0`X1 [3 measure 0] -> [3 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`X1 [3 output 0] -> [7 output 0] 0 null
  // 0`X1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`X1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`X1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`X1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 31 global_vol stage 3 side 0
  *red4 = (int32_t) reduc.measure[3][0].volume;

  return ret;
}

// FREIA-SPoC helper function for module freia_33
freia_status freia_33_helper_0_2_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1, int32_t inf0, int32_t sup1, bool bin2, int32_t inf3, int32_t sup4, bool bin5)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`X1 [0 input 1] -> [0 threshold 1] 33 threshold
  si.mux[0][3].op = SPOC_MUX_IN1;
  // threshold 33 threshold stage 0 side 1
  si.th[0][1].op = bin2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = inf0;
  sp.th[0][1].boundmax = sup1;

  // 0`X0 [0 input 0] -> [0 threshold 0] 26 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 26 threshold stage 0 side 0
  si.th[0][0].op = bin5? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = inf3;
  sp.th[0][0].boundmax = sup4;


  // output image 0`tC on 0 and image 0`tD on 1
  // 0`tC [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`tC [0 output 0] -> [7 output 0] 0 null
  // 0`tC [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tC [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tC [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tC [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tC [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tC [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tC [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`tD [0 threshold 1] -> [0 output 1] 0 null
  // nope

  // fill in to the end...
  // 0`tD [0 output 1] -> [7 output 1] 0 null
  // 0`tD [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`tD [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`tD [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`tD [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`tD [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`tD [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`tD [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_33
freia_status freia_33_helper_0_3_0(freia_data2d * o0, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tC [0 input 0] -> [0 alu] 27 add
  // nope
  // 0`tC [0 input 1] -> [0 alu] 27 add
  // nope
  // alu 27 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image 0`tC2 on 0
  // 0`tC2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`tC2 [0 output 0] -> [7 output 0] 0 null
  // 0`tC2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tC2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tC2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tC2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tC2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tC2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tC2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_33
freia_status freia_33_helper_0_4_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tC2 [0 input 0] -> [0 alu] 34 add
  // nope
  // 0`tD [0 input 1] -> [0 alu] 34 add
  // nope
  // alu 34 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_33(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   
   
   
   
   
   
   
   freia_data2d *X0 = freia_common_create_data(16, 128, 128), *X1 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);      /*0013*/
   int sA, sB, sC;                                                      /*0014*/
   
   // complex dag for split
   // A
   freia_33_helper_0_0_0(X0, i, &sA, k, &sB);                           /*0018*/
   // B
   freia_33_helper_0_1_0(X1, i, sA-10, sA-1, false, k, &sC);            /*0020*/
   // A
   // A
   // C
   freia_33_helper_0_2_0(tC, tD, X0, X1, sC-10, sC-1, false, sB-10, sB-1, false);      /*0026*/
   freia_33_helper_0_3_0(tC2, tC);                                      /*0027*/
   // B
   // D
   freia_33_helper_0_4_0(o, tC2, tD);                                   /*0034*/

   freia_common_destruct_data(X0);                                      /*0036*/
   freia_common_destruct_data(X1);                                      /*0037*/
   freia_common_destruct_data(tC);                                      /*0040*/
   freia_common_destruct_data(tC2);                                     /*0041*/
   freia_common_destruct_data(tD);                                      /*0042*/
   return FREIA_OK;                                                     /*0043*/
}

