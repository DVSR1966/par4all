
! initial function

freia_status freia_stuff(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp1 = freia_common_create_data(16, 128, 128);
   freia_data2d *tmp2 = freia_common_create_data(16, 128, 128);
   
   // o = inf(i0 + i1, i0) - i0
   freia_aipo_add(tmp1, i0, i1);                                        /*0010*/
   freia_aipo_inf(tmp2, tmp1, i0);                                      /*0011*/
   freia_aipo_sub(o, tmp2, i0);                                         /*0012*/

   freia_common_destruct_data(tmp1);                                    /*0014*/
   freia_common_destruct_data(tmp2);                                    /*0015*/

   return FREIA_OK;                                                     /*0017*/
}

! accelerated function

// FREIA-SPoC helper function for module freia_stuff
freia_status freia_stuff_helper_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);

  // stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;

  // ??? what about setting links?
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;

  // ??? what about setting links?
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // stage 2
  si.alu[2][0].op = SPOC_ALU_SUB_IN0_IN1;

  // ??? what about setting links?
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_1o(op, param, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

! new function

freia_status freia_stuff(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp1 = freia_common_create_data(16, 128, 128);
   freia_data2d *tmp2 = freia_common_create_data(16, 128, 128);
   
   // o = inf(i0 + i1, i0) - i0
   freia_stuff_helper_0(o, i0, i1);                                     /*0010*/
   ;
   ;

   freia_common_destruct_data(tmp1);                                    /*0014*/
   freia_common_destruct_data(tmp2);                                    /*0015*/

   return FREIA_OK;                                                     /*0017*/
}
