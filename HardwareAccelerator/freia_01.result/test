
! initial function

freia_status freia_01(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp1 = freia_common_create_data(16, 128, 128);
   freia_data2d *tmp2 = freia_common_create_data(16, 128, 128);
   
   // o = inf(i0 + i1, i0) - i0
   freia_aipo_add(tmp1, i0, i1);                                        /*0010*/
   freia_aipo_inf(tmp2, tmp1, i0);                                      /*0011*/
   freia_aipo_sub(o, tmp2, i0);                                         /*0012*/

   freia_common_destruct_data(tmp1);                                    /*0014*/
   freia_common_destruct_data(tmp2);                                    /*0015*/

   return FREIA_OK;                                                     /*0017*/
}

! accelerated function

// graph for dag "dag_0" of module "freia_01" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=box];
  "i1" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "12 sub" [shape=circle];
  "i0" -> "12 sub";
  "12 sub" -> "o";
  "11 inf" [shape=circle];
  "11 inf" -> "12 sub";
  "i0" -> "11 inf";
  "10 add" [shape=circle];
  "10 add" -> "11 inf";
  "i0" -> "10 add";
  "i1" -> "10 add";
}
// graph for dag "freia_01_helper_0" of module "freia_01" in dot format
digraph "freia_01_helper_0" {
  // inputs
  "i0" [shape=box];
  "i1" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "12 sub" [shape=circle];
  "i0" -> "12 sub";
  "12 sub" -> "o";
  "11 inf" [shape=circle];
  "11 inf" -> "12 sub";
  "i0" -> "11 inf";
  "10 add" [shape=circle];
  "10 add" -> "11 inf";
  "i0" -> "10 add";
  "i1" -> "10 add";
}
#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_01
freia_status freia_01_helper_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 none 0] -> [0 alu] 0`tmp1
  // nope
  // i1 [0 none 1] -> [0 alu] 0`tmp1
  // nope
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 1
  // i0 [0 none 0] -> [1 alu] 0`tmp2
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // i0 [1 none 0] -> [1 alu] 0`tmp2
  // nope
  // 0`tmp1 [0 alu] -> [1 alu] 0`tmp2
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`tmp1 [1 none 1] -> [1 alu] 0`tmp2
  // nope
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 2
  // i0 [1 none 0] -> [2 alu] o
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // i0 [2 none 0] -> [2 alu] o
  // nope
  // 0`tmp2 [1 alu] -> [2 alu] o
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`tmp2 [2 none 1] -> [2 alu] o
  // nope
  si.alu[2][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output one image
  // o [2 alu] -> [2 output 0] o
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_1o(op, param, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

! new function

freia_status freia_01(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   // o = inf(i0 + i1, i0) - i0
   freia_01_helper_0(o, i0, i1);                                        /*0012*/

   return FREIA_OK;                                                     /*0017*/
}
