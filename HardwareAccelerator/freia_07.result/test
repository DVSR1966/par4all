#
# AIPO
#

! initial function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0014*/
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_aipo_add(t0, i0, i1);                                          /*0018*/
   freia_aipo_div(t2, i2, i3);                                          /*0019*/
   freia_aipo_inf(t1, t0, i0);                                          /*0020*/
   freia_aipo_sup(t3, t2, i3);                                          /*0021*/
   freia_aipo_sub(o0, t1, i0);                                          /*0022*/
   freia_aipo_or(o1, t3, i3);                                           /*0023*/

   freia_common_destruct_data(t0);                                      /*0025*/
   freia_common_destruct_data(t1);                                      /*0026*/
   freia_common_destruct_data(t2);                                      /*0027*/
   freia_common_destruct_data(t3);                                      /*0028*/

   return FREIA_OK;                                                     /*0030*/
}

! graphs

// graph for dag "dag_0" of module "freia_07" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}
// graph for dag "dag_cleaned_0" of module "freia_07" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}

! updated function for

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0014*/
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_aipo_add(t0, i0, i1);                                          /*0018*/
   freia_aipo_div(t2, i2, i3);                                          /*0019*/
   freia_aipo_inf(t1, t0, i0);                                          /*0020*/
   freia_aipo_sup(t3, t2, i3);                                          /*0021*/
   freia_aipo_sub(o0, t1, i0);                                          /*0022*/
   freia_aipo_or(o1, t3, i3);                                           /*0023*/

   freia_common_destruct_data(t0);                                      /*0025*/
   freia_common_destruct_data(t1);                                      /*0026*/
   freia_common_destruct_data(t2);                                      /*0027*/
   freia_common_destruct_data(t3);                                      /*0028*/

   return FREIA_OK;                                                     /*0030*/
}
#
# SPOC
#

! initial function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0014*/
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_aipo_add(t0, i0, i1);                                          /*0018*/
   freia_aipo_div(t2, i2, i3);                                          /*0019*/
   freia_aipo_inf(t1, t0, i0);                                          /*0020*/
   freia_aipo_sup(t3, t2, i3);                                          /*0021*/
   freia_aipo_sub(o0, t1, i0);                                          /*0022*/
   freia_aipo_or(o1, t3, i3);                                           /*0023*/

   freia_common_destruct_data(t0);                                      /*0025*/
   freia_common_destruct_data(t1);                                      /*0026*/
   freia_common_destruct_data(t2);                                      /*0027*/
   freia_common_destruct_data(t3);                                      /*0028*/

   return FREIA_OK;                                                     /*0030*/
}

! graphs

// graph for dag "dag_0" of module "freia_07" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}
// graph for dag "dag_cleaned_0" of module "freia_07" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}
// graph for dag "freia_07_helper_0_0" of module "freia_07" in dot format
digraph "freia_07_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];

  // computation vertices
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}
// graph for dag "freia_07_helper_0_1" of module "freia_07" in dot format
digraph "freia_07_helper_0_1" {
  // inputs
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_07
freia_status freia_07_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 18 add
  // nope
  // i1 [0 input 1] -> [0 alu] 18 add
  // nope
  // alu 18 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 1
  // i0 [0 input 0] -> [1 alu] 20 inf
  si.mux[0][0].op = SPOC_MUX_IN0;
  // i0 [1 input 0] -> [1 alu] 20 inf
  // nope
  // 0`t0 [0 alu] -> [1 alu] 20 inf
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`t0 [1 input 1] -> [1 alu] 20 inf
  // nope
  // alu 20 inf stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 2
  // i0 [1 poc 0] -> [2 alu] 22 sub
  si.mux[1][0].op = SPOC_MUX_IN0;
  // i0 [2 input 0] -> [2 alu] 22 sub
  // nope
  // 0`t1 [1 alu] -> [2 alu] 22 sub
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`t1 [2 input 1] -> [2 alu] 22 sub
  // nope
  // alu 22 sub stage 2 flipped
  si.alu[2][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output image o0 on 0
  // o0 [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [2 output 0] -> [7 output 0] 0 null
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_07
freia_status freia_07_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i2 [0 input 0] -> [0 alu] 19 div
  // nope
  // i3 [0 input 1] -> [0 alu] 19 div
  // nope
  // alu 19 div stage 0
  si.alu[0][0].op = SPOC_ALU_DIV_IN0_IN1;


  // STAGE 1
  // 0`t2 [0 alu] -> [1 alu] 21 sup
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t2 [1 input 0] -> [1 alu] 21 sup
  // nope
  // i3 [0 input 1] -> [1 alu] 21 sup
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i3 [1 input 1] -> [1 alu] 21 sup
  // nope
  // alu 21 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 2
  // 0`t3 [1 alu] -> [2 alu] 23 or
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`t3 [2 input 0] -> [2 alu] 23 or
  // nope
  // i3 [1 poc 1] -> [2 alu] 23 or
  si.mux[1][3].op = SPOC_MUX_IN1;
  // i3 [2 input 1] -> [2 alu] 23 or
  // nope
  // alu 23 or stage 2
  si.alu[2][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image o1 on 0
  // o1 [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [2 output 0] -> [7 output 0] 0 null
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_07_helper_0_0_0(o0, i0, i1);                                   /*0018*/
   freia_07_helper_0_1_0(o1, i2, i3);                                   /*0019*/
   
   
   return FREIA_OK;                                                     /*0030*/
}

! cleaned up function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_07_helper_0_0_0(o0, i0, i1);                                   /*0018*/
   freia_07_helper_0_1_0(o1, i2, i3);                                   /*0019*/
   
   
   return 0;                                                            /*0030*/
}
#
# TERAPIX
#

! initial function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0014*/
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_aipo_add(t0, i0, i1);                                          /*0018*/
   freia_aipo_div(t2, i2, i3);                                          /*0019*/
   freia_aipo_inf(t1, t0, i0);                                          /*0020*/
   freia_aipo_sup(t3, t2, i3);                                          /*0021*/
   freia_aipo_sub(o0, t1, i0);                                          /*0022*/
   freia_aipo_or(o1, t3, i3);                                           /*0023*/

   freia_common_destruct_data(t0);                                      /*0025*/
   freia_common_destruct_data(t1);                                      /*0026*/
   freia_common_destruct_data(t2);                                      /*0027*/
   freia_common_destruct_data(t3);                                      /*0028*/

   return FREIA_OK;                                                     /*0030*/
}

! graphs

// graph for dag "dag_0" of module "freia_07" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}
// graph for dag "dag_cleaned_0" of module "freia_07" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}
// graph for dag "freia_07_helper_0_0" of module "freia_07" in dot format
digraph "freia_07_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];
  "i2" [shape=circle];
  "i3" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "23 |" [shape=trapezium,orientation=270];
  "23 |" -> "o1";
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "21 >" [shape=trapezium,orientation=270];
  "21 >" -> "23 |" [label="t3"];
  "20 <" [shape=trapezium,orientation=270];
  "20 <" -> "22 -" [label="t1"];
  "19 /" [shape=trapezium,orientation=270];
  "19 /" -> "21 >" [label="t2"];
  "i3" -> "23 |";
  "i3" -> "21 >";
  "i3" -> "19 /";
  "i2" -> "19 /";
  "18 +" [shape=trapezium,orientation=270];
  "18 +" -> "20 <" [label="t0"];
  "i1" -> "18 +";
  "i0" -> "22 -";
  "i0" -> "20 <";
  "i0" -> "18 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_07
 * 4 input images, 2 output images
 * 10 image operations in dag
 * dag length is 4, dag width is 4
 * cost is 24 cycles per imagelet row
 */
freia_status freia_07_helper_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * i0,
  freia_data2d * i1,
  freia_data2d * i2,
  freia_data2d * i3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  terapix_mcu_macro mcu_macro[2][6];
  terapix_tile_info tile_in[2][4];
  terapix_tile_info tile_out[2][2];

  // imagelets definitions:
  // - 4 computation imagelets
  // - 4 double buffer imagelets
  int imagelet_size = 128;
  int imagelet_1 = 0;
  int imagelet_2 = 128;
  int imagelet_3 = 256;
  int imagelet_4 = 384;
  int imagelet_5 = 512;
  int imagelet_6 = 640;
  int imagelet_7 = 768;
  int imagelet_8 = 896;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_7;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_8;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = -1; // not used
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: +(1,2) -> 2
  mcu_macro[0][0].macrocode.xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].macrocode.xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].macrocode.ymin1 = 0;
  mcu_macro[1][0].macrocode.ymin1 = 0;
  mcu_macro[0][0].macrocode.xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].macrocode.xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].macrocode.ymin2 = 0;
  mcu_macro[1][0].macrocode.ymin2 = 0;
  mcu_macro[0][0].macrocode.xmin3 = imagelet_2;
  mcu_macro[1][0].macrocode.xmin3 = imagelet_2;
  mcu_macro[0][0].macrocode.ymin3 = 0;
  mcu_macro[1][0].macrocode.ymin3 = 0;
  mcu_macro[0][0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].macrocode.iter2 = imagelet_size;
  mcu_macro[1][0].macrocode.iter2 = imagelet_size;
  mcu_macro[0][0].macrocode.addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][0].macrocode.addrStart = TERAPIX_UCODE_ADD3;
  // 1: /(3,4) -> 3
  mcu_macro[0][1].macrocode.xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].macrocode.xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].macrocode.ymin1 = 0;
  mcu_macro[1][1].macrocode.ymin1 = 0;
  mcu_macro[0][1].macrocode.xmin2 = imagelet_io_4_0;
  mcu_macro[1][1].macrocode.xmin2 = imagelet_io_4_1;
  mcu_macro[0][1].macrocode.ymin2 = 0;
  mcu_macro[1][1].macrocode.ymin2 = 0;
  mcu_macro[0][1].macrocode.xmin3 = imagelet_3;
  mcu_macro[1][1].macrocode.xmin3 = imagelet_3;
  mcu_macro[0][1].macrocode.ymin3 = 0;
  mcu_macro[1][1].macrocode.ymin3 = 0;
  mcu_macro[0][1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].macrocode.iter2 = imagelet_size;
  mcu_macro[1][1].macrocode.iter2 = imagelet_size;
  mcu_macro[0][1].macrocode.addrStart = TERAPIX_UCODE_DIV3;
  mcu_macro[1][1].macrocode.addrStart = TERAPIX_UCODE_DIV3;
  // 2: <(2,1) -> 2
  mcu_macro[0][2].macrocode.xmin1 = imagelet_2;
  mcu_macro[1][2].macrocode.xmin1 = imagelet_2;
  mcu_macro[0][2].macrocode.ymin1 = 0;
  mcu_macro[1][2].macrocode.ymin1 = 0;
  mcu_macro[0][2].macrocode.xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].macrocode.xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].macrocode.ymin2 = 0;
  mcu_macro[1][2].macrocode.ymin2 = 0;
  mcu_macro[0][2].macrocode.xmin3 = imagelet_2;
  mcu_macro[1][2].macrocode.xmin3 = imagelet_2;
  mcu_macro[0][2].macrocode.ymin3 = 0;
  mcu_macro[1][2].macrocode.ymin3 = 0;
  mcu_macro[0][2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].macrocode.iter2 = imagelet_size;
  mcu_macro[1][2].macrocode.iter2 = imagelet_size;
  mcu_macro[0][2].macrocode.addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][2].macrocode.addrStart = TERAPIX_UCODE_INF3;
  // 3: >(3,4) -> 3
  mcu_macro[0][3].macrocode.xmin1 = imagelet_3;
  mcu_macro[1][3].macrocode.xmin1 = imagelet_3;
  mcu_macro[0][3].macrocode.ymin1 = 0;
  mcu_macro[1][3].macrocode.ymin1 = 0;
  mcu_macro[0][3].macrocode.xmin2 = imagelet_io_4_0;
  mcu_macro[1][3].macrocode.xmin2 = imagelet_io_4_1;
  mcu_macro[0][3].macrocode.ymin2 = 0;
  mcu_macro[1][3].macrocode.ymin2 = 0;
  mcu_macro[0][3].macrocode.xmin3 = imagelet_3;
  mcu_macro[1][3].macrocode.xmin3 = imagelet_3;
  mcu_macro[0][3].macrocode.ymin3 = 0;
  mcu_macro[1][3].macrocode.ymin3 = 0;
  mcu_macro[0][3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].macrocode.iter2 = imagelet_size;
  mcu_macro[1][3].macrocode.iter2 = imagelet_size;
  mcu_macro[0][3].macrocode.addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][3].macrocode.addrStart = TERAPIX_UCODE_SUP3;
  // 4: -(2,1) -> 1
  mcu_macro[0][4].macrocode.xmin1 = imagelet_2;
  mcu_macro[1][4].macrocode.xmin1 = imagelet_2;
  mcu_macro[0][4].macrocode.ymin1 = 0;
  mcu_macro[1][4].macrocode.ymin1 = 0;
  mcu_macro[0][4].macrocode.xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].macrocode.xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].macrocode.ymin2 = 0;
  mcu_macro[1][4].macrocode.ymin2 = 0;
  mcu_macro[0][4].macrocode.xmin3 = imagelet_io_1_0;
  mcu_macro[1][4].macrocode.xmin3 = imagelet_io_1_1;
  mcu_macro[0][4].macrocode.ymin3 = 0;
  mcu_macro[1][4].macrocode.ymin3 = 0;
  mcu_macro[0][4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].macrocode.iter2 = imagelet_size;
  mcu_macro[1][4].macrocode.iter2 = imagelet_size;
  mcu_macro[0][4].macrocode.addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][4].macrocode.addrStart = TERAPIX_UCODE_SUB3;
  // 5: |(3,4) -> 2
  mcu_macro[0][5].macrocode.xmin1 = imagelet_3;
  mcu_macro[1][5].macrocode.xmin1 = imagelet_3;
  mcu_macro[0][5].macrocode.ymin1 = 0;
  mcu_macro[1][5].macrocode.ymin1 = 0;
  mcu_macro[0][5].macrocode.xmin2 = imagelet_io_4_0;
  mcu_macro[1][5].macrocode.xmin2 = imagelet_io_4_1;
  mcu_macro[0][5].macrocode.ymin2 = 0;
  mcu_macro[1][5].macrocode.ymin2 = 0;
  mcu_macro[0][5].macrocode.xmin3 = imagelet_io_2_0;
  mcu_macro[1][5].macrocode.xmin3 = imagelet_io_2_1;
  mcu_macro[0][5].macrocode.ymin3 = 0;
  mcu_macro[1][5].macrocode.ymin3 = 0;
  mcu_macro[0][5].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].macrocode.iter2 = imagelet_size;
  mcu_macro[1][5].macrocode.iter2 = imagelet_size;
  mcu_macro[0][5].macrocode.addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][5].macrocode.addrStart = TERAPIX_UCODE_OR3;

  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for i2
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;
  // - imagelet 4 is i3 for i3
  tile_in[0][3].x = imagelet_io_4_0;
  tile_in[0][3].y = 0;
  tile_in[1][3].x = imagelet_io_4_1;
  tile_in[1][3].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].u = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for o1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].u = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out = tile_out;

  // inputs
  mcu_instr.nbin = 4;
  mcu_instr.in = tile_in;

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr   = mcu_macro;

  // call terapix runtime
  ret = freia_cg_template_process(&param, o0, o1, i0, i1, i2, i3);

  // extract measures

  return ret;
}


! updated function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_07_helper_0_0(o0, o1, i0, i1, i2, i3);                         /*0018*/
   
   
   return FREIA_OK;                                                     /*0030*/
}

! cleaned up function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   
   
   
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_07_helper_0_0(o0, o1, i0, i1, i2, i3);                         /*0018*/
   
   
   return 0;                                                            /*0030*/
}
#
# FREIA COMPILATION DONE
#

