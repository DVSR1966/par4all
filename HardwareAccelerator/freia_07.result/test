
! initial function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);
   freia_data2d *t1 = freia_common_create_data(16, 128, 128);
   freia_data2d *t2 = freia_common_create_data(16, 128, 128);
   freia_data2d *t3 = freia_common_create_data(16, 128, 128);
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_aipo_add(t0, i0, i1);                                          /*0016*/
   freia_aipo_div(t2, i2, i3);                                          /*0017*/
   freia_aipo_inf(t1, t0, i0);                                          /*0018*/
   freia_aipo_sup(t3, t2, i3);                                          /*0019*/
   freia_aipo_sub(o0, t1, i0);                                          /*0020*/
   freia_aipo_or(o1, t3, i3);                                           /*0021*/

   freia_common_destruct_data(t0);                                      /*0023*/
   freia_common_destruct_data(t1);                                      /*0024*/
   freia_common_destruct_data(t2);                                      /*0025*/
   freia_common_destruct_data(t3);                                      /*0026*/

   return FREIA_OK;                                                     /*0028*/
}

! accelerated function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_07
freia_status freia_07_helper_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);

  // stage 0
  si.alu[0][0].op = SPOC_ALU_DIV_IN0_IN1;

  // ??? what about setting links?
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;

  // ??? what about setting links?
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // stage 2
  si.alu[2][0].op = SPOC_ALU_OR_IN0_IN1;

  // ??? what about setting links?
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_1o(op, param, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

// FREIA-SPoC helper function for module freia_07
freia_status freia_07_helper_1(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);

  // stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;

  // ??? what about setting links?
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;

  // ??? what about setting links?
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // stage 2
  si.alu[2][0].op = SPOC_ALU_SUB_IN0_IN1;

  // ??? what about setting links?
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_1o(op, param, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

! new function

freia_status freia_07(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1, freia_data2d *i2, freia_data2d *i3)
{
   
   // o0 = inf(i0 + i1, i0) - i0
   // o1 = sup(i2 / i3, i3) | i3
   freia_07_helper_1(o0, i0, i1);                                       /*0020*/
   freia_07_helper_0(o1, i3, i2);                                       /*0021*/

   return FREIA_OK;                                                     /*0028*/
}
