
! initial function

freia_status freia_04(freia_data2d *o, freia_data2d *i, int32_t *k, int32_t inf, int32_t sup, bool bin, int32_t *m, int32_t *v)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);
   freia_data2d *t1 = freia_common_create_data(16, 128, 128);
   freia_data2d *t2 = freia_common_create_data(16, 128, 128);
   freia_data2d *t3 = freia_common_create_data(16, 128, 128);
   freia_data2d *t4 = freia_common_create_data(16, 128, 128);
   
   // to test operator compaction
   // t0 = erode(i)
   // t1 = dilate(i)
   // t2 = t1 - t0
   // t3 = threshold(t2)
   // t4 = threshold(t0)
   // v  = vol(t3)
   // m  = min(t4)
   // o  = t4 + t3
   freia_aipo_erode_8c(t0, i, k);                                       /*0024*/
   freia_aipo_dilate_6c(t1, i, k);                                      /*0025*/
   freia_aipo_sub(t2, t1, t0);                                          /*0026*/
   freia_aipo_threshold(t3, t2, inf, sup, bin);                         /*0027*/
   freia_aipo_threshold(t4, t0, inf, sup, bin);                         /*0028*/
   freia_aipo_global_vol(t3, v);                                        /*0029*/
   freia_aipo_global_min(t4, m);                                        /*0030*/
   freia_aipo_add(o, t3, t4);                                           /*0031*/

   freia_common_destruct_data(t0);                                      /*0033*/
   freia_common_destruct_data(t1);                                      /*0034*/
   freia_common_destruct_data(t2);                                      /*0035*/
   freia_common_destruct_data(t3);                                      /*0036*/
   freia_common_destruct_data(t4);                                      /*0037*/

   return FREIA_OK;                                                     /*0039*/
}

! accelerated function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_04
freia_status freia_04_helper_0(freia_data2d * o0, freia_data2d * i0, int32_t *kern0, int32_t *kern1, int32_t inf2, int32_t sup3, bool bin4, int32_t inf5, int32_t sup6, bool bin7, int32_t * red8, int32_t * red9)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);

  // stage 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = kern0[i];

  // stage 1
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = kern1[i];

  // stage 2
  si.alu[2][0].op = SPOC_ALU_SUB_IN0_IN1;

  // ??? what about setting links?
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // stage 3
  si.th[3][0].op =    (bin4)? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[3][0].boundmin = inf2;
  sp.th[3][0].boundmax = sup3;

  // stage 4
  si.th[4][0].op =    (bin7)? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[4][0].boundmin = inf5;
  sp.th[4][0].boundmax = sup6;

  // stage 5

  // stage 6

  // stage 7
  si.alu[7][0].op = SPOC_ALU_ADD_IN0_IN1;

  // ??? what about setting links?
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_1i_1o(op, param, o0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // get reduction results
  *red8 = (int32_t) reduc.measure[5][0].volume;

  // get reduction results
  *red9 = (int32_t) reduc.measure[6][0].minimum;

  return ret;
}

! new function

freia_status freia_04(freia_data2d *o, freia_data2d *i, int32_t *k, int32_t inf, int32_t sup, bool bin, int32_t *m, int32_t *v)
{
   
   // to test operator compaction
   // t0 = erode(i)
   // t1 = dilate(i)
   // t2 = t1 - t0
   // t3 = threshold(t2)
   // t4 = threshold(t0)
   // v  = vol(t3)
   // m  = min(t4)
   // o  = t4 + t3
   freia_04_helper_0(o, i, k, k, inf, sup, bin, inf, sup, bin, v, m);   /*0031*/

   return FREIA_OK;                                                     /*0039*/
}
