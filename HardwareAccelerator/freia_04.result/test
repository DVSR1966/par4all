
! initial function

freia_status freia_04(freia_data2d *o, freia_data2d *i, int32_t *k, int32_t inf, int32_t sup, bool bin, int32_t *m, int32_t *v)
{
   
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128);       /*0015*/
   
   // to test operator compaction
   // t0 = erode(i)
   // t1 = dilate(i)
   // t2 = t1 - t0
   // t3 = threshold(t2)
   // t4 = threshold(t0)
   // v  = vol(t3)
   // m  = min(t4)
   // o  = t4 + t3
   freia_aipo_erode_8c(t0, i, k);                                       /*0026*/
   freia_aipo_dilate_6c(t1, i, k);                                      /*0027*/
   freia_aipo_sub(t2, t1, t0);                                          /*0028*/
   freia_aipo_threshold(t3, t2, inf, sup, bin);                         /*0029*/
   freia_aipo_threshold(t4, t0, inf, sup, bin);                         /*0030*/
   freia_aipo_global_vol(t3, v);                                        /*0031*/
   freia_aipo_global_min(t4, m);                                        /*0032*/
   freia_aipo_add(o, t3, t4);                                           /*0033*/

   freia_common_destruct_data(t0);                                      /*0035*/
   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/

   return FREIA_OK;                                                     /*0041*/
}

! graphs

// graph for dag "dag_0" of module "freia_04" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 +" [shape=trapezium,orientation=270];
  "33 +" -> "o";
  "32 min" [shape=diamond];
  "31 vol" [shape=diamond];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 +" [label="t4"];
  "30 thr" -> "32 min" [label="t4"];
  "29 thr" [shape=parallelogram];
  "29 thr" -> "33 +" [label="t3"];
  "29 thr" -> "31 vol" [label="t3"];
  "28 -" [shape=trapezium,orientation=270];
  "28 -" -> "29 thr" [label="t2"];
  "27 D6" [shape=box];
  "27 D6" -> "28 -" [label="t1"];
  "26 E8" [shape=box];
  "26 E8" -> "30 thr" [label="t0"];
  "26 E8" -> "28 -" [label="t0"];
  "i" -> "27 D6";
  "i" -> "26 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_04" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 +" [shape=trapezium,orientation=270];
  "33 +" -> "o";
  "32 min" [shape=diamond];
  "31 vol" [shape=diamond];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 +" [label="t4"];
  "30 thr" -> "32 min" [label="t4"];
  "29 thr" [shape=parallelogram];
  "29 thr" -> "33 +" [label="t3"];
  "29 thr" -> "31 vol" [label="t3"];
  "28 -" [shape=trapezium,orientation=270];
  "28 -" -> "29 thr" [label="t2"];
  "27 D6" [shape=box];
  "27 D6" -> "28 -" [label="t1"];
  "26 E8" [shape=box];
  "26 E8" -> "30 thr" [label="t0"];
  "26 E8" -> "28 -" [label="t0"];
  "i" -> "27 D6";
  "i" -> "26 E8";
}
// graph for dag "freia_04_helper_0_0" of module "freia_04" in dot format
digraph "freia_04_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 +" [shape=trapezium,orientation=270];
  "33 +" -> "o";
  "32 min" [shape=diamond];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 +" [label="t4"];
  "30 thr" -> "32 min" [label="t4"];
  "31 vol" [shape=diamond];
  "29 thr" [shape=parallelogram];
  "29 thr" -> "33 +" [label="t3"];
  "29 thr" -> "31 vol" [label="t3"];
  "28 -" [shape=trapezium,orientation=270];
  "28 -" -> "29 thr" [label="t2"];
  "26 E8" [shape=box];
  "26 E8" -> "30 thr" [label="t0"];
  "26 E8" -> "28 -" [label="t0"];
  "27 D6" [shape=box];
  "27 D6" -> "28 -" [label="t1"];
  "i" -> "26 E8";
  "i" -> "27 D6";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_04
freia_status freia_04_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, int32_t *kern0, int32_t *kern1, int32_t inf2, int32_t sup3, bool bin4, int32_t * red5, int32_t inf6, int32_t sup7, bool bin8, int32_t * red9)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 27 dilate_6c
  // nope
  // poc 27 dilate_6c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = kern0[i];

  // i [0 input 1] -> [0 poc 1] 26 erode_8c
  // nope
  // poc 26 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = kern1[i];

  // 0`t1 [0 poc 0] -> [0 alu] 28 sub
  // nope
  // 0`t0 [0 poc 1] -> [0 alu] 28 sub
  // nope
  // alu 28 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;

  // 0`t2 [0 alu] -> [0 threshold 0] 29 threshold
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // threshold 29 threshold stage 0 side 0
  si.th[0][0].op = bin4? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = inf2;
  sp.th[0][0].boundmax = sup3;

  // 0`t3 [0 threshold 0] -> [0 measure 0] 29 threshold
  // nope

  // 0`t0 [0 poc 1] -> [0 threshold 1] 30 threshold
  si.mux[0][3].op = SPOC_MUX_IN1;
  // threshold 30 threshold stage 0 side 1
  si.th[0][1].op = bin8? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = inf6;
  sp.th[0][1].boundmax = sup7;

  // 0`t4 [0 threshold 1] -> [0 measure 1] 30 threshold
  // nope


  // STAGE 1
  // 0`t3 [0 measure 0] -> [1 alu] 33 add
  // 0`t3 [1 input 0] -> [1 alu] 33 add
  // nope
  // 0`t4 [0 measure 1] -> [1 alu] 33 add
  // 0`t4 [1 input 1] -> [1 alu] 33 add
  // nope
  // alu 33 add stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image o on 0
  // o [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 31 global_vol stage 0 side 0
  *red5 = (int32_t) reduc.measure[0][0].volume;

  // measure 32 global_min stage 0 side 1
  *red9 = (int32_t) reduc.measure[0][1].minimum;

  return ret;
}

! updated function

freia_status freia_04(freia_data2d *o, freia_data2d *i, int32_t *k, int32_t inf, int32_t sup, bool bin, int32_t *m, int32_t *v)
{
   
   
   
   
   
   
   // to test operator compaction
   // t0 = erode(i)
   // t1 = dilate(i)
   // t2 = t1 - t0
   // t3 = threshold(t2)
   // t4 = threshold(t0)
   // v  = vol(t3)
   // m  = min(t4)
   // o  = t4 + t3
   freia_04_helper_0_0_0(o, i, k, k, inf, sup, bin, v, inf, sup, bin, m);              /*0026*/
   
   
   return FREIA_OK;                                                     /*0041*/
}
