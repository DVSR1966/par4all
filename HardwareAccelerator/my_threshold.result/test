
! initial function

freia_status my_threshold(freia_data2d *o, freia_data2d *i0, int32_t p0, int32_t p1, int32_t p2)
{
   return freia_aipo_threshold(o, i0, p0, p1, p2);                      /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_threshold" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "5 threshold" [shape=circle];
  "i0" -> "5 threshold";
  "5 threshold" -> "o";
}
// graph for dag "dag_cleaned_0" of module "my_threshold" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "5 threshold" [shape=circle];
  "i0" -> "5 threshold";
  "5 threshold" -> "o";
}
// graph for dag "my_threshold_helper_0_0" of module "my_threshold" in dot format
digraph "my_threshold_helper_0_0" {
  // inputs
  "i0" [shape=box];

  // outputs
  "o" [shape=box];

  // computation vertices
  "5 threshold" [shape=circle];
  "i0" -> "5 threshold";
  "5 threshold" -> "o";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module my_threshold
freia_status my_threshold_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, int32_t inf0, int32_t sup1, bool bin2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 threshold 0] 5 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 5 threshold stage 0 side 0
  si.th[0][0].op =    (bin2)? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = inf0;
  sp.th[0][0].boundmax = sup1;


  // output image o on 0
  // o [0 threshold 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status my_threshold(freia_data2d *o, freia_data2d *i0, int32_t p0, int32_t p1, int32_t p2)
{
   return my_threshold_helper_0_0_0(o, i0, p0, p1, p2);                 /*0005*/
}
