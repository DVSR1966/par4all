
! initial function

freia_status freia_05(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // two pipeline calls are necessary
   // o0 = i0 * i1
   // o1 = i0 & i1
   freia_aipo_mul(o0, i0, i1);                                          /*0009*/
   freia_aipo_and(o1, i0, i1);                                          /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! accelerated function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_05
freia_status freia_05_helper_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);

  // stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;

  // ??? what about setting links?
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_1o(op, param, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

// FREIA-SPoC helper function for module freia_05
freia_status freia_05_helper_1(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);

  // stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;

  // ??? what about setting links?
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_1o(op, param, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

! new function

freia_status freia_05(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // two pipeline calls are necessary
   // o0 = i0 * i1
   // o1 = i0 & i1
   freia_05_helper_1(o0, i0, i1);                                       /*0009*/
   freia_05_helper_0(o1, i0, i1);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}
