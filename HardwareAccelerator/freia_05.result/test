
! initial function

freia_status freia_05(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // two pipeline calls are necessary
   // o0 = i0 * i1
   // o1 = i0 & i1
   freia_aipo_mul(o0, i0, i1);                                          /*0011*/
   freia_aipo_and(o1, i0, i1);                                          /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_05" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 &" [shape=trapezium,orientation=270];
  "12 &" -> "o1";
  "11 *" [shape=trapezium,orientation=270];
  "11 *" -> "o0";
  "i1" -> "12 &";
  "i1" -> "11 *";
  "i0" -> "12 &";
  "i0" -> "11 *";
}
// graph for dag "dag_cleaned_0" of module "freia_05" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "12 &" [shape=trapezium,orientation=270];
  "12 &" -> "o1";
  "11 *" [shape=trapezium,orientation=270];
  "11 *" -> "o0";
  "i1" -> "12 &";
  "i1" -> "11 *";
  "i0" -> "12 &";
  "i0" -> "11 *";
}
// graph for dag "freia_05_helper_0_0" of module "freia_05" in dot format
digraph "freia_05_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];

  // computation vertices
  "11 *" [shape=trapezium,orientation=270];
  "11 *" -> "o0";
  "i1" -> "11 *";
  "i0" -> "11 *";
}
// graph for dag "freia_05_helper_0_1" of module "freia_05" in dot format
digraph "freia_05_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o1" [shape=circle];

  // computation vertices
  "12 &" [shape=trapezium,orientation=270];
  "12 &" -> "o1";
  "i1" -> "12 &";
  "i0" -> "12 &";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_05
freia_status freia_05_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 11 mul
  // nope
  // i1 [0 input 1] -> [0 alu] 11 mul
  // nope
  // alu 11 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image o0 on 0
  // o0 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [0 output 0] -> [7 output 0] 0 null
  // o0 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_05
freia_status freia_05_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 12 and
  // nope
  // i1 [0 input 1] -> [0 alu] 12 and
  // nope
  // alu 12 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image o1 on 0
  // o1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [0 output 0] -> [7 output 0] 0 null
  // o1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_05(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // two pipeline calls are necessary
   // o0 = i0 * i1
   // o1 = i0 & i1
   freia_05_helper_0_0_0(o0, i0, i1);                                   /*0011*/
   freia_05_helper_0_1_0(o1, i0, i1);                                   /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

