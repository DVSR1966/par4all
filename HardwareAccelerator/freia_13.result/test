
! initial function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0011*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0012*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0013*/

   freia_common_destruct_data(t);                                       /*0015*/
   return FREIA_OK;                                                     /*0016*/
}

! accelerated function

// graph for dag "dag_0" of module "freia_13" in dot format
digraph "dag_0" {
  // inputs

  // outputs
  "o0" [shape=box];
  "o1" [shape=box];

  // computation vertices
  "13 dilate_8c" [shape=circle];
  "13 dilate_8c" -> "o1";
  "12 erode_8c" [shape=circle];
  "12 erode_8c" -> "o0";
  "11 set_constant" [shape=circle];
  "11 set_constant" -> "13 dilate_8c";
  "11 set_constant" -> "12 erode_8c";
}
// graph for dag "freia_13_helper_0" of module "freia_13" in dot format
digraph "freia_13_helper_0" {
  // inputs

  // outputs
  "o0" [shape=box];
  "o1" [shape=box];

  // computation vertices
  "13 dilate_8c" [shape=circle];
  "13 dilate_8c" -> "o1";
  "12 erode_8c" [shape=circle];
  "12 erode_8c" -> "o0";
  "11 set_constant" [shape=circle];
  "11 set_constant" -> "13 dilate_8c";
  "11 set_constant" -> "12 erode_8c";
}
#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_13
freia_status freia_13_helper_0(freia_data2d * o0, freia_data2d * o1, , int32_t cst0, int32_t *kern1, int32_t *kern2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  si.alu[0][0].constant = cst0;


  // STAGE 1
  // 0`t [0 alu] -> [1 poc 0] o0
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t [1 none 0] -> [1 poc 0] o0
  // nope
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = kern1[i];

  // 0`t [1 none 0] -> [1 poc 1] o1
  // nope
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = kern2[i];


  // output two images...
  // o0 [1 poc 0] -> [1 output 0] o0
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o1 [1 poc 1] -> [1 output 1] o1
  si.mux[1][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2o(op, param, o0, o1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  return ret;
}

! new function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_13_helper_0(o0, o1, c, kern, kern);                            /*0013*/

   return FREIA_OK;                                                     /*0016*/
}
