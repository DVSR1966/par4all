#
# AIPO
#
#
# compile generated freia_56
#

! initial function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   freia_data2d *ta = freia_common_create_data(16, 128, 128);           /*0006*/
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0007*/

   freia_aipo_set_constant(ta, 255);                                    /*0009*/
   freia_aipo_dilate_8c(out, in, freia_morpho_kernel_8c);               /*0010*/
   freia_aipo_inf(tb, ta, out);                                         /*0011*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0012*/
   freia_aipo_inf(out, tb, out);                                        /*0013*/

   freia_common_destruct_data(ta);                                      /*0015*/
   freia_common_destruct_data(tb);                                      /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_56" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out"];
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out"];
  "10 D8" -> "11 <" [label="out"];
  "in" -> "10 D8";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "11 <" [label="ta"];
}
// graph for dag "dag_cleaned_0" of module "freia_56" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out_1"];
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out_2"];
  "10 D8" -> "11 <." [label="out_2"];
  "in" -> "10 D8";
}

! updated function for

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0007*/

   freia_aipo_dilate_8c(out, in, freia_morpho_kernel_8c);               /*0010*/
   freia_aipo_inf_const(tb, out, 255);                                  /*0011*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0012*/
   freia_aipo_inf(out, tb, out);                                        /*0013*/

   freia_common_destruct_data(tb);                                      /*0016*/
   return FREIA_OK;                                                     /*0017*/
}
#
# SPOC
#

! initial function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   freia_data2d *ta = freia_common_create_data(16, 128, 128);           /*0006*/
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0007*/

   freia_aipo_set_constant(ta, 255);                                    /*0009*/
   freia_aipo_dilate_8c(out, in, freia_morpho_kernel_8c);               /*0010*/
   freia_aipo_inf(tb, ta, out);                                         /*0011*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0012*/
   freia_aipo_inf(out, tb, out);                                        /*0013*/

   freia_common_destruct_data(ta);                                      /*0015*/
   freia_common_destruct_data(tb);                                      /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_56" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out"];
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out"];
  "10 D8" -> "11 <" [label="out"];
  "in" -> "10 D8";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "11 <" [label="ta"];
}
// graph for dag "dag_cleaned_0" of module "freia_56" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out"];
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out"];
  "10 D8" -> "11 <." [label="out"];
  "in" -> "10 D8";
}
// graph for dag "freia_56_helper_0_0" of module "freia_56" in dot format
digraph "freia_56_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out_1"];
  "10 D8" [shape=box];
  "10 D8" -> "11 <." [label="out_2"];
  "10 D8" -> "12 E8" [label="out_2"];
  "in" -> "10 D8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 5 ops and 0 copies, optimized to 4 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_56
freia_status freia_56_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 poc 0] 10 dilate_8c
  // nope
  // poc 10 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 2
  // out_2 [0 poc 0] -> [2 poc 0] 12 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // out_2 [1 input 0] -> [2 poc 0] 12 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // out_2 [2 input 0] -> [2 poc 0] 12 erode_8c
  // nope
  // poc 12 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 1
  // out_2 [1 poc 0] -> [1 alu] 11 inf_const
  // nope
  // alu 11 inf_const stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`tb [1 alu] -> [2 alu] 13 inf
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`tb [2 input 1] -> [2 alu] 13 inf
  // nope
  // out_1 [2 poc 0] -> [2 alu] 13 inf
  // nope
  // alu 13 inf stage 2
  si.alu[2][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image out on 0
  // out [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // out [2 output 0] -> [7 output 0] 0 null
  // out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   
   freia_56_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);         /*0010*/

   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   
   freia_56_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);         /*0010*/

   return 0;                                                            /*0017*/
}
#
# TERAPIX
#

! initial function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   freia_data2d *ta = freia_common_create_data(16, 128, 128);           /*0006*/
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0007*/

   freia_aipo_set_constant(ta, 255);                                    /*0009*/
   freia_aipo_dilate_8c(out, in, freia_morpho_kernel_8c);               /*0010*/
   freia_aipo_inf(tb, ta, out);                                         /*0011*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0012*/
   freia_aipo_inf(out, tb, out);                                        /*0013*/

   freia_common_destruct_data(ta);                                      /*0015*/
   freia_common_destruct_data(tb);                                      /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_56" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out"];
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out"];
  "10 D8" -> "11 <" [label="out"];
  "in" -> "10 D8";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "11 <" [label="ta"];
}
// graph for dag "dag_cleaned_0" of module "freia_56" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out"];
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out"];
  "10 D8" -> "11 <." [label="out"];
  "in" -> "10 D8";
}
// graph for dag "freia_56_helper_0_0_0" of module "freia_56" in dot format
digraph "freia_56_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out_1"];
  "10 D8" [shape=box];
  "10 D8" -> "11 <." [label="out_2"];
  "10 D8" -> "12 E8" [label="out_2"];
  "in" -> "10 D8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 5 ops and 0 copies, optimized to 4 ops and 0+0 copies

/* FREIA terapix helper function for module freia_56
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 37
 * - communication: 64
 */
freia_status freia_56_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 341;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: <.(2) -> 2
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi3;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_INF_CONST;
  // 3: <(2,1) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_1_0;
  mcu_macro[1][3].xmin3 = imagelet_io_1_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_INF3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   
   freia_56_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);         /*0010*/

   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   
   freia_56_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);         /*0010*/

   return 0;                                                            /*0017*/
}
#
# OPENCL
#

! initial function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   freia_data2d *ta = freia_common_create_data(16, 128, 128);           /*0006*/
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0007*/

   freia_aipo_set_constant(ta, 255);                                    /*0009*/
   freia_aipo_dilate_8c(out, in, freia_morpho_kernel_8c);               /*0010*/
   freia_aipo_inf(tb, ta, out);                                         /*0011*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0012*/
   freia_aipo_inf(out, tb, out);                                        /*0013*/

   freia_common_destruct_data(ta);                                      /*0015*/
   freia_common_destruct_data(tb);                                      /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_56" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out"];
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out"];
  "10 D8" -> "11 <" [label="out"];
  "in" -> "10 D8";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "11 <" [label="ta"];
}
// graph for dag "dag_cleaned_0" of module "freia_56" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out_1"];
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out_2"];
  "10 D8" -> "11 <." [label="out_2"];
  "in" -> "10 D8";
}
// graph for dag "freia_56_helper_0_0" of module "freia_56" in dot format
digraph "freia_56_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "12 E8" [shape=box];
  "12 E8" -> "13 <" [label="out_1"];
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "10 D8" [shape=box];
  "10 D8" -> "12 E8" [label="out_2"];
  "10 D8" -> "11 <." [label="out_2"];
  "in" -> "10 D8";
}
// graph for dag "freia_56_helper_0_0_1" of module "freia_56" in dot format
digraph "freia_56_helper_0_0_1" {
  // inputs
  "out_1" [shape=circle];
  "out_2" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "13 <" [shape=trapezium,orientation=270];
  "13 <" -> "out";
  "out_1" -> "13 <";
  "11 <." [shape=trapezium,orientation=270];
  "11 <." -> "13 <" [label="tb"];
  "out_2" -> "11 <.";
}

! acceleration function

// freia opencl includes

// dag 0: 5 ops and 0 copies, optimized to 4 ops and 0+0 copies

// helper function freia_56_helper_0_0_1
freia_status freia_56_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0)
{
  call opencl kernel freia_56_helper_0_0_1(o0, i0, i1, c0);
  return FREIA_OK;
}
// freia opencl includes
// generated opencl for function freia_56

// opencl for dag 0

// opencl function freia_56_helper_0_0_1
kernel freia_56_helper_0_0_1(
  opencl image o0,
  const opencl image i0,
  const opencl image i1,
  int32_t c0)
{
  for (i)
  {
    // get input pixels
    register pixel in0 = i0[i];
    register pixel in1 = i1[i];
    // pixel computations
    register pixel t11 = PIXEL_INF_CONST(in1, c0);
    register pixel t13 = PIXEL_INF(t11, in0);
    // set output pixels
    o0[i] = t13;
  }
}

! updated function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   // hardware accelerator generated variable
   freia_data2d *out_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *out_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   freia_aipo_dilate_8c(out_2, in, freia_morpho_kernel_8c);             /*0010*/
   freia_56_helper_0_0_1(out, out_1, out_2, 255);                       /*0011*/
   freia_aipo_erode_8c(out_1, out_2, freia_morpho_kernel_8c);           /*0012*/
   freia_common_destruct_data(out_2);
   freia_common_destruct_data(out_1);

   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_56(freia_data2d *out, freia_data2d *in)
{
   // same as freia_55, but out is used as a temporary
   // hardware accelerator generated variable
   freia_data2d *out_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *out_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   freia_aipo_dilate_8c(out_2, in, freia_morpho_kernel_8c);             /*0010*/
   freia_56_helper_0_0_1(out, out_1, out_2, 255);                       /*0011*/
   freia_aipo_erode_8c(out_1, out_2, freia_morpho_kernel_8c);           /*0012*/
   freia_common_destruct_data(out_2);
   freia_common_destruct_data(out_1);

   return 0;                                                            /*0017*/
}
#
# FREIA COMPILATION DONE
#

