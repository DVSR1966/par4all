
! initial function

freia_status freia_36(freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   int32_t min;
   // should t be extracted?
   freia_aipo_add(t, i0, i1);                                           /*0008*/
   freia_aipo_global_min(t, &min);                                      /*0009*/
   freia_common_destruct_data(t);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_36" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t" [shape=circle];

  // computation vertices
  "9 min" [shape=diamond];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 min" [label="t"];
  "8 +" -> "t";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_36" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t" [shape=circle];

  // computation vertices
  "9 min" [shape=diamond];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 min" [label="t"];
  "8 +" -> "t";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_36_helper_0_0" of module "freia_36" in dot format
digraph "freia_36_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t" [shape=circle];

  // computation vertices
  "9 min" [shape=diamond];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 min" [label="t"];
  "8 +" -> "t";
  "i1" -> "8 +";
  "i0" -> "8 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_36
freia_status freia_36_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1, int32_t * red0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 8 add
  // nope
  // i1 [0 input 1] -> [0 alu] 8 add
  // nope
  // alu 8 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;

  // 0`t [0 alu] -> [0 measure 0] 8 add
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;


  // output image 0`t on 0
  // 0`t [0 alu] -> [0 output 0] 0 null

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 9 global_min stage 0 side 0
  *red0 = (int32_t) reduc.measure[0][0].minimum;

  return ret;
}

! updated function

freia_status freia_36(freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   int32_t min;
   // should t be extracted?
   freia_36_helper_0_0_0(t, i0, i1, &min);                              /*0008*/
   freia_common_destruct_data(t);                                       /*0010*/
   return FREIA_OK;                                                     /*0011*/
}
