
! initial function

void freia_skip_05(freia_data2d *o, freia_data2d *i)
{
   int32_t seuil;                                                       /*0005*/
   freia_data2d *t;                                                     /*0006*/
   // allocation in the middle of the stream
   freia_aipo_sub(i, i, i);                                             /*0008*/
   t = freia_common_create_data(16, 128, 128);                          /*0009*/
   freia_aipo_xor_const(t, i, 111);                                     /*0010*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0011*/
   freia_common_destruct_data(t);                                       /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_skip_05" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 thr" [shape=parallelogram];
  "11 thr" -> "o";
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "11 thr" [label="t"];
  "9 ?" [shape=none];
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "10 ^." [label="i"];
  "8 -" -> "i";
  "i" -> "8 -";
  "i" -> "8 -";
}
// graph for dag "dag_cleaned_0" of module "freia_skip_05" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 thr" [shape=parallelogram];
  "11 thr" -> "o";
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "11 thr" [label="t"];
  "9 ?" [shape=none];
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "10 ^." [label="i"];
  "8 -" -> "i";
  "i" -> "8 -";
  "i" -> "8 -";
}
// graph for dag "freia_skip_05_helper_0_0" of module "freia_skip_05" in dot format
digraph "freia_skip_05_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 thr" [shape=parallelogram];
  "11 thr" -> "o";
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "11 thr" [label="t"];
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "10 ^." [label="i"];
  "8 -" -> "i";
  "i" -> "8 -";
  "i" -> "8 -";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_skip_05
freia_status freia_skip_05_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, int32_t cst0, int32_t inf1, int32_t sup2, bool bin3)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 alu] 8 sub
  // nope
  // i [0 input 1] -> [0 alu] 8 sub
  // nope
  // alu 8 sub stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_SUB_IN1_IN0;


  // STAGE 1
  // i [0 alu] -> [1 alu] 10 xor_const
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // i [1 input 0] -> [1 alu] 10 xor_const
  // nope
  // alu 10 xor_const stage 1
  si.alu[1][0].op = SPOC_ALU_XOR_IN0_CONST;
  sp.alu[1][0].constant = cst0;

  // 0`t [1 alu] -> [1 threshold 0] 11 threshold
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // threshold 11 threshold stage 1 side 0
  si.th[1][0].op = bin3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[1][0].boundmin = inf1;
  sp.th[1][0].boundmax = sup2;


  // output image i on 1 and image o on 0
  // i [1 poc 0] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // i [1 output 1] -> [7 output 1] 0 null
  // i [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // i [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // i [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // i [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // i [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // i [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // o [1 threshold 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o1, o0, i0, i0);

  return ret;
}

! updated function

void freia_skip_05(freia_data2d *o, freia_data2d *i)
{
   // allocation in the middle of the stream
   freia_skip_05_helper_0_0_0(i, o, i, 111, 8, 100, true);              /*0008*/
}
