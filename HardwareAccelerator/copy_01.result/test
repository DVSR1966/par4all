#
# AIPO
#

! initial function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *open, *tmp, *out;                                 /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   open = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);             /*0018*/
   tmp = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/

   tmp = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);  /*0025*/

   ret_0 = freia_aipo_copy(tmp, in);                                    /*0027*/
   ret_0 |= freia_aipo_erode_8c(open, tmp, kernel1x3);                  /*0028*/
   ret_0 |= freia_aipo_copy(tmp, open);                                 /*0029*/
   ret_0 |= freia_aipo_erode_8c(open, tmp, kernel1x3);                  /*0030*/
   ret_0 |= freia_aipo_copy(tmp, open);                                 /*0031*/

   ret_0 |= freia_aipo_erode_8c(out, open, kernel1x3);                  /*0033*/

   freia_common_destruct_data(tmp);                                     /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(open);                                    /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}

! graphs

// graph for dag "dag_0" of module "copy_01" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "31 =" [shape=circle];
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "30 E8" -> "31 =" [label="open"];
  "29 =" [shape=circle];
  "29 =" -> "30 E8" [label="tmp"];
  "28 E8" [shape=box];
  "28 E8" -> "29 =" [label="open"];
  "27 =" [shape=circle];
  "27 =" -> "28 E8" [label="tmp"];
  "in" -> "27 =";
}
// graph for dag "dag_cleaned_0" of module "copy_01" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "28 E8" [shape=box];
  "28 E8" -> "30 E8" [label="open"];
  "in" -> "28 E8";
}

! updated function for

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *open, *out;                                       /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   open = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);             /*0018*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/
   
   
   ret_0 = 0;                                                           /*0027*/
   ret_0 |= freia_aipo_erode_8c(open, in, kernel1x3);                   /*0028*/
   ret_0 |= 0;                                                          /*0029*/
   ret_0 |= freia_aipo_erode_8c(open, open, kernel1x3);                 /*0030*/
   ret_0 |= 0;                                                          /*0031*/

   ret_0 |= freia_aipo_erode_8c(out, open, kernel1x3);                  /*0033*/
   
   
   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(open);                                    /*0041*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}
#
# SPOC
#

! initial function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *open, *tmp, *out;                                 /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   open = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);             /*0018*/
   tmp = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/

   tmp = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);  /*0025*/

   ret_0 = freia_aipo_copy(tmp, in);                                    /*0027*/
   ret_0 |= freia_aipo_erode_8c(open, tmp, kernel1x3);                  /*0028*/
   ret_0 |= freia_aipo_copy(tmp, open);                                 /*0029*/
   ret_0 |= freia_aipo_erode_8c(open, tmp, kernel1x3);                  /*0030*/
   ret_0 |= freia_aipo_copy(tmp, open);                                 /*0031*/

   ret_0 |= freia_aipo_erode_8c(out, open, kernel1x3);                  /*0033*/

   freia_common_destruct_data(tmp);                                     /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(open);                                    /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}

! graphs

// graph for dag "copy_01_helper_0_0" of module "copy_01" in dot format
digraph "copy_01_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "28 E8" [shape=box];
  "28 E8" -> "30 E8" [label="open"];
  "in" -> "28 E8";
}
// graph for dag "dag_0" of module "copy_01" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "31 =" [shape=circle];
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "30 E8" -> "31 =" [label="open"];
  "29 =" [shape=circle];
  "29 =" -> "30 E8" [label="tmp"];
  "28 E8" [shape=box];
  "28 E8" -> "29 =" [label="open"];
  "27 =" [shape=circle];
  "27 =" -> "28 E8" [label="tmp"];
  "in" -> "27 =";
}
// graph for dag "dag_cleaned_0" of module "copy_01" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "28 E8" [shape=box];
  "28 E8" -> "30 E8" [label="open"];
  "in" -> "28 E8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module copy_01
freia_status copy_01_helper_0_0_0(freia_data2d * o0, freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 28 erode_8c
  // nope
  // poc 28 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`open [0 poc 0] -> [1 poc 0] 30 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`open [1 input 0] -> [1 poc 0] 30 erode_8c
  // nope
  // poc 30 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`open [1 poc 0] -> [2 poc 0] 33 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`open [2 input 0] -> [2 poc 0] 33 erode_8c
  // nope
  // poc 33 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // output image 0`out on 0
  // 0`out [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [2 output 0] -> [7 output 0] 0 null
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/
   
   
   ret_0 = 0;                                                           /*0027*/
   ret_0 |= copy_01_helper_0_0_0(out, in, kernel1x3);                   /*0028*/
   ret_0 |= 0;                                                          /*0029*/
   ret_0 |= 0;                                                          /*0030*/
   ret_0 |= 0;                                                          /*0031*/

   ret_0 |= 0;                                                          /*0033*/
   
   
   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}

! cleaned up function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/
   
   
   ret_0 = 0;                                                           /*0027*/
   ret_0 |= copy_01_helper_0_0_0(out, in, kernel1x3);                   /*0028*/
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}
#
# TERAPIX
#

! initial function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *open, *tmp, *out;                                 /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   open = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);             /*0018*/
   tmp = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/

   tmp = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);  /*0025*/

   ret_0 = freia_aipo_copy(tmp, in);                                    /*0027*/
   ret_0 |= freia_aipo_erode_8c(open, tmp, kernel1x3);                  /*0028*/
   ret_0 |= freia_aipo_copy(tmp, open);                                 /*0029*/
   ret_0 |= freia_aipo_erode_8c(open, tmp, kernel1x3);                  /*0030*/
   ret_0 |= freia_aipo_copy(tmp, open);                                 /*0031*/

   ret_0 |= freia_aipo_erode_8c(out, open, kernel1x3);                  /*0033*/

   freia_common_destruct_data(tmp);                                     /*0035*/

   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(open);                                    /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}

! graphs

// graph for dag "copy_01_helper_0_0" of module "copy_01" in dot format
digraph "copy_01_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "28 E8" [shape=box];
  "28 E8" -> "30 E8" [label="open"];
  "in" -> "28 E8";
}
// graph for dag "dag_0" of module "copy_01" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "31 =" [shape=circle];
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "30 E8" -> "31 =" [label="open"];
  "29 =" [shape=circle];
  "29 =" -> "30 E8" [label="tmp"];
  "28 E8" [shape=box];
  "28 E8" -> "29 =" [label="open"];
  "27 =" [shape=circle];
  "27 =" -> "28 E8" [label="tmp"];
  "in" -> "27 =";
}
// graph for dag "dag_cleaned_0" of module "copy_01" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "33 E8" [shape=box];
  "33 E8" -> "out";
  "30 E8" [shape=box];
  "30 E8" -> "33 E8" [label="open"];
  "28 E8" [shape=box];
  "28 E8" -> "30 E8" [label="open"];
  "in" -> "28 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module copy_01
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 4, dag width is 1
 * cost is 45 cycles per imagelet row
 */
freia_status copy_01_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 341;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_1;
  mcu_macro[1][1].xmin2 = imagelet_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_1;
  mcu_macro[1][2].xmin1 = imagelet_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_COPY;

  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  ret = freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/
   
   
   ret_0 = 0;                                                           /*0027*/
   ret_0 |= copy_01_helper_0_0(out, in, kernel1x3);                     /*0028*/
   ret_0 |= 0;                                                          /*0029*/
   ret_0 |= 0;                                                          /*0030*/
   ret_0 |= 0;                                                          /*0031*/

   ret_0 |= 0;                                                          /*0033*/
   
   
   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}

! cleaned up function

int copy_01(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t ret_0;                                                       /*0008*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0010*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0013*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0014*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0020*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0023*/
   
   
   ret_0 = 0;                                                           /*0027*/
   ret_0 |= copy_01_helper_0_0(out, in, kernel1x3);                     /*0028*/
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0037*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0040*/
   freia_common_destruct_data(out);                                     /*0043*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0046*/
   freia_common_close_output(&fdout);                                   /*0047*/

   return 0;                                                            /*0049*/
}
#
# FREIA COMPILATION DONE
#

