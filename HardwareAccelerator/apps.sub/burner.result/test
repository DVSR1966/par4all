#
# AIPO
#
#
# compile generated burner
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out_203"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}

! updated function for

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   // hardware accelerator generated variable
   freia_data2d *imWork1_3 = 0, *out_203 = 0;
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   imWork1_3 = freia_common_create_data(imWork1->bpp, imWork1->widthWa, imWork1->heightWa);
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   out_203 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1_3, imWork1, neighborTransposed_0);       /*0254*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1_3, out);                             /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out_203, out, 250);                             /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out_203, imWork1);                               /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(imWork1_3);
   freia_common_destruct_data(out);                                     /*0506*/
   freia_common_destruct_data(out_203);

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}
#
# SPOC
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "22 =" [shape=circle];
  "22 =" -> "in";
  "imin" -> "22 =";
}
// graph for dag "dag_1" of module "main" in dot format
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "436 vol" [shape=diamond];
  "435 D8" [shape=box];
  "435 D8" -> "436 vol" [label="out"];
  "435 D8" -> "out";
  "434 D8" [shape=box];
  "434 D8" -> "435 D8" [label="out"];
  "433 !" [shape=trapezium,orientation=270];
  "433 !" -> "434 D8" [label="imWork1"];
  "433 !" -> "imWork1";
  "432 >" [shape=trapezium,orientation=270];
  "432 >" -> "433 !" [label="imWork1"];
  "431 >" [shape=trapezium,orientation=270];
  "431 >" -> "432 >" [label="imWork1"];
  "430 thr" [shape=parallelogram];
  "430 thr" -> "432 >" [label="imZone3"];
  "430 thr" -> "imZone3";
  "429 thr" [shape=parallelogram];
  "429 thr" -> "431 >" [label="imZone2"];
  "429 thr" -> "imZone2";
  "428 thr" [shape=parallelogram];
  "428 thr" -> "431 >" [label="imZone1"];
  "428 thr" -> "imZone1";
  "427 -" [shape=trapezium,orientation=270];
  "427 -" -> "429 thr" [label="imTophat"];
  "427 -" -> "428 thr" [label="imTophat"];
  "imin" -> "427 -";
  "426 <" [shape=trapezium,orientation=270];
  "426 <" -> "430 thr" [label="imClose"];
  "426 <" -> "427 -" [label="imClose"];
  "425 E8" [shape=box];
  "425 E8" -> "426 <" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "358 E8" [shape=box];
  "358 E8" -> "359 E8" [label="out"];
  "357 E8" [shape=box];
  "357 E8" -> "358 E8" [label="out"];
  "356 E8" [shape=box];
  "356 E8" -> "357 E8" [label="out"];
  "355 E8" [shape=box];
  "355 E8" -> "356 E8" [label="out"];
  "354 E8" [shape=box];
  "354 E8" -> "355 E8" [label="out"];
  "353 E8" [shape=box];
  "353 E8" -> "354 E8" [label="out"];
  "352 E8" [shape=box];
  "352 E8" -> "353 E8" [label="out"];
  "351 E8" [shape=box];
  "351 E8" -> "352 E8" [label="out"];
  "350 E8" [shape=box];
  "350 E8" -> "351 E8" [label="out"];
  "349 E8" [shape=box];
  "349 E8" -> "350 E8" [label="out"];
  "348 E8" [shape=box];
  "348 E8" -> "349 E8" [label="out"];
  "347 E8" [shape=box];
  "347 E8" -> "348 E8" [label="out"];
  "346 E8" [shape=box];
  "346 E8" -> "347 E8" [label="out"];
  "345 E8" [shape=box];
  "345 E8" -> "346 E8" [label="out"];
  "344 E8" [shape=box];
  "344 E8" -> "345 E8" [label="out"];
  "343 E8" [shape=box];
  "343 E8" -> "344 E8" [label="out"];
  "342 E8" [shape=box];
  "342 E8" -> "343 E8" [label="out"];
  "341 E8" [shape=box];
  "341 E8" -> "342 E8" [label="out"];
  "340 E8" [shape=box];
  "340 E8" -> "341 E8" [label="out"];
  "339 E8" [shape=box];
  "339 E8" -> "340 E8" [label="out"];
  "338 E8" [shape=box];
  "338 E8" -> "339 E8" [label="out"];
  "337 E8" [shape=box];
  "337 E8" -> "338 E8" [label="out"];
  "336 E8" [shape=box];
  "336 E8" -> "337 E8" [label="out"];
  "335 E8" [shape=box];
  "335 E8" -> "336 E8" [label="out"];
  "334 E8" [shape=box];
  "334 E8" -> "335 E8" [label="out"];
  "333 E8" [shape=box];
  "333 E8" -> "334 E8" [label="out"];
  "332 E8" [shape=box];
  "332 E8" -> "333 E8" [label="out"];
  "331 E8" [shape=box];
  "331 E8" -> "332 E8" [label="out"];
  "330 E8" [shape=box];
  "330 E8" -> "331 E8" [label="out"];
  "329 E8" [shape=box];
  "329 E8" -> "330 E8" [label="out"];
  "328 E8" [shape=box];
  "328 E8" -> "329 E8" [label="out"];
  "327 E8" [shape=box];
  "327 E8" -> "328 E8" [label="out"];
  "326 E8" [shape=box];
  "326 E8" -> "327 E8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 E8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "257 D8" [shape=box];
  "257 D8" -> "258 D8" [label="out"];
  "256 D8" [shape=box];
  "256 D8" -> "257 D8" [label="out"];
  "255 D8" [shape=box];
  "255 D8" -> "256 D8" [label="out"];
  "254 D8" [shape=box];
  "254 D8" -> "255 D8" [label="out"];
  "253 D8" [shape=box];
  "253 D8" -> "254 D8" [label="out"];
  "252 D8" [shape=box];
  "252 D8" -> "253 D8" [label="out"];
  "251 D8" [shape=box];
  "251 D8" -> "252 D8" [label="out"];
  "250 D8" [shape=box];
  "250 D8" -> "251 D8" [label="out"];
  "249 D8" [shape=box];
  "249 D8" -> "250 D8" [label="out"];
  "248 D8" [shape=box];
  "248 D8" -> "249 D8" [label="out"];
  "247 D8" [shape=box];
  "247 D8" -> "248 D8" [label="out"];
  "246 D8" [shape=box];
  "246 D8" -> "247 D8" [label="out"];
  "245 D8" [shape=box];
  "245 D8" -> "246 D8" [label="out"];
  "244 D8" [shape=box];
  "244 D8" -> "245 D8" [label="out"];
  "243 D8" [shape=box];
  "243 D8" -> "244 D8" [label="out"];
  "242 D8" [shape=box];
  "242 D8" -> "243 D8" [label="out"];
  "241 D8" [shape=box];
  "241 D8" -> "242 D8" [label="out"];
  "240 D8" [shape=box];
  "240 D8" -> "241 D8" [label="out"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="out"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="out"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="out"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="out"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="out"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="out"];
  "230 D8" [shape=box];
  "230 D8" -> "231 D8" [label="out"];
  "229 D8" [shape=box];
  "229 D8" -> "230 D8" [label="out"];
  "228 D8" [shape=box];
  "228 D8" -> "229 D8" [label="out"];
  "227 D8" [shape=box];
  "227 D8" -> "228 D8" [label="out"];
  "226 D8" [shape=box];
  "226 D8" -> "227 D8" [label="out"];
  "224 E8" [shape=box];
  "224 E8" -> "426 <" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="imWork1"];
  "153 E8" [shape=box];
  "153 E8" -> "154 E8" [label="imWork1"];
  "152 E8" [shape=box];
  "152 E8" -> "153 E8" [label="imWork1"];
  "151 E8" [shape=box];
  "151 E8" -> "152 E8" [label="imWork1"];
  "150 E8" [shape=box];
  "150 E8" -> "151 E8" [label="imWork1"];
  "149 E8" [shape=box];
  "149 E8" -> "150 E8" [label="imWork1"];
  "148 E8" [shape=box];
  "148 E8" -> "149 E8" [label="imWork1"];
  "147 E8" [shape=box];
  "147 E8" -> "148 E8" [label="imWork1"];
  "146 E8" [shape=box];
  "146 E8" -> "147 E8" [label="imWork1"];
  "145 E8" [shape=box];
  "145 E8" -> "146 E8" [label="imWork1"];
  "144 E8" [shape=box];
  "144 E8" -> "145 E8" [label="imWork1"];
  "143 E8" [shape=box];
  "143 E8" -> "144 E8" [label="imWork1"];
  "142 E8" [shape=box];
  "142 E8" -> "143 E8" [label="imWork1"];
  "141 E8" [shape=box];
  "141 E8" -> "142 E8" [label="imWork1"];
  "140 E8" [shape=box];
  "140 E8" -> "141 E8" [label="imWork1"];
  "139 E8" [shape=box];
  "139 E8" -> "140 E8" [label="imWork1"];
  "138 E8" [shape=box];
  "138 E8" -> "139 E8" [label="imWork1"];
  "137 E8" [shape=box];
  "137 E8" -> "138 E8" [label="imWork1"];
  "136 E8" [shape=box];
  "136 E8" -> "137 E8" [label="imWork1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 E8" [label="imWork1"];
  "134 E8" [shape=box];
  "134 E8" -> "135 E8" [label="imWork1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imWork1"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imWork1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imWork1"];
  "130 E8" [shape=box];
  "130 E8" -> "131 E8" [label="imWork1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 E8" [label="imWork1"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="imWork1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="imWork1"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="imWork1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="imWork1"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="imWork1"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="imWork1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="imWork1"];
  "49 D8" [shape=box];
  "49 D8" -> "50 D8" [label="imWork1"];
  "48 D8" [shape=box];
  "48 D8" -> "49 D8" [label="imWork1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 D8" [label="imWork1"];
  "46 D8" [shape=box];
  "46 D8" -> "47 D8" [label="imWork1"];
  "45 D8" [shape=box];
  "45 D8" -> "46 D8" [label="imWork1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 D8" [label="imWork1"];
  "43 D8" [shape=box];
  "43 D8" -> "44 D8" [label="imWork1"];
  "42 D8" [shape=box];
  "42 D8" -> "43 D8" [label="imWork1"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="imWork1"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="imWork1"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="imWork1"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="imWork1"];
  "37 D8" [shape=box];
  "37 D8" -> "38 D8" [label="imWork1"];
  "36 D8" [shape=box];
  "36 D8" -> "37 D8" [label="imWork1"];
  "35 D8" [shape=box];
  "35 D8" -> "36 D8" [label="imWork1"];
  "34 D8" [shape=box];
  "34 D8" -> "35 D8" [label="imWork1"];
  "33 D8" [shape=box];
  "33 D8" -> "34 D8" [label="imWork1"];
  "32 D8" [shape=box];
  "32 D8" -> "33 D8" [label="imWork1"];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="imWork1"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="imWork1"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="imWork1"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="imWork1"];
  "27 D8" [shape=box];
  "27 D8" -> "28 D8" [label="imWork1"];
  "26 D8" [shape=box];
  "26 D8" -> "27 D8" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "in" -> "226 D8";
  "in" -> "25 D8";
}
// graph for dag "dag_2" of module "main" in dot format
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "455 vol" [shape=diamond];
  "454 >" [shape=trapezium,orientation=270];
  "454 >" -> "455 vol" [label="out"];
  "454 >" -> "out'";
  "453 E8" [shape=box];
  "453 E8" -> "454 >" [label="out"];
  "452 >" [shape=trapezium,orientation=270];
  "452 >" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 >" [label="out"];
  "450 >" [shape=trapezium,orientation=270];
  "450 >" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 >" [label="out"];
  "448 >" [shape=trapezium,orientation=270];
  "448 >" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 >" [label="out"];
  "446 >" [shape=trapezium,orientation=270];
  "446 >" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 >" [label="out"];
  "444 >" [shape=trapezium,orientation=270];
  "444 >" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 >" [label="out"];
  "442 >" [shape=trapezium,orientation=270];
  "442 >" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 >" [label="out"];
  "440 >" [shape=trapezium,orientation=270];
  "440 >" -> "441 E8" [label="out"];
  "imWork1" -> "454 >";
  "imWork1" -> "452 >";
  "imWork1" -> "450 >";
  "imWork1" -> "448 >";
  "imWork1" -> "446 >";
  "imWork1" -> "444 >";
  "imWork1" -> "442 >";
  "imWork1" -> "440 >";
  "439 E8" [shape=box];
  "439 E8" -> "440 >" [label="out"];
  "out" -> "439 E8";
}
// graph for dag "dag_3" of module "main" in dot format
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "462 >" [shape=trapezium,orientation=270];
  "462 >" -> "out'";
  "461 >" [shape=trapezium,orientation=270];
  "461 >" -> "462 >" [label="imWork1"];
  "460 >" [shape=trapezium,orientation=270];
  "460 >" -> "461 >" [label="imWork1"];
  "459 <." [shape=trapezium,orientation=270];
  "459 <." -> "462 >" [label="out"];
  "out" -> "459 <.";
  "458 <." [shape=trapezium,orientation=270];
  "458 <." -> "461 >" [label="imZone3"];
  "imZone3" -> "458 <.";
  "457 <." [shape=trapezium,orientation=270];
  "457 <." -> "460 >" [label="imZone2"];
  "imZone2" -> "457 <.";
  "456 <." [shape=trapezium,orientation=270];
  "456 <." -> "460 >" [label="imZone1"];
  "imZone1" -> "456 <.";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "436 vol" [shape=diamond];
  "435 D8" [shape=box];
  "435 D8" -> "436 vol" [label="out"];
  "435 D8" -> "out";
  "434 D8" [shape=box];
  "434 D8" -> "435 D8" [label="out"];
  "433 !" [shape=trapezium,orientation=270];
  "433 !" -> "434 D8" [label="imWork1"];
  "433 !" -> "imWork1";
  "432 >" [shape=trapezium,orientation=270];
  "432 >" -> "433 !" [label="imWork1"];
  "431 >" [shape=trapezium,orientation=270];
  "431 >" -> "432 >" [label="imWork1"];
  "430 thr" [shape=parallelogram];
  "430 thr" -> "432 >" [label="imZone3"];
  "430 thr" -> "imZone3";
  "429 thr" [shape=parallelogram];
  "429 thr" -> "431 >" [label="imZone2"];
  "429 thr" -> "imZone2";
  "428 thr" [shape=parallelogram];
  "428 thr" -> "431 >" [label="imZone1"];
  "428 thr" -> "imZone1";
  "427 -" [shape=trapezium,orientation=270];
  "427 -" -> "429 thr" [label="imTophat"];
  "427 -" -> "428 thr" [label="imTophat"];
  "imin" -> "427 -";
  "426 <" [shape=trapezium,orientation=270];
  "426 <" -> "430 thr" [label="imClose"];
  "426 <" -> "427 -" [label="imClose"];
  "425 E8" [shape=box];
  "425 E8" -> "426 <" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "358 E8" [shape=box];
  "358 E8" -> "359 E8" [label="out"];
  "357 E8" [shape=box];
  "357 E8" -> "358 E8" [label="out"];
  "356 E8" [shape=box];
  "356 E8" -> "357 E8" [label="out"];
  "355 E8" [shape=box];
  "355 E8" -> "356 E8" [label="out"];
  "354 E8" [shape=box];
  "354 E8" -> "355 E8" [label="out"];
  "353 E8" [shape=box];
  "353 E8" -> "354 E8" [label="out"];
  "352 E8" [shape=box];
  "352 E8" -> "353 E8" [label="out"];
  "351 E8" [shape=box];
  "351 E8" -> "352 E8" [label="out"];
  "350 E8" [shape=box];
  "350 E8" -> "351 E8" [label="out"];
  "349 E8" [shape=box];
  "349 E8" -> "350 E8" [label="out"];
  "348 E8" [shape=box];
  "348 E8" -> "349 E8" [label="out"];
  "347 E8" [shape=box];
  "347 E8" -> "348 E8" [label="out"];
  "346 E8" [shape=box];
  "346 E8" -> "347 E8" [label="out"];
  "345 E8" [shape=box];
  "345 E8" -> "346 E8" [label="out"];
  "344 E8" [shape=box];
  "344 E8" -> "345 E8" [label="out"];
  "343 E8" [shape=box];
  "343 E8" -> "344 E8" [label="out"];
  "342 E8" [shape=box];
  "342 E8" -> "343 E8" [label="out"];
  "341 E8" [shape=box];
  "341 E8" -> "342 E8" [label="out"];
  "340 E8" [shape=box];
  "340 E8" -> "341 E8" [label="out"];
  "339 E8" [shape=box];
  "339 E8" -> "340 E8" [label="out"];
  "338 E8" [shape=box];
  "338 E8" -> "339 E8" [label="out"];
  "337 E8" [shape=box];
  "337 E8" -> "338 E8" [label="out"];
  "336 E8" [shape=box];
  "336 E8" -> "337 E8" [label="out"];
  "335 E8" [shape=box];
  "335 E8" -> "336 E8" [label="out"];
  "334 E8" [shape=box];
  "334 E8" -> "335 E8" [label="out"];
  "333 E8" [shape=box];
  "333 E8" -> "334 E8" [label="out"];
  "332 E8" [shape=box];
  "332 E8" -> "333 E8" [label="out"];
  "331 E8" [shape=box];
  "331 E8" -> "332 E8" [label="out"];
  "330 E8" [shape=box];
  "330 E8" -> "331 E8" [label="out"];
  "329 E8" [shape=box];
  "329 E8" -> "330 E8" [label="out"];
  "328 E8" [shape=box];
  "328 E8" -> "329 E8" [label="out"];
  "327 E8" [shape=box];
  "327 E8" -> "328 E8" [label="out"];
  "326 E8" [shape=box];
  "326 E8" -> "327 E8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 E8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "257 D8" [shape=box];
  "257 D8" -> "258 D8" [label="out"];
  "256 D8" [shape=box];
  "256 D8" -> "257 D8" [label="out"];
  "255 D8" [shape=box];
  "255 D8" -> "256 D8" [label="out"];
  "254 D8" [shape=box];
  "254 D8" -> "255 D8" [label="out"];
  "253 D8" [shape=box];
  "253 D8" -> "254 D8" [label="out"];
  "252 D8" [shape=box];
  "252 D8" -> "253 D8" [label="out"];
  "251 D8" [shape=box];
  "251 D8" -> "252 D8" [label="out"];
  "250 D8" [shape=box];
  "250 D8" -> "251 D8" [label="out"];
  "249 D8" [shape=box];
  "249 D8" -> "250 D8" [label="out"];
  "248 D8" [shape=box];
  "248 D8" -> "249 D8" [label="out"];
  "247 D8" [shape=box];
  "247 D8" -> "248 D8" [label="out"];
  "246 D8" [shape=box];
  "246 D8" -> "247 D8" [label="out"];
  "245 D8" [shape=box];
  "245 D8" -> "246 D8" [label="out"];
  "244 D8" [shape=box];
  "244 D8" -> "245 D8" [label="out"];
  "243 D8" [shape=box];
  "243 D8" -> "244 D8" [label="out"];
  "242 D8" [shape=box];
  "242 D8" -> "243 D8" [label="out"];
  "241 D8" [shape=box];
  "241 D8" -> "242 D8" [label="out"];
  "240 D8" [shape=box];
  "240 D8" -> "241 D8" [label="out"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="out"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="out"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="out"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="out"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="out"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="out"];
  "230 D8" [shape=box];
  "230 D8" -> "231 D8" [label="out"];
  "229 D8" [shape=box];
  "229 D8" -> "230 D8" [label="out"];
  "228 D8" [shape=box];
  "228 D8" -> "229 D8" [label="out"];
  "227 D8" [shape=box];
  "227 D8" -> "228 D8" [label="out"];
  "226 D8" [shape=box];
  "226 D8" -> "227 D8" [label="out"];
  "224 E8" [shape=box];
  "224 E8" -> "426 <" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="imWork1"];
  "153 E8" [shape=box];
  "153 E8" -> "154 E8" [label="imWork1"];
  "152 E8" [shape=box];
  "152 E8" -> "153 E8" [label="imWork1"];
  "151 E8" [shape=box];
  "151 E8" -> "152 E8" [label="imWork1"];
  "150 E8" [shape=box];
  "150 E8" -> "151 E8" [label="imWork1"];
  "149 E8" [shape=box];
  "149 E8" -> "150 E8" [label="imWork1"];
  "148 E8" [shape=box];
  "148 E8" -> "149 E8" [label="imWork1"];
  "147 E8" [shape=box];
  "147 E8" -> "148 E8" [label="imWork1"];
  "146 E8" [shape=box];
  "146 E8" -> "147 E8" [label="imWork1"];
  "145 E8" [shape=box];
  "145 E8" -> "146 E8" [label="imWork1"];
  "144 E8" [shape=box];
  "144 E8" -> "145 E8" [label="imWork1"];
  "143 E8" [shape=box];
  "143 E8" -> "144 E8" [label="imWork1"];
  "142 E8" [shape=box];
  "142 E8" -> "143 E8" [label="imWork1"];
  "141 E8" [shape=box];
  "141 E8" -> "142 E8" [label="imWork1"];
  "140 E8" [shape=box];
  "140 E8" -> "141 E8" [label="imWork1"];
  "139 E8" [shape=box];
  "139 E8" -> "140 E8" [label="imWork1"];
  "138 E8" [shape=box];
  "138 E8" -> "139 E8" [label="imWork1"];
  "137 E8" [shape=box];
  "137 E8" -> "138 E8" [label="imWork1"];
  "136 E8" [shape=box];
  "136 E8" -> "137 E8" [label="imWork1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 E8" [label="imWork1"];
  "134 E8" [shape=box];
  "134 E8" -> "135 E8" [label="imWork1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imWork1"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imWork1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imWork1"];
  "130 E8" [shape=box];
  "130 E8" -> "131 E8" [label="imWork1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 E8" [label="imWork1"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="imWork1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="imWork1"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="imWork1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="imWork1"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="imWork1"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="imWork1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="imWork1"];
  "49 D8" [shape=box];
  "49 D8" -> "50 D8" [label="imWork1"];
  "48 D8" [shape=box];
  "48 D8" -> "49 D8" [label="imWork1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 D8" [label="imWork1"];
  "46 D8" [shape=box];
  "46 D8" -> "47 D8" [label="imWork1"];
  "45 D8" [shape=box];
  "45 D8" -> "46 D8" [label="imWork1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 D8" [label="imWork1"];
  "43 D8" [shape=box];
  "43 D8" -> "44 D8" [label="imWork1"];
  "42 D8" [shape=box];
  "42 D8" -> "43 D8" [label="imWork1"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="imWork1"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="imWork1"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="imWork1"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="imWork1"];
  "37 D8" [shape=box];
  "37 D8" -> "38 D8" [label="imWork1"];
  "36 D8" [shape=box];
  "36 D8" -> "37 D8" [label="imWork1"];
  "35 D8" [shape=box];
  "35 D8" -> "36 D8" [label="imWork1"];
  "34 D8" [shape=box];
  "34 D8" -> "35 D8" [label="imWork1"];
  "33 D8" [shape=box];
  "33 D8" -> "34 D8" [label="imWork1"];
  "32 D8" [shape=box];
  "32 D8" -> "33 D8" [label="imWork1"];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="imWork1"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="imWork1"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="imWork1"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="imWork1"];
  "27 D8" [shape=box];
  "27 D8" -> "28 D8" [label="imWork1"];
  "26 D8" [shape=box];
  "26 D8" -> "27 D8" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "in" -> "226 D8";
  "in" -> "25 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "455 vol" [shape=diamond];
  "454 >" [shape=trapezium,orientation=270];
  "454 >" -> "455 vol" [label="out"];
  "454 >" -> "out'";
  "453 E8" [shape=box];
  "453 E8" -> "454 >" [label="out"];
  "452 >" [shape=trapezium,orientation=270];
  "452 >" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 >" [label="out"];
  "450 >" [shape=trapezium,orientation=270];
  "450 >" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 >" [label="out"];
  "448 >" [shape=trapezium,orientation=270];
  "448 >" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 >" [label="out"];
  "446 >" [shape=trapezium,orientation=270];
  "446 >" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 >" [label="out"];
  "444 >" [shape=trapezium,orientation=270];
  "444 >" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 >" [label="out"];
  "442 >" [shape=trapezium,orientation=270];
  "442 >" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 >" [label="out"];
  "440 >" [shape=trapezium,orientation=270];
  "440 >" -> "441 E8" [label="out"];
  "imWork1" -> "454 >";
  "imWork1" -> "452 >";
  "imWork1" -> "450 >";
  "imWork1" -> "448 >";
  "imWork1" -> "446 >";
  "imWork1" -> "444 >";
  "imWork1" -> "442 >";
  "imWork1" -> "440 >";
  "439 E8" [shape=box];
  "439 E8" -> "440 >" [label="out"];
  "out" -> "439 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "462 >" [shape=trapezium,orientation=270];
  "462 >" -> "out'";
  "461 >" [shape=trapezium,orientation=270];
  "461 >" -> "462 >" [label="imWork1"];
  "460 >" [shape=trapezium,orientation=270];
  "460 >" -> "461 >" [label="imWork1"];
  "459 <." [shape=trapezium,orientation=270];
  "459 <." -> "462 >" [label="out"];
  "out" -> "459 <.";
  "458 <." [shape=trapezium,orientation=270];
  "458 <." -> "461 >" [label="imZone3"];
  "imZone3" -> "458 <.";
  "457 <." [shape=trapezium,orientation=270];
  "457 <." -> "460 >" [label="imZone2"];
  "imZone2" -> "457 <.";
  "456 <." [shape=trapezium,orientation=270];
  "456 <." -> "460 >" [label="imZone1"];
  "imZone1" -> "456 <.";
}
// graph for dag "main_helper_1_0" of module "main" in dot format
digraph "main_helper_1_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imClose" [shape=circle];
  "imZone3" [shape=circle];

  // computation vertices
  "430 thr" [shape=parallelogram];
  "430 thr" -> "imZone3";
  "426 <" [shape=trapezium,orientation=270];
  "426 <" -> "430 thr" [label="imClose"];
  "426 <" -> "imClose";
  "425 E8" [shape=box];
  "425 E8" -> "426 <" [label="out_2"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_3"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_4"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_5"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_6"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_7"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_8"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_9"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_10"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_11"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_12"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_13"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_14"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_15"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_16"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_17"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_18"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_19"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_20"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_21"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_22"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_23"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_24"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_25"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_26"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_27"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_28"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_29"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_30"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_31"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_32"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_33"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_34"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_35"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_36"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_37"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_38"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_39"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_40"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_41"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_42"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_43"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_44"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_45"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_46"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_47"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_48"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_49"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_50"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_51"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_52"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_53"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_54"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_55"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_56"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_57"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_58"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_59"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_60"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_61"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_62"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_63"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_64"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_65"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_66"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_67"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_68"];
  "358 E8" [shape=box];
  "358 E8" -> "359 E8" [label="out_69"];
  "357 E8" [shape=box];
  "357 E8" -> "358 E8" [label="out_70"];
  "356 E8" [shape=box];
  "356 E8" -> "357 E8" [label="out_71"];
  "355 E8" [shape=box];
  "355 E8" -> "356 E8" [label="out_72"];
  "354 E8" [shape=box];
  "354 E8" -> "355 E8" [label="out_73"];
  "353 E8" [shape=box];
  "353 E8" -> "354 E8" [label="out_74"];
  "352 E8" [shape=box];
  "352 E8" -> "353 E8" [label="out_75"];
  "351 E8" [shape=box];
  "351 E8" -> "352 E8" [label="out_76"];
  "350 E8" [shape=box];
  "350 E8" -> "351 E8" [label="out_77"];
  "349 E8" [shape=box];
  "349 E8" -> "350 E8" [label="out_78"];
  "348 E8" [shape=box];
  "348 E8" -> "349 E8" [label="out_79"];
  "347 E8" [shape=box];
  "347 E8" -> "348 E8" [label="out_80"];
  "346 E8" [shape=box];
  "346 E8" -> "347 E8" [label="out_81"];
  "345 E8" [shape=box];
  "345 E8" -> "346 E8" [label="out_82"];
  "344 E8" [shape=box];
  "344 E8" -> "345 E8" [label="out_83"];
  "343 E8" [shape=box];
  "343 E8" -> "344 E8" [label="out_84"];
  "342 E8" [shape=box];
  "342 E8" -> "343 E8" [label="out_85"];
  "341 E8" [shape=box];
  "341 E8" -> "342 E8" [label="out_86"];
  "340 E8" [shape=box];
  "340 E8" -> "341 E8" [label="out_87"];
  "339 E8" [shape=box];
  "339 E8" -> "340 E8" [label="out_88"];
  "338 E8" [shape=box];
  "338 E8" -> "339 E8" [label="out_89"];
  "337 E8" [shape=box];
  "337 E8" -> "338 E8" [label="out_90"];
  "336 E8" [shape=box];
  "336 E8" -> "337 E8" [label="out_91"];
  "335 E8" [shape=box];
  "335 E8" -> "336 E8" [label="out_92"];
  "334 E8" [shape=box];
  "334 E8" -> "335 E8" [label="out_93"];
  "333 E8" [shape=box];
  "333 E8" -> "334 E8" [label="out_94"];
  "332 E8" [shape=box];
  "332 E8" -> "333 E8" [label="out_95"];
  "331 E8" [shape=box];
  "331 E8" -> "332 E8" [label="out_96"];
  "330 E8" [shape=box];
  "330 E8" -> "331 E8" [label="out_97"];
  "329 E8" [shape=box];
  "329 E8" -> "330 E8" [label="out_98"];
  "328 E8" [shape=box];
  "328 E8" -> "329 E8" [label="out_99"];
  "327 E8" [shape=box];
  "327 E8" -> "328 E8" [label="out_100"];
  "326 E8" [shape=box];
  "326 E8" -> "327 E8" [label="out_101"];
  "325 D8" [shape=box];
  "325 D8" -> "326 E8" [label="out_102"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_103"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_104"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_105"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_106"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_107"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_108"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_109"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_110"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_111"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_112"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_113"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_114"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_115"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_116"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_117"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_118"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_119"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_120"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_121"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_122"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_123"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_124"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_125"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_126"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_127"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_128"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_129"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_130"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_131"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_132"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_133"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_134"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_135"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_136"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_137"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_138"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_139"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_140"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_141"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_142"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_143"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_144"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_145"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_146"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_147"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_148"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_149"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_150"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_151"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_152"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_153"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_154"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_155"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_156"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_157"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_158"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_159"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_160"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_161"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_162"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_163"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_164"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_165"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_166"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_167"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_168"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_169"];
  "257 D8" [shape=box];
  "257 D8" -> "258 D8" [label="out_170"];
  "256 D8" [shape=box];
  "256 D8" -> "257 D8" [label="out_171"];
  "255 D8" [shape=box];
  "255 D8" -> "256 D8" [label="out_172"];
  "254 D8" [shape=box];
  "254 D8" -> "255 D8" [label="out_173"];
  "253 D8" [shape=box];
  "253 D8" -> "254 D8" [label="out_174"];
  "252 D8" [shape=box];
  "252 D8" -> "253 D8" [label="out_175"];
  "251 D8" [shape=box];
  "251 D8" -> "252 D8" [label="out_176"];
  "250 D8" [shape=box];
  "250 D8" -> "251 D8" [label="out_177"];
  "249 D8" [shape=box];
  "249 D8" -> "250 D8" [label="out_178"];
  "248 D8" [shape=box];
  "248 D8" -> "249 D8" [label="out_179"];
  "247 D8" [shape=box];
  "247 D8" -> "248 D8" [label="out_180"];
  "246 D8" [shape=box];
  "246 D8" -> "247 D8" [label="out_181"];
  "245 D8" [shape=box];
  "245 D8" -> "246 D8" [label="out_182"];
  "244 D8" [shape=box];
  "244 D8" -> "245 D8" [label="out_183"];
  "243 D8" [shape=box];
  "243 D8" -> "244 D8" [label="out_184"];
  "242 D8" [shape=box];
  "242 D8" -> "243 D8" [label="out_185"];
  "241 D8" [shape=box];
  "241 D8" -> "242 D8" [label="out_186"];
  "240 D8" [shape=box];
  "240 D8" -> "241 D8" [label="out_187"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="out_188"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_189"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_190"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="out_191"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="out_192"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="out_193"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="out_194"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="out_195"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="out_196"];
  "230 D8" [shape=box];
  "230 D8" -> "231 D8" [label="out_197"];
  "229 D8" [shape=box];
  "229 D8" -> "230 D8" [label="out_198"];
  "228 D8" [shape=box];
  "228 D8" -> "229 D8" [label="out_199"];
  "227 D8" [shape=box];
  "227 D8" -> "228 D8" [label="out_200"];
  "226 D8" [shape=box];
  "226 D8" -> "227 D8" [label="out_201"];
  "224 E8" [shape=box];
  "224 E8" -> "426 <" [label="imWork1_3"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_4"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_5"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_6"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_7"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_8"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_9"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_10"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_11"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_12"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_13"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_14"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_15"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_16"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_17"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_18"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_19"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_20"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_21"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_22"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_23"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_24"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_25"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_26"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_27"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_28"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_29"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_30"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_31"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_32"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_33"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_34"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_35"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_36"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_37"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_38"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_39"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_40"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_41"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_42"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_43"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_44"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_45"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_46"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_47"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_48"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_49"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_50"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_51"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_52"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_53"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_54"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_55"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_56"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_57"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_58"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_59"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_60"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_61"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_62"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_63"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_64"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_65"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_66"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_67"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_68"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_69"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_70"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_71"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_72"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="imWork1_73"];
  "153 E8" [shape=box];
  "153 E8" -> "154 E8" [label="imWork1_74"];
  "152 E8" [shape=box];
  "152 E8" -> "153 E8" [label="imWork1_75"];
  "151 E8" [shape=box];
  "151 E8" -> "152 E8" [label="imWork1_76"];
  "150 E8" [shape=box];
  "150 E8" -> "151 E8" [label="imWork1_77"];
  "149 E8" [shape=box];
  "149 E8" -> "150 E8" [label="imWork1_78"];
  "148 E8" [shape=box];
  "148 E8" -> "149 E8" [label="imWork1_79"];
  "147 E8" [shape=box];
  "147 E8" -> "148 E8" [label="imWork1_80"];
  "146 E8" [shape=box];
  "146 E8" -> "147 E8" [label="imWork1_81"];
  "145 E8" [shape=box];
  "145 E8" -> "146 E8" [label="imWork1_82"];
  "144 E8" [shape=box];
  "144 E8" -> "145 E8" [label="imWork1_83"];
  "143 E8" [shape=box];
  "143 E8" -> "144 E8" [label="imWork1_84"];
  "142 E8" [shape=box];
  "142 E8" -> "143 E8" [label="imWork1_85"];
  "141 E8" [shape=box];
  "141 E8" -> "142 E8" [label="imWork1_86"];
  "140 E8" [shape=box];
  "140 E8" -> "141 E8" [label="imWork1_87"];
  "139 E8" [shape=box];
  "139 E8" -> "140 E8" [label="imWork1_88"];
  "138 E8" [shape=box];
  "138 E8" -> "139 E8" [label="imWork1_89"];
  "137 E8" [shape=box];
  "137 E8" -> "138 E8" [label="imWork1_90"];
  "136 E8" [shape=box];
  "136 E8" -> "137 E8" [label="imWork1_91"];
  "135 E8" [shape=box];
  "135 E8" -> "136 E8" [label="imWork1_92"];
  "134 E8" [shape=box];
  "134 E8" -> "135 E8" [label="imWork1_93"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imWork1_94"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imWork1_95"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imWork1_96"];
  "130 E8" [shape=box];
  "130 E8" -> "131 E8" [label="imWork1_97"];
  "129 E8" [shape=box];
  "129 E8" -> "130 E8" [label="imWork1_98"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="imWork1_99"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="imWork1_100"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="imWork1_101"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="imWork1_102"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="imWork1_103"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_104"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_105"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_106"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_107"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_108"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_109"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_110"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_111"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_112"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_113"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_114"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_115"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_116"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_117"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_118"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_119"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_120"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_121"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_122"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_123"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_124"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_125"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_126"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_127"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_128"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_129"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_130"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_131"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_132"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_133"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_134"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_135"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_136"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_137"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_138"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_139"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_140"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_141"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_142"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_143"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_144"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_145"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_146"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_147"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_148"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_149"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_150"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_151"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_152"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_153"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_154"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_155"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_156"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_157"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_158"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_159"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_160"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_161"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_162"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_163"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_164"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_165"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_166"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_167"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_168"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_169"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_170"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_171"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_172"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_173"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="imWork1_174"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="imWork1_175"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="imWork1_176"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="imWork1_177"];
  "49 D8" [shape=box];
  "49 D8" -> "50 D8" [label="imWork1_178"];
  "48 D8" [shape=box];
  "48 D8" -> "49 D8" [label="imWork1_179"];
  "47 D8" [shape=box];
  "47 D8" -> "48 D8" [label="imWork1_180"];
  "46 D8" [shape=box];
  "46 D8" -> "47 D8" [label="imWork1_181"];
  "45 D8" [shape=box];
  "45 D8" -> "46 D8" [label="imWork1_182"];
  "44 D8" [shape=box];
  "44 D8" -> "45 D8" [label="imWork1_183"];
  "43 D8" [shape=box];
  "43 D8" -> "44 D8" [label="imWork1_184"];
  "42 D8" [shape=box];
  "42 D8" -> "43 D8" [label="imWork1_185"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="imWork1_186"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="imWork1_187"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="imWork1_188"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="imWork1_189"];
  "37 D8" [shape=box];
  "37 D8" -> "38 D8" [label="imWork1_190"];
  "36 D8" [shape=box];
  "36 D8" -> "37 D8" [label="imWork1_191"];
  "35 D8" [shape=box];
  "35 D8" -> "36 D8" [label="imWork1_192"];
  "34 D8" [shape=box];
  "34 D8" -> "35 D8" [label="imWork1_193"];
  "33 D8" [shape=box];
  "33 D8" -> "34 D8" [label="imWork1_194"];
  "32 D8" [shape=box];
  "32 D8" -> "33 D8" [label="imWork1_195"];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="imWork1_196"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="imWork1_197"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="imWork1_198"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="imWork1_199"];
  "27 D8" [shape=box];
  "27 D8" -> "28 D8" [label="imWork1_200"];
  "26 D8" [shape=box];
  "26 D8" -> "27 D8" [label="imWork1_201"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_202"];
  "in" -> "226 D8";
  "in" -> "25 D8";
}
// graph for dag "main_helper_1_1" of module "main" in dot format
digraph "main_helper_1_1" {
  // inputs
  "imClose" [shape=circle];
  "imin" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];

  // computation vertices
  "429 thr" [shape=parallelogram];
  "429 thr" -> "imZone2";
  "428 thr" [shape=parallelogram];
  "428 thr" -> "imZone1";
  "427 -" [shape=trapezium,orientation=270];
  "427 -" -> "429 thr" [label="imTophat"];
  "427 -" -> "428 thr" [label="imTophat"];
  "imin" -> "427 -";
  "imClose" -> "427 -";
}
// graph for dag "main_helper_1_2" of module "main" in dot format
digraph "main_helper_1_2" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];

  // outputs
  "imWork1_2" [shape=circle];

  // computation vertices
  "431 >" [shape=trapezium,orientation=270];
  "431 >" -> "imWork1_2";
  "imZone2" -> "431 >";
  "imZone1" -> "431 >";
}
// graph for dag "main_helper_1_3" of module "main" in dot format
digraph "main_helper_1_3" {
  // inputs
  "imWork1_2" [shape=circle];
  "imZone3" [shape=circle];

  // outputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "436 vol" [shape=diamond];
  "435 D8" [shape=box];
  "435 D8" -> "436 vol" [label="out"];
  "435 D8" -> "out";
  "434 D8" [shape=box];
  "434 D8" -> "435 D8" [label="out_1"];
  "433 !" [shape=trapezium,orientation=270];
  "433 !" -> "434 D8" [label="imWork1"];
  "433 !" -> "imWork1";
  "432 >" [shape=trapezium,orientation=270];
  "432 >" -> "433 !" [label="imWork1_1"];
  "imZone3" -> "432 >";
  "imWork1_2" -> "432 >";
}
// graph for dag "main_helper_2_0" of module "main" in dot format
digraph "main_helper_2_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "455 vol" [shape=diamond];
  "454 >" [shape=trapezium,orientation=270];
  "454 >" -> "455 vol" [label="out"];
  "454 >" -> "out'";
  "453 E8" [shape=box];
  "453 E8" -> "454 >" [label="out_202"];
  "452 >" [shape=trapezium,orientation=270];
  "452 >" -> "453 E8" [label="out_203"];
  "451 E8" [shape=box];
  "451 E8" -> "452 >" [label="out_204"];
  "450 >" [shape=trapezium,orientation=270];
  "450 >" -> "451 E8" [label="out_205"];
  "449 E8" [shape=box];
  "449 E8" -> "450 >" [label="out_206"];
  "448 >" [shape=trapezium,orientation=270];
  "448 >" -> "449 E8" [label="out_207"];
  "447 E8" [shape=box];
  "447 E8" -> "448 >" [label="out_208"];
  "446 >" [shape=trapezium,orientation=270];
  "446 >" -> "447 E8" [label="out_209"];
  "445 E8" [shape=box];
  "445 E8" -> "446 >" [label="out_210"];
  "444 >" [shape=trapezium,orientation=270];
  "444 >" -> "445 E8" [label="out_211"];
  "443 E8" [shape=box];
  "443 E8" -> "444 >" [label="out_212"];
  "442 >" [shape=trapezium,orientation=270];
  "442 >" -> "443 E8" [label="out_213"];
  "441 E8" [shape=box];
  "441 E8" -> "442 >" [label="out_214"];
  "440 >" [shape=trapezium,orientation=270];
  "440 >" -> "441 E8" [label="out_215"];
  "imWork1" -> "454 >";
  "imWork1" -> "452 >";
  "imWork1" -> "450 >";
  "imWork1" -> "448 >";
  "imWork1" -> "446 >";
  "imWork1" -> "444 >";
  "imWork1" -> "442 >";
  "imWork1" -> "440 >";
  "439 E8" [shape=box];
  "439 E8" -> "440 >" [label="out_216"];
  "out" -> "439 E8";
}
// graph for dag "main_helper_3_0" of module "main" in dot format
digraph "main_helper_3_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];

  // outputs
  "imWork1_203" [shape=circle];

  // computation vertices
  "460 >" [shape=trapezium,orientation=270];
  "460 >" -> "imWork1_203";
  "457 <." [shape=trapezium,orientation=270];
  "457 <." -> "460 >" [label="imZone2"];
  "imZone2" -> "457 <.";
  "456 <." [shape=trapezium,orientation=270];
  "456 <." -> "460 >" [label="imZone1"];
  "imZone1" -> "456 <.";
}
// graph for dag "main_helper_3_1" of module "main" in dot format
digraph "main_helper_3_1" {
  // inputs
  "imWork1_203" [shape=circle];
  "imZone3" [shape=circle];

  // outputs
  "imWork1" [shape=circle];

  // computation vertices
  "461 >" [shape=trapezium,orientation=270];
  "461 >" -> "imWork1";
  "imWork1_203" -> "461 >";
  "458 <." [shape=trapezium,orientation=270];
  "458 <." -> "461 >" [label="imZone3"];
  "imZone3" -> "458 <.";
}
// graph for dag "main_helper_3_2" of module "main" in dot format
digraph "main_helper_3_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "462 >" [shape=trapezium,orientation=270];
  "462 >" -> "out'";
  "imWork1" -> "462 >";
  "459 <." [shape=trapezium,orientation=270];
  "459 <." -> "462 >" [label="out_217"];
  "out" -> "459 <.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 0+1 copies
// # SPOC calls: 0

// dag 1: 411 ops and 0 copies, optimized to 411 ops and 0+0 copies
// split 0: 25 cuts
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// # SPOC calls: 28

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 25 dilate_8c
  // nope
  // poc 25 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_202 [0 poc 0] -> [1 poc 0] 26 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_202 [1 input 0] -> [1 poc 0] 26 dilate_8c
  // nope
  // poc 26 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_201 [1 poc 0] -> [2 poc 0] 27 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_201 [2 input 0] -> [2 poc 0] 27 dilate_8c
  // nope
  // poc 27 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_200 [2 poc 0] -> [3 poc 0] 28 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_200 [3 input 0] -> [3 poc 0] 28 dilate_8c
  // nope
  // poc 28 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_199 [3 poc 0] -> [4 poc 0] 29 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_199 [4 input 0] -> [4 poc 0] 29 dilate_8c
  // nope
  // poc 29 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_198 [4 poc 0] -> [5 poc 0] 30 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_198 [5 input 0] -> [5 poc 0] 30 dilate_8c
  // nope
  // poc 30 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_197 [5 poc 0] -> [6 poc 0] 31 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_197 [6 input 0] -> [6 poc 0] 31 dilate_8c
  // nope
  // poc 31 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_196 [6 poc 0] -> [7 poc 0] 32 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_196 [7 input 0] -> [7 poc 0] 32 dilate_8c
  // nope
  // poc 32 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 226 dilate_8c
  // nope
  // poc 226 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_201 [0 poc 1] -> [1 poc 1] 227 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_201 [1 input 1] -> [1 poc 1] 227 dilate_8c
  // nope
  // poc 227 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_200 [1 poc 1] -> [2 poc 1] 228 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_200 [2 input 1] -> [2 poc 1] 228 dilate_8c
  // nope
  // poc 228 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_199 [2 poc 1] -> [3 poc 1] 229 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_199 [3 input 1] -> [3 poc 1] 229 dilate_8c
  // nope
  // poc 229 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_198 [3 poc 1] -> [4 poc 1] 230 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_198 [4 input 1] -> [4 poc 1] 230 dilate_8c
  // nope
  // poc 230 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_197 [4 poc 1] -> [5 poc 1] 231 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_197 [5 input 1] -> [5 poc 1] 231 dilate_8c
  // nope
  // poc 231 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_196 [5 poc 1] -> [6 poc 1] 232 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_196 [6 input 1] -> [6 poc 1] 232 dilate_8c
  // nope
  // poc 232 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_195 [6 poc 1] -> [7 poc 1] 233 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_195 [7 input 1] -> [7 poc 1] 233 dilate_8c
  // nope
  // poc 233 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_195 on 0 and image 0`out_194 on 1
  // 0`imWork1_195 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_195 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_194 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_194 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_195 [0 input 0] -> [0 poc 0] 33 dilate_8c
  // nope
  // poc 33 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_194 [0 poc 0] -> [1 poc 0] 34 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_194 [1 input 0] -> [1 poc 0] 34 dilate_8c
  // nope
  // poc 34 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_193 [1 poc 0] -> [2 poc 0] 35 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_193 [2 input 0] -> [2 poc 0] 35 dilate_8c
  // nope
  // poc 35 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_192 [2 poc 0] -> [3 poc 0] 36 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_192 [3 input 0] -> [3 poc 0] 36 dilate_8c
  // nope
  // poc 36 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_191 [3 poc 0] -> [4 poc 0] 37 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_191 [4 input 0] -> [4 poc 0] 37 dilate_8c
  // nope
  // poc 37 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_190 [4 poc 0] -> [5 poc 0] 38 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_190 [5 input 0] -> [5 poc 0] 38 dilate_8c
  // nope
  // poc 38 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_189 [5 poc 0] -> [6 poc 0] 39 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_189 [6 input 0] -> [6 poc 0] 39 dilate_8c
  // nope
  // poc 39 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_188 [6 poc 0] -> [7 poc 0] 40 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_188 [7 input 0] -> [7 poc 0] 40 dilate_8c
  // nope
  // poc 40 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_194 [0 input 1] -> [0 poc 1] 234 dilate_8c
  // nope
  // poc 234 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_193 [0 poc 1] -> [1 poc 1] 235 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_193 [1 input 1] -> [1 poc 1] 235 dilate_8c
  // nope
  // poc 235 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_192 [1 poc 1] -> [2 poc 1] 236 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_192 [2 input 1] -> [2 poc 1] 236 dilate_8c
  // nope
  // poc 236 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_191 [2 poc 1] -> [3 poc 1] 237 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_191 [3 input 1] -> [3 poc 1] 237 dilate_8c
  // nope
  // poc 237 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_190 [3 poc 1] -> [4 poc 1] 238 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_190 [4 input 1] -> [4 poc 1] 238 dilate_8c
  // nope
  // poc 238 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_189 [4 poc 1] -> [5 poc 1] 239 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_189 [5 input 1] -> [5 poc 1] 239 dilate_8c
  // nope
  // poc 239 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_188 [5 poc 1] -> [6 poc 1] 240 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_188 [6 input 1] -> [6 poc 1] 240 dilate_8c
  // nope
  // poc 240 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_187 [6 poc 1] -> [7 poc 1] 241 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_187 [7 input 1] -> [7 poc 1] 241 dilate_8c
  // nope
  // poc 241 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_187 on 0 and image 0`out_186 on 1
  // 0`imWork1_187 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_187 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_186 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_186 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_2(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_187 [0 input 0] -> [0 poc 0] 41 dilate_8c
  // nope
  // poc 41 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_186 [0 poc 0] -> [1 poc 0] 42 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_186 [1 input 0] -> [1 poc 0] 42 dilate_8c
  // nope
  // poc 42 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_185 [1 poc 0] -> [2 poc 0] 43 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_185 [2 input 0] -> [2 poc 0] 43 dilate_8c
  // nope
  // poc 43 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_184 [2 poc 0] -> [3 poc 0] 44 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_184 [3 input 0] -> [3 poc 0] 44 dilate_8c
  // nope
  // poc 44 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_183 [3 poc 0] -> [4 poc 0] 45 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_183 [4 input 0] -> [4 poc 0] 45 dilate_8c
  // nope
  // poc 45 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_182 [4 poc 0] -> [5 poc 0] 46 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_182 [5 input 0] -> [5 poc 0] 46 dilate_8c
  // nope
  // poc 46 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_181 [5 poc 0] -> [6 poc 0] 47 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_181 [6 input 0] -> [6 poc 0] 47 dilate_8c
  // nope
  // poc 47 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_180 [6 poc 0] -> [7 poc 0] 48 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_180 [7 input 0] -> [7 poc 0] 48 dilate_8c
  // nope
  // poc 48 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_186 [0 input 1] -> [0 poc 1] 242 dilate_8c
  // nope
  // poc 242 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_185 [0 poc 1] -> [1 poc 1] 243 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_185 [1 input 1] -> [1 poc 1] 243 dilate_8c
  // nope
  // poc 243 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_184 [1 poc 1] -> [2 poc 1] 244 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_184 [2 input 1] -> [2 poc 1] 244 dilate_8c
  // nope
  // poc 244 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_183 [2 poc 1] -> [3 poc 1] 245 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_183 [3 input 1] -> [3 poc 1] 245 dilate_8c
  // nope
  // poc 245 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_182 [3 poc 1] -> [4 poc 1] 246 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_182 [4 input 1] -> [4 poc 1] 246 dilate_8c
  // nope
  // poc 246 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_181 [4 poc 1] -> [5 poc 1] 247 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_181 [5 input 1] -> [5 poc 1] 247 dilate_8c
  // nope
  // poc 247 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_180 [5 poc 1] -> [6 poc 1] 248 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_180 [6 input 1] -> [6 poc 1] 248 dilate_8c
  // nope
  // poc 248 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_179 [6 poc 1] -> [7 poc 1] 249 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_179 [7 input 1] -> [7 poc 1] 249 dilate_8c
  // nope
  // poc 249 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_179 on 0 and image 0`out_178 on 1
  // 0`imWork1_179 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_179 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_178 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_178 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_3(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_179 [0 input 0] -> [0 poc 0] 49 dilate_8c
  // nope
  // poc 49 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_178 [0 poc 0] -> [1 poc 0] 50 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_178 [1 input 0] -> [1 poc 0] 50 dilate_8c
  // nope
  // poc 50 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_177 [1 poc 0] -> [2 poc 0] 51 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_177 [2 input 0] -> [2 poc 0] 51 dilate_8c
  // nope
  // poc 51 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_176 [2 poc 0] -> [3 poc 0] 52 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_176 [3 input 0] -> [3 poc 0] 52 dilate_8c
  // nope
  // poc 52 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_175 [3 poc 0] -> [4 poc 0] 53 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_175 [4 input 0] -> [4 poc 0] 53 dilate_8c
  // nope
  // poc 53 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_174 [4 poc 0] -> [5 poc 0] 54 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_174 [5 input 0] -> [5 poc 0] 54 dilate_8c
  // nope
  // poc 54 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_173 [5 poc 0] -> [6 poc 0] 55 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_173 [6 input 0] -> [6 poc 0] 55 dilate_8c
  // nope
  // poc 55 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_172 [6 poc 0] -> [7 poc 0] 56 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_172 [7 input 0] -> [7 poc 0] 56 dilate_8c
  // nope
  // poc 56 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_178 [0 input 1] -> [0 poc 1] 250 dilate_8c
  // nope
  // poc 250 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_177 [0 poc 1] -> [1 poc 1] 251 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_177 [1 input 1] -> [1 poc 1] 251 dilate_8c
  // nope
  // poc 251 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_176 [1 poc 1] -> [2 poc 1] 252 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_176 [2 input 1] -> [2 poc 1] 252 dilate_8c
  // nope
  // poc 252 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_175 [2 poc 1] -> [3 poc 1] 253 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_175 [3 input 1] -> [3 poc 1] 253 dilate_8c
  // nope
  // poc 253 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_174 [3 poc 1] -> [4 poc 1] 254 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_174 [4 input 1] -> [4 poc 1] 254 dilate_8c
  // nope
  // poc 254 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_173 [4 poc 1] -> [5 poc 1] 255 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_173 [5 input 1] -> [5 poc 1] 255 dilate_8c
  // nope
  // poc 255 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_172 [5 poc 1] -> [6 poc 1] 256 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_172 [6 input 1] -> [6 poc 1] 256 dilate_8c
  // nope
  // poc 256 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_171 [6 poc 1] -> [7 poc 1] 257 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_171 [7 input 1] -> [7 poc 1] 257 dilate_8c
  // nope
  // poc 257 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_171 on 0 and image 0`out_170 on 1
  // 0`imWork1_171 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_171 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_170 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_170 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_4(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_171 [0 input 0] -> [0 poc 0] 57 dilate_8c
  // nope
  // poc 57 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_170 [0 poc 0] -> [1 poc 0] 58 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_170 [1 input 0] -> [1 poc 0] 58 dilate_8c
  // nope
  // poc 58 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_169 [1 poc 0] -> [2 poc 0] 59 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_169 [2 input 0] -> [2 poc 0] 59 dilate_8c
  // nope
  // poc 59 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_168 [2 poc 0] -> [3 poc 0] 60 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_168 [3 input 0] -> [3 poc 0] 60 dilate_8c
  // nope
  // poc 60 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_167 [3 poc 0] -> [4 poc 0] 61 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_167 [4 input 0] -> [4 poc 0] 61 dilate_8c
  // nope
  // poc 61 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_166 [4 poc 0] -> [5 poc 0] 62 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_166 [5 input 0] -> [5 poc 0] 62 dilate_8c
  // nope
  // poc 62 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_165 [5 poc 0] -> [6 poc 0] 63 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_165 [6 input 0] -> [6 poc 0] 63 dilate_8c
  // nope
  // poc 63 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_164 [6 poc 0] -> [7 poc 0] 64 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_164 [7 input 0] -> [7 poc 0] 64 dilate_8c
  // nope
  // poc 64 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_170 [0 input 1] -> [0 poc 1] 258 dilate_8c
  // nope
  // poc 258 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_169 [0 poc 1] -> [1 poc 1] 259 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_169 [1 input 1] -> [1 poc 1] 259 dilate_8c
  // nope
  // poc 259 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_168 [1 poc 1] -> [2 poc 1] 260 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_168 [2 input 1] -> [2 poc 1] 260 dilate_8c
  // nope
  // poc 260 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_167 [2 poc 1] -> [3 poc 1] 261 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_167 [3 input 1] -> [3 poc 1] 261 dilate_8c
  // nope
  // poc 261 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_166 [3 poc 1] -> [4 poc 1] 262 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_166 [4 input 1] -> [4 poc 1] 262 dilate_8c
  // nope
  // poc 262 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_165 [4 poc 1] -> [5 poc 1] 263 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_165 [5 input 1] -> [5 poc 1] 263 dilate_8c
  // nope
  // poc 263 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_164 [5 poc 1] -> [6 poc 1] 264 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_164 [6 input 1] -> [6 poc 1] 264 dilate_8c
  // nope
  // poc 264 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_163 [6 poc 1] -> [7 poc 1] 265 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_163 [7 input 1] -> [7 poc 1] 265 dilate_8c
  // nope
  // poc 265 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_163 on 0 and image 0`out_162 on 1
  // 0`imWork1_163 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_163 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_162 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_162 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_5(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_163 [0 input 0] -> [0 poc 0] 65 dilate_8c
  // nope
  // poc 65 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_162 [0 poc 0] -> [1 poc 0] 66 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_162 [1 input 0] -> [1 poc 0] 66 dilate_8c
  // nope
  // poc 66 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_161 [1 poc 0] -> [2 poc 0] 67 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_161 [2 input 0] -> [2 poc 0] 67 dilate_8c
  // nope
  // poc 67 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_160 [2 poc 0] -> [3 poc 0] 68 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_160 [3 input 0] -> [3 poc 0] 68 dilate_8c
  // nope
  // poc 68 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_159 [3 poc 0] -> [4 poc 0] 69 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_159 [4 input 0] -> [4 poc 0] 69 dilate_8c
  // nope
  // poc 69 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_158 [4 poc 0] -> [5 poc 0] 70 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_158 [5 input 0] -> [5 poc 0] 70 dilate_8c
  // nope
  // poc 70 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_157 [5 poc 0] -> [6 poc 0] 71 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_157 [6 input 0] -> [6 poc 0] 71 dilate_8c
  // nope
  // poc 71 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_156 [6 poc 0] -> [7 poc 0] 72 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_156 [7 input 0] -> [7 poc 0] 72 dilate_8c
  // nope
  // poc 72 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_162 [0 input 1] -> [0 poc 1] 266 dilate_8c
  // nope
  // poc 266 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_161 [0 poc 1] -> [1 poc 1] 267 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_161 [1 input 1] -> [1 poc 1] 267 dilate_8c
  // nope
  // poc 267 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_160 [1 poc 1] -> [2 poc 1] 268 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_160 [2 input 1] -> [2 poc 1] 268 dilate_8c
  // nope
  // poc 268 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_159 [2 poc 1] -> [3 poc 1] 269 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_159 [3 input 1] -> [3 poc 1] 269 dilate_8c
  // nope
  // poc 269 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_158 [3 poc 1] -> [4 poc 1] 270 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_158 [4 input 1] -> [4 poc 1] 270 dilate_8c
  // nope
  // poc 270 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_157 [4 poc 1] -> [5 poc 1] 271 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_157 [5 input 1] -> [5 poc 1] 271 dilate_8c
  // nope
  // poc 271 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_156 [5 poc 1] -> [6 poc 1] 272 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_156 [6 input 1] -> [6 poc 1] 272 dilate_8c
  // nope
  // poc 272 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_155 [6 poc 1] -> [7 poc 1] 273 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_155 [7 input 1] -> [7 poc 1] 273 dilate_8c
  // nope
  // poc 273 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_155 on 0 and image 0`out_154 on 1
  // 0`imWork1_155 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_155 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_154 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_154 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_6(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_155 [0 input 0] -> [0 poc 0] 73 dilate_8c
  // nope
  // poc 73 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_154 [0 poc 0] -> [1 poc 0] 74 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_154 [1 input 0] -> [1 poc 0] 74 dilate_8c
  // nope
  // poc 74 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_153 [1 poc 0] -> [2 poc 0] 75 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_153 [2 input 0] -> [2 poc 0] 75 dilate_8c
  // nope
  // poc 75 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_152 [2 poc 0] -> [3 poc 0] 76 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_152 [3 input 0] -> [3 poc 0] 76 dilate_8c
  // nope
  // poc 76 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_151 [3 poc 0] -> [4 poc 0] 77 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_151 [4 input 0] -> [4 poc 0] 77 dilate_8c
  // nope
  // poc 77 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_150 [4 poc 0] -> [5 poc 0] 78 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_150 [5 input 0] -> [5 poc 0] 78 dilate_8c
  // nope
  // poc 78 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_149 [5 poc 0] -> [6 poc 0] 79 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_149 [6 input 0] -> [6 poc 0] 79 dilate_8c
  // nope
  // poc 79 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_148 [6 poc 0] -> [7 poc 0] 80 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_148 [7 input 0] -> [7 poc 0] 80 dilate_8c
  // nope
  // poc 80 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_154 [0 input 1] -> [0 poc 1] 274 dilate_8c
  // nope
  // poc 274 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_153 [0 poc 1] -> [1 poc 1] 275 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_153 [1 input 1] -> [1 poc 1] 275 dilate_8c
  // nope
  // poc 275 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_152 [1 poc 1] -> [2 poc 1] 276 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_152 [2 input 1] -> [2 poc 1] 276 dilate_8c
  // nope
  // poc 276 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_151 [2 poc 1] -> [3 poc 1] 277 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_151 [3 input 1] -> [3 poc 1] 277 dilate_8c
  // nope
  // poc 277 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_150 [3 poc 1] -> [4 poc 1] 278 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_150 [4 input 1] -> [4 poc 1] 278 dilate_8c
  // nope
  // poc 278 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_149 [4 poc 1] -> [5 poc 1] 279 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_149 [5 input 1] -> [5 poc 1] 279 dilate_8c
  // nope
  // poc 279 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_148 [5 poc 1] -> [6 poc 1] 280 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_148 [6 input 1] -> [6 poc 1] 280 dilate_8c
  // nope
  // poc 280 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_147 [6 poc 1] -> [7 poc 1] 281 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_147 [7 input 1] -> [7 poc 1] 281 dilate_8c
  // nope
  // poc 281 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_147 on 0 and image 0`out_146 on 1
  // 0`imWork1_147 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_147 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_146 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_146 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_7(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_147 [0 input 0] -> [0 poc 0] 81 dilate_8c
  // nope
  // poc 81 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_146 [0 poc 0] -> [1 poc 0] 82 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_146 [1 input 0] -> [1 poc 0] 82 dilate_8c
  // nope
  // poc 82 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_145 [1 poc 0] -> [2 poc 0] 83 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_145 [2 input 0] -> [2 poc 0] 83 dilate_8c
  // nope
  // poc 83 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_144 [2 poc 0] -> [3 poc 0] 84 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_144 [3 input 0] -> [3 poc 0] 84 dilate_8c
  // nope
  // poc 84 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_143 [3 poc 0] -> [4 poc 0] 85 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_143 [4 input 0] -> [4 poc 0] 85 dilate_8c
  // nope
  // poc 85 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_142 [4 poc 0] -> [5 poc 0] 86 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_142 [5 input 0] -> [5 poc 0] 86 dilate_8c
  // nope
  // poc 86 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_141 [5 poc 0] -> [6 poc 0] 87 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_141 [6 input 0] -> [6 poc 0] 87 dilate_8c
  // nope
  // poc 87 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_140 [6 poc 0] -> [7 poc 0] 88 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_140 [7 input 0] -> [7 poc 0] 88 dilate_8c
  // nope
  // poc 88 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_146 [0 input 1] -> [0 poc 1] 282 dilate_8c
  // nope
  // poc 282 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_145 [0 poc 1] -> [1 poc 1] 283 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_145 [1 input 1] -> [1 poc 1] 283 dilate_8c
  // nope
  // poc 283 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_144 [1 poc 1] -> [2 poc 1] 284 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_144 [2 input 1] -> [2 poc 1] 284 dilate_8c
  // nope
  // poc 284 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_143 [2 poc 1] -> [3 poc 1] 285 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_143 [3 input 1] -> [3 poc 1] 285 dilate_8c
  // nope
  // poc 285 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_142 [3 poc 1] -> [4 poc 1] 286 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_142 [4 input 1] -> [4 poc 1] 286 dilate_8c
  // nope
  // poc 286 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_141 [4 poc 1] -> [5 poc 1] 287 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_141 [5 input 1] -> [5 poc 1] 287 dilate_8c
  // nope
  // poc 287 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_140 [5 poc 1] -> [6 poc 1] 288 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_140 [6 input 1] -> [6 poc 1] 288 dilate_8c
  // nope
  // poc 288 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_139 [6 poc 1] -> [7 poc 1] 289 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_139 [7 input 1] -> [7 poc 1] 289 dilate_8c
  // nope
  // poc 289 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_139 on 0 and image 0`out_138 on 1
  // 0`imWork1_139 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_139 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_138 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_138 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_8(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_139 [0 input 0] -> [0 poc 0] 89 dilate_8c
  // nope
  // poc 89 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_138 [0 poc 0] -> [1 poc 0] 90 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_138 [1 input 0] -> [1 poc 0] 90 dilate_8c
  // nope
  // poc 90 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_137 [1 poc 0] -> [2 poc 0] 91 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_137 [2 input 0] -> [2 poc 0] 91 dilate_8c
  // nope
  // poc 91 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_136 [2 poc 0] -> [3 poc 0] 92 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_136 [3 input 0] -> [3 poc 0] 92 dilate_8c
  // nope
  // poc 92 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_135 [3 poc 0] -> [4 poc 0] 93 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_135 [4 input 0] -> [4 poc 0] 93 dilate_8c
  // nope
  // poc 93 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_134 [4 poc 0] -> [5 poc 0] 94 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_134 [5 input 0] -> [5 poc 0] 94 dilate_8c
  // nope
  // poc 94 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_133 [5 poc 0] -> [6 poc 0] 95 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_133 [6 input 0] -> [6 poc 0] 95 dilate_8c
  // nope
  // poc 95 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_132 [6 poc 0] -> [7 poc 0] 96 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_132 [7 input 0] -> [7 poc 0] 96 dilate_8c
  // nope
  // poc 96 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_138 [0 input 1] -> [0 poc 1] 290 dilate_8c
  // nope
  // poc 290 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_137 [0 poc 1] -> [1 poc 1] 291 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_137 [1 input 1] -> [1 poc 1] 291 dilate_8c
  // nope
  // poc 291 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_136 [1 poc 1] -> [2 poc 1] 292 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_136 [2 input 1] -> [2 poc 1] 292 dilate_8c
  // nope
  // poc 292 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_135 [2 poc 1] -> [3 poc 1] 293 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_135 [3 input 1] -> [3 poc 1] 293 dilate_8c
  // nope
  // poc 293 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_134 [3 poc 1] -> [4 poc 1] 294 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_134 [4 input 1] -> [4 poc 1] 294 dilate_8c
  // nope
  // poc 294 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_133 [4 poc 1] -> [5 poc 1] 295 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_133 [5 input 1] -> [5 poc 1] 295 dilate_8c
  // nope
  // poc 295 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_132 [5 poc 1] -> [6 poc 1] 296 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_132 [6 input 1] -> [6 poc 1] 296 dilate_8c
  // nope
  // poc 296 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_131 [6 poc 1] -> [7 poc 1] 297 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_131 [7 input 1] -> [7 poc 1] 297 dilate_8c
  // nope
  // poc 297 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_131 on 0 and image 0`out_130 on 1
  // 0`imWork1_131 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_131 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_130 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_130 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_9(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_131 [0 input 0] -> [0 poc 0] 97 dilate_8c
  // nope
  // poc 97 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_130 [0 poc 0] -> [1 poc 0] 98 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_130 [1 input 0] -> [1 poc 0] 98 dilate_8c
  // nope
  // poc 98 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_129 [1 poc 0] -> [2 poc 0] 99 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_129 [2 input 0] -> [2 poc 0] 99 dilate_8c
  // nope
  // poc 99 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_128 [2 poc 0] -> [3 poc 0] 100 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_128 [3 input 0] -> [3 poc 0] 100 dilate_8c
  // nope
  // poc 100 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_127 [3 poc 0] -> [4 poc 0] 101 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_127 [4 input 0] -> [4 poc 0] 101 dilate_8c
  // nope
  // poc 101 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_126 [4 poc 0] -> [5 poc 0] 102 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_126 [5 input 0] -> [5 poc 0] 102 dilate_8c
  // nope
  // poc 102 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_125 [5 poc 0] -> [6 poc 0] 103 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_125 [6 input 0] -> [6 poc 0] 103 dilate_8c
  // nope
  // poc 103 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_124 [6 poc 0] -> [7 poc 0] 104 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_124 [7 input 0] -> [7 poc 0] 104 dilate_8c
  // nope
  // poc 104 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_130 [0 input 1] -> [0 poc 1] 298 dilate_8c
  // nope
  // poc 298 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_129 [0 poc 1] -> [1 poc 1] 299 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_129 [1 input 1] -> [1 poc 1] 299 dilate_8c
  // nope
  // poc 299 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_128 [1 poc 1] -> [2 poc 1] 300 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_128 [2 input 1] -> [2 poc 1] 300 dilate_8c
  // nope
  // poc 300 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_127 [2 poc 1] -> [3 poc 1] 301 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_127 [3 input 1] -> [3 poc 1] 301 dilate_8c
  // nope
  // poc 301 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_126 [3 poc 1] -> [4 poc 1] 302 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_126 [4 input 1] -> [4 poc 1] 302 dilate_8c
  // nope
  // poc 302 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_125 [4 poc 1] -> [5 poc 1] 303 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_125 [5 input 1] -> [5 poc 1] 303 dilate_8c
  // nope
  // poc 303 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_124 [5 poc 1] -> [6 poc 1] 304 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_124 [6 input 1] -> [6 poc 1] 304 dilate_8c
  // nope
  // poc 304 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_123 [6 poc 1] -> [7 poc 1] 305 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_123 [7 input 1] -> [7 poc 1] 305 dilate_8c
  // nope
  // poc 305 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_123 on 0 and image 0`out_122 on 1
  // 0`imWork1_123 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_123 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_122 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_122 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_10(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_123 [0 input 0] -> [0 poc 0] 105 dilate_8c
  // nope
  // poc 105 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_122 [0 poc 0] -> [1 poc 0] 106 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_122 [1 input 0] -> [1 poc 0] 106 dilate_8c
  // nope
  // poc 106 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_121 [1 poc 0] -> [2 poc 0] 107 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_121 [2 input 0] -> [2 poc 0] 107 dilate_8c
  // nope
  // poc 107 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_120 [2 poc 0] -> [3 poc 0] 108 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_120 [3 input 0] -> [3 poc 0] 108 dilate_8c
  // nope
  // poc 108 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_119 [3 poc 0] -> [4 poc 0] 109 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_119 [4 input 0] -> [4 poc 0] 109 dilate_8c
  // nope
  // poc 109 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_118 [4 poc 0] -> [5 poc 0] 110 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_118 [5 input 0] -> [5 poc 0] 110 dilate_8c
  // nope
  // poc 110 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_117 [5 poc 0] -> [6 poc 0] 111 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_117 [6 input 0] -> [6 poc 0] 111 dilate_8c
  // nope
  // poc 111 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_116 [6 poc 0] -> [7 poc 0] 112 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_116 [7 input 0] -> [7 poc 0] 112 dilate_8c
  // nope
  // poc 112 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_122 [0 input 1] -> [0 poc 1] 306 dilate_8c
  // nope
  // poc 306 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_121 [0 poc 1] -> [1 poc 1] 307 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_121 [1 input 1] -> [1 poc 1] 307 dilate_8c
  // nope
  // poc 307 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_120 [1 poc 1] -> [2 poc 1] 308 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_120 [2 input 1] -> [2 poc 1] 308 dilate_8c
  // nope
  // poc 308 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_119 [2 poc 1] -> [3 poc 1] 309 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_119 [3 input 1] -> [3 poc 1] 309 dilate_8c
  // nope
  // poc 309 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_118 [3 poc 1] -> [4 poc 1] 310 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_118 [4 input 1] -> [4 poc 1] 310 dilate_8c
  // nope
  // poc 310 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_117 [4 poc 1] -> [5 poc 1] 311 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_117 [5 input 1] -> [5 poc 1] 311 dilate_8c
  // nope
  // poc 311 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_116 [5 poc 1] -> [6 poc 1] 312 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_116 [6 input 1] -> [6 poc 1] 312 dilate_8c
  // nope
  // poc 312 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_115 [6 poc 1] -> [7 poc 1] 313 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_115 [7 input 1] -> [7 poc 1] 313 dilate_8c
  // nope
  // poc 313 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_115 on 0 and image 0`out_114 on 1
  // 0`imWork1_115 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_115 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_114 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_114 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_11(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_115 [0 input 0] -> [0 poc 0] 113 dilate_8c
  // nope
  // poc 113 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_114 [0 poc 0] -> [1 poc 0] 114 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_114 [1 input 0] -> [1 poc 0] 114 dilate_8c
  // nope
  // poc 114 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_113 [1 poc 0] -> [2 poc 0] 115 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_113 [2 input 0] -> [2 poc 0] 115 dilate_8c
  // nope
  // poc 115 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_112 [2 poc 0] -> [3 poc 0] 116 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_112 [3 input 0] -> [3 poc 0] 116 dilate_8c
  // nope
  // poc 116 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_111 [3 poc 0] -> [4 poc 0] 117 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_111 [4 input 0] -> [4 poc 0] 117 dilate_8c
  // nope
  // poc 117 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_110 [4 poc 0] -> [5 poc 0] 118 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_110 [5 input 0] -> [5 poc 0] 118 dilate_8c
  // nope
  // poc 118 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_109 [5 poc 0] -> [6 poc 0] 119 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_109 [6 input 0] -> [6 poc 0] 119 dilate_8c
  // nope
  // poc 119 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_108 [6 poc 0] -> [7 poc 0] 120 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_108 [7 input 0] -> [7 poc 0] 120 dilate_8c
  // nope
  // poc 120 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_114 [0 input 1] -> [0 poc 1] 314 dilate_8c
  // nope
  // poc 314 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_113 [0 poc 1] -> [1 poc 1] 315 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_113 [1 input 1] -> [1 poc 1] 315 dilate_8c
  // nope
  // poc 315 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_112 [1 poc 1] -> [2 poc 1] 316 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_112 [2 input 1] -> [2 poc 1] 316 dilate_8c
  // nope
  // poc 316 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_111 [2 poc 1] -> [3 poc 1] 317 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_111 [3 input 1] -> [3 poc 1] 317 dilate_8c
  // nope
  // poc 317 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_110 [3 poc 1] -> [4 poc 1] 318 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_110 [4 input 1] -> [4 poc 1] 318 dilate_8c
  // nope
  // poc 318 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_109 [4 poc 1] -> [5 poc 1] 319 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_109 [5 input 1] -> [5 poc 1] 319 dilate_8c
  // nope
  // poc 319 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_108 [5 poc 1] -> [6 poc 1] 320 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_108 [6 input 1] -> [6 poc 1] 320 dilate_8c
  // nope
  // poc 320 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_107 [6 poc 1] -> [7 poc 1] 321 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_107 [7 input 1] -> [7 poc 1] 321 dilate_8c
  // nope
  // poc 321 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_107 on 0 and image 0`out_106 on 1
  // 0`imWork1_107 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_107 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_106 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_106 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_12(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1,
  const int32_t * pi2,
  const int32_t * pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_107 [0 input 0] -> [0 poc 0] 121 dilate_8c
  // nope
  // poc 121 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_106 [0 poc 0] -> [1 poc 0] 122 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_106 [1 input 0] -> [1 poc 0] 122 dilate_8c
  // nope
  // poc 122 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_105 [1 poc 0] -> [2 poc 0] 123 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_105 [2 input 0] -> [2 poc 0] 123 dilate_8c
  // nope
  // poc 123 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_104 [2 poc 0] -> [3 poc 0] 124 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_104 [3 input 0] -> [3 poc 0] 124 dilate_8c
  // nope
  // poc 124 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_103 [3 poc 0] -> [4 poc 0] 125 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_103 [4 input 0] -> [4 poc 0] 125 erode_8c
  // nope
  // poc 125 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi1[i];


  // STAGE 5
  // 0`imWork1_102 [4 poc 0] -> [5 poc 0] 126 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_102 [5 input 0] -> [5 poc 0] 126 erode_8c
  // nope
  // poc 126 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi1[i];


  // STAGE 6
  // 0`imWork1_101 [5 poc 0] -> [6 poc 0] 127 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_101 [6 input 0] -> [6 poc 0] 127 erode_8c
  // nope
  // poc 127 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi1[i];


  // STAGE 7
  // 0`imWork1_100 [6 poc 0] -> [7 poc 0] 128 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_100 [7 input 0] -> [7 poc 0] 128 erode_8c
  // nope
  // poc 128 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // STAGE 0
  // 0`out_106 [0 input 1] -> [0 poc 1] 322 dilate_8c
  // nope
  // poc 322 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi2[i];


  // STAGE 1
  // 0`out_105 [0 poc 1] -> [1 poc 1] 323 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_105 [1 input 1] -> [1 poc 1] 323 dilate_8c
  // nope
  // poc 323 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi2[i];


  // STAGE 2
  // 0`out_104 [1 poc 1] -> [2 poc 1] 324 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_104 [2 input 1] -> [2 poc 1] 324 dilate_8c
  // nope
  // poc 324 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi2[i];


  // STAGE 3
  // 0`out_103 [2 poc 1] -> [3 poc 1] 325 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_103 [3 input 1] -> [3 poc 1] 325 dilate_8c
  // nope
  // poc 325 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi2[i];


  // STAGE 4
  // 0`out_102 [3 poc 1] -> [4 poc 1] 326 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_102 [4 input 1] -> [4 poc 1] 326 erode_8c
  // nope
  // poc 326 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi3[i];


  // STAGE 5
  // 0`out_101 [4 poc 1] -> [5 poc 1] 327 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_101 [5 input 1] -> [5 poc 1] 327 erode_8c
  // nope
  // poc 327 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi3[i];


  // STAGE 6
  // 0`out_100 [5 poc 1] -> [6 poc 1] 328 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_100 [6 input 1] -> [6 poc 1] 328 erode_8c
  // nope
  // poc 328 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi3[i];


  // STAGE 7
  // 0`out_99 [6 poc 1] -> [7 poc 1] 329 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_99 [7 input 1] -> [7 poc 1] 329 erode_8c
  // nope
  // poc 329 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi3[i];


  // output image 0`imWork1_99 on 0 and image 0`out_98 on 1
  // 0`imWork1_99 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_99 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_98 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_98 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_13(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_99 [0 input 0] -> [0 poc 0] 129 erode_8c
  // nope
  // poc 129 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_98 [0 poc 0] -> [1 poc 0] 130 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_98 [1 input 0] -> [1 poc 0] 130 erode_8c
  // nope
  // poc 130 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_97 [1 poc 0] -> [2 poc 0] 131 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_97 [2 input 0] -> [2 poc 0] 131 erode_8c
  // nope
  // poc 131 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_96 [2 poc 0] -> [3 poc 0] 132 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_96 [3 input 0] -> [3 poc 0] 132 erode_8c
  // nope
  // poc 132 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_95 [3 poc 0] -> [4 poc 0] 133 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_95 [4 input 0] -> [4 poc 0] 133 erode_8c
  // nope
  // poc 133 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_94 [4 poc 0] -> [5 poc 0] 134 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_94 [5 input 0] -> [5 poc 0] 134 erode_8c
  // nope
  // poc 134 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_93 [5 poc 0] -> [6 poc 0] 135 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_93 [6 input 0] -> [6 poc 0] 135 erode_8c
  // nope
  // poc 135 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_92 [6 poc 0] -> [7 poc 0] 136 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_92 [7 input 0] -> [7 poc 0] 136 erode_8c
  // nope
  // poc 136 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_98 [0 input 1] -> [0 poc 1] 330 erode_8c
  // nope
  // poc 330 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_97 [0 poc 1] -> [1 poc 1] 331 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_97 [1 input 1] -> [1 poc 1] 331 erode_8c
  // nope
  // poc 331 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_96 [1 poc 1] -> [2 poc 1] 332 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_96 [2 input 1] -> [2 poc 1] 332 erode_8c
  // nope
  // poc 332 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_95 [2 poc 1] -> [3 poc 1] 333 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_95 [3 input 1] -> [3 poc 1] 333 erode_8c
  // nope
  // poc 333 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_94 [3 poc 1] -> [4 poc 1] 334 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_94 [4 input 1] -> [4 poc 1] 334 erode_8c
  // nope
  // poc 334 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_93 [4 poc 1] -> [5 poc 1] 335 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_93 [5 input 1] -> [5 poc 1] 335 erode_8c
  // nope
  // poc 335 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_92 [5 poc 1] -> [6 poc 1] 336 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_92 [6 input 1] -> [6 poc 1] 336 erode_8c
  // nope
  // poc 336 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_91 [6 poc 1] -> [7 poc 1] 337 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_91 [7 input 1] -> [7 poc 1] 337 erode_8c
  // nope
  // poc 337 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_91 on 0 and image 0`out_90 on 1
  // 0`imWork1_91 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_91 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_90 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_90 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_14(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_91 [0 input 0] -> [0 poc 0] 137 erode_8c
  // nope
  // poc 137 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_90 [0 poc 0] -> [1 poc 0] 138 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_90 [1 input 0] -> [1 poc 0] 138 erode_8c
  // nope
  // poc 138 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_89 [1 poc 0] -> [2 poc 0] 139 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_89 [2 input 0] -> [2 poc 0] 139 erode_8c
  // nope
  // poc 139 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_88 [2 poc 0] -> [3 poc 0] 140 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_88 [3 input 0] -> [3 poc 0] 140 erode_8c
  // nope
  // poc 140 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_87 [3 poc 0] -> [4 poc 0] 141 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_87 [4 input 0] -> [4 poc 0] 141 erode_8c
  // nope
  // poc 141 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_86 [4 poc 0] -> [5 poc 0] 142 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_86 [5 input 0] -> [5 poc 0] 142 erode_8c
  // nope
  // poc 142 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_85 [5 poc 0] -> [6 poc 0] 143 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_85 [6 input 0] -> [6 poc 0] 143 erode_8c
  // nope
  // poc 143 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_84 [6 poc 0] -> [7 poc 0] 144 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_84 [7 input 0] -> [7 poc 0] 144 erode_8c
  // nope
  // poc 144 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_90 [0 input 1] -> [0 poc 1] 338 erode_8c
  // nope
  // poc 338 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_89 [0 poc 1] -> [1 poc 1] 339 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_89 [1 input 1] -> [1 poc 1] 339 erode_8c
  // nope
  // poc 339 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_88 [1 poc 1] -> [2 poc 1] 340 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_88 [2 input 1] -> [2 poc 1] 340 erode_8c
  // nope
  // poc 340 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_87 [2 poc 1] -> [3 poc 1] 341 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_87 [3 input 1] -> [3 poc 1] 341 erode_8c
  // nope
  // poc 341 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_86 [3 poc 1] -> [4 poc 1] 342 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_86 [4 input 1] -> [4 poc 1] 342 erode_8c
  // nope
  // poc 342 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_85 [4 poc 1] -> [5 poc 1] 343 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_85 [5 input 1] -> [5 poc 1] 343 erode_8c
  // nope
  // poc 343 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_84 [5 poc 1] -> [6 poc 1] 344 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_84 [6 input 1] -> [6 poc 1] 344 erode_8c
  // nope
  // poc 344 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_83 [6 poc 1] -> [7 poc 1] 345 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_83 [7 input 1] -> [7 poc 1] 345 erode_8c
  // nope
  // poc 345 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_83 on 0 and image 0`out_82 on 1
  // 0`imWork1_83 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_83 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_82 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_82 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_15(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_83 [0 input 0] -> [0 poc 0] 145 erode_8c
  // nope
  // poc 145 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_82 [0 poc 0] -> [1 poc 0] 146 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_82 [1 input 0] -> [1 poc 0] 146 erode_8c
  // nope
  // poc 146 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_81 [1 poc 0] -> [2 poc 0] 147 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_81 [2 input 0] -> [2 poc 0] 147 erode_8c
  // nope
  // poc 147 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_80 [2 poc 0] -> [3 poc 0] 148 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_80 [3 input 0] -> [3 poc 0] 148 erode_8c
  // nope
  // poc 148 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_79 [3 poc 0] -> [4 poc 0] 149 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_79 [4 input 0] -> [4 poc 0] 149 erode_8c
  // nope
  // poc 149 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_78 [4 poc 0] -> [5 poc 0] 150 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_78 [5 input 0] -> [5 poc 0] 150 erode_8c
  // nope
  // poc 150 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_77 [5 poc 0] -> [6 poc 0] 151 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_77 [6 input 0] -> [6 poc 0] 151 erode_8c
  // nope
  // poc 151 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_76 [6 poc 0] -> [7 poc 0] 152 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_76 [7 input 0] -> [7 poc 0] 152 erode_8c
  // nope
  // poc 152 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_82 [0 input 1] -> [0 poc 1] 346 erode_8c
  // nope
  // poc 346 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_81 [0 poc 1] -> [1 poc 1] 347 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_81 [1 input 1] -> [1 poc 1] 347 erode_8c
  // nope
  // poc 347 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_80 [1 poc 1] -> [2 poc 1] 348 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_80 [2 input 1] -> [2 poc 1] 348 erode_8c
  // nope
  // poc 348 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_79 [2 poc 1] -> [3 poc 1] 349 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_79 [3 input 1] -> [3 poc 1] 349 erode_8c
  // nope
  // poc 349 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_78 [3 poc 1] -> [4 poc 1] 350 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_78 [4 input 1] -> [4 poc 1] 350 erode_8c
  // nope
  // poc 350 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_77 [4 poc 1] -> [5 poc 1] 351 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_77 [5 input 1] -> [5 poc 1] 351 erode_8c
  // nope
  // poc 351 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_76 [5 poc 1] -> [6 poc 1] 352 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_76 [6 input 1] -> [6 poc 1] 352 erode_8c
  // nope
  // poc 352 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_75 [6 poc 1] -> [7 poc 1] 353 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_75 [7 input 1] -> [7 poc 1] 353 erode_8c
  // nope
  // poc 353 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_75 on 0 and image 0`out_74 on 1
  // 0`imWork1_75 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_75 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_74 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_74 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_16(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_75 [0 input 0] -> [0 poc 0] 153 erode_8c
  // nope
  // poc 153 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_74 [0 poc 0] -> [1 poc 0] 154 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_74 [1 input 0] -> [1 poc 0] 154 erode_8c
  // nope
  // poc 154 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_73 [1 poc 0] -> [2 poc 0] 155 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_73 [2 input 0] -> [2 poc 0] 155 erode_8c
  // nope
  // poc 155 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_72 [2 poc 0] -> [3 poc 0] 156 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_72 [3 input 0] -> [3 poc 0] 156 erode_8c
  // nope
  // poc 156 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_71 [3 poc 0] -> [4 poc 0] 157 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_71 [4 input 0] -> [4 poc 0] 157 erode_8c
  // nope
  // poc 157 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_70 [4 poc 0] -> [5 poc 0] 158 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_70 [5 input 0] -> [5 poc 0] 158 erode_8c
  // nope
  // poc 158 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_69 [5 poc 0] -> [6 poc 0] 159 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_69 [6 input 0] -> [6 poc 0] 159 erode_8c
  // nope
  // poc 159 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_68 [6 poc 0] -> [7 poc 0] 160 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_68 [7 input 0] -> [7 poc 0] 160 erode_8c
  // nope
  // poc 160 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_74 [0 input 1] -> [0 poc 1] 354 erode_8c
  // nope
  // poc 354 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_73 [0 poc 1] -> [1 poc 1] 355 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_73 [1 input 1] -> [1 poc 1] 355 erode_8c
  // nope
  // poc 355 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_72 [1 poc 1] -> [2 poc 1] 356 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_72 [2 input 1] -> [2 poc 1] 356 erode_8c
  // nope
  // poc 356 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_71 [2 poc 1] -> [3 poc 1] 357 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_71 [3 input 1] -> [3 poc 1] 357 erode_8c
  // nope
  // poc 357 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_70 [3 poc 1] -> [4 poc 1] 358 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_70 [4 input 1] -> [4 poc 1] 358 erode_8c
  // nope
  // poc 358 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_69 [4 poc 1] -> [5 poc 1] 359 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_69 [5 input 1] -> [5 poc 1] 359 erode_8c
  // nope
  // poc 359 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_68 [5 poc 1] -> [6 poc 1] 360 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_68 [6 input 1] -> [6 poc 1] 360 erode_8c
  // nope
  // poc 360 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_67 [6 poc 1] -> [7 poc 1] 361 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_67 [7 input 1] -> [7 poc 1] 361 erode_8c
  // nope
  // poc 361 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_67 on 0 and image 0`out_66 on 1
  // 0`imWork1_67 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_67 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_66 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_66 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_17(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_67 [0 input 0] -> [0 poc 0] 161 erode_8c
  // nope
  // poc 161 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_66 [0 poc 0] -> [1 poc 0] 162 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_66 [1 input 0] -> [1 poc 0] 162 erode_8c
  // nope
  // poc 162 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_65 [1 poc 0] -> [2 poc 0] 163 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_65 [2 input 0] -> [2 poc 0] 163 erode_8c
  // nope
  // poc 163 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_64 [2 poc 0] -> [3 poc 0] 164 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_64 [3 input 0] -> [3 poc 0] 164 erode_8c
  // nope
  // poc 164 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_63 [3 poc 0] -> [4 poc 0] 165 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_63 [4 input 0] -> [4 poc 0] 165 erode_8c
  // nope
  // poc 165 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_62 [4 poc 0] -> [5 poc 0] 166 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_62 [5 input 0] -> [5 poc 0] 166 erode_8c
  // nope
  // poc 166 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_61 [5 poc 0] -> [6 poc 0] 167 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_61 [6 input 0] -> [6 poc 0] 167 erode_8c
  // nope
  // poc 167 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_60 [6 poc 0] -> [7 poc 0] 168 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_60 [7 input 0] -> [7 poc 0] 168 erode_8c
  // nope
  // poc 168 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_66 [0 input 1] -> [0 poc 1] 362 erode_8c
  // nope
  // poc 362 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_65 [0 poc 1] -> [1 poc 1] 363 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_65 [1 input 1] -> [1 poc 1] 363 erode_8c
  // nope
  // poc 363 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_64 [1 poc 1] -> [2 poc 1] 364 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_64 [2 input 1] -> [2 poc 1] 364 erode_8c
  // nope
  // poc 364 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_63 [2 poc 1] -> [3 poc 1] 365 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_63 [3 input 1] -> [3 poc 1] 365 erode_8c
  // nope
  // poc 365 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_62 [3 poc 1] -> [4 poc 1] 366 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_62 [4 input 1] -> [4 poc 1] 366 erode_8c
  // nope
  // poc 366 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_61 [4 poc 1] -> [5 poc 1] 367 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_61 [5 input 1] -> [5 poc 1] 367 erode_8c
  // nope
  // poc 367 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_60 [5 poc 1] -> [6 poc 1] 368 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_60 [6 input 1] -> [6 poc 1] 368 erode_8c
  // nope
  // poc 368 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_59 [6 poc 1] -> [7 poc 1] 369 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_59 [7 input 1] -> [7 poc 1] 369 erode_8c
  // nope
  // poc 369 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_59 on 0 and image 0`out_58 on 1
  // 0`imWork1_59 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_59 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_58 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_58 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_18(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_59 [0 input 0] -> [0 poc 0] 169 erode_8c
  // nope
  // poc 169 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_58 [0 poc 0] -> [1 poc 0] 170 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_58 [1 input 0] -> [1 poc 0] 170 erode_8c
  // nope
  // poc 170 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_57 [1 poc 0] -> [2 poc 0] 171 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_57 [2 input 0] -> [2 poc 0] 171 erode_8c
  // nope
  // poc 171 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_56 [2 poc 0] -> [3 poc 0] 172 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_56 [3 input 0] -> [3 poc 0] 172 erode_8c
  // nope
  // poc 172 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_55 [3 poc 0] -> [4 poc 0] 173 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_55 [4 input 0] -> [4 poc 0] 173 erode_8c
  // nope
  // poc 173 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_54 [4 poc 0] -> [5 poc 0] 174 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_54 [5 input 0] -> [5 poc 0] 174 erode_8c
  // nope
  // poc 174 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_53 [5 poc 0] -> [6 poc 0] 175 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_53 [6 input 0] -> [6 poc 0] 175 erode_8c
  // nope
  // poc 175 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_52 [6 poc 0] -> [7 poc 0] 176 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_52 [7 input 0] -> [7 poc 0] 176 erode_8c
  // nope
  // poc 176 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_58 [0 input 1] -> [0 poc 1] 370 erode_8c
  // nope
  // poc 370 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_57 [0 poc 1] -> [1 poc 1] 371 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_57 [1 input 1] -> [1 poc 1] 371 erode_8c
  // nope
  // poc 371 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_56 [1 poc 1] -> [2 poc 1] 372 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_56 [2 input 1] -> [2 poc 1] 372 erode_8c
  // nope
  // poc 372 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_55 [2 poc 1] -> [3 poc 1] 373 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_55 [3 input 1] -> [3 poc 1] 373 erode_8c
  // nope
  // poc 373 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_54 [3 poc 1] -> [4 poc 1] 374 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_54 [4 input 1] -> [4 poc 1] 374 erode_8c
  // nope
  // poc 374 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_53 [4 poc 1] -> [5 poc 1] 375 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_53 [5 input 1] -> [5 poc 1] 375 erode_8c
  // nope
  // poc 375 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_52 [5 poc 1] -> [6 poc 1] 376 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_52 [6 input 1] -> [6 poc 1] 376 erode_8c
  // nope
  // poc 376 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_51 [6 poc 1] -> [7 poc 1] 377 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_51 [7 input 1] -> [7 poc 1] 377 erode_8c
  // nope
  // poc 377 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_51 on 0 and image 0`out_50 on 1
  // 0`imWork1_51 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_51 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_50 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_50 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_19(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_51 [0 input 0] -> [0 poc 0] 177 erode_8c
  // nope
  // poc 177 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_50 [0 poc 0] -> [1 poc 0] 178 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_50 [1 input 0] -> [1 poc 0] 178 erode_8c
  // nope
  // poc 178 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_49 [1 poc 0] -> [2 poc 0] 179 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_49 [2 input 0] -> [2 poc 0] 179 erode_8c
  // nope
  // poc 179 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_48 [2 poc 0] -> [3 poc 0] 180 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_48 [3 input 0] -> [3 poc 0] 180 erode_8c
  // nope
  // poc 180 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_47 [3 poc 0] -> [4 poc 0] 181 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_47 [4 input 0] -> [4 poc 0] 181 erode_8c
  // nope
  // poc 181 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_46 [4 poc 0] -> [5 poc 0] 182 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_46 [5 input 0] -> [5 poc 0] 182 erode_8c
  // nope
  // poc 182 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_45 [5 poc 0] -> [6 poc 0] 183 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_45 [6 input 0] -> [6 poc 0] 183 erode_8c
  // nope
  // poc 183 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_44 [6 poc 0] -> [7 poc 0] 184 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_44 [7 input 0] -> [7 poc 0] 184 erode_8c
  // nope
  // poc 184 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_50 [0 input 1] -> [0 poc 1] 378 erode_8c
  // nope
  // poc 378 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_49 [0 poc 1] -> [1 poc 1] 379 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_49 [1 input 1] -> [1 poc 1] 379 erode_8c
  // nope
  // poc 379 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_48 [1 poc 1] -> [2 poc 1] 380 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_48 [2 input 1] -> [2 poc 1] 380 erode_8c
  // nope
  // poc 380 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_47 [2 poc 1] -> [3 poc 1] 381 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_47 [3 input 1] -> [3 poc 1] 381 erode_8c
  // nope
  // poc 381 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_46 [3 poc 1] -> [4 poc 1] 382 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_46 [4 input 1] -> [4 poc 1] 382 erode_8c
  // nope
  // poc 382 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_45 [4 poc 1] -> [5 poc 1] 383 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_45 [5 input 1] -> [5 poc 1] 383 erode_8c
  // nope
  // poc 383 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_44 [5 poc 1] -> [6 poc 1] 384 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_44 [6 input 1] -> [6 poc 1] 384 erode_8c
  // nope
  // poc 384 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_43 [6 poc 1] -> [7 poc 1] 385 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_43 [7 input 1] -> [7 poc 1] 385 erode_8c
  // nope
  // poc 385 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_43 on 0 and image 0`out_42 on 1
  // 0`imWork1_43 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_43 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_42 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_42 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_20(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_43 [0 input 0] -> [0 poc 0] 185 erode_8c
  // nope
  // poc 185 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_42 [0 poc 0] -> [1 poc 0] 186 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_42 [1 input 0] -> [1 poc 0] 186 erode_8c
  // nope
  // poc 186 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_41 [1 poc 0] -> [2 poc 0] 187 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_41 [2 input 0] -> [2 poc 0] 187 erode_8c
  // nope
  // poc 187 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_40 [2 poc 0] -> [3 poc 0] 188 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_40 [3 input 0] -> [3 poc 0] 188 erode_8c
  // nope
  // poc 188 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_39 [3 poc 0] -> [4 poc 0] 189 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_39 [4 input 0] -> [4 poc 0] 189 erode_8c
  // nope
  // poc 189 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_38 [4 poc 0] -> [5 poc 0] 190 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_38 [5 input 0] -> [5 poc 0] 190 erode_8c
  // nope
  // poc 190 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_37 [5 poc 0] -> [6 poc 0] 191 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_37 [6 input 0] -> [6 poc 0] 191 erode_8c
  // nope
  // poc 191 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_36 [6 poc 0] -> [7 poc 0] 192 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_36 [7 input 0] -> [7 poc 0] 192 erode_8c
  // nope
  // poc 192 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_42 [0 input 1] -> [0 poc 1] 386 erode_8c
  // nope
  // poc 386 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_41 [0 poc 1] -> [1 poc 1] 387 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_41 [1 input 1] -> [1 poc 1] 387 erode_8c
  // nope
  // poc 387 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_40 [1 poc 1] -> [2 poc 1] 388 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_40 [2 input 1] -> [2 poc 1] 388 erode_8c
  // nope
  // poc 388 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_39 [2 poc 1] -> [3 poc 1] 389 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_39 [3 input 1] -> [3 poc 1] 389 erode_8c
  // nope
  // poc 389 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_38 [3 poc 1] -> [4 poc 1] 390 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_38 [4 input 1] -> [4 poc 1] 390 erode_8c
  // nope
  // poc 390 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_37 [4 poc 1] -> [5 poc 1] 391 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_37 [5 input 1] -> [5 poc 1] 391 erode_8c
  // nope
  // poc 391 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_36 [5 poc 1] -> [6 poc 1] 392 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_36 [6 input 1] -> [6 poc 1] 392 erode_8c
  // nope
  // poc 392 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_35 [6 poc 1] -> [7 poc 1] 393 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_35 [7 input 1] -> [7 poc 1] 393 erode_8c
  // nope
  // poc 393 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_35 on 0 and image 0`out_34 on 1
  // 0`imWork1_35 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_35 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_34 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_34 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_21(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_35 [0 input 0] -> [0 poc 0] 193 erode_8c
  // nope
  // poc 193 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_34 [0 poc 0] -> [1 poc 0] 194 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_34 [1 input 0] -> [1 poc 0] 194 erode_8c
  // nope
  // poc 194 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_33 [1 poc 0] -> [2 poc 0] 195 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_33 [2 input 0] -> [2 poc 0] 195 erode_8c
  // nope
  // poc 195 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_32 [2 poc 0] -> [3 poc 0] 196 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_32 [3 input 0] -> [3 poc 0] 196 erode_8c
  // nope
  // poc 196 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_31 [3 poc 0] -> [4 poc 0] 197 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_31 [4 input 0] -> [4 poc 0] 197 erode_8c
  // nope
  // poc 197 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_30 [4 poc 0] -> [5 poc 0] 198 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_30 [5 input 0] -> [5 poc 0] 198 erode_8c
  // nope
  // poc 198 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_29 [5 poc 0] -> [6 poc 0] 199 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_29 [6 input 0] -> [6 poc 0] 199 erode_8c
  // nope
  // poc 199 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_28 [6 poc 0] -> [7 poc 0] 200 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_28 [7 input 0] -> [7 poc 0] 200 erode_8c
  // nope
  // poc 200 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_34 [0 input 1] -> [0 poc 1] 394 erode_8c
  // nope
  // poc 394 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_33 [0 poc 1] -> [1 poc 1] 395 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_33 [1 input 1] -> [1 poc 1] 395 erode_8c
  // nope
  // poc 395 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_32 [1 poc 1] -> [2 poc 1] 396 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_32 [2 input 1] -> [2 poc 1] 396 erode_8c
  // nope
  // poc 396 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_31 [2 poc 1] -> [3 poc 1] 397 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_31 [3 input 1] -> [3 poc 1] 397 erode_8c
  // nope
  // poc 397 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_30 [3 poc 1] -> [4 poc 1] 398 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_30 [4 input 1] -> [4 poc 1] 398 erode_8c
  // nope
  // poc 398 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_29 [4 poc 1] -> [5 poc 1] 399 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_29 [5 input 1] -> [5 poc 1] 399 erode_8c
  // nope
  // poc 399 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_28 [5 poc 1] -> [6 poc 1] 400 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_28 [6 input 1] -> [6 poc 1] 400 erode_8c
  // nope
  // poc 400 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_27 [6 poc 1] -> [7 poc 1] 401 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_27 [7 input 1] -> [7 poc 1] 401 erode_8c
  // nope
  // poc 401 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_27 on 0 and image 0`out_26 on 1
  // 0`imWork1_27 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_27 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_26 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_26 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_22(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_27 [0 input 0] -> [0 poc 0] 201 erode_8c
  // nope
  // poc 201 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_26 [0 poc 0] -> [1 poc 0] 202 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_26 [1 input 0] -> [1 poc 0] 202 erode_8c
  // nope
  // poc 202 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_25 [1 poc 0] -> [2 poc 0] 203 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_25 [2 input 0] -> [2 poc 0] 203 erode_8c
  // nope
  // poc 203 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_24 [2 poc 0] -> [3 poc 0] 204 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_24 [3 input 0] -> [3 poc 0] 204 erode_8c
  // nope
  // poc 204 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_23 [3 poc 0] -> [4 poc 0] 205 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_23 [4 input 0] -> [4 poc 0] 205 erode_8c
  // nope
  // poc 205 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_22 [4 poc 0] -> [5 poc 0] 206 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_22 [5 input 0] -> [5 poc 0] 206 erode_8c
  // nope
  // poc 206 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_21 [5 poc 0] -> [6 poc 0] 207 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_21 [6 input 0] -> [6 poc 0] 207 erode_8c
  // nope
  // poc 207 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_20 [6 poc 0] -> [7 poc 0] 208 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_20 [7 input 0] -> [7 poc 0] 208 erode_8c
  // nope
  // poc 208 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_26 [0 input 1] -> [0 poc 1] 402 erode_8c
  // nope
  // poc 402 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_25 [0 poc 1] -> [1 poc 1] 403 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_25 [1 input 1] -> [1 poc 1] 403 erode_8c
  // nope
  // poc 403 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_24 [1 poc 1] -> [2 poc 1] 404 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_24 [2 input 1] -> [2 poc 1] 404 erode_8c
  // nope
  // poc 404 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_23 [2 poc 1] -> [3 poc 1] 405 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_23 [3 input 1] -> [3 poc 1] 405 erode_8c
  // nope
  // poc 405 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_22 [3 poc 1] -> [4 poc 1] 406 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_22 [4 input 1] -> [4 poc 1] 406 erode_8c
  // nope
  // poc 406 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_21 [4 poc 1] -> [5 poc 1] 407 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_21 [5 input 1] -> [5 poc 1] 407 erode_8c
  // nope
  // poc 407 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_20 [5 poc 1] -> [6 poc 1] 408 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_20 [6 input 1] -> [6 poc 1] 408 erode_8c
  // nope
  // poc 408 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_19 [6 poc 1] -> [7 poc 1] 409 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_19 [7 input 1] -> [7 poc 1] 409 erode_8c
  // nope
  // poc 409 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_19 on 0 and image 0`out_18 on 1
  // 0`imWork1_19 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_19 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_18 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_18 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_23(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_19 [0 input 0] -> [0 poc 0] 209 erode_8c
  // nope
  // poc 209 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_18 [0 poc 0] -> [1 poc 0] 210 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_18 [1 input 0] -> [1 poc 0] 210 erode_8c
  // nope
  // poc 210 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_17 [1 poc 0] -> [2 poc 0] 211 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_17 [2 input 0] -> [2 poc 0] 211 erode_8c
  // nope
  // poc 211 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_16 [2 poc 0] -> [3 poc 0] 212 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_16 [3 input 0] -> [3 poc 0] 212 erode_8c
  // nope
  // poc 212 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_15 [3 poc 0] -> [4 poc 0] 213 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_15 [4 input 0] -> [4 poc 0] 213 erode_8c
  // nope
  // poc 213 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_14 [4 poc 0] -> [5 poc 0] 214 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_14 [5 input 0] -> [5 poc 0] 214 erode_8c
  // nope
  // poc 214 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_13 [5 poc 0] -> [6 poc 0] 215 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_13 [6 input 0] -> [6 poc 0] 215 erode_8c
  // nope
  // poc 215 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_12 [6 poc 0] -> [7 poc 0] 216 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_12 [7 input 0] -> [7 poc 0] 216 erode_8c
  // nope
  // poc 216 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_18 [0 input 1] -> [0 poc 1] 410 erode_8c
  // nope
  // poc 410 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_17 [0 poc 1] -> [1 poc 1] 411 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_17 [1 input 1] -> [1 poc 1] 411 erode_8c
  // nope
  // poc 411 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_16 [1 poc 1] -> [2 poc 1] 412 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_16 [2 input 1] -> [2 poc 1] 412 erode_8c
  // nope
  // poc 412 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_15 [2 poc 1] -> [3 poc 1] 413 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_15 [3 input 1] -> [3 poc 1] 413 erode_8c
  // nope
  // poc 413 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_14 [3 poc 1] -> [4 poc 1] 414 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_14 [4 input 1] -> [4 poc 1] 414 erode_8c
  // nope
  // poc 414 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_13 [4 poc 1] -> [5 poc 1] 415 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_13 [5 input 1] -> [5 poc 1] 415 erode_8c
  // nope
  // poc 415 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_12 [5 poc 1] -> [6 poc 1] 416 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_12 [6 input 1] -> [6 poc 1] 416 erode_8c
  // nope
  // poc 416 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_11 [6 poc 1] -> [7 poc 1] 417 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_11 [7 input 1] -> [7 poc 1] 417 erode_8c
  // nope
  // poc 417 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_11 on 0 and image 0`out_10 on 1
  // 0`imWork1_11 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_11 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_10 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_10 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_0_24(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_11 [0 input 0] -> [0 poc 0] 217 erode_8c
  // nope
  // poc 217 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_10 [0 poc 0] -> [1 poc 0] 218 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_10 [1 input 0] -> [1 poc 0] 218 erode_8c
  // nope
  // poc 218 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_9 [1 poc 0] -> [2 poc 0] 219 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_9 [2 input 0] -> [2 poc 0] 219 erode_8c
  // nope
  // poc 219 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_8 [2 poc 0] -> [3 poc 0] 220 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_8 [3 input 0] -> [3 poc 0] 220 erode_8c
  // nope
  // poc 220 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_7 [3 poc 0] -> [4 poc 0] 221 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_7 [4 input 0] -> [4 poc 0] 221 erode_8c
  // nope
  // poc 221 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_6 [4 poc 0] -> [5 poc 0] 222 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_6 [5 input 0] -> [5 poc 0] 222 erode_8c
  // nope
  // poc 222 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_5 [5 poc 0] -> [6 poc 0] 223 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_5 [6 input 0] -> [6 poc 0] 223 erode_8c
  // nope
  // poc 223 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_4 [6 poc 0] -> [7 poc 0] 224 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_4 [7 input 0] -> [7 poc 0] 224 erode_8c
  // nope
  // poc 224 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_10 [0 input 1] -> [0 poc 1] 418 erode_8c
  // nope
  // poc 418 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_9 [0 poc 1] -> [1 poc 1] 419 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_9 [1 input 1] -> [1 poc 1] 419 erode_8c
  // nope
  // poc 419 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_8 [1 poc 1] -> [2 poc 1] 420 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_8 [2 input 1] -> [2 poc 1] 420 erode_8c
  // nope
  // poc 420 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_7 [2 poc 1] -> [3 poc 1] 421 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_7 [3 input 1] -> [3 poc 1] 421 erode_8c
  // nope
  // poc 421 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_6 [3 poc 1] -> [4 poc 1] 422 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_6 [4 input 1] -> [4 poc 1] 422 erode_8c
  // nope
  // poc 422 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_5 [4 poc 1] -> [5 poc 1] 423 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_5 [5 input 1] -> [5 poc 1] 423 erode_8c
  // nope
  // poc 423 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_4 [5 poc 1] -> [6 poc 1] 424 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_4 [6 input 1] -> [6 poc 1] 424 erode_8c
  // nope
  // poc 424 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_3 [6 poc 1] -> [7 poc 1] 425 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_3 [7 input 1] -> [7 poc 1] 425 erode_8c
  // nope
  // poc 425 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];

  // 0`imWork1_3 [7 poc 0] -> [7 alu] 426 inf
  // nope
  // 0`out_2 [7 poc 1] -> [7 alu] 426 inf
  // nope
  // alu 426 inf stage 7
  si.alu[7][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`imClose [7 alu] -> [7 threshold 0] 430 threshold
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;
  // threshold 430 threshold stage 7 side 0
  si.th[7][0].op = pi4? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[7][0].boundmin = pi2;
  sp.th[7][0].boundmax = pi3;


  // output image 0`imClose on 1 and image 0`imZone3 on 0
  // 0`imClose [7 alu] -> [7 output 1] 0 null
  si.mux[7][1].op = SPOC_MUX_IN1;
  si.mux[7][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imClose [7 output 1] -> [7 output 1] 0 null
  // nope

  // 0`imZone3 [7 threshold 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`imZone3 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imClose [0 input 0] -> [0 alu] 427 sub
  // nope
  // 0`imin [0 input 1] -> [0 alu] 427 sub
  // nope
  // alu 427 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;

  // 0`imTophat [0 alu] -> [0 threshold 0] 428 threshold
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // threshold 428 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;

  // 0`imTophat [0 alu] -> [0 threshold 1] 429 threshold
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // threshold 429 threshold stage 0 side 1
  si.th[0][1].op = pi5? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = pi3;
  sp.th[0][1].boundmax = pi4;


  // output image 0`imZone1 on 0 and image 0`imZone2 on 1
  // 0`imZone1 [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`imZone1 [0 output 0] -> [7 output 0] 0 null
  // 0`imZone1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`imZone2 [0 threshold 1] -> [0 output 1] 0 null
  // nope

  // fill in to the end...
  // 0`imZone2 [0 output 1] -> [7 output 1] 0 null
  // 0`imZone2 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imZone1 [0 input 0] -> [0 alu] 431 sup
  // nope
  // 0`imZone2 [0 input 1] -> [0 alu] 431 sup
  // nope
  // alu 431 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`imWork1_2 on 0
  // 0`imWork1_2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_2 [0 output 0] -> [7 output 0] 0 null
  // 0`imWork1_2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_1_3_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_2 [0 input 0] -> [0 alu] 432 sup
  // nope
  // 0`imZone3 [0 input 1] -> [0 alu] 432 sup
  // nope
  // alu 432 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 1
  // 0`imWork1_1 [0 alu] -> [1 alu] 433 not
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`imWork1_1 [1 input 0] -> [1 alu] 433 not
  // nope
  // alu 433 not stage 1
  si.alu[1][0].op = SPOC_ALU_NOT_IN0;


  // STAGE 3
  // 0`imWork1 [1 alu] -> [3 poc 0] 434 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`imWork1 [2 input 0] -> [3 poc 0] 434 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [3 input 0] -> [3 poc 0] 434 dilate_8c
  // nope
  // poc 434 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`out_1 [3 poc 0] -> [4 poc 0] 435 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_1 [4 input 0] -> [4 poc 0] 435 dilate_8c
  // nope
  // poc 435 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`out [4 poc 0] -> [4 measure 0] 435 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;


  // output image 0`imWork1 on 1 and image 0`out on 0
  // 0`imWork1 [2 poc 0] -> [4 output 1] 0 null
  si.mux[2][1].op = SPOC_MUX_IN0;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`imWork1 [3 input 1] -> [4 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [4 input 1] -> [4 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imWork1 [4 output 1] -> [7 output 1] 0 null
  // 0`imWork1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`out [4 measure 0] -> [4 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [4 output 0] -> [7 output 0] 0 null
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 436 global_vol stage 4 side 0
  *po1 = (int32_t) reduc.measure[4][0].volume;

  return ret;
}

// dag 2: 17 ops and 0 copies, optimized to 17 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out [0 input 1] -> [0 poc 1] 439 erode_8c
  // nope
  // poc 439 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imWork1 [0 input 0] -> [0 alu] 440 sup
  // nope
  // 0`out_216 [0 poc 1] -> [0 alu] 440 sup
  // nope
  // alu 440 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 1
  // 0`out_215 [0 alu] -> [1 poc 0] 441 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`out_215 [1 input 0] -> [1 poc 0] 441 erode_8c
  // nope
  // poc 441 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`imWork1 [0 input 0] -> [1 alu] 442 sup
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`imWork1 [1 input 1] -> [1 alu] 442 sup
  // nope
  // 0`out_214 [1 poc 0] -> [1 alu] 442 sup
  // nope
  // alu 442 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 2
  // 0`out_213 [1 alu] -> [2 poc 0] 443 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`out_213 [2 input 0] -> [2 poc 0] 443 erode_8c
  // nope
  // poc 443 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`imWork1 [1 poc 1] -> [2 alu] 444 sup
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [2 input 1] -> [2 alu] 444 sup
  // nope
  // 0`out_212 [2 poc 0] -> [2 alu] 444 sup
  // nope
  // alu 444 sup stage 2
  si.alu[2][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 3
  // 0`out_211 [2 alu] -> [3 poc 0] 445 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`out_211 [3 input 0] -> [3 poc 0] 445 erode_8c
  // nope
  // poc 445 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`imWork1 [2 poc 1] -> [3 alu] 446 sup
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [3 input 1] -> [3 alu] 446 sup
  // nope
  // 0`out_210 [3 poc 0] -> [3 alu] 446 sup
  // nope
  // alu 446 sup stage 3
  si.alu[3][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 4
  // 0`out_209 [3 alu] -> [4 poc 0] 447 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`out_209 [4 input 0] -> [4 poc 0] 447 erode_8c
  // nope
  // poc 447 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`imWork1 [3 poc 1] -> [4 alu] 448 sup
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [4 input 1] -> [4 alu] 448 sup
  // nope
  // 0`out_208 [4 poc 0] -> [4 alu] 448 sup
  // nope
  // alu 448 sup stage 4
  si.alu[4][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 5
  // 0`out_207 [4 alu] -> [5 poc 0] 449 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // 0`out_207 [5 input 0] -> [5 poc 0] 449 erode_8c
  // nope
  // poc 449 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];

  // 0`imWork1 [4 poc 1] -> [5 alu] 450 sup
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [5 input 1] -> [5 alu] 450 sup
  // nope
  // 0`out_206 [5 poc 0] -> [5 alu] 450 sup
  // nope
  // alu 450 sup stage 5
  si.alu[5][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 6
  // 0`out_205 [5 alu] -> [6 poc 0] 451 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // 0`out_205 [6 input 0] -> [6 poc 0] 451 erode_8c
  // nope
  // poc 451 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];

  // 0`imWork1 [5 poc 1] -> [6 alu] 452 sup
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [6 input 1] -> [6 alu] 452 sup
  // nope
  // 0`out_204 [6 poc 0] -> [6 alu] 452 sup
  // nope
  // alu 452 sup stage 6
  si.alu[6][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 7
  // 0`out_203 [6 alu] -> [7 poc 0] 453 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;
  // 0`out_203 [7 input 0] -> [7 poc 0] 453 erode_8c
  // nope
  // poc 453 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];

  // 0`imWork1 [6 poc 1] -> [7 alu] 454 sup
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [7 input 1] -> [7 alu] 454 sup
  // nope
  // 0`out_202 [7 poc 0] -> [7 alu] 454 sup
  // nope
  // alu 454 sup stage 7
  si.alu[7][0].op = SPOC_ALU_SUP_IN0_IN1;

  // 0`out [7 alu] -> [7 measure 0] 454 sup
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;


  // output image 0`out on 0
  // 0`out [7 measure 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 455 global_vol stage 7 side 0
  *po1 = (int32_t) reduc.measure[7][0].volume;

  return ret;
}

// dag 3: 7 ops and 0 copies, optimized to 7 ops and 0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// # SPOC calls: 3

// FREIA-SPoC helper function for module main
freia_status main_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imZone1 [0 input 0] -> [0 alu] 456 inf_const
  // nope
  // alu 456 inf_const stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`imZone2 [0 input 1] -> [1 alu] 457 inf_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [1 input 1] -> [1 alu] 457 inf_const
  // nope
  // alu 457 inf_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`imZone1 [0 alu] -> [2 alu] 460 sup
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`imZone1 [1 input 0] -> [2 alu] 460 sup
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [2 input 0] -> [2 alu] 460 sup
  // nope
  // 0`imZone2 [1 alu] -> [2 alu] 460 sup
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`imZone2 [2 input 1] -> [2 alu] 460 sup
  // nope
  // alu 460 sup stage 2
  si.alu[2][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`imWork1_203 on 0
  // 0`imWork1_203 [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_203 [2 output 0] -> [7 output 0] 0 null
  // 0`imWork1_203 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_3_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imZone3 [0 input 1] -> [0 alu] 458 inf_const
  // nope
  // alu 458 inf_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`imWork1_203 [0 input 0] -> [1 alu] 461 sup
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [1 input 0] -> [1 alu] 461 sup
  // nope
  // 0`imZone3 [0 alu] -> [1 alu] 461 sup
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`imZone3 [1 input 1] -> [1 alu] 461 sup
  // nope
  // alu 461 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`imWork1 on 0
  // 0`imWork1 [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1 [1 output 0] -> [7 output 0] 0 null
  // 0`imWork1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_helper_3_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out [0 input 1] -> [0 alu] 459 inf_const
  // nope
  // alu 459 inf_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`imWork1 [0 input 0] -> [1 alu] 462 sup
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [1 input 0] -> [1 alu] 462 sup
  // nope
  // 0`out_217 [0 alu] -> [1 alu] 462 sup
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`out_217 [1 input 1] -> [1 alu] 462 sup
  // nope
  // alu 462 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`out on 0
  // 0`out [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [1 output 0] -> [7 output 0] 0 null
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *imin, *in, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;    /*0002*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0003*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0004*/
   int32_t neighborTransposed_0[9];                                     /*0005*/
   int32_t neighborTransposed_1[9];                                     /*0006*/
   register int32_t volprevious;                                        /*0007*/
   int32_t volcurrent;                                                  /*0008*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0009*/
   freia_common_open_input(&fdin, 0);                                   /*0010*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0011*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0012*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0013*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0014*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0016*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0017*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0021*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0023*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0024*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0225*/

   main_helper_1_0_0(imWork1, out, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0025*/
   main_helper_1_0_1(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0033*/
   main_helper_1_0_2(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0041*/
   main_helper_1_0_3(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0049*/
   main_helper_1_0_4(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0057*/
   main_helper_1_0_5(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0065*/
   main_helper_1_0_6(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0073*/
   main_helper_1_0_7(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0081*/
   main_helper_1_0_8(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0089*/
   main_helper_1_0_9(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0097*/
   main_helper_1_0_10(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);        /*0105*/
   main_helper_1_0_11(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);        /*0113*/
   main_helper_1_0_12(imWork1, out, imWork1, out, freia_morpho_k8_center_east, neighborTransposed_0, freia_morpho_k8_center_north, neighborTransposed_1);         /*0121*/

   main_helper_1_0_13(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0129*/
   main_helper_1_0_14(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0137*/
   main_helper_1_0_15(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0145*/
   main_helper_1_0_16(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0153*/
   main_helper_1_0_17(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0161*/
   main_helper_1_0_18(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0169*/
   main_helper_1_0_19(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0177*/
   main_helper_1_0_20(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0185*/
   main_helper_1_0_21(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0193*/
   main_helper_1_0_22(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0201*/
   main_helper_1_0_23(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0209*/
   main_helper_1_0_24(imClose, imZone3, imWork1, out, neighborTransposed_0, neighborTransposed_1, 100, 150, 1);      /*0217*/
   
   
   
   main_helper_1_1_0(imZone1, imZone2, imClose, imin, 105, 255, 1, 60, 105, 1);        /*0427*/
   
   
   main_helper_1_2_0(imWork1, imZone1, imZone2);                        /*0431*/
   main_helper_1_3_0(imWork1, out, imWork1, imZone3, freia_morpho_kernel_8c, &volcurrent);            /*0432*/
   
   
   do {                                                                 /*0437*/
      volprevious = volcurrent;                                         /*0438*/
      main_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volcurrent);       /*0439*/
   }
   while (volcurrent!=volprevious);                                     /*0437*/
   
   // Change  pixel values for the display
   main_helper_3_0_0(imWork1, imZone1, imZone2, 40, 100);               /*0456*/
   main_helper_3_1_0(imWork1, imWork1, imZone3, 170);                   /*0458*/
   main_helper_3_2_0(out, imWork1, out, 250);                           /*0459*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0463*/
   freia_common_tx_image(out, &fdout);                                  /*0464*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0465*/
   freia_common_destruct_data(in);                                      /*0466*/
   freia_common_destruct_data(imClose);                                 /*0468*/
   freia_common_destruct_data(imZone1);                                 /*0469*/
   freia_common_destruct_data(imZone2);                                 /*0470*/
   freia_common_destruct_data(imZone3);                                 /*0471*/
   freia_common_destruct_data(imWork1);                                 /*0472*/
   freia_common_destruct_data(out);                                     /*0473*/

   freia_common_close_input(&fdin);                                     /*0474*/
   freia_common_close_output(&fdout);                                   /*0475*/

   freia_shutdown();                                                    /*0476*/
   return 0;                                                            /*0477*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *imin, *in, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;    /*0002*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0003*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0004*/
   int32_t neighborTransposed_0[9];                                     /*0005*/
   int32_t neighborTransposed_1[9];                                     /*0006*/
   register int32_t volprevious;                                        /*0007*/
   int32_t volcurrent;                                                  /*0008*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0009*/
   freia_common_open_input(&fdin, 0);                                   /*0010*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0011*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0012*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0013*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0014*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0016*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0017*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0021*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0023*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0024*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0225*/

   main_helper_1_0_0(imWork1, out, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0025*/
   main_helper_1_0_1(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0033*/
   main_helper_1_0_2(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0041*/
   main_helper_1_0_3(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0049*/
   main_helper_1_0_4(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0057*/
   main_helper_1_0_5(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0065*/
   main_helper_1_0_6(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0073*/
   main_helper_1_0_7(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0081*/
   main_helper_1_0_8(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0089*/
   main_helper_1_0_9(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0097*/
   main_helper_1_0_10(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);        /*0105*/
   main_helper_1_0_11(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);        /*0113*/
   main_helper_1_0_12(imWork1, out, imWork1, out, freia_morpho_k8_center_east, neighborTransposed_0, freia_morpho_k8_center_north, neighborTransposed_1);         /*0121*/

   main_helper_1_0_13(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0129*/
   main_helper_1_0_14(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0137*/
   main_helper_1_0_15(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0145*/
   main_helper_1_0_16(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0153*/
   main_helper_1_0_17(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0161*/
   main_helper_1_0_18(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0169*/
   main_helper_1_0_19(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0177*/
   main_helper_1_0_20(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0185*/
   main_helper_1_0_21(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0193*/
   main_helper_1_0_22(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0201*/
   main_helper_1_0_23(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0209*/
   main_helper_1_0_24(imClose, imZone3, imWork1, out, neighborTransposed_0, neighborTransposed_1, 100, 150, 1);      /*0217*/
   
   
   
   main_helper_1_1_0(imZone1, imZone2, imClose, imin, 105, 255, 1, 60, 105, 1);        /*0427*/
   
   
   main_helper_1_2_0(imWork1, imZone1, imZone2);                        /*0431*/
   main_helper_1_3_0(imWork1, out, imWork1, imZone3, freia_morpho_kernel_8c, &volcurrent);            /*0432*/
   
   
   do {                                                                 /*0437*/
      volprevious = volcurrent;                                         /*0438*/
      main_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volcurrent);       /*0439*/
   }
   while (volcurrent!=volprevious);                                     /*0437*/
   
   // Change  pixel values for the display
   main_helper_3_0_0(imWork1, imZone1, imZone2, 40, 100);               /*0456*/
   main_helper_3_1_0(imWork1, imWork1, imZone3, 170);                   /*0458*/
   main_helper_3_2_0(out, imWork1, out, 250);                           /*0459*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0463*/
   freia_common_tx_image(out, &fdout);                                  /*0464*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0465*/
   freia_common_destruct_data(in);                                      /*0466*/
   freia_common_destruct_data(imClose);                                 /*0468*/
   freia_common_destruct_data(imZone1);                                 /*0469*/
   freia_common_destruct_data(imZone2);                                 /*0470*/
   freia_common_destruct_data(imZone3);                                 /*0471*/
   freia_common_destruct_data(imWork1);                                 /*0472*/
   freia_common_destruct_data(out);                                     /*0473*/

   freia_common_close_input(&fdin);                                     /*0474*/
   freia_common_close_output(&fdout);                                   /*0475*/

   freia_shutdown();                                                    /*0476*/
   return 0;                                                            /*0477*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}
// graph for dag "main_helper_1_0_0" of module "main" in dot format
digraph "main_helper_1_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imWork1_193" [shape=circle];
  "out_192" [shape=circle];

  // computation vertices
  "267 D8" [shape=box];
  "267 D8" -> "out_192";
  "63 D8" [shape=box];
  "63 D8" -> "imWork1_193";
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "main_helper_1_0_1" of module "main" in dot format
digraph "main_helper_1_0_1" {
  // inputs
  "imWork1_193" [shape=circle];
  "out_192" [shape=circle];

  // outputs
  "imWork1_183" [shape=circle];
  "out_182" [shape=circle];

  // computation vertices
  "277 D8" [shape=box];
  "277 D8" -> "out_182";
  "73 D8" [shape=box];
  "73 D8" -> "imWork1_183";
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "out_192" -> "268 D8";
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "imWork1_193" -> "64 D8";
}
// graph for dag "main_helper_1_0_10" of module "main" in dot format
digraph "main_helper_1_0_10" {
  // inputs
  "imWork1_100" [shape=circle];
  "out_99" [shape=circle];

  // outputs
  "imWork1_89" [shape=circle];
  "out_88" [shape=circle];

  // computation vertices
  "372 E8" [shape=box];
  "372 E8" -> "out_88";
  "168 E8" [shape=box];
  "168 E8" -> "imWork1_89";
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "out_99" -> "362 E8";
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "imWork1_100" -> "158 E8";
}
// graph for dag "main_helper_1_0_11" of module "main" in dot format
digraph "main_helper_1_0_11" {
  // inputs
  "imWork1_89" [shape=circle];
  "out_88" [shape=circle];

  // outputs
  "imWork1_78" [shape=circle];
  "out_77" [shape=circle];

  // computation vertices
  "383 E8" [shape=box];
  "383 E8" -> "out_77";
  "179 E8" [shape=box];
  "179 E8" -> "imWork1_78";
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "out_88" -> "373 E8";
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "imWork1_89" -> "169 E8";
}
// graph for dag "main_helper_1_0_12" of module "main" in dot format
digraph "main_helper_1_0_12" {
  // inputs
  "imWork1_78" [shape=circle];
  "out_77" [shape=circle];

  // outputs
  "imWork1_67" [shape=circle];
  "out_66" [shape=circle];

  // computation vertices
  "394 E8" [shape=box];
  "394 E8" -> "out_66";
  "190 E8" [shape=box];
  "190 E8" -> "imWork1_67";
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "out_77" -> "384 E8";
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "imWork1_78" -> "180 E8";
}
// graph for dag "main_helper_1_0_13" of module "main" in dot format
digraph "main_helper_1_0_13" {
  // inputs
  "imWork1_67" [shape=circle];
  "out_66" [shape=circle];

  // outputs
  "imWork1_56" [shape=circle];
  "out_55" [shape=circle];

  // computation vertices
  "405 E8" [shape=box];
  "405 E8" -> "out_55";
  "201 E8" [shape=box];
  "201 E8" -> "imWork1_56";
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "out_66" -> "395 E8";
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "imWork1_67" -> "191 E8";
}
// graph for dag "main_helper_1_0_14" of module "main" in dot format
digraph "main_helper_1_0_14" {
  // inputs
  "imWork1_56" [shape=circle];
  "out_55" [shape=circle];

  // outputs
  "imWork1_45" [shape=circle];
  "out_44" [shape=circle];

  // computation vertices
  "416 E8" [shape=box];
  "416 E8" -> "out_44";
  "212 E8" [shape=box];
  "212 E8" -> "imWork1_45";
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "out_55" -> "406 E8";
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "imWork1_56" -> "202 E8";
}
// graph for dag "main_helper_1_0_15" of module "main" in dot format
digraph "main_helper_1_0_15" {
  // inputs
  "imWork1_45" [shape=circle];
  "out_44" [shape=circle];

  // outputs
  "imWork1_34" [shape=circle];
  "out_33" [shape=circle];

  // computation vertices
  "427 E8" [shape=box];
  "427 E8" -> "out_33";
  "223 E8" [shape=box];
  "223 E8" -> "imWork1_34";
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "out_44" -> "417 E8";
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "imWork1_45" -> "213 E8";
}
// graph for dag "main_helper_1_0_16" of module "main" in dot format
digraph "main_helper_1_0_16" {
  // inputs
  "imWork1_34" [shape=circle];
  "out_33" [shape=circle];

  // outputs
  "imWork1_23" [shape=circle];
  "out_22" [shape=circle];

  // computation vertices
  "438 E8" [shape=box];
  "438 E8" -> "out_22";
  "234 E8" [shape=box];
  "234 E8" -> "imWork1_23";
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "out_33" -> "428 E8";
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "imWork1_34" -> "224 E8";
}
// graph for dag "main_helper_1_0_17" of module "main" in dot format
digraph "main_helper_1_0_17" {
  // inputs
  "imWork1_23" [shape=circle];
  "out_22" [shape=circle];

  // outputs
  "imWork1_12" [shape=circle];
  "out_11" [shape=circle];

  // computation vertices
  "449 E8" [shape=box];
  "449 E8" -> "out_11";
  "245 E8" [shape=box];
  "245 E8" -> "imWork1_12";
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "out_22" -> "439 E8";
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "imWork1_23" -> "235 E8";
}
// graph for dag "main_helper_1_0_18" of module "main" in dot format
digraph "main_helper_1_0_18" {
  // inputs
  "imWork1_12" [shape=circle];
  "imin" [shape=circle];
  "out_11" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "out_11" -> "450 E8";
  "imWork1_12" -> "246 E8";
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
}
// graph for dag "main_helper_1_0_2" of module "main" in dot format
digraph "main_helper_1_0_2" {
  // inputs
  "imWork1_183" [shape=circle];
  "out_182" [shape=circle];

  // outputs
  "imWork1_173" [shape=circle];
  "out_172" [shape=circle];

  // computation vertices
  "287 D8" [shape=box];
  "287 D8" -> "out_172";
  "83 D8" [shape=box];
  "83 D8" -> "imWork1_173";
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "out_182" -> "278 D8";
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "imWork1_183" -> "74 D8";
}
// graph for dag "main_helper_1_0_3" of module "main" in dot format
digraph "main_helper_1_0_3" {
  // inputs
  "imWork1_173" [shape=circle];
  "out_172" [shape=circle];

  // outputs
  "imWork1_163" [shape=circle];
  "out_162" [shape=circle];

  // computation vertices
  "297 D8" [shape=box];
  "297 D8" -> "out_162";
  "93 D8" [shape=box];
  "93 D8" -> "imWork1_163";
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "out_172" -> "288 D8";
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "imWork1_173" -> "84 D8";
}
// graph for dag "main_helper_1_0_4" of module "main" in dot format
digraph "main_helper_1_0_4" {
  // inputs
  "imWork1_163" [shape=circle];
  "out_162" [shape=circle];

  // outputs
  "imWork1_153" [shape=circle];
  "out_152" [shape=circle];

  // computation vertices
  "307 D8" [shape=box];
  "307 D8" -> "out_152";
  "103 D8" [shape=box];
  "103 D8" -> "imWork1_153";
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "out_162" -> "298 D8";
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "imWork1_163" -> "94 D8";
}
// graph for dag "main_helper_1_0_5" of module "main" in dot format
digraph "main_helper_1_0_5" {
  // inputs
  "imWork1_153" [shape=circle];
  "out_152" [shape=circle];

  // outputs
  "imWork1_143" [shape=circle];
  "out_142" [shape=circle];

  // computation vertices
  "317 D8" [shape=box];
  "317 D8" -> "out_142";
  "113 D8" [shape=box];
  "113 D8" -> "imWork1_143";
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "out_152" -> "308 D8";
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "imWork1_153" -> "104 D8";
}
// graph for dag "main_helper_1_0_6" of module "main" in dot format
digraph "main_helper_1_0_6" {
  // inputs
  "imWork1_143" [shape=circle];
  "out_142" [shape=circle];

  // outputs
  "imWork1_133" [shape=circle];
  "out_132" [shape=circle];

  // computation vertices
  "327 D8" [shape=box];
  "327 D8" -> "out_132";
  "123 D8" [shape=box];
  "123 D8" -> "imWork1_133";
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "out_142" -> "318 D8";
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "imWork1_143" -> "114 D8";
}
// graph for dag "main_helper_1_0_7" of module "main" in dot format
digraph "main_helper_1_0_7" {
  // inputs
  "imWork1_133" [shape=circle];
  "out_132" [shape=circle];

  // outputs
  "imWork1_122" [shape=circle];
  "out_121" [shape=circle];

  // computation vertices
  "338 D8" [shape=box];
  "338 D8" -> "out_121";
  "134 D8" [shape=box];
  "134 D8" -> "imWork1_122";
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "out_132" -> "328 D8";
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "imWork1_133" -> "124 D8";
}
// graph for dag "main_helper_1_0_8" of module "main" in dot format
digraph "main_helper_1_0_8" {
  // inputs
  "imWork1_122" [shape=circle];
  "out_121" [shape=circle];

  // outputs
  "imWork1_111" [shape=circle];
  "out_110" [shape=circle];

  // computation vertices
  "349 D8" [shape=box];
  "349 D8" -> "out_110";
  "145 D8" [shape=box];
  "145 D8" -> "imWork1_111";
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "out_121" -> "339 D8";
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "imWork1_122" -> "135 D8";
}
// graph for dag "main_helper_1_0_9" of module "main" in dot format
digraph "main_helper_1_0_9" {
  // inputs
  "imWork1_111" [shape=circle];
  "out_110" [shape=circle];

  // outputs
  "imWork1_100" [shape=circle];
  "out_99" [shape=circle];

  // computation vertices
  "361 E8" [shape=box];
  "361 E8" -> "out_99";
  "157 E8" [shape=box];
  "157 E8" -> "imWork1_100";
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "out_110" -> "350 D8";
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "imWork1_111" -> "146 D8";
}
// graph for dag "main_helper_2_0_0" of module "main" in dot format
digraph "main_helper_2_0_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "main_helper_3_0_0" of module "main" in dot format
digraph "main_helper_3_0_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out_203"];
  "out" -> "487 <.";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 0+1 copies

// dag 1: 411 ops and 0 copies, optimized to 411 ops and 0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 96
 */
freia_status main_helper_1_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi3,
  const int32_t * pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi4[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(2) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_io_2_0;
  mcu_macro[1][5].xmin1 = imagelet_io_2_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_2_0;
  mcu_macro[1][6].xmin2 = imagelet_io_2_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(1) -> 3
  mcu_macro[0][7].xmin1 = imagelet_io_1_0;
  mcu_macro[1][7].xmin1 = imagelet_io_1_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(2) -> 1
  mcu_macro[0][8].xmin1 = imagelet_io_2_0;
  mcu_macro[1][8].xmin1 = imagelet_io_2_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_1_0;
  mcu_macro[1][8].xmin2 = imagelet_io_1_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(3) -> 2
  mcu_macro[0][9].xmin1 = imagelet_3;
  mcu_macro[1][9].xmin1 = imagelet_3;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_2_0;
  mcu_macro[1][9].xmin2 = imagelet_io_2_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(1) -> 3
  mcu_macro[0][10].xmin1 = imagelet_io_1_0;
  mcu_macro[1][10].xmin1 = imagelet_io_1_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_3;
  mcu_macro[1][10].xmin2 = imagelet_3;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(2) -> 1
  mcu_macro[0][11].xmin1 = imagelet_io_2_0;
  mcu_macro[1][11].xmin1 = imagelet_io_2_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_1_0;
  mcu_macro[1][11].xmin2 = imagelet_io_1_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(3) -> 2
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_2_0;
  mcu_macro[1][12].xmin2 = imagelet_io_2_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(1) -> 3
  mcu_macro[0][13].xmin1 = imagelet_io_1_0;
  mcu_macro[1][13].xmin1 = imagelet_io_1_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_3;
  mcu_macro[1][13].xmin2 = imagelet_3;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(2) -> 1
  mcu_macro[0][14].xmin1 = imagelet_io_2_0;
  mcu_macro[1][14].xmin1 = imagelet_io_2_1;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_1_0;
  mcu_macro[1][14].xmin2 = imagelet_io_1_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(3) -> 2
  mcu_macro[0][15].xmin1 = imagelet_3;
  mcu_macro[1][15].xmin1 = imagelet_3;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_io_2_0;
  mcu_macro[1][15].xmin2 = imagelet_io_2_1;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(1) -> 3
  mcu_macro[0][16].xmin1 = imagelet_io_1_0;
  mcu_macro[1][16].xmin1 = imagelet_io_1_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_3;
  mcu_macro[1][16].xmin2 = imagelet_3;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(2) -> 1
  mcu_macro[0][17].xmin1 = imagelet_io_2_0;
  mcu_macro[1][17].xmin1 = imagelet_io_2_1;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_1_0;
  mcu_macro[1][17].xmin2 = imagelet_io_1_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(3) -> 2
  mcu_macro[0][18].xmin1 = imagelet_3;
  mcu_macro[1][18].xmin1 = imagelet_3;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_io_2_0;
  mcu_macro[1][18].xmin2 = imagelet_io_2_1;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(1) -> 3
  mcu_macro[0][19].xmin1 = imagelet_io_1_0;
  mcu_macro[1][19].xmin1 = imagelet_io_1_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_3;
  mcu_macro[1][19].xmin2 = imagelet_3;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_1_0;
  mcu_macro[1][20].xmin2 = imagelet_io_1_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_193
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_192
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 128
 */
freia_status main_helper_1_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_193
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_192
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_183
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_182
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 128
 */
freia_status main_helper_1_0_2(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_183
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_182
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_173
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_172
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 128
 */
freia_status main_helper_1_0_3(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_173
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_172
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_163
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_162
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 128
 */
freia_status main_helper_1_0_4(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_163
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_162
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_153
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_152
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 128
 */
freia_status main_helper_1_0_5(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_153
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_152
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_143
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_142
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 20 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 300
 * - communication: 128
 */
freia_status main_helper_1_0_6(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][21];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_143
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_142
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_133
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_132
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 21;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_7(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 20: D8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 21: D8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_133
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_132
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_122
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_121
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_8(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: D8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 17: D8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 18: D8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 19: D8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 20: D8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 21: D8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_122
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_121
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_111
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_110
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_9(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5,
  const int32_t * pi6,
  const int32_t * pi7)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 16 parameters
  int16_t p_16[9];
  const int32_t x_16 = 6;
  const int32_t y_16 = 0;
  // operation 17 parameters
  int16_t p_17[9];
  const int32_t x_17 = 9;
  const int32_t y_17 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  // copy of operation 16 parameters
  for(i=0; i<9; i++)
    p_16[i] = pi6[i];
  gram.xoffset = x_16;
  gram.yoffset = y_16;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_16;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][16].xmin3 = x_16;
  mcu_macro[1][16].xmin3 = x_16;
  mcu_macro[0][16].ymin3 = y_16;
  mcu_macro[1][16].ymin3 = y_16;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  // copy of operation 17 parameters
  for(i=0; i<9; i++)
    p_17[i] = pi7[i];
  gram.xoffset = x_17;
  gram.yoffset = y_17;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_17;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][17].xmin3 = x_17;
  mcu_macro[1][17].xmin3 = x_17;
  mcu_macro[0][17].ymin3 = y_17;
  mcu_macro[1][17].ymin3 = y_17;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_16;
  mcu_macro[1][18].xmin3 = x_16;
  mcu_macro[0][18].ymin3 = y_16;
  mcu_macro[1][18].ymin3 = y_16;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_17;
  mcu_macro[1][19].xmin3 = x_17;
  mcu_macro[0][19].ymin3 = y_17;
  mcu_macro[1][19].ymin3 = y_17;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_16;
  mcu_macro[1][20].xmin3 = x_16;
  mcu_macro[0][20].ymin3 = y_16;
  mcu_macro[1][20].ymin3 = y_16;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_17;
  mcu_macro[1][21].xmin3 = x_17;
  mcu_macro[0][21].ymin3 = y_17;
  mcu_macro[1][21].ymin3 = y_17;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_111
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_110
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_100
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_99
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_10(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_100
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_99
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_89
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_88
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_11(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_89
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_88
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_78
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_77
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_12(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_78
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_77
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_67
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_66
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_13(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_67
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_66
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_56
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_55
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_14(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_56
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_55
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_45
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_44
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_15(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_45
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_44
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_34
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_33
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_16(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_34
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_33
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_23
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_22
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 22 image operations in dag
 * dag length is 12, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 330
 * - communication: 128
 */
freia_status main_helper_1_0_17(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][23];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(2) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(3) -> 2
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_2_0;
  mcu_macro[1][11].xmin2 = imagelet_io_2_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(1) -> 3
  mcu_macro[0][12].xmin1 = imagelet_io_1_0;
  mcu_macro[1][12].xmin1 = imagelet_io_1_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_3;
  mcu_macro[1][12].xmin2 = imagelet_3;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_2_0;
  mcu_macro[1][13].xmin1 = imagelet_io_2_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_1_0;
  mcu_macro[1][13].xmin2 = imagelet_io_1_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(3) -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(1) -> 3
  mcu_macro[0][15].xmin1 = imagelet_io_1_0;
  mcu_macro[1][15].xmin1 = imagelet_io_1_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_3;
  mcu_macro[1][15].xmin2 = imagelet_3;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(2) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_2_0;
  mcu_macro[1][16].xmin1 = imagelet_io_2_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(3) -> 2
  mcu_macro[0][17].xmin1 = imagelet_3;
  mcu_macro[1][17].xmin1 = imagelet_3;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(1) -> 3
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_3;
  mcu_macro[1][18].xmin2 = imagelet_3;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(2) -> 1
  mcu_macro[0][19].xmin1 = imagelet_io_2_0;
  mcu_macro[1][19].xmin1 = imagelet_io_2_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_1_0;
  mcu_macro[1][19].xmin2 = imagelet_io_1_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_1;
  mcu_macro[1][19].xmin3 = x_1;
  mcu_macro[0][19].ymin3 = y_1;
  mcu_macro[1][19].ymin3 = y_1;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(3) -> 2
  mcu_macro[0][20].xmin1 = imagelet_3;
  mcu_macro[1][20].xmin1 = imagelet_3;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_2_0;
  mcu_macro[1][20].xmin2 = imagelet_io_2_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(1) -> 3
  mcu_macro[0][21].xmin1 = imagelet_io_1_0;
  mcu_macro[1][21].xmin1 = imagelet_io_1_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_3;
  mcu_macro[1][21].xmin2 = imagelet_3;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_1;
  mcu_macro[1][21].xmin3 = x_1;
  mcu_macro[0][21].ymin3 = y_1;
  mcu_macro[1][21].ymin3 = y_1;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][22].xmin1 = imagelet_3;
  mcu_macro[1][22].xmin1 = imagelet_3;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_1_0;
  mcu_macro[1][22].xmin2 = imagelet_io_1_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_23
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out_22
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imWork1_12
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for out_11
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 23;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 3 input images, 5 output images
 * 29 image operations in dag
 * dag length is 19, dag width is 5
 * costs in cycles per imagelet row:
 * - computation: 338
 * - communication: 256
 */
freia_status main_helper_1_0_18(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * o3,
  freia_data2d * o4,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const int32_t * pi8,
  const int32_t * pi9,
  int32_t pi10,
  int32_t pi11,
  int32_t pi12,
  int32_t pi13,
  int32_t pi14,
  int32_t pi15,
  int32_t pi16,
  int32_t pi17,
  int32_t pi18,
  const int32_t * pi19,
  int32_t * po20)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 20 parameters
  int16_t p_20[3];
  const int32_t x_20 = 6;
  const int32_t y_20 = 0;
  // operation 21 parameters
  int16_t p_21[3];
  const int32_t x_21 = 9;
  const int32_t y_21 = 0;
  // operation 23 parameters
  int16_t p_23[3];
  const int32_t x_23 = 12;
  const int32_t y_23 = 0;
  // operation 26 parameters
  int16_t p_26[9];
  const int32_t x_26 = 15;
  const int32_t y_26 = 0;
  // operation 28_val initialization
  int16_t p_28_val[1];
  const int32_t x_28_val = 18;
  const int32_t y_28_val = 0;
  // array for reduction 28 extraction
  int32_t red_28[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][30];
  terapix_tile_info tile_in[2][3];
  terapix_tile_info tile_out[2][5];
  // imagelets definitions:
  // - 6 computation imagelets
  // - 5 double buffer imagelets
  int imagelet_size = 92;
  int imagelet_1 = 0;
  int imagelet_2 = 92;
  int imagelet_3 = 184;
  int imagelet_4 = 276;
  int imagelet_5 = 368;
  int imagelet_6 = 460;
  int imagelet_7 = 552;
  int imagelet_8 = 644;
  int imagelet_9 = 736;
  int imagelet_10 = 828;
  int imagelet_11 = 920;

  // memory for reductions
  int reduction_28 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_7;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_8;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_9;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_10;
  int imagelet_io_5_0 = imagelet_5;
  int imagelet_io_5_1 = imagelet_11;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 5
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_5_0;
  mcu_macro[1][0].xmin2 = imagelet_io_5_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi8[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(3) -> 4
  mcu_macro[0][1].xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_4_0;
  mcu_macro[1][1].xmin2 = imagelet_io_4_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi9[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(5) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_5_0;
  mcu_macro[1][2].xmin1 = imagelet_io_5_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_3_0;
  mcu_macro[1][2].xmin2 = imagelet_io_3_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(4) -> 5
  mcu_macro[0][3].xmin1 = imagelet_io_4_0;
  mcu_macro[1][3].xmin1 = imagelet_io_4_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_5_0;
  mcu_macro[1][3].xmin2 = imagelet_io_5_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(3) -> 4
  mcu_macro[0][4].xmin1 = imagelet_io_3_0;
  mcu_macro[1][4].xmin1 = imagelet_io_3_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_4_0;
  mcu_macro[1][4].xmin2 = imagelet_io_4_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(5) -> 3
  mcu_macro[0][5].xmin1 = imagelet_io_5_0;
  mcu_macro[1][5].xmin1 = imagelet_io_5_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_3_0;
  mcu_macro[1][5].xmin2 = imagelet_io_3_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(4) -> 5
  mcu_macro[0][6].xmin1 = imagelet_io_4_0;
  mcu_macro[1][6].xmin1 = imagelet_io_4_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_5_0;
  mcu_macro[1][6].xmin2 = imagelet_io_5_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(3) -> 4
  mcu_macro[0][7].xmin1 = imagelet_io_3_0;
  mcu_macro[1][7].xmin1 = imagelet_io_3_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_4_0;
  mcu_macro[1][7].xmin2 = imagelet_io_4_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(5) -> 3
  mcu_macro[0][8].xmin1 = imagelet_io_5_0;
  mcu_macro[1][8].xmin1 = imagelet_io_5_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_3_0;
  mcu_macro[1][8].xmin2 = imagelet_io_3_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(4) -> 5
  mcu_macro[0][9].xmin1 = imagelet_io_4_0;
  mcu_macro[1][9].xmin1 = imagelet_io_4_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_5_0;
  mcu_macro[1][9].xmin2 = imagelet_io_5_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(3) -> 4
  mcu_macro[0][10].xmin1 = imagelet_io_3_0;
  mcu_macro[1][10].xmin1 = imagelet_io_3_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_4_0;
  mcu_macro[1][10].xmin2 = imagelet_io_4_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(5) -> 3
  mcu_macro[0][11].xmin1 = imagelet_io_5_0;
  mcu_macro[1][11].xmin1 = imagelet_io_5_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_3_0;
  mcu_macro[1][11].xmin2 = imagelet_io_3_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(4) -> 5
  mcu_macro[0][12].xmin1 = imagelet_io_4_0;
  mcu_macro[1][12].xmin1 = imagelet_io_4_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_5_0;
  mcu_macro[1][12].xmin2 = imagelet_io_5_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(3) -> 4
  mcu_macro[0][13].xmin1 = imagelet_io_3_0;
  mcu_macro[1][13].xmin1 = imagelet_io_3_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_4_0;
  mcu_macro[1][13].xmin2 = imagelet_io_4_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: E8(5) -> 3
  mcu_macro[0][14].xmin1 = imagelet_io_5_0;
  mcu_macro[1][14].xmin1 = imagelet_io_5_1;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_3_0;
  mcu_macro[1][14].xmin2 = imagelet_io_3_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: E8(4) -> 5
  mcu_macro[0][15].xmin1 = imagelet_io_4_0;
  mcu_macro[1][15].xmin1 = imagelet_io_4_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_io_5_0;
  mcu_macro[1][15].xmin2 = imagelet_io_5_1;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 16: E8(3) -> 4
  mcu_macro[0][16].xmin1 = imagelet_io_3_0;
  mcu_macro[1][16].xmin1 = imagelet_io_3_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_4_0;
  mcu_macro[1][16].xmin2 = imagelet_io_4_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(5) -> 3
  mcu_macro[0][17].xmin1 = imagelet_io_5_0;
  mcu_macro[1][17].xmin1 = imagelet_io_5_1;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_3_0;
  mcu_macro[1][17].xmin2 = imagelet_io_3_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_1;
  mcu_macro[1][17].xmin3 = x_1;
  mcu_macro[0][17].ymin3 = y_1;
  mcu_macro[1][17].ymin3 = y_1;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: <(4,3) -> 5
  mcu_macro[0][18].xmin1 = imagelet_io_4_0;
  mcu_macro[1][18].xmin1 = imagelet_io_4_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_io_3_0;
  mcu_macro[1][18].xmin2 = imagelet_io_3_1;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = imagelet_io_5_0;
  mcu_macro[1][18].xmin3 = imagelet_io_5_1;
  mcu_macro[0][18].ymin3 = 0;
  mcu_macro[1][18].ymin3 = 0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_INF3;
  // 19: -(5,2) -> 4
  mcu_macro[0][19].xmin1 = imagelet_io_5_0;
  mcu_macro[1][19].xmin1 = imagelet_io_5_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_2_0;
  mcu_macro[1][19].xmin2 = imagelet_io_2_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = imagelet_io_4_0;
  mcu_macro[1][19].xmin3 = imagelet_io_4_1;
  mcu_macro[0][19].ymin3 = 0;
  mcu_macro[1][19].ymin3 = 0;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_SUB3;
  // 20: thr(4) -> 1
  mcu_macro[0][20].xmin1 = imagelet_io_4_0;
  mcu_macro[1][20].xmin1 = imagelet_io_4_1;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_1_0;
  mcu_macro[1][20].xmin2 = imagelet_io_1_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  // copy of operation 20 parameters
  p_20[0] = pi10;
  p_20[1] = pi11;
  p_20[2] = pi12;
  gram.xoffset = x_20;
  gram.yoffset = y_20;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_20;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][20].xmin3 = x_20;
  mcu_macro[1][20].xmin3 = x_20;
  mcu_macro[0][20].ymin3 = y_20;
  mcu_macro[1][20].ymin3 = y_20;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 21: thr(4) -> 2
  mcu_macro[0][21].xmin1 = imagelet_io_4_0;
  mcu_macro[1][21].xmin1 = imagelet_io_4_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_io_2_0;
  mcu_macro[1][21].xmin2 = imagelet_io_2_1;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  // copy of operation 21 parameters
  p_21[0] = pi13;
  p_21[1] = pi14;
  p_21[2] = pi15;
  gram.xoffset = x_21;
  gram.yoffset = y_21;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_21;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][21].xmin3 = x_21;
  mcu_macro[1][21].xmin3 = x_21;
  mcu_macro[0][21].ymin3 = y_21;
  mcu_macro[1][21].ymin3 = y_21;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 22: >(1,2) -> 4
  mcu_macro[0][22].xmin1 = imagelet_io_1_0;
  mcu_macro[1][22].xmin1 = imagelet_io_1_1;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_2_0;
  mcu_macro[1][22].xmin2 = imagelet_io_2_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].xmin3 = imagelet_io_4_0;
  mcu_macro[1][22].xmin3 = imagelet_io_4_1;
  mcu_macro[0][22].ymin3 = 0;
  mcu_macro[1][22].ymin3 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_SUP3;
  // 23: thr(5) -> 3
  mcu_macro[0][23].xmin1 = imagelet_io_5_0;
  mcu_macro[1][23].xmin1 = imagelet_io_5_1;
  mcu_macro[0][23].ymin1 = 0;
  mcu_macro[1][23].ymin1 = 0;
  mcu_macro[0][23].xmin2 = imagelet_io_3_0;
  mcu_macro[1][23].xmin2 = imagelet_io_3_1;
  mcu_macro[0][23].ymin2 = 0;
  mcu_macro[1][23].ymin2 = 0;
  // copy of operation 23 parameters
  p_23[0] = pi16;
  p_23[1] = pi17;
  p_23[2] = pi18;
  gram.xoffset = x_23;
  gram.yoffset = y_23;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_23;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][23].xmin3 = x_23;
  mcu_macro[1][23].xmin3 = x_23;
  mcu_macro[0][23].ymin3 = y_23;
  mcu_macro[1][23].ymin3 = y_23;
  mcu_macro[0][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][23].iter2 = imagelet_size;
  mcu_macro[1][23].iter2 = imagelet_size;
  mcu_macro[0][23].iter3 = 0;
  mcu_macro[1][23].iter3 = 0;
  mcu_macro[0][23].iter4 = 0;
  mcu_macro[1][23].iter4 = 0;
  mcu_macro[0][23].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][23].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 24: >(4,3) -> 5
  mcu_macro[0][24].xmin1 = imagelet_io_4_0;
  mcu_macro[1][24].xmin1 = imagelet_io_4_1;
  mcu_macro[0][24].ymin1 = 0;
  mcu_macro[1][24].ymin1 = 0;
  mcu_macro[0][24].xmin2 = imagelet_io_3_0;
  mcu_macro[1][24].xmin2 = imagelet_io_3_1;
  mcu_macro[0][24].ymin2 = 0;
  mcu_macro[1][24].ymin2 = 0;
  mcu_macro[0][24].xmin3 = imagelet_io_5_0;
  mcu_macro[1][24].xmin3 = imagelet_io_5_1;
  mcu_macro[0][24].ymin3 = 0;
  mcu_macro[1][24].ymin3 = 0;
  mcu_macro[0][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][24].iter2 = imagelet_size;
  mcu_macro[1][24].iter2 = imagelet_size;
  mcu_macro[0][24].iter3 = 0;
  mcu_macro[1][24].iter3 = 0;
  mcu_macro[0][24].iter4 = 0;
  mcu_macro[1][24].iter4 = 0;
  mcu_macro[0][24].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][24].addrStart = TERAPIX_UCODE_SUP3;
  // 25: !(5) -> 4
  mcu_macro[0][25].xmin1 = imagelet_io_5_0;
  mcu_macro[1][25].xmin1 = imagelet_io_5_1;
  mcu_macro[0][25].ymin1 = 0;
  mcu_macro[1][25].ymin1 = 0;
  mcu_macro[0][25].xmin2 = imagelet_io_4_0;
  mcu_macro[1][25].xmin2 = imagelet_io_4_1;
  mcu_macro[0][25].ymin2 = 0;
  mcu_macro[1][25].ymin2 = 0;
  mcu_macro[0][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][25].iter2 = imagelet_size;
  mcu_macro[1][25].iter2 = imagelet_size;
  mcu_macro[0][25].iter3 = 0;
  mcu_macro[1][25].iter3 = 0;
  mcu_macro[0][25].iter4 = 0;
  mcu_macro[1][25].iter4 = 0;
  mcu_macro[0][25].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][25].addrStart = TERAPIX_UCODE_NOT;
  // 26: D8(4) -> 5
  mcu_macro[0][26].xmin1 = imagelet_io_4_0;
  mcu_macro[1][26].xmin1 = imagelet_io_4_1;
  mcu_macro[0][26].ymin1 = 0;
  mcu_macro[1][26].ymin1 = 0;
  mcu_macro[0][26].xmin2 = imagelet_io_5_0;
  mcu_macro[1][26].xmin2 = imagelet_io_5_1;
  mcu_macro[0][26].ymin2 = 0;
  mcu_macro[1][26].ymin2 = 0;
  // copy of operation 26 parameters
  for(i=0; i<9; i++)
    p_26[i] = pi19[i];
  gram.xoffset = x_26;
  gram.yoffset = y_26;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_26;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][26].xmin3 = x_26;
  mcu_macro[1][26].xmin3 = x_26;
  mcu_macro[0][26].ymin3 = y_26;
  mcu_macro[1][26].ymin3 = y_26;
  mcu_macro[0][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][26].iter2 = imagelet_size;
  mcu_macro[1][26].iter2 = imagelet_size;
  mcu_macro[0][26].iter3 = 0;
  mcu_macro[1][26].iter3 = 0;
  mcu_macro[0][26].iter4 = 0;
  mcu_macro[1][26].iter4 = 0;
  mcu_macro[0][26].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][26].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 27: D8(5) -> 6
  mcu_macro[0][27].xmin1 = imagelet_io_5_0;
  mcu_macro[1][27].xmin1 = imagelet_io_5_1;
  mcu_macro[0][27].ymin1 = 0;
  mcu_macro[1][27].ymin1 = 0;
  mcu_macro[0][27].xmin2 = imagelet_6;
  mcu_macro[1][27].xmin2 = imagelet_6;
  mcu_macro[0][27].ymin2 = 0;
  mcu_macro[1][27].ymin2 = 0;
  mcu_macro[0][27].xmin3 = x_26;
  mcu_macro[1][27].xmin3 = x_26;
  mcu_macro[0][27].ymin3 = y_26;
  mcu_macro[1][27].ymin3 = y_26;
  mcu_macro[0][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][27].iter2 = imagelet_size;
  mcu_macro[1][27].iter2 = imagelet_size;
  mcu_macro[0][27].iter3 = 0;
  mcu_macro[1][27].iter3 = 0;
  mcu_macro[0][27].iter4 = 0;
  mcu_macro[1][27].iter4 = 0;
  mcu_macro[0][27].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][27].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 28: vol(6)
  // initializing  28_val
  p_28_val[0] = 0;
  gram.xoffset = x_28_val;
  gram.yoffset = y_28_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_28_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 28_val
  mem_init.xmin1 = reduction_28;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_28
  mcu_macro[0][28].xmin2 = reduction_28;
  mcu_macro[1][28].xmin2 = reduction_28;
  mcu_macro[0][28].ymin2 = 0;
  mcu_macro[1][28].ymin2 = 0;
  mcu_macro[0][28].xmin3 = 0;
  mcu_macro[1][28].xmin3 = 0;
  mcu_macro[0][28].ymin3 = 0;
  mcu_macro[1][28].ymin3 = 0;
  mcu_macro[0][28].xmin1 = imagelet_6;
  mcu_macro[1][28].xmin1 = imagelet_6;
  mcu_macro[0][28].ymin1 = 0;
  mcu_macro[1][28].ymin1 = 0;
  mcu_macro[0][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][28].iter2 = imagelet_size;
  mcu_macro[1][28].iter2 = imagelet_size;
  mcu_macro[0][28].iter3 = 0;
  mcu_macro[1][28].iter3 = 0;
  mcu_macro[0][28].iter4 = 0;
  mcu_macro[1][28].iter4 = 0;
  mcu_macro[0][28].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][28].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // output copy 6 -> 5
  mcu_macro[0][29].xmin1 = imagelet_6;
  mcu_macro[1][29].xmin1 = imagelet_6;
  mcu_macro[0][29].ymin1 = 0;
  mcu_macro[1][29].ymin1 = 0;
  mcu_macro[0][29].xmin2 = imagelet_io_5_0;
  mcu_macro[1][29].xmin2 = imagelet_io_5_1;
  mcu_macro[0][29].ymin2 = 0;
  mcu_macro[1][29].ymin2 = 0;
  mcu_macro[0][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][29].iter2 = imagelet_size;
  mcu_macro[1][29].iter2 = imagelet_size;
  mcu_macro[0][29].iter3 = 0;
  mcu_macro[1][29].iter3 = 0;
  mcu_macro[0][29].iter4 = 0;
  mcu_macro[1][29].iter4 = 0;
  mcu_macro[0][29].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][29].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_12
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for imin
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for out_11
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imZone1
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for imZone2
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;
  // - imagelet 3 is o2 for imZone3
  tile_out[0][2].x = imagelet_io_3_0;
  tile_out[0][2].y = 0;
  tile_out[1][2].x = imagelet_io_3_1;
  tile_out[1][2].y = 0;
  // - imagelet 4 is o3 for imWork1
  tile_out[0][3].x = imagelet_io_4_0;
  tile_out[0][3].y = 0;
  tile_out[1][3].x = imagelet_io_4_1;
  tile_out[1][3].y = 0;
  // - imagelet 5 is o4 for out
  tile_out[0][4].x = imagelet_io_5_0;
  tile_out[0][4].y = 0;
  tile_out[1][4].x = imagelet_io_5_1;
  tile_out[1][4].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 11;
  mcu_instr.borderRight  = 11;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 5;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 3;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 30;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, o2, o3, o4, i0, i1, i2);

  // extract measures
  // get measure vol result from reduction_28
  redter.xres = reduction_28;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_28;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po20 = (int32_t) red_28[0];

  return ret;
}


// dag 2: 3 ops and 0 copies, optimized to 3 ops and 0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 22
 * - communication: 96
 */
freia_status main_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 3;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: >(3,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_SUP3;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for imWork1
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


// dag 3: 7 ops and 0 copies, optimized to 7 ops and 0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 4 input images, 1 output image
 * 7 image operations in dag
 * dag length is 5, dag width is 4
 * costs in cycles per imagelet row:
 * - computation: 24
 * - communication: 160
 */
freia_status main_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const freia_data2d * i3,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 2;
  const int32_t y_3 = 0;
  // operation 5 parameters
  int16_t p_5[1];
  const int32_t x_5 = 3;
  const int32_t y_5 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][7];
  terapix_tile_info tile_in[2][4];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 4 double buffer imagelets
  int imagelet_size = 128;
  int imagelet_1 = 0;
  int imagelet_2 = 128;
  int imagelet_3 = 256;
  int imagelet_4 = 384;
  int imagelet_5 = 512;
  int imagelet_6 = 640;
  int imagelet_7 = 768;
  int imagelet_8 = 896;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_7;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_8;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: <.(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi5;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_INF_CONST;
  // 1: <.(2) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi6;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_INF_CONST;
  // 2: >(2,1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_2_0;
  mcu_macro[1][2].xmin3 = imagelet_io_2_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_SUP3;
  // 3: <.(3) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_3_0;
  mcu_macro[1][3].xmin1 = imagelet_io_3_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_3_0;
  mcu_macro[1][3].xmin2 = imagelet_io_3_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi7;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_INF_CONST;
  // 4: >(3,2) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_3_0;
  mcu_macro[1][4].xmin1 = imagelet_io_3_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = imagelet_io_3_0;
  mcu_macro[1][4].xmin3 = imagelet_io_3_1;
  mcu_macro[0][4].ymin3 = 0;
  mcu_macro[1][4].ymin3 = 0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_SUP3;
  // 5: <.(4) -> 4
  mcu_macro[0][5].xmin1 = imagelet_io_4_0;
  mcu_macro[1][5].xmin1 = imagelet_io_4_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_4_0;
  mcu_macro[1][5].xmin2 = imagelet_io_4_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  // copy of operation 5 parameters
  p_5[0] = pi8;
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][5].xmin3 = x_5;
  mcu_macro[1][5].xmin3 = x_5;
  mcu_macro[0][5].ymin3 = y_5;
  mcu_macro[1][5].ymin3 = y_5;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_INF_CONST;
  // 6: >(4,3) -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_4_0;
  mcu_macro[1][6].xmin1 = imagelet_io_4_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_3_0;
  mcu_macro[1][6].xmin2 = imagelet_io_3_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_io_1_0;
  mcu_macro[1][6].xmin3 = imagelet_io_1_1;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_SUP3;


  // inputs:
  // - imagelet 1 is i0 for imZone1
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for imZone2
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for imZone3
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;
  // - imagelet 4 is i3 for out
  tile_in[0][3].x = imagelet_io_4_0;
  tile_in[0][3].y = 0;
  tile_in[1][3].x = imagelet_io_4_1;
  tile_in[1][3].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 4;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 7;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1, i2, i3);

  // extract measures

  return ret;
}


! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   main_helper_1_0_0(imWork1, out, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0054*/
   main_helper_1_0_1(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0064*/
   main_helper_1_0_2(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0074*/
   main_helper_1_0_3(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0084*/
   main_helper_1_0_4(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0094*/
   main_helper_1_0_5(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0104*/
   main_helper_1_0_6(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0114*/
   main_helper_1_0_7(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0124*/
   main_helper_1_0_8(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0135*/
   main_helper_1_0_9(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north, neighborTransposed_0, neighborTransposed_1);          /*0146*/

   main_helper_1_0_10(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0158*/
   main_helper_1_0_11(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0169*/
   main_helper_1_0_12(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0180*/
   main_helper_1_0_13(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0191*/
   main_helper_1_0_14(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0202*/
   main_helper_1_0_15(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0213*/
   main_helper_1_0_16(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0224*/
   main_helper_1_0_17(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0235*/
   main_helper_1_0_18(imZone1, imZone2, imZone3, imWork1, out, imWork1, imin, out, neighborTransposed_0, neighborTransposed_1, 105, 255, 1, 60, 105, 1, 100, 150, 1, freia_morpho_kernel_8c, &volcurrent);     /*0246*/
   
   
   
   
   
   
   
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      main_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volcurrent);       /*0477*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);          /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   main_helper_1_0_0(imWork1, out, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0054*/
   main_helper_1_0_1(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0064*/
   main_helper_1_0_2(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0074*/
   main_helper_1_0_3(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0084*/
   main_helper_1_0_4(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0094*/
   main_helper_1_0_5(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0104*/
   main_helper_1_0_6(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0114*/
   main_helper_1_0_7(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0124*/
   main_helper_1_0_8(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);         /*0135*/
   main_helper_1_0_9(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north, neighborTransposed_0, neighborTransposed_1);          /*0146*/

   main_helper_1_0_10(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0158*/
   main_helper_1_0_11(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0169*/
   main_helper_1_0_12(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0180*/
   main_helper_1_0_13(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0191*/
   main_helper_1_0_14(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0202*/
   main_helper_1_0_15(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0213*/
   main_helper_1_0_16(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0224*/
   main_helper_1_0_17(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);        /*0235*/
   main_helper_1_0_18(imZone1, imZone2, imZone3, imWork1, out, imWork1, imin, out, neighborTransposed_0, neighborTransposed_1, 105, 255, 1, 60, 105, 1, 100, 150, 1, freia_morpho_kernel_8c, &volcurrent);     /*0246*/
   
   
   
   
   
   
   
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      main_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volcurrent);       /*0477*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);          /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}
#
# OPENCL
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out_203"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}
// graph for dag "main_helper_1_0" of module "main" in dot format
digraph "main_helper_1_0" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "main_helper_1_0_1" of module "main" in dot format
digraph "main_helper_1_0_1" {
  // inputs
  "imWork1_3" [shape=circle];
  "imin" [shape=circle];
  "out_2" [shape=circle];

  // outputs
  "imClose" [shape=circle];
  "imTophat" [shape=circle];

  // computation vertices
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "imTophat";
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "461 -" [label="imClose"];
  "460 <" -> "imClose";
  "out_2" -> "460 <";
  "imWork1_3" -> "460 <";
}
// graph for dag "main_helper_1_0_3" of module "main" in dot format
digraph "main_helper_1_0_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];

  // outputs
  "imWork1" [shape=circle];

  // computation vertices
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "imZone3" -> "468 >";
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "imZone2" -> "467 >";
  "imZone1" -> "467 >";
}
// graph for dag "main_helper_2_0" of module "main" in dot format
digraph "main_helper_2_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "main_helper_3_0" of module "main" in dot format
digraph "main_helper_3_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out_203"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}
// graph for dag "main_helper_3_0_0" of module "main" in dot format
digraph "main_helper_3_0_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <." [shape=trapezium,orientation=270];
  "487 <." -> "491 >" [label="out_203"];
  "out" -> "487 <.";
  "486 <." [shape=trapezium,orientation=270];
  "486 <." -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <.";
  "485 <." [shape=trapezium,orientation=270];
  "485 <." -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <.";
  "484 <." [shape=trapezium,orientation=270];
  "484 <." -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <.";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"

// FREIA OpenCL runtime helper
extern freia_status freia_op_compile_kernel(
   const char*, const char*, const char*, cl_kernel *);

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 0+1 copies

// dag 1: 411 ops and 0 copies, optimized to 411 ops and 0+0 copies

// hold kernels formain_helper_1_0_1
static cl_kernel main_helper_1_0_1_kernel[2];

// compile kernels for main_helper_1_0_1
static freia_status main_helper_1_0_1_compile(void)
{
  // OpenCL source for main_helper_1_0_1
  const char * main_helper_1_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_helper_1_0_1\n"
    "KERNEL void main_helper_1_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width,\n"
    "  int pitch)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    // pixel computations\n"
    "    PIXEL t460 = INF_OP(in0, in2);\n"
    "    PIXEL t461 = SUB_OP(t460, in1);\n"
    "    // set output pixels\n"
    "    p0[i] = t460;\n"
    "    p1[i] = t461;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_helper_1_0_1_source, "main_helper_1_0_1", "-DPIXEL8", &main_helper_1_0_1_kernel[0]);
  err |= freia_op_compile_kernel(main_helper_1_0_1_source, "main_helper_1_0_1", "-DPIXEL16", &main_helper_1_0_1_kernel[1]);
  return err;
}

// helper function main_helper_1_0_1
freia_status main_helper_1_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = main_helper_1_0_1_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = main_helper_1_0_1_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_o1 = freia_common_data_get_offset(o1);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);
  cl_int ofs_i2 = freia_common_data_get_offset(i2);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[o1->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_o1);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_mem), &pool[i2->clId]);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &ofs_i2);
  err |= clSetKernelArg(kernel, 10, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 11, sizeof(cl_int), &pitch);

  // call kernel main_helper_1_0_1
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}

// hold kernels formain_helper_1_0_3
static cl_kernel main_helper_1_0_3_kernel[2];

// compile kernels for main_helper_1_0_3
static freia_status main_helper_1_0_3_compile(void)
{
  // OpenCL source for main_helper_1_0_3
  const char * main_helper_1_0_3_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_helper_1_0_3\n"
    "KERNEL void main_helper_1_0_3(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width,\n"
    "  int pitch)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    // pixel computations\n"
    "    PIXEL t467 = SUP_OP(in0, in1);\n"
    "    PIXEL t468 = SUP_OP(t467, in2);\n"
    "    PIXEL t469 = NOTU_OP(t468);\n"
    "    // set output pixels\n"
    "    p0[i] = t469;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_helper_1_0_3_source, "main_helper_1_0_3", "-DPIXEL8", &main_helper_1_0_3_kernel[0]);
  err |= freia_op_compile_kernel(main_helper_1_0_3_source, "main_helper_1_0_3", "-DPIXEL16", &main_helper_1_0_3_kernel[1]);
  return err;
}

// helper function main_helper_1_0_3
freia_status main_helper_1_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = main_helper_1_0_3_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = main_helper_1_0_3_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);
  cl_int ofs_i2 = freia_common_data_get_offset(i2);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_mem), &pool[i2->clId]);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &ofs_i2);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &pitch);

  // call kernel main_helper_1_0_3
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}

// dag 2: 3 ops and 0 copies, optimized to 3 ops and 0+0 copies

// dag 3: 7 ops and 0 copies, optimized to 7 ops and 0+0 copies

// hold kernels formain_helper_3_0_0
static cl_kernel main_helper_3_0_0_kernel[2];

// compile kernels for main_helper_3_0_0
static freia_status main_helper_3_0_0_compile(void)
{
  // OpenCL source for main_helper_3_0_0
  const char * main_helper_3_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_helper_3_0_0\n"
    "KERNEL void main_helper_3_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  GLOBAL PIXEL * i3, // const?\n"
    "  int ofs_i3,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2;\n"
    "  GLOBAL PIXEL * j3 = i3 + ofs_i3;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in3 = j3[i];\n"
    "    // pixel computations\n"
    "    PIXEL t484 = INF_OP(in0, c0);\n"
    "    PIXEL t485 = INF_OP(in1, c1);\n"
    "    PIXEL t486 = INF_OP(in2, c2);\n"
    "    PIXEL t487 = INF_OP(in3, c3);\n"
    "    PIXEL t489 = SUP_OP(t485, t484);\n"
    "    PIXEL t490 = SUP_OP(t486, t489);\n"
    "    PIXEL t491 = SUP_OP(t487, t490);\n"
    "    // set output pixels\n"
    "    p0[i] = t491;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_helper_3_0_0_source, "main_helper_3_0_0", "-DPIXEL8", &main_helper_3_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_helper_3_0_0_source, "main_helper_3_0_0", "-DPIXEL16", &main_helper_3_0_0_kernel[1]);
  return err;
}

// helper function main_helper_3_0_0
freia_status main_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const freia_data2d * i3,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = main_helper_3_0_0_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = main_helper_3_0_0_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);
  cl_int ofs_i2 = freia_common_data_get_offset(i2);
  cl_int ofs_i3 = freia_common_data_get_offset(i3);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_mem), &pool[i2->clId]);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &ofs_i2);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_mem), &pool[i3->clId]);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &ofs_i3);
  err |= clSetKernelArg(kernel, 10, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 11, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 12, sizeof(cl_int), &c0);
  err |= clSetKernelArg(kernel, 13, sizeof(cl_int), &c1);
  err |= clSetKernelArg(kernel, 14, sizeof(cl_int), &c2);
  err |= clSetKernelArg(kernel, 15, sizeof(cl_int), &c3);

  // call kernel main_helper_3_0_0
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl for dag 1

// opencl function main_helper_1_0_1
KERNEL void main_helper_1_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width,
  int pitch)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * p1 = o1 + ofs_o1;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  GLOBAL PIXEL * j2 = i2 + ofs_i2;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];
    // pixel computations
    PIXEL t460 = INF_OP(in0, in2);
    PIXEL t461 = SUB_OP(t460, in1);
    // set output pixels
    p0[i] = t460;
    p1[i] = t461;
  }
}

// opencl function main_helper_1_0_3
KERNEL void main_helper_1_0_3(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width,
  int pitch)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  GLOBAL PIXEL * j2 = i2 + ofs_i2;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];
    // pixel computations
    PIXEL t467 = SUP_OP(in0, in1);
    PIXEL t468 = SUP_OP(t467, in2);
    PIXEL t469 = NOTU_OP(t468);
    // set output pixels
    p0[i] = t469;
  }
}

// opencl for dag 2

// opencl for dag 3

// opencl function main_helper_3_0_0
KERNEL void main_helper_3_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  GLOBAL PIXEL * i3, // const?
  int ofs_i3,
  int width,
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  GLOBAL PIXEL * j2 = i2 + ofs_i2;
  GLOBAL PIXEL * j3 = i3 + ofs_i3;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];
    PIXEL in3 = j3[i];
    // pixel computations
    PIXEL t484 = INF_OP(in0, c0);
    PIXEL t485 = INF_OP(in1, c1);
    PIXEL t486 = INF_OP(in2, c2);
    PIXEL t487 = INF_OP(in3, c3);
    PIXEL t489 = SUP_OP(t485, t484);
    PIXEL t490 = SUP_OP(t486, t489);
    PIXEL t491 = SUP_OP(t487, t490);
    // set output pixels
    p0[i] = t491;
  }
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   // hardware accelerator generated variable
   freia_data2d *imWork1_3 = 0;
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   imWork1_3 = freia_common_create_data(imWork1->bpp, imWork1->widthWa, imWork1->heightWa);
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1_3, imWork1, neighborTransposed_0);       /*0254*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   main_helper_1_0_1(imClose, imTophat, imWork1_3, imin, out);          /*0460*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   main_helper_1_0_3(imWork1, imZone1, imZone2, imZone3);               /*0467*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);          /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(imWork1_3);
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const  int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};                /*0021*/
   static const  int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};               /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   // hardware accelerator generated variable
   freia_data2d *imWork1_3 = 0;
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   imWork1_3 = freia_common_create_data(imWork1->bpp, imWork1->widthWa, imWork1->heightWa);
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1_3, imWork1, neighborTransposed_0);       /*0254*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   main_helper_1_0_1(imClose, imTophat, imWork1_3, imin, out);          /*0460*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   main_helper_1_0_3(imWork1, imZone1, imZone2, imZone3);               /*0467*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);          /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(imWork1_3);
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}
#
# FREIA COMPILATION DONE
#

