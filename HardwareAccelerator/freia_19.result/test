
! initial function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(t, i);                                               /*0011*/
   freia_aipo_copy(o, t);                                               /*0012*/

   freia_common_destruct_data(t);                                       /*0014*/

   return FREIA_OK;                                                     /*0016*/
}

! graphs

// graph for dag "dag_0" of module "freia_19" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 =" [shape=circle];
  "12 =" -> "o";
  "11 =" [shape=circle];
  "11 =" -> "12 =" [label="t"];
  "i" -> "11 =";
}
// graph for dag "dag_cleaned_0" of module "freia_19" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 =" [shape=circle];
  "12 =" -> "o";
  "i" -> "12 =";
}
// graph for dag "freia_19_helper_0_0" of module "freia_19" in dot format
digraph "freia_19_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 =" [shape=circle];
  "12 =" -> "o";
  "i" -> "12 =";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_19
freia_status freia_19_helper_0_0_0(freia_data2d * o0, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0

  // output image o on 0
  // o [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   // one useless copy
   // t = i
   // o = t
   freia_19_helper_0_0_0(o, i);                                         /*0012*/

   return FREIA_OK;                                                     /*0016*/
}
