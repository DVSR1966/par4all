#
# AIPO
#
#
# compile generated freia_14
#

! initial function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_aipo_set_constant(t, c);                                       /*0010*/
   freia_aipo_add(o, t, t);                                             /*0011*/

   freia_common_destruct_data(t);                                       /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_14" in dot format
// DAG "dag_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_14" in dot format
// DAG "dag_cleaned_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}

! updated function for

freia_status freia_14(freia_data2d *o, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_aipo_set_constant(t, c);                                       /*0010*/
   freia_aipo_add(o, t, t);                                             /*0011*/

   freia_common_destruct_data(t);                                       /*0013*/
   return FREIA_OK;                                                     /*0014*/
}
#
# SPOC
#

! initial function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_aipo_set_constant(t, c);                                       /*0010*/
   freia_aipo_add(o, t, t);                                             /*0011*/

   freia_common_destruct_data(t);                                       /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_14" in dot format
// DAG "dag_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_14" in dot format
// DAG "dag_cleaned_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "freia_14_spoc_helper_0_0" of module "freia_14" in dot format
// DAG "freia_14_spoc_helper_0_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_14_spoc_helper_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_14
freia_status freia_14_spoc_helper_0_0_0(
  freia_data2d * o0,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // alu 10 set_constant stage 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`t [0 alu] -> [1 alu] 11 add
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t [1 input 0] -> [1 alu] 11 add
  // nope
  // 0`t [0 alu] -> [1 alu] 11 add
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`t [1 input 1] -> [1 alu] 11 add
  // nope
  // alu 11 add stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image o on 0
  // o [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, NULL, NULL);

  return ret;
}

! updated function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_14_spoc_helper_0_0_0(o, c);                                    /*0010*/

   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_14_spoc_helper_0_0_0(o, c);                                    /*0010*/

   return 0;                                                            /*0014*/
}
#
# TERAPIX
#

! initial function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_aipo_set_constant(t, c);                                       /*0010*/
   freia_aipo_add(o, t, t);                                             /*0011*/

   freia_common_destruct_data(t);                                       /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_14" in dot format
// DAG "dag_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_14" in dot format
// DAG "dag_cleaned_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "freia_14_terapix_helper_0_0_0" of module "freia_14" in dot format
// DAG "freia_14_terapix_helper_0_0_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_14_terapix_helper_0_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_14
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 0 input image, 1 output image
 * 2 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 6
 * - communication: 32
 */
freia_status freia_14_terapix_helper_0_0_0(
  freia_data2d * o0,
  int32_t pi1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = o0->heightWa;
  int max_computed_size = 512;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size =
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: C() -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi1;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SET_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SET_CONST;
  // 1: +(1,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ADD3;


  // no input

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 0;
  mcu_instr.in0 = NULL;
  mcu_instr.in1 = NULL;

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0);

  // extract measures

  return ret;
}


! updated function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_14_terapix_helper_0_0_0(o, c);                                 /*0010*/

   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_14_terapix_helper_0_0_0(o, c);                                 /*0010*/

   return 0;                                                            /*0014*/
}
#
# OPENCL
#

! initial function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_aipo_set_constant(t, c);                                       /*0010*/
   freia_aipo_add(o, t, t);                                             /*0011*/

   freia_common_destruct_data(t);                                       /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_14" in dot format
// DAG "dag_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_14" in dot format
// DAG "dag_cleaned_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "freia_14_opencl_helper_0_0" of module "freia_14" in dot format
// DAG "freia_14_opencl_helper_0_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_14_opencl_helper_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}
// graph for dag "freia_14_opencl_helper_0_0_0" of module "freia_14" in dot format
// DAG "freia_14_opencl_helper_0_0_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_14_opencl_helper_0_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 +" [shape=trapezium,orientation=270];
  "11 +" -> "o";
  "10 C" [shape=trapezium,orientation=270];
  "10 C" -> "11 +" [label="t"];
  "10 C" -> "11 +" [label="t"];
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0+0 copies

// hold kernels for freia_14_opencl_helper_0_0_0
static cl_kernel freia_14_opencl_helper_0_0_0_kernel[2];

// compile kernels for freia_14_opencl_helper_0_0_0
static freia_status freia_14_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for freia_14_opencl_helper_0_0_0
  const char * freia_14_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_14_opencl_helper_0_0_0\n"
    "KERNEL void freia_14_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  int width, // of the working area, vs image below\n"
    "  int pitch,\n"
    "  int c0)\n"
    "{\n"
    "  // get id & compute global image shift\n"
    "  int threadid = get_global_id(0);\n"
    "  int shift = pitch*threadid;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "\n"
    "  // thread's pixel loop\n"
    "  int i;\n"
    "  for (i=0; i<width; i++)\n"
    "  {\n"
    "    // pixel computations\n"
    "    PIXEL t10 = PIXEL_SET(c0);\n"
    "    PIXEL t11 = PIXEL_ADD(t10, t10);\n"
    "    // set output pixels\n"
    "    p0[i] = t11;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_14_opencl_helper_0_0_0_source, "freia_14_opencl_helper_0_0_0", "-DPIXEL8", &freia_14_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(freia_14_opencl_helper_0_0_0_source, "freia_14_opencl_helper_0_0_0", "-DPIXEL16", &freia_14_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function freia_14_opencl_helper_0_0_0
freia_status freia_14_opencl_helper_0_0_0(
  freia_data2d * o0,
  int32_t c0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_14_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel = freia_14_opencl_helper_0_0_0_kernel[bpp];

  // call kernel freia_14_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 1, 0, 1, 0, o0, c0);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_14

// opencl for dag 0

// opencl function freia_14_opencl_helper_0_0_0
KERNEL void freia_14_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  int width, // of the working area, vs image below
  int pitch,
  int c0)
{
  // get id & compute global image shift
  int threadid = get_global_id(0);
  int shift = pitch*threadid;

  // get input & output image pointers
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;

  // thread's pixel loop
  int i;
  for (i=0; i<width; i++)
  {
    // pixel computations
    PIXEL t10 = PIXEL_SET(c0);
    PIXEL t11 = PIXEL_ADD(t10, t10);
    // set output pixels
    p0[i] = t11;
  }
}

! updated function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_14_opencl_helper_0_0_0(o, c);                                  /*0010*/

   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_14(freia_data2d *o, int32_t c)
{
   // 2 alu to alu paths
   // t = h()
   // o = t + t
   freia_14_opencl_helper_0_0_0(o, c);                                  /*0010*/

   return 0;                                                            /*0014*/
}
#
# FREIA COMPILATION DONE
#

