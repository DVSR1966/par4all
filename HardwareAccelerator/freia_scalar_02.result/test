#
# SPOC
#

! initial function

freia_status freia_scalar_02(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t *pmax)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   // dependency with a dereferencement
   freia_aipo_add(tmp, i0, i1);                                         /*0008*/
   freia_aipo_global_max(tmp, pmax);                                    /*0009*/
   freia_aipo_threshold(o, tmp, 10, *pmax, false);                      /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_02" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 max" [shape=diamond];
  "9 max" -> "10 thr" [arrowhead=empty,label="pmax"];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "10 thr" [label="tmp"];
  "8 +" -> "9 max" [label="tmp"];
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_02" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 max" [shape=diamond];
  "9 max" -> "10 thr" [arrowhead=empty,label="pmax"];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "10 thr" [label="tmp"];
  "8 +" -> "9 max" [label="tmp"];
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_scalar_02_helper_0_0" of module "freia_scalar_02" in dot format
digraph "freia_scalar_02_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "9 max" [shape=diamond];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 max" [label="tmp"];
  "8 +" -> "tmp";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_scalar_02_helper_0_1" of module "freia_scalar_02" in dot format
digraph "freia_scalar_02_helper_0_1" {
  // inputs
  "tmp" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "tmp" -> "10 thr";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_scalar_02
freia_status freia_scalar_02_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  int32_t * po0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 8 add
  // nope
  // i1 [0 input 1] -> [0 alu] 8 add
  // nope
  // alu 8 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;

  // 0`tmp [0 alu] -> [0 measure 0] 8 add
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;


  // output image 0`tmp on 0
  // 0`tmp [0 measure 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`tmp [0 output 0] -> [7 output 0] 0 null
  // 0`tmp [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tmp [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tmp [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tmp [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tmp [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tmp [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tmp [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 9 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_02
freia_status freia_scalar_02_helper_0_1_0(freia_data2d * o0, freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tmp [0 input 0] -> [0 threshold 0] 10 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 10 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // output image o on 0
  // o [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_scalar_02(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t *pmax)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   // dependency with a dereferencement
   freia_scalar_02_helper_0_0_0(tmp, i0, i1, pmax);                     /*0008*/
   freia_scalar_02_helper_0_1_0(o, tmp, 10, *pmax, false);              /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}
#
# TERAPIX
#

! initial function

freia_status freia_scalar_02(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t *pmax)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   // dependency with a dereferencement
   freia_aipo_add(tmp, i0, i1);                                         /*0008*/
   freia_aipo_global_max(tmp, pmax);                                    /*0009*/
   freia_aipo_threshold(o, tmp, 10, *pmax, false);                      /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_02" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 max" [shape=diamond];
  "9 max" -> "10 thr" [arrowhead=empty,label="pmax"];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "10 thr" [label="tmp"];
  "8 +" -> "9 max" [label="tmp"];
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_02" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 max" [shape=diamond];
  "9 max" -> "10 thr" [arrowhead=empty,label="pmax"];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "10 thr" [label="tmp"];
  "8 +" -> "9 max" [label="tmp"];
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_scalar_02_helper_0_0" of module "freia_scalar_02" in dot format
digraph "freia_scalar_02_helper_0_0" {
  // inputs
  "tmp" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "tmp" -> "10 thr";
}
// graph for dag "freia_scalar_02_helper_0_1" of module "freia_scalar_02" in dot format
digraph "freia_scalar_02_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "9 max" [shape=diamond];
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 max" [label="tmp"];
  "8 +" -> "tmp";
  "i1" -> "8 +";
  "i0" -> "8 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_scalar_02
 * 1 input image, 1 output image
 * 2 image operations in dag
 * dag length is 2, dag width is 1
 * cost is 5 cycles per imagelet row
 */
freia_status freia_scalar_02_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  terapix_mcu_instr mcu_instr[1];

  // imagelet definitions...
  int imagelet_size = 512;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: thr(1) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_1;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  p_0[1] = pi3;
  p_0[2] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_THRESHOLD;

  // inputs:
  // - imagelet 1 is i0 for tmp

  // outputs:
  // - imagelet 1 is o0 for o

  // double buffer management:
  // - buffer 1/2

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_1i_1o(&param, o0, i0);


  return ret;
}


/* FREIA terapix helper function for module freia_scalar_02
 * 2 input images, 1 output image
 * 4 image operations in dag
 * dag length is 3, dag width is 2
 * cost is 7 cycles per imagelet row
 */
freia_status freia_scalar_02_helper_0_1(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1,
  int32_t * po3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  terapix_mcu_instr mcu_instr[2];

  // imagelet definitions...
  int imagelet_size = 255;
  int imagelet_1 = 0;
  int imagelet_2 = 255;
  int imagelet_3 = 510;
  int imagelet_4 = 765;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: +(1,2) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_2;
  mcu_instr[0].macrocode.ymin2 = 0;
  mcu_instr[0].macrocode.xmin3 = imagelet_1;
  mcu_instr[0].macrocode.ymin3 = 0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_ADD;
  // set measure max at 1023
  // 1: max(1)
  mcu_instr[1].macrocode.xmin1 = imagelet_1;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_MAX?;

  // inputs:
  // - imagelet 1 is i0 for i0
  // - imagelet 2 is i1 for i1

  // outputs:
  // - imagelet 1 is o0 for tmp

  // double buffer management:
  // - buffer 1/3
  // - buffer 2/4

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_2i_1o(&param, o0, i0, i1);

  // get measure max result from 1023

  return ret;
}


! updated function

freia_status freia_scalar_02(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t *pmax)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   // dependency with a dereferencement
   freia_scalar_02_helper_0_1(tmp, i0, i1, pmax);                       /*0008*/
   freia_scalar_02_helper_0_0(o, tmp, 10, *pmax, false);                /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

