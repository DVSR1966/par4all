#
# AIPO
#

! initial function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0009*/
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_aipo_mul(t1, i0, i1);                                          /*0015*/
   freia_aipo_and(t2, i0, i1);                                          /*0016*/
   freia_aipo_or(o, t1, t2);                                            /*0017*/

   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_06" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}
// graph for dag "dag_cleaned_0" of module "freia_06" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}

! updated function for

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0009*/
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_aipo_mul(t1, i0, i1);                                          /*0015*/
   freia_aipo_and(t2, i0, i1);                                          /*0016*/
   freia_aipo_or(o, t1, t2);                                            /*0017*/

   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}
#
# SPOC
#

! initial function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0009*/
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_aipo_mul(t1, i0, i1);                                          /*0015*/
   freia_aipo_and(t2, i0, i1);                                          /*0016*/
   freia_aipo_or(o, t1, t2);                                            /*0017*/

   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_06" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}
// graph for dag "dag_cleaned_0" of module "freia_06" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}
// graph for dag "freia_06_helper_0_0" of module "freia_06" in dot format
digraph "freia_06_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t1" [shape=circle];

  // computation vertices
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "t1";
  "i1" -> "15 *";
  "i0" -> "15 *";
}
// graph for dag "freia_06_helper_0_1" of module "freia_06" in dot format
digraph "freia_06_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t2" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "t2";
  "i1" -> "16 &";
  "i0" -> "16 &";
}
// graph for dag "freia_06_helper_0_2" of module "freia_06" in dot format
digraph "freia_06_helper_0_2" {
  // inputs
  "t1" [shape=circle];
  "t2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "t2" -> "17 |";
  "t1" -> "17 |";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_06
freia_status freia_06_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 15 mul
  // nope
  // i1 [0 input 1] -> [0 alu] 15 mul
  // nope
  // alu 15 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image 0`t1 on 0
  // 0`t1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t1 [0 output 0] -> [7 output 0] 0 null
  // 0`t1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`t1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_06
freia_status freia_06_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 16 and
  // nope
  // i1 [0 input 1] -> [0 alu] 16 and
  // nope
  // alu 16 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`t2 on 0
  // 0`t2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t2 [0 output 0] -> [7 output 0] 0 null
  // 0`t2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`t2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_06
freia_status freia_06_helper_0_2_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t1 [0 input 0] -> [0 alu] 17 or
  // nope
  // 0`t2 [0 input 1] -> [0 alu] 17 or
  // nope
  // alu 17 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0009*/
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_06_helper_0_0_0(t1, i0, i1);                                   /*0015*/
   freia_06_helper_0_1_0(t2, i0, i1);                                   /*0016*/
   freia_06_helper_0_2_0(o, t1, t2);                                    /*0017*/

   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! cleaned up function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0009*/
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_06_helper_0_0_0(t1, i0, i1);                                   /*0015*/
   freia_06_helper_0_1_0(t2, i0, i1);                                   /*0016*/
   freia_06_helper_0_2_0(o, t1, t2);                                    /*0017*/

   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return 0;                                                            /*0022*/
}
#
# TERAPIX
#

! initial function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0009*/
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_aipo_mul(t1, i0, i1);                                          /*0015*/
   freia_aipo_and(t2, i0, i1);                                          /*0016*/
   freia_aipo_or(o, t1, t2);                                            /*0017*/

   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_06" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}
// graph for dag "dag_cleaned_0" of module "freia_06" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}
// graph for dag "freia_06_helper_0_0" of module "freia_06" in dot format
digraph "freia_06_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "17 |" [shape=trapezium,orientation=270];
  "17 |" -> "o";
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "17 |" [label="t2"];
  "15 *" [shape=trapezium,orientation=270];
  "15 *" -> "17 |" [label="t1"];
  "i1" -> "16 &";
  "i1" -> "15 *";
  "i0" -> "16 &";
  "i0" -> "15 *";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_06
 * 2 input images, 1 output image
 * 5 image operations in dag
 * dag length is 3, dag width is 2
 * cost is 12 cycles per imagelet row
 */
freia_status freia_06_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];

  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: *(1,2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_3;
  mcu_macro[1][0].xmin3 = imagelet_3;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_MUL3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_MUL3;
  // 1: &(1,2) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_2;
  mcu_macro[1][1].xmin3 = imagelet_2;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_AND3;
  // 2: |(3,2) -> 1
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_1_0;
  mcu_macro[1][2].xmin3 = imagelet_io_1_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_OR3;

  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = &tile_out[0];
  mcu_instr.out1 = &tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = &tile_in[0];
  mcu_instr.in1 = &tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = &mcu_macro[0];
  mcu_instr.instr1   = &mcu_macro[1];

  // call terapix runtime
  ret = freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_06_helper_0_0(o, i0, i1);                                      /*0015*/
   
   
   return FREIA_OK;                                                     /*0022*/
}

! cleaned up function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_06_helper_0_0(o, i0, i1);                                      /*0015*/
   
   
   return 0;                                                            /*0022*/
}
#
# FREIA COMPILATION DONE
#

