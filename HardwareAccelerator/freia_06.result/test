
! initial function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t1 = freia_common_create_data(16, 128, 128);
   freia_data2d *t2 = freia_common_create_data(16, 128, 128);
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_aipo_mul(t1, i0, i1);                                          /*0013*/
   freia_aipo_and(t2, i0, i1);                                          /*0014*/
   freia_aipo_or(o, t1, t2);                                            /*0015*/

   freia_common_destruct_data(t1);                                      /*0017*/
   freia_common_destruct_data(t2);                                      /*0018*/

   return FREIA_OK;                                                     /*0020*/
}

! graphs

// graph for dag "dag_0" of module "freia_06" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 |" [shape=trapezium,orientation=270];
  "15 |" -> "o";
  "14 &" [shape=trapezium,orientation=270];
  "14 &" -> "15 |" [label="t2"];
  "13 *" [shape=trapezium,orientation=270];
  "13 *" -> "15 |" [label="t1"];
  "i1" -> "14 &";
  "i1" -> "13 *";
  "i0" -> "14 &";
  "i0" -> "13 *";
}
// graph for dag "dag_cleaned_0" of module "freia_06" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 |" [shape=trapezium,orientation=270];
  "15 |" -> "o";
  "14 &" [shape=trapezium,orientation=270];
  "14 &" -> "15 |" [label="t2"];
  "13 *" [shape=trapezium,orientation=270];
  "13 *" -> "15 |" [label="t1"];
  "i1" -> "14 &";
  "i1" -> "13 *";
  "i0" -> "14 &";
  "i0" -> "13 *";
}
// graph for dag "freia_06_helper_0_0" of module "freia_06" in dot format
digraph "freia_06_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t1" [shape=circle];

  // computation vertices
  "13 *" [shape=trapezium,orientation=270];
  "13 *" -> "t1";
  "i1" -> "13 *";
  "i0" -> "13 *";
}
// graph for dag "freia_06_helper_0_1" of module "freia_06" in dot format
digraph "freia_06_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t2" [shape=circle];

  // computation vertices
  "14 &" [shape=trapezium,orientation=270];
  "14 &" -> "t2";
  "i1" -> "14 &";
  "i0" -> "14 &";
}
// graph for dag "freia_06_helper_0_2" of module "freia_06" in dot format
digraph "freia_06_helper_0_2" {
  // inputs
  "t1" [shape=circle];
  "t2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 |" [shape=trapezium,orientation=270];
  "15 |" -> "o";
  "t2" -> "15 |";
  "t1" -> "15 |";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_06
freia_status freia_06_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 13 mul
  // nope
  // i1 [0 input 1] -> [0 alu] 13 mul
  // nope
  // alu 13 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image 0`t1 on 0
  // 0`t1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_06
freia_status freia_06_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 14 and
  // nope
  // i1 [0 input 1] -> [0 alu] 14 and
  // nope
  // alu 14 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`t2 on 0
  // 0`t2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_06
freia_status freia_06_helper_0_2_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t1 [0 input 0] -> [0 alu] 15 or
  // nope
  // 0`t2 [0 input 1] -> [0 alu] 15 or
  // nope
  // alu 15 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_06(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t1 = freia_common_create_data(16, 128, 128);
   freia_data2d *t2 = freia_common_create_data(16, 128, 128);
   
   // 3 pipeline calls are necessary
   // t1 = i0 * i1
   // t2 = i0 & i1
   // o  = t1 | t2
   freia_06_helper_0_0_0(t1, i0, i1);                                   /*0013*/
   freia_06_helper_0_1_0(t2, i0, i1);                                   /*0014*/
   freia_06_helper_0_2_0(o, t1, t2);                                    /*0015*/

   freia_common_destruct_data(t1);                                      /*0017*/
   freia_common_destruct_data(t2);                                      /*0018*/

   return FREIA_OK;                                                     /*0020*/
}
