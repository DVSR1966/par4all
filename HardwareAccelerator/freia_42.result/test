#
# AIPO
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1"];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}

! updated function for

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# SPOC
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1"];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_helper_0_0" of module "freia_42" in dot format
digraph "freia_42_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i1" [shape=circle];
  "i6" [shape=circle];

  // computation vertices
  "42 E8" [shape=box];
  "42 E8" -> "i6";
  "i4" -> "42 E8";
  "36 E8" [shape=box];
  "36 E8" -> "i1";
  "i0" -> "36 E8";
}
// graph for dag "freia_42_helper_0_1" of module "freia_42" in dot format
digraph "freia_42_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "i3" [shape=circle];
  "i1" [shape=circle];

  // computation vertices
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "i1";
  "i1" -> "37 -";
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "35 D8" -> "i3";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_helper_0_2" of module "freia_42" in dot format
digraph "freia_42_helper_0_2" {
  // inputs
  "i1" [shape=circle];
  "i2" [shape=circle];

  // outputs
  "i1" [shape=circle];

  // computation vertices
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "i1";
  "i1" -> "38 -|";
  "i2" -> "38 -|";
}
// graph for dag "freia_42_helper_0_3" of module "freia_42" in dot format
digraph "freia_42_helper_0_3" {
  // inputs
  "i3" [shape=circle];
  "i6" [shape=circle];

  // outputs
  "i6" [shape=circle];

  // computation vertices
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "i6";
  "i6" -> "43 -";
  "i3" -> "43 -";
}
// graph for dag "freia_42_helper_0_4" of module "freia_42" in dot format
digraph "freia_42_helper_0_4" {
  // inputs
  "i1" [shape=circle];
  "i6" [shape=circle];

  // outputs
  "i6" [shape=circle];

  // computation vertices
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "i6";
  "i6" -> "44 -|";
  "i1" -> "44 -|";
}
// graph for dag "freia_42_helper_0_5" of module "freia_42" in dot format
digraph "freia_42_helper_0_5" {
  // inputs
  "i1" [shape=circle];
  "i6" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "i1" -> "45 <";
  "i6" -> "45 <";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i0 [0 input 0] -> [0 poc 0] 36 erode_8c
  // nope
  // poc 36 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`i4 [0 input 1] -> [0 poc 1] 42 erode_8c
  // nope
  // poc 42 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`i1 on 0 and image 0`i6 on 1
  // 0`i1 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i1 [0 output 0] -> [7 output 0] 0 null
  // 0`i1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`i6 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`i6 [0 output 1] -> [7 output 1] 0 null
  // 0`i6 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`i6 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`i6 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`i6 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`i6 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`i6 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`i6 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_helper_0_1_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i0 [0 input 0] -> [0 poc 0] 35 dilate_8c
  // nope
  // poc 35 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`i3 [0 poc 0] -> [0 alu] 37 sub
  // nope
  // 0`i1 [0 input 1] -> [0 alu] 37 sub
  // nope
  // alu 37 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`i3 on 0 and image 0`i1 on 1
  // 0`i3 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i3 [0 output 0] -> [7 output 0] 0 null
  // 0`i3 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i3 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i3 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i3 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i3 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i3 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i3 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`i1 [0 alu] -> [0 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i1 [0 output 1] -> [7 output 1] 0 null
  // 0`i1 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`i1 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`i1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`i1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`i1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`i1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`i1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_helper_0_2_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i1 [0 input 0] -> [0 alu] 38 absdiff
  // nope
  // 0`i2 [0 input 1] -> [0 alu] 38 absdiff
  // nope
  // alu 38 absdiff stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN1_IN0;


  // output image 0`i1 on 0
  // 0`i1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i1 [0 output 0] -> [7 output 0] 0 null
  // 0`i1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_helper_0_3_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i3 [0 input 0] -> [0 alu] 43 sub
  // nope
  // 0`i6 [0 input 1] -> [0 alu] 43 sub
  // nope
  // alu 43 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`i6 on 0
  // 0`i6 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i6 [0 output 0] -> [7 output 0] 0 null
  // 0`i6 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i6 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i6 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i6 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i6 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i6 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i6 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_helper_0_4_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i1 [0 input 0] -> [0 alu] 44 absdiff
  // nope
  // 0`i6 [0 input 1] -> [0 alu] 44 absdiff
  // nope
  // alu 44 absdiff stage 0
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN0_IN1;


  // output image 0`i6 on 0
  // 0`i6 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i6 [0 output 0] -> [7 output 0] 0 null
  // 0`i6 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i6 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i6 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i6 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i6 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i6 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i6 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_helper_0_5_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i1 [0 input 0] -> [0 alu] 45 inf
  // nope
  // 0`i6 [0 input 1] -> [0 alu] 45 inf
  // nope
  // alu 45 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image 0`i7 on 0
  // 0`i7 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i7 [0 output 0] -> [7 output 0] 0 null
  // 0`i7 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i7 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i7 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i7 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i7 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i7 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i7 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_helper_0_1_0(i3, i1, i0, i1, freia_morpho_kernel_8c);       /*0035*/
   freia_42_helper_0_0_0(i1, i6, i0, i4, freia_morpho_kernel_8c);       /*0036*/
   freia_42_helper_0_2_0(i1, i1, i2);                                   /*0038*/
   freia_42_helper_0_3_0(i6, i3, i6);                                   /*0043*/
   freia_42_helper_0_4_0(i6, i1, i6);                                   /*0044*/
   freia_42_helper_0_5_0(i7, i1, i6);                                   /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! cleaned up function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_helper_0_1_0(i3, i1, i0, i1, freia_morpho_kernel_8c);       /*0035*/
   freia_42_helper_0_0_0(i1, i6, i0, i4, freia_morpho_kernel_8c);       /*0036*/
   freia_42_helper_0_2_0(i1, i1, i2);                                   /*0038*/
   freia_42_helper_0_3_0(i6, i3, i6);                                   /*0043*/
   freia_42_helper_0_4_0(i6, i1, i6);                                   /*0044*/
   freia_42_helper_0_5_0(i7, i1, i6);                                   /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# TERAPIX
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1"];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_helper_0_0_0" of module "freia_42" in dot format
digraph "freia_42_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i1" [shape=circle];
  "i1" [shape=circle];
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "38 -|" -> "44 -|" [label="i1"];
  "38 -|" -> "i1";
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "37 -" -> "i1";
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "i0" -> "35 D8";
  "i0" -> "36 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_42
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 3 input images, 3 output images
 * 8 image operations in dag
 * dag length is 6, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 65
 * - communication: 192
 */
freia_status freia_42_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * i0,
  freia_data2d * i1,
  freia_data2d * i2,
  const int32_t * pi6)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][3];
  terapix_tile_info tile_out[2][3];

  // imagelets definitions:
  // - 5 computation imagelets
  // - 3 double buffer imagelets
  int imagelet_size = 128;
  int imagelet_1 = 0;
  int imagelet_2 = 128;
  int imagelet_3 = 256;
  int imagelet_4 = 384;
  int imagelet_5 = 512;
  int imagelet_6 = 640;
  int imagelet_7 = 768;
  int imagelet_8 = 896;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_6;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_7;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_8;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: E8(1) -> 4
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_4;
  mcu_macro[1][0].xmin2 = imagelet_4;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi6[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(3) -> 5
  mcu_macro[0][1].xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_5;
  mcu_macro[1][1].xmin2 = imagelet_5;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: D8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_3_0;
  mcu_macro[1][2].xmin2 = imagelet_io_3_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: -(3,4) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_3_0;
  mcu_macro[1][3].xmin1 = imagelet_io_3_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_4;
  mcu_macro[1][3].xmin2 = imagelet_4;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_1_0;
  mcu_macro[1][3].xmin3 = imagelet_io_1_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_SUB3;
  // 4: -|(2,1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = imagelet_io_2_0;
  mcu_macro[1][4].xmin3 = imagelet_io_2_1;
  mcu_macro[0][4].ymin3 = 0;
  mcu_macro[1][4].ymin3 = 0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  // 5: -(3,5) -> 5
  mcu_macro[0][5].xmin1 = imagelet_io_3_0;
  mcu_macro[1][5].xmin1 = imagelet_io_3_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_5;
  mcu_macro[1][5].xmin2 = imagelet_5;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_5;
  mcu_macro[1][5].xmin3 = imagelet_5;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_SUB3;
  // 6: -|(2,5) -> 5
  mcu_macro[0][6].xmin1 = imagelet_io_2_0;
  mcu_macro[1][6].xmin1 = imagelet_io_2_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_5;
  mcu_macro[1][6].xmin2 = imagelet_5;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_5;
  mcu_macro[1][6].xmin3 = imagelet_5;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  // 7: <(5,2) -> 3
  mcu_macro[0][7].xmin1 = imagelet_5;
  mcu_macro[1][7].xmin1 = imagelet_5;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_2_0;
  mcu_macro[1][7].xmin2 = imagelet_io_2_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = imagelet_io_3_0;
  mcu_macro[1][7].xmin3 = imagelet_io_3_1;
  mcu_macro[0][7].ymin3 = 0;
  mcu_macro[1][7].ymin3 = 0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_INF3;

  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i2
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for i4
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;

  // outputs:
  // - imagelet 1 is o0 for i1
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for i1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;
  // - imagelet 3 is o2 for i7
  tile_out[0][2].x = imagelet_io_3_0;
  tile_out[0][2].y = 0;
  tile_out[1][2].x = imagelet_io_3_1;
  tile_out[1][2].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 3;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 3;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  ret = freia_cg_template_process(&param, o0, o1, o2, i0, i1, i2);

  // extract measures

  return ret;
}


! updated function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_helper_0_0_0(i1, i1, i7, i0, i2, i4, freia_morpho_kernel_8c);              /*0035*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! cleaned up function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_helper_0_0_0(i1, i1, i7, i0, i2, i4, freia_morpho_kernel_8c);              /*0035*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# FREIA COMPILATION DONE
#

