
! initial function

int copy_00(freia_data2d *o0, freia_data2d *o1, freia_data2d *in)
{
   freia_data2d *a, *b, *c, *d;                                         /*0005*/
   a = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0006*/
   b = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0007*/
   c = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0008*/
   d = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);    /*0009*/
   
   // 1
   freia_aipo_dilate_8c(a, in, freia_morpho_kernel_8c);                 /*0012*/
   freia_aipo_erode_8c(c, in, freia_morpho_kernel_8c);                  /*0013*/
   
   // 2
   freia_aipo_dilate_8c(d, c, freia_morpho_kernel_8c);                  /*0016*/
   freia_aipo_erode_8c(c, c, freia_morpho_kernel_8c);                   /*0017*/
   freia_aipo_dilate_8c(b, a, freia_morpho_kernel_8c);                  /*0018*/
   freia_aipo_erode_8c(a, a, freia_morpho_kernel_8c);                   /*0019*/
   
   // 3
   freia_aipo_sub(o0, b, a);                                            /*0022*/
   freia_aipo_dilate_8c(d, d, freia_morpho_kernel_8c);                  /*0023*/
   freia_aipo_erode_8c(c, c, freia_morpho_kernel_8c);                   /*0024*/
   
   // 4
   freia_aipo_sub(o1, d, c);                                            /*0027*/

   return 0;                                                            /*0029*/
}

! graphs

// graph for dag "copy_00_helper_0_0" of module "copy_00" in dot format
digraph "copy_00_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];

  // computation vertices
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "19 E8" [shape=box];
  "19 E8" -> "22 -" [label="a"];
  "18 D8" [shape=box];
  "18 D8" -> "22 -" [label="b"];
  "12 D8" [shape=box];
  "12 D8" -> "19 E8" [label="a"];
  "12 D8" -> "18 D8" [label="a"];
  "in" -> "12 D8";
}
// graph for dag "copy_00_helper_0_1" of module "copy_00" in dot format
digraph "copy_00_helper_0_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o1" [shape=circle];

  // computation vertices
  "27 -" [shape=trapezium,orientation=270];
  "27 -" -> "o1";
  "24 E8" [shape=box];
  "24 E8" -> "27 -" [label="c"];
  "23 D8" [shape=box];
  "23 D8" -> "27 -" [label="d"];
  "17 E8" [shape=box];
  "17 E8" -> "24 E8" [label="c"];
  "16 D8" [shape=box];
  "16 D8" -> "23 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "17 E8" [label="c"];
  "13 E8" -> "16 D8" [label="c"];
  "in" -> "13 E8";
}
// graph for dag "dag_0" of module "copy_00" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "27 -" [shape=trapezium,orientation=270];
  "27 -" -> "o1";
  "24 E8" [shape=box];
  "24 E8" -> "27 -" [label="c"];
  "23 D8" [shape=box];
  "23 D8" -> "27 -" [label="d"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "19 E8" [shape=box];
  "19 E8" -> "22 -" [label="a"];
  "18 D8" [shape=box];
  "18 D8" -> "22 -" [label="b"];
  "17 E8" [shape=box];
  "17 E8" -> "24 E8" [label="c"];
  "16 D8" [shape=box];
  "16 D8" -> "23 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "17 E8" [label="c"];
  "13 E8" -> "16 D8" [label="c"];
  "12 D8" [shape=box];
  "12 D8" -> "19 E8" [label="a"];
  "12 D8" -> "18 D8" [label="a"];
  "in" -> "13 E8";
  "in" -> "12 D8";
}
// graph for dag "dag_cleaned_0" of module "copy_00" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "27 -" [shape=trapezium,orientation=270];
  "27 -" -> "o1";
  "24 E8" [shape=box];
  "24 E8" -> "27 -" [label="c"];
  "23 D8" [shape=box];
  "23 D8" -> "27 -" [label="d"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "o0";
  "19 E8" [shape=box];
  "19 E8" -> "22 -" [label="a"];
  "18 D8" [shape=box];
  "18 D8" -> "22 -" [label="b"];
  "17 E8" [shape=box];
  "17 E8" -> "24 E8" [label="c"];
  "16 D8" [shape=box];
  "16 D8" -> "23 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "17 E8" [label="c"];
  "13 E8" -> "16 D8" [label="c"];
  "12 D8" [shape=box];
  "12 D8" -> "19 E8" [label="a"];
  "12 D8" -> "18 D8" [label="a"];
  "in" -> "13 E8";
  "in" -> "12 D8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module copy_00
freia_status copy_00_helper_0_0_0(freia_data2d * o0, freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 poc 0] 12 dilate_8c
  // nope
  // poc 12 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`a [0 poc 0] -> [2 poc 0] 18 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`a [1 input 0] -> [2 poc 0] 18 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`a [2 input 0] -> [2 poc 0] 18 dilate_8c
  // nope
  // poc 18 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`a [1 poc 0] -> [2 poc 1] 19 erode_8c
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`a [2 input 1] -> [2 poc 1] 19 erode_8c
  // nope
  // poc 19 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];

  // 0`a [2 poc 1] -> [2 alu] 22 sub
  // nope
  // 0`b [2 poc 0] -> [2 alu] 22 sub
  // nope
  // alu 22 sub stage 2
  si.alu[2][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image o0 on 0
  // o0 [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [2 output 0] -> [7 output 0] 0 null
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module copy_00
freia_status copy_00_helper_0_1_0(freia_data2d * o0, freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 poc 0] 13 erode_8c
  // nope
  // poc 13 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`c [0 poc 0] -> [2 poc 0] 16 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`c [1 input 0] -> [2 poc 0] 16 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`c [2 input 0] -> [2 poc 0] 16 dilate_8c
  // nope
  // poc 16 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`c [1 poc 0] -> [2 poc 1] 17 erode_8c
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`c [2 input 1] -> [2 poc 1] 17 erode_8c
  // nope
  // poc 17 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`d [2 poc 0] -> [3 poc 0] 23 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`d [3 input 0] -> [3 poc 0] 23 dilate_8c
  // nope
  // poc 23 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`c [2 poc 1] -> [3 poc 1] 24 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`c [3 input 1] -> [3 poc 1] 24 erode_8c
  // nope
  // poc 24 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];

  // 0`c [3 poc 1] -> [3 alu] 27 sub
  // nope
  // 0`d [3 poc 0] -> [3 alu] 27 sub
  // nope
  // alu 27 sub stage 3
  si.alu[3][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image o1 on 0
  // o1 [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [3 output 0] -> [7 output 0] 0 null
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

int copy_00(freia_data2d *o0, freia_data2d *o1, freia_data2d *in)
{
   
   // 1
   copy_00_helper_0_0_0(o0, in, freia_morpho_kernel_8c);                /*0012*/
   copy_00_helper_0_1_0(o1, in, freia_morpho_kernel_8c);                /*0013*/
   
   // 2
   
   // 3
   
   // 4
   
   return 0;                                                            /*0029*/
}

