#
# AIPO
#
#
# compile generated anr999_03
#

! initial function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   freia_data2d *t;                                                     /*0017*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0025*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0029*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0030*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0032*/
   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, t, og);                                           /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(t);                                       /*0040*/
   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! graphs

// graph for dag "dag_0" of module "anr999_03" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "32 D8" [shape=box];
  "32 D8" -> "34 -" [label="t"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "32 D8";
  "in" -> "29 D8";
}
// graph for dag "dag_cleaned_0" of module "anr999_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og_1"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od_1"];
  "29 D8" -> "30 D8" [label="od_1"];
  "in" -> "33 E8";
  "in" -> "29 D8";
}

! updated function for

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   // hardware accelerator generated variable
   freia_data2d *od_1 = 0;

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   od_1 = freia_common_create_data(od->bpp, od->widthWa, od->heightWa);
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od_1, in, freia_morpho_kernel_8c);              /*0029*/
   freia_aipo_dilate_8c(od, od_1, freia_morpho_kernel_8c);              /*0030*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, od_1, og);                                        /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(od_1);
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}
#
# SPOC
#

! initial function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   freia_data2d *t;                                                     /*0017*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0025*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0029*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0030*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0032*/
   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, t, og);                                           /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(t);                                       /*0040*/
   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! graphs

// graph for dag "anr999_03_helper_0_0" of module "anr999_03" in dot format
digraph "anr999_03_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od_1"];
  "29 D8" -> "34 -" [label="od_1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og_1"];
  "in" -> "29 D8";
  "in" -> "33 E8";
}
// graph for dag "dag_0" of module "anr999_03" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "32 D8" [shape=box];
  "32 D8" -> "34 -" [label="t"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "32 D8";
  "in" -> "29 D8";
}
// graph for dag "dag_cleaned_0" of module "anr999_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od"];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "29 D8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 5 ops and 0 copies, optimized to 4 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module anr999_03
freia_status anr999_03_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 33 erode_8c
  // nope
  // poc 33 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`in [0 input 1] -> [0 poc 1] 29 dilate_8c
  // nope
  // poc 29 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`og_1 [0 poc 0] -> [0 alu] 34 sub
  // nope
  // 0`od_1 [0 poc 1] -> [0 alu] 34 sub
  // nope
  // alu 34 sub stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_SUB_IN1_IN0;


  // STAGE 1
  // 0`od_1 [0 poc 1] -> [1 poc 1] 30 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`od_1 [1 input 1] -> [1 poc 1] 30 dilate_8c
  // nope
  // poc 30 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // output image 0`od on 1 and image 0`og on 0
  // 0`od [1 poc 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`od [1 output 1] -> [7 output 1] 0 null
  // 0`od [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`od [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`od [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`od [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`od [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`od [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`og [0 alu] -> [1 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`og [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`og [1 output 0] -> [7 output 0] 0 null
  // 0`og [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`og [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`og [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`og [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`og [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`og [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i0);

  return ret;
}

! updated function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   anr999_03_helper_0_0_0(od, og, in, freia_morpho_kernel_8c);          /*0029*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! cleaned up function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   anr999_03_helper_0_0_0(od, og, in, freia_morpho_kernel_8c);          /*0029*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}
#
# TERAPIX
#

! initial function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   freia_data2d *t;                                                     /*0017*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0025*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0029*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0030*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0032*/
   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, t, og);                                           /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(t);                                       /*0040*/
   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! graphs

// graph for dag "anr999_03_helper_0_0_0" of module "anr999_03" in dot format
digraph "anr999_03_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od_1"];
  "29 D8" -> "30 D8" [label="od_1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og_1"];
  "in" -> "29 D8";
  "in" -> "33 E8";
}
// graph for dag "dag_0" of module "anr999_03" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "32 D8" [shape=box];
  "32 D8" -> "34 -" [label="t"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "32 D8";
  "in" -> "29 D8";
}
// graph for dag "dag_cleaned_0" of module "anr999_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od"];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "29 D8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 5 ops and 0 copies, optimized to 4 ops and 0+0 copies

/* FREIA terapix helper function for module anr999_03
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 4 image operations in dag
 * dag length is 3, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 49
 * - communication: 96
 */
freia_status anr999_03_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 1
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: -(3,2) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_2_0;
  mcu_macro[1][3].xmin3 = imagelet_io_2_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_SUB3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for od
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for og
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


! updated function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   anr999_03_helper_0_0_0(od, og, in, freia_morpho_kernel_8c);          /*0029*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! cleaned up function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   anr999_03_helper_0_0_0(od, og, in, freia_morpho_kernel_8c);          /*0029*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}
#
# OPENCL
#

! initial function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   freia_data2d *t;                                                     /*0017*/

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0025*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0029*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0030*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0032*/
   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, t, og);                                           /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(t);                                       /*0040*/
   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! graphs

// graph for dag "anr999_03_helper_0_0" of module "anr999_03" in dot format
digraph "anr999_03_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og_1"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od_1"];
  "29 D8" -> "30 D8" [label="od_1"];
  "in" -> "33 E8";
  "in" -> "29 D8";
}
// graph for dag "dag_0" of module "anr999_03" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og"];
  "32 D8" [shape=box];
  "32 D8" -> "34 -" [label="t"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="od"];
  "in" -> "33 E8";
  "in" -> "32 D8";
  "in" -> "29 D8";
}
// graph for dag "dag_cleaned_0" of module "anr999_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "34 -" [shape=trapezium,orientation=270];
  "34 -" -> "og";
  "33 E8" [shape=box];
  "33 E8" -> "34 -" [label="og_1"];
  "30 D8" [shape=box];
  "30 D8" -> "od";
  "29 D8" [shape=box];
  "29 D8" -> "34 -" [label="od_1"];
  "29 D8" -> "30 D8" [label="od_1"];
  "in" -> "33 E8";
  "in" -> "29 D8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"


// dag 0: 5 ops and 0 copies, optimized to 4 ops and 0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function anr999_03

// opencl for dag 0

! updated function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   // hardware accelerator generated variable
   freia_data2d *od_1 = 0;

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   od_1 = freia_common_create_data(od->bpp, od->widthWa, od->heightWa);
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od_1, in, freia_morpho_kernel_8c);              /*0029*/
   freia_aipo_dilate_8c(od, od_1, freia_morpho_kernel_8c);              /*0030*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, od_1, og);                                        /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(od_1);
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}

! cleaned up function

int anr999_03(void)
{
   freia_dataio fdin;                                                   /*0012*/
   freia_dataio fdout;                                                  /*0013*/
   freia_data2d *in;                                                    /*0014*/
   freia_data2d *og;                                                    /*0015*/
   freia_data2d *od;                                                    /*0016*/
   // hardware accelerator generated variable
   freia_data2d *od_1 = 0;

   freia_common_open_input(&fdin, 0);                                   /*0019*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0020*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   od_1 = freia_common_create_data(od->bpp, od->widthWa, od->heightWa);
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/

   freia_common_rx_image(in, &fdin);                                    /*0027*/

   freia_aipo_dilate_8c(od_1, in, freia_morpho_kernel_8c);              /*0029*/
   freia_aipo_dilate_8c(od, od_1, freia_morpho_kernel_8c);              /*0030*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_sub(og, od_1, og);                                        /*0034*/

   freia_common_tx_image(in, &fdout);                                   /*0036*/
   freia_common_tx_image(od, &fdout);                                   /*0037*/
   freia_common_tx_image(og, &fdout);                                   /*0038*/

   freia_common_destruct_data(in);                                      /*0041*/
   freia_common_destruct_data(od);                                      /*0042*/
   freia_common_destruct_data(od_1);
   freia_common_destruct_data(og);                                      /*0043*/

   freia_common_close_input(&fdin);                                     /*0045*/
   freia_common_close_output(&fdout);                                   /*0046*/

   return 0;                                                            /*0048*/
}
#
# FREIA COMPILATION DONE
#

