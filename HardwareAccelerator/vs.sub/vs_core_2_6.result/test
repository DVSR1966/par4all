#
# AIPO
#
#
# compile generated vs_core_2_6
#

! initial function

freia_status vs_core_2(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0012*/
   int binvalue, maxmotion, minmotion;                                  /*0013*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0015*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0018*/
   // was cast
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0019*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0020*/
   freia_aipo_add(bg, bg, t0);                                          /*0021*/
   freia_aipo_div_const(t3, bg, motion_a+motion_b);                     /*0022*/
   freia_aipo_copy(bg, t3);                                             /*0023*/
   // was cast
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0026*/
   freia_aipo_global_min(mv, &minmotion);                               /*0027*/
   if (maxmotion-minmotion>motion_trig)                                 /*0029*/
      binvalue = maxmotion*motion_th/100;                               /*0030*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0032*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0035*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0036*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(mv, t2, mv);                                          /*0041*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0043*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0044*/
   freia_aipo_mul(mv, stab, mv);                                        /*0045*/

   freia_common_destruct_data(t0);                                      /*0047*/
   freia_common_destruct_data(t1);                                      /*0048*/
   freia_common_destruct_data(t2);                                      /*0049*/
   return FREIA_OK;                                                     /*0050*/
}

! graphs

// graph for dag "dag_0" of module "vs_core_2" in dot format
// DAG "dag_0": #i=3 #o=2 #c=16 #s=1 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "45 *" [shape=trapezium,orientation=270];
  "45 *" -> "mv";
  "stab" -> "45 *";
  "44 &_" [shape=trapezium,orientation=270];
  "44 &_" -> "45 *" [label="mv"];
  "43 -_" [shape=trapezium,orientation=270];
  "43 -_" -> "44 &_" [label="mv"];
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "43 -_" [label="mv"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="mv"];
  "39 D8" [shape=box];
  "39 D8" -> "41 -" [label="t2"];
  "36 D8" [shape=box];
  "36 D8" -> "40 E8" [label="t1"];
  "36 D8" -> "39 D8" [label="t1"];
  "35 E8" [shape=box];
  "35 E8" -> "36 D8" [label="t1"];
  "32 thr" [shape=parallelogram];
  "32 thr" -> "35 E8" [label="mv"];
  "29 ?" [shape=none];
  "29 ?" -> "32 thr" [arrowhead=empty,label="binvalue"];
  "27 min" [shape=diamond];
  "27 min" -> "29 ?" [arrowhead=empty,label="minmotion"];
  "26 max" [shape=diamond];
  "26 max" -> "29 ?" [arrowhead=empty,label="maxmotion"];
  "23 =" [shape=circle];
  "23 =" -> "bg'";
  "22 /_" [shape=trapezium,orientation=270];
  "22 /_" -> "23 =" [label="t3"];
  "21 +" [shape=trapezium,orientation=270];
  "21 +" -> "22 /_" [label="bg"];
  "20 *_" [shape=trapezium,orientation=270];
  "20 *_" -> "21 +" [label="bg"];
  "19 *_" [shape=trapezium,orientation=270];
  "19 *_" -> "21 +" [label="t0"];
  "18 =" [shape=circle];
  "18 =" -> "19 *_" [label="t0"];
  "15 -|" [shape=trapezium,orientation=270];
  "15 -|" -> "32 thr" [label="mv"];
  "15 -|" -> "27 min" [label="mv"];
  "15 -|" -> "26 max" [label="mv"];
  "bg" -> "20 *_";
  "bg" -> "15 -|";
  "in" -> "18 =";
  "in" -> "15 -|";
}
// graph for dag "dag_cleaned_0" of module "vs_core_2" in dot format
// DAG "dag_cleaned_0": #i=3 #o=2 #c=16 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "45 *" [shape=trapezium,orientation=270];
  "45 *" -> "mv";
  "stab" -> "45 *";
  "44 &_" [shape=trapezium,orientation=270];
  "44 &_" -> "45 *" [label="mv_1"];
  "43 +_" [shape=trapezium,orientation=270];
  "43 +_" -> "44 &_" [label="mv_2"];
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "43 +_" [label="mv_3"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="mv_4"];
  "39 D8" [shape=box];
  "39 D8" -> "41 -" [label="t2"];
  "36 D8" [shape=box];
  "36 D8" -> "40 E8" [label="t1"];
  "36 D8" -> "39 D8" [label="t1"];
  "35 E8" [shape=box];
  "35 E8" -> "36 D8" [label="t1_1"];
  "32 thr" [shape=parallelogram];
  "32 thr" -> "35 E8" [label="mv_5"];
  "29 ?" [shape=none];
  "29 ?" -> "32 thr" [arrowhead=empty,label="binvalue"];
  "27 min" [shape=diamond];
  "27 min" -> "29 ?" [arrowhead=empty,label="minmotion"];
  "26 max" [shape=diamond];
  "26 max" -> "29 ?" [arrowhead=empty,label="maxmotion"];
  "22 /_" [shape=trapezium,orientation=270];
  "22 /_" -> "bg'";
  "21 +" [shape=trapezium,orientation=270];
  "21 +" -> "22 /_" [label="bg_1"];
  "20 *_" [shape=trapezium,orientation=270];
  "20 *_" -> "21 +" [label="bg_2"];
  "19 *_" [shape=trapezium,orientation=270];
  "19 *_" -> "21 +" [label="t0"];
  "15 -|" [shape=trapezium,orientation=270];
  "15 -|" -> "32 thr" [label="mv_6"];
  "15 -|" -> "27 min" [label="mv_6"];
  "15 -|" -> "26 max" [label="mv_6"];
  "bg" -> "20 *_";
  "bg" -> "15 -|";
  "in" -> "19 *_";
  "in" -> "15 -|";
}

! updated function for

freia_status vs_core_2(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);         /*0012*/
   int binvalue, maxmotion, minmotion;                                  /*0013*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0015*/
   
   // bg update
   // was cast
   freia_aipo_mul_const(t0, in, motion_a);                              /*0019*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0020*/
   freia_aipo_add(bg, bg, t0);                                          /*0021*/
   freia_aipo_div_const(bg, bg, motion_a+motion_b);                     /*0022*/
   // was cast
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0026*/
   freia_aipo_global_min(mv, &minmotion);                               /*0027*/
   if (maxmotion-minmotion>motion_trig)                                 /*0029*/
      binvalue = maxmotion*motion_th/100;                               /*0030*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0032*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0035*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0036*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(mv, t2, mv);                                          /*0041*/

   freia_aipo_add_const(mv, mv, -1);                                    /*0043*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0044*/
   freia_aipo_mul(mv, stab, mv);                                        /*0045*/

   freia_common_destruct_data(t0);                                      /*0047*/
   freia_common_destruct_data(t1);                                      /*0048*/
   freia_common_destruct_data(t2);                                      /*0049*/
   return FREIA_OK;                                                     /*0050*/
}
#
# SPOC
#

! initial function

freia_status vs_core_2(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0012*/
   int binvalue, maxmotion, minmotion;                                  /*0013*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0015*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0018*/
   // was cast
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0019*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0020*/
   freia_aipo_add(bg, bg, t0);                                          /*0021*/
   freia_aipo_div_const(t3, bg, motion_a+motion_b);                     /*0022*/
   freia_aipo_copy(bg, t3);                                             /*0023*/
   // was cast
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0026*/
   freia_aipo_global_min(mv, &minmotion);                               /*0027*/
   if (maxmotion-minmotion>motion_trig)                                 /*0029*/
      binvalue = maxmotion*motion_th/100;                               /*0030*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0032*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0035*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0036*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(mv, t2, mv);                                          /*0041*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0043*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0044*/
   freia_aipo_mul(mv, stab, mv);                                        /*0045*/

   freia_common_destruct_data(t0);                                      /*0047*/
   freia_common_destruct_data(t1);                                      /*0048*/
   freia_common_destruct_data(t2);                                      /*0049*/
   return FREIA_OK;                                                     /*0050*/
}

! graphs

// graph for dag "dag_0" of module "vs_core_2" in dot format
// DAG "dag_0": #i=3 #o=2 #c=16 #s=1 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "45 *" [shape=trapezium,orientation=270];
  "45 *" -> "mv";
  "stab" -> "45 *";
  "44 &_" [shape=trapezium,orientation=270];
  "44 &_" -> "45 *" [label="mv"];
  "43 -_" [shape=trapezium,orientation=270];
  "43 -_" -> "44 &_" [label="mv"];
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "43 -_" [label="mv"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="mv"];
  "39 D8" [shape=box];
  "39 D8" -> "41 -" [label="t2"];
  "36 D8" [shape=box];
  "36 D8" -> "40 E8" [label="t1"];
  "36 D8" -> "39 D8" [label="t1"];
  "35 E8" [shape=box];
  "35 E8" -> "36 D8" [label="t1"];
  "32 thr" [shape=parallelogram];
  "32 thr" -> "35 E8" [label="mv"];
  "29 ?" [shape=none];
  "29 ?" -> "32 thr" [arrowhead=empty,label="binvalue"];
  "27 min" [shape=diamond];
  "27 min" -> "29 ?" [arrowhead=empty,label="minmotion"];
  "26 max" [shape=diamond];
  "26 max" -> "29 ?" [arrowhead=empty,label="maxmotion"];
  "23 =" [shape=circle];
  "23 =" -> "bg'";
  "22 /_" [shape=trapezium,orientation=270];
  "22 /_" -> "23 =" [label="t3"];
  "21 +" [shape=trapezium,orientation=270];
  "21 +" -> "22 /_" [label="bg"];
  "20 *_" [shape=trapezium,orientation=270];
  "20 *_" -> "21 +" [label="bg"];
  "19 *_" [shape=trapezium,orientation=270];
  "19 *_" -> "21 +" [label="t0"];
  "18 =" [shape=circle];
  "18 =" -> "19 *_" [label="t0"];
  "15 -|" [shape=trapezium,orientation=270];
  "15 -|" -> "32 thr" [label="mv"];
  "15 -|" -> "27 min" [label="mv"];
  "15 -|" -> "26 max" [label="mv"];
  "bg" -> "20 *_";
  "bg" -> "15 -|";
  "in" -> "18 =";
  "in" -> "15 -|";
}
// graph for dag "dag_cleaned_0" of module "vs_core_2" in dot format
// DAG "dag_cleaned_0": #i=3 #o=2 #c=16 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "45 *" [shape=trapezium,orientation=270];
  "45 *" -> "mv";
  "stab" -> "45 *";
  "44 &_" [shape=trapezium,orientation=270];
  "44 &_" -> "45 *" [label="mv"];
  "43 +_" [shape=trapezium,orientation=270];
  "43 +_" -> "44 &_" [label="mv"];
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "43 +_" [label="mv"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="mv"];
  "39 D8" [shape=box];
  "39 D8" -> "41 -" [label="t2"];
  "36 D8" [shape=box];
  "36 D8" -> "40 E8" [label="t1"];
  "36 D8" -> "39 D8" [label="t1"];
  "35 E8" [shape=box];
  "35 E8" -> "36 D8" [label="t1"];
  "32 thr" [shape=parallelogram];
  "32 thr" -> "35 E8" [label="mv"];
  "29 ?" [shape=none];
  "29 ?" -> "32 thr" [arrowhead=empty,label="binvalue"];
  "27 min" [shape=diamond];
  "27 min" -> "29 ?" [arrowhead=empty,label="minmotion"];
  "26 max" [shape=diamond];
  "26 max" -> "29 ?" [arrowhead=empty,label="maxmotion"];
  "22 /_" [shape=trapezium,orientation=270];
  "22 /_" -> "bg'";
  "21 +" [shape=trapezium,orientation=270];
  "21 +" -> "22 /_" [label="bg"];
  "20 *_" [shape=trapezium,orientation=270];
  "20 *_" -> "21 +" [label="bg"];
  "19 *_" [shape=trapezium,orientation=270];
  "19 *_" -> "21 +" [label="t0"];
  "15 -|" [shape=trapezium,orientation=270];
  "15 -|" -> "32 thr" [label="mv"];
  "15 -|" -> "27 min" [label="mv"];
  "15 -|" -> "26 max" [label="mv"];
  "bg" -> "20 *_";
  "bg" -> "15 -|";
  "in" -> "19 *_";
  "in" -> "15 -|";
}
// graph for dag "vs_core_2_spoc_helper_0_0" of module "vs_core_2" in dot format
// DAG "vs_core_2_spoc_helper_0_0": #i=2 #o=2 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "vs_core_2_spoc_helper_0_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];

  // outputs
  "mv_6" [shape=circle];
  "t0" [shape=circle];

  // computation vertices
  "19 *_" [shape=trapezium,orientation=270];
  "19 *_" -> "t0";
  "27 min" [shape=diamond];
  "26 max" [shape=diamond];
  "15 -|" [shape=trapezium,orientation=270];
  "15 -|" -> "27 min" [label="mv_6"];
  "15 -|" -> "26 max" [label="mv_6"];
  "15 -|" -> "mv_6";
  "bg" -> "15 -|";
  "in" -> "19 *_";
  "in" -> "15 -|";
}
// graph for dag "vs_core_2_spoc_helper_0_1" of module "vs_core_2" in dot format
// DAG "vs_core_2_spoc_helper_0_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "vs_core_2_spoc_helper_0_1" {
  // inputs
  "t0" [shape=circle];
  "bg" [shape=circle];

  // outputs
  "bg'" [shape=circle];

  // computation vertices
  "22 /_" [shape=trapezium,orientation=270];
  "22 /_" -> "bg'";
  "21 +" [shape=trapezium,orientation=270];
  "21 +" -> "22 /_" [label="bg_1"];
  "t0" -> "21 +";
  "20 *_" [shape=trapezium,orientation=270];
  "20 *_" -> "21 +" [label="bg_2"];
  "bg" -> "20 *_";
}
// graph for dag "vs_core_2_spoc_helper_0_2" of module "vs_core_2" in dot format
// DAG "vs_core_2_spoc_helper_0_2": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "vs_core_2_spoc_helper_0_2" {
  // inputs
  "mv_6" [shape=circle];

  // outputs
  "mv_1" [shape=circle];

  // computation vertices
  "44 &_" [shape=trapezium,orientation=270];
  "44 &_" -> "mv_1";
  "43 +_" [shape=trapezium,orientation=270];
  "43 +_" -> "44 &_" [label="mv_2"];
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "43 +_" [label="mv_3"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="mv_4"];
  "39 D8" [shape=box];
  "39 D8" -> "41 -" [label="t2"];
  "36 D8" [shape=box];
  "36 D8" -> "40 E8" [label="t1"];
  "36 D8" -> "39 D8" [label="t1"];
  "35 E8" [shape=box];
  "35 E8" -> "36 D8" [label="t1_1"];
  "32 thr" [shape=parallelogram];
  "32 thr" -> "35 E8" [label="mv_5"];
  "mv_6" -> "32 thr";
}
// graph for dag "vs_core_2_spoc_helper_0_3" of module "vs_core_2" in dot format
// DAG "vs_core_2_spoc_helper_0_3": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "vs_core_2_spoc_helper_0_3" {
  // inputs
  "mv_1" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "mv" [shape=circle];

  // computation vertices
  "45 *" [shape=trapezium,orientation=270];
  "45 *" -> "mv";
  "mv_1" -> "45 *";
  "stab" -> "45 *";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 16 ops and 2 copies, optimized to 16 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 2 cuts
// split 3: 1 cut
// # SPOC calls: 5

// FREIA-SPoC helper function for module vs_core_2
freia_status vs_core_2_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po0,
  int32_t * po1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // bg [0 input 0] -> [0 alu] 15 absdiff
  // nope
  // in [0 input 1] -> [0 alu] 15 absdiff
  // nope
  // alu 15 absdiff stage 0
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN0_IN1;

  // mv_6 [0 alu] -> [0 measure 0] 15 absdiff
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // mv_6 [0 measure 0] -> [0 measure 0] 15 absdiff
  // nope


  // STAGE 1
  // in [0 input 1] -> [1 alu] 19 mul_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // in [1 input 1] -> [1 alu] 19 mul_const
  // nope
  // alu 19 mul_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_MUL_IN1_CONST;
  sp.alu[1][0].constant = pi2;


  // output image mv_6 on 0 and image 0`t0 on 1
  // mv_6 [0 measure 0] -> [1 output 0] 0 null
  // mv_6 [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv_6 [1 output 0] -> [5 output 0] 0 null
  // mv_6 [2 input 0] -> [5 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // mv_6 [3 input 0] -> [5 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // mv_6 [4 input 0] -> [5 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // mv_6 [5 input 0] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;

  // 0`t0 [1 alu] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t0 [1 output 1] -> [5 output 1] 0 null
  // 0`t0 [2 input 1] -> [5 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`t0 [3 input 1] -> [5 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`t0 [4 input 1] -> [5 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`t0 [5 input 1] -> [5 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 26 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 27 global_min stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].minimum;

  return ret;
}

// FREIA-SPoC helper function for module vs_core_2
freia_status vs_core_2_spoc_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // bg [0 input 1] -> [0 alu] 20 mul_const
  // nope
  // alu 20 mul_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_MUL_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`t0 [0 input 0] -> [1 alu] 21 add
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`t0 [1 input 0] -> [1 alu] 21 add
  // nope
  // bg_2 [0 alu] -> [1 alu] 21 add
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // bg_2 [1 input 1] -> [1 alu] 21 add
  // nope
  // alu 21 add stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 2
  // bg_1 [1 alu] -> [2 alu] 22 div_const
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // bg_1 [2 input 0] -> [2 alu] 22 div_const
  // nope
  // alu 22 div_const stage 2
  si.alu[2][0].op = SPOC_ALU_DIV_IN0_CONST;
  sp.alu[2][0].constant = pi1;


  // output image bg on 0
  // bg [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // bg [2 output 0] -> [5 output 0] 0 null
  // bg [3 input 0] -> [5 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // bg [4 input 0] -> [5 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // bg [5 input 0] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module vs_core_2
freia_status vs_core_2_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  const int32_t * pi3,
  int32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // mv_6 [0 input 0] -> [0 threshold 0] 32 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 32 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 1
  // mv_5 [0 threshold 0] -> [1 poc 0] 35 erode_8c
  // mv_5 [1 input 0] -> [1 poc 0] 35 erode_8c
  // nope
  // poc 35 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi3[i];


  // STAGE 2
  // 0`t1_1 [1 poc 0] -> [2 poc 0] 36 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t1_1 [2 input 0] -> [2 poc 0] 36 dilate_8c
  // nope
  // poc 36 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi3[i];


  // STAGE 4
  // 0`t1 [2 poc 0] -> [4 poc 0] 39 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t1 [3 input 0] -> [4 poc 0] 39 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t1 [4 input 0] -> [4 poc 0] 39 dilate_8c
  // nope
  // poc 39 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi3[i];

  // 0`t1 [3 poc 0] -> [4 poc 1] 40 erode_8c
  si.mux[3][1].op = SPOC_MUX_IN0;
  si.mux[3][3].op = SPOC_MUX_IN0;
  // 0`t1 [4 input 1] -> [4 poc 1] 40 erode_8c
  // nope
  // poc 40 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi3[i];

  // mv_4 [4 poc 1] -> [4 alu] 41 sub
  // nope
  // 0`t2 [4 poc 0] -> [4 alu] 41 sub
  // nope
  // alu 41 sub stage 4
  si.alu[4][0].op = SPOC_ALU_SUB_IN0_IN1;


  // STAGE 5
  // mv_3 [4 alu] -> [5 alu] 43 add_const
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // mv_3 [5 input 0] -> [5 alu] 43 add_const
  // nope
  // alu 43 add_const stage 5
  si.alu[5][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[5][0].constant = pi4;


  // output image mv_2 on 0
  // mv_2 [5 alu] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv_2 [5 output 0] -> [5 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module vs_core_2
freia_status vs_core_2_spoc_helper_0_2_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // mv_2 [0 input 0] -> [0 alu] 44 and_const
  // nope
  // alu 44 and_const stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // output image mv_1 on 0
  // mv_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv_1 [0 output 0] -> [5 output 0] 0 null
  // mv_1 [1 input 0] -> [5 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // mv_1 [2 input 0] -> [5 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // mv_1 [3 input 0] -> [5 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // mv_1 [4 input 0] -> [5 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // mv_1 [5 input 0] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module vs_core_2
freia_status vs_core_2_spoc_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // mv_1 [0 input 0] -> [0 alu] 45 mul
  // nope
  // stab [0 input 1] -> [0 alu] 45 mul
  // nope
  // alu 45 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image mv on 0
  // mv [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv [0 output 0] -> [5 output 0] 0 null
  // mv [1 input 0] -> [5 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // mv [2 input 0] -> [5 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // mv [3 input 0] -> [5 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // mv [4 input 0] -> [5 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // mv [5 input 0] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status vs_core_2(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);           /*0012*/
   int binvalue, maxmotion, minmotion;                                  /*0013*/

   vs_core_2_spoc_helper_0_0_0(mv, t0, bg, in, &maxmotion, &minmotion, motion_a);      /*0015*/
   // was cast
   // was cast
   
   // measure
   
   // bg update
   vs_core_2_spoc_helper_0_1_0(bg, t0, bg, motion_b, motion_a+motion_b);               /*0020*/
   if (maxmotion-minmotion>motion_trig)                                 /*0029*/
      binvalue = maxmotion*motion_th/100;                               /*0030*/

   vs_core_2_spoc_helper_0_2_0(mv, mv, binvalue, 255, true, freia_morpho_kernel_8c, -1);              /*0032*/
   
   // open
   
   // gradient
   
   vs_core_2_spoc_helper_0_2_1(mv, mv, 1);                              /*0044*/
   vs_core_2_spoc_helper_0_3_0(mv, mv, stab);                           /*0045*/

   freia_common_destruct_data(t0);                                      /*0047*/
   return FREIA_OK;                                                     /*0050*/
}

! cleaned up function

freia_status vs_core_2(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);           /*0012*/
   int binvalue, maxmotion, minmotion;                                  /*0013*/

   vs_core_2_spoc_helper_0_0_0(mv, t0, bg, in, &maxmotion, &minmotion, motion_a);      /*0015*/
   // was cast
   // was cast
   
   // measure
   
   // bg update
   vs_core_2_spoc_helper_0_1_0(bg, t0, bg, motion_b, motion_a+motion_b);               /*0020*/
   if (maxmotion-minmotion>motion_trig)                                 /*0029*/
      binvalue = maxmotion*motion_th/100;                               /*0030*/

   vs_core_2_spoc_helper_0_2_0(mv, mv, binvalue, 255, 1, freia_morpho_kernel_8c, -1);  /*0032*/
   
   // open
   
   // gradient
   
   vs_core_2_spoc_helper_0_2_1(mv, mv, 1);                              /*0044*/
   vs_core_2_spoc_helper_0_3_0(mv, mv, stab);                           /*0045*/

   freia_common_destruct_data(t0);                                      /*0047*/
   return 0;                                                            /*0050*/
}
#
# TERAPIX
#

! initial function

freia_status vs_core_2(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128);        /*0012*/
   int binvalue, maxmotion, minmotion;                                  /*0013*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0015*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0018*/
   // was cast
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0019*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0020*/
   freia_aipo_add(bg, bg, t0);                                          /*0021*/
   freia_aipo_div_const(t3, bg, motion_a+motion_b);                     /*0022*/
   freia_aipo_copy(bg, t3);                                             /*0023*/
   // was cast
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0026*/
   freia_aipo_global_min(mv, &minmotion);                               /*0027*/
   if (maxmotion-minmotion>motion_trig)                                 /*0029*/
      binvalue = maxmotion*motion_th/100;                               /*0030*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0032*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0035*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0036*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(mv, t2, mv);                                          /*0041*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0043*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0044*/
   freia_aipo_mul(mv, stab, mv);                                        /*0045*/

   freia_common_destruct_data(t0);                                      /*0047*/
   freia_common_destruct_data(t1);                                      /*0048*/
   freia_common_destruct_data(t2);                                      /*0049*/
   return FREIA_OK;                                                     /*0050*/
}
