#
# AIPO
#
#
# compile generated vs_core
#

! initial function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);         /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0014*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0017*/
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0018*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0019*/
   freia_aipo_add(bg, bg, t0);                                          /*0020*/
   freia_aipo_div_const(bg, bg, motion_a+motion_b);                     /*0021*/
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0024*/
   freia_aipo_global_min(mv, &minmotion);                               /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   freia_aipo_sub(mv, t2, mv);                                          /*0039*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0041*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0042*/
   freia_aipo_mul(mv, stab, mv);                                        /*0043*/

   freia_common_destruct_data(t0);                                      /*0045*/
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return FREIA_OK;                                                     /*0048*/
}

! graphs

// graph for dag "dag_0" of module "vs_core" in dot format
digraph "dag_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv"];
  "41 -." [shape=trapezium,orientation=270];
  "41 -." -> "42 &." [label="mv"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 -." [label="mv"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "17 =" [shape=circle];
  "17 =" -> "18 *." [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv"];
  "14 -|" -> "25 min" [label="mv"];
  "14 -|" -> "24 max" [label="mv"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "17 =";
  "in" -> "14 -|";
}
// graph for dag "dag_cleaned_0" of module "vs_core" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv_1"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv_2"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv_3"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv_4"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1_1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv_5"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg_1"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg_2"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv_6"];
  "14 -|" -> "25 min" [label="mv_6"];
  "14 -|" -> "24 max" [label="mv_6"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}

! updated function for

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);         /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/
   // hardware accelerator generated variable
   freia_data2d *mv_6 = freia_common_create_data(mv->bpp, mv->widthWa, mv->heightWa);

   freia_aipo_absdiff(mv_6, in, bg);                                    /*0014*/
   
   // bg update
   freia_aipo_mul_const(t0, in, motion_a);                              /*0018*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0019*/
   freia_aipo_add(bg, bg, t0);                                          /*0020*/
   freia_aipo_div_const(bg, bg, motion_a+motion_b);                     /*0021*/
   
   // measure
   freia_aipo_global_max(mv_6, &maxmotion);                             /*0024*/
   freia_aipo_global_min(mv_6, &minmotion);                             /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv_6, binvalue, 255, true);                 /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   freia_aipo_sub(mv, t2, mv);                                          /*0039*/

   freia_aipo_add_const(mv, mv, -1);                                    /*0041*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0042*/
   freia_aipo_mul(mv, stab, mv);                                        /*0043*/
   freia_common_destruct_data(mv_6);

   freia_common_destruct_data(t0);                                      /*0045*/
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return FREIA_OK;                                                     /*0048*/
}
#
# SPOC
#

! initial function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);         /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0014*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0017*/
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0018*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0019*/
   freia_aipo_add(bg, bg, t0);                                          /*0020*/
   freia_aipo_div_const(bg, bg, motion_a+motion_b);                     /*0021*/
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0024*/
   freia_aipo_global_min(mv, &minmotion);                               /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   freia_aipo_sub(mv, t2, mv);                                          /*0039*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0041*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0042*/
   freia_aipo_mul(mv, stab, mv);                                        /*0043*/

   freia_common_destruct_data(t0);                                      /*0045*/
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return FREIA_OK;                                                     /*0048*/
}

! graphs

// graph for dag "dag_0" of module "vs_core" in dot format
digraph "dag_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv"];
  "41 -." [shape=trapezium,orientation=270];
  "41 -." -> "42 &." [label="mv"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 -." [label="mv"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "17 =" [shape=circle];
  "17 =" -> "18 *." [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv"];
  "14 -|" -> "25 min" [label="mv"];
  "14 -|" -> "24 max" [label="mv"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "17 =";
  "in" -> "14 -|";
}
// graph for dag "dag_cleaned_0" of module "vs_core" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv"];
  "14 -|" -> "25 min" [label="mv"];
  "14 -|" -> "24 max" [label="mv"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_0" of module "vs_core" in dot format
digraph "vs_core_helper_0_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];

  // outputs
  "mv_6" [shape=circle];
  "t0" [shape=circle];

  // computation vertices
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "t0";
  "25 min" [shape=diamond];
  "24 max" [shape=diamond];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "25 min" [label="mv_6"];
  "14 -|" -> "24 max" [label="mv_6"];
  "14 -|" -> "mv_6";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_1" of module "vs_core" in dot format
digraph "vs_core_helper_0_1" {
  // inputs
  "t0" [shape=circle];
  "bg" [shape=circle];

  // outputs
  "bg'" [shape=circle];

  // computation vertices
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg_1"];
  "t0" -> "20 +";
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg_2"];
  "bg" -> "19 *.";
}
// graph for dag "vs_core_helper_0_2" of module "vs_core" in dot format
digraph "vs_core_helper_0_2" {
  // inputs
  "mv_6" [shape=circle];

  // outputs
  "mv_1" [shape=circle];

  // computation vertices
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "mv_1";
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv_2"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv_3"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv_4"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1_1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv_5"];
  "mv_6" -> "30 thr";
}
// graph for dag "vs_core_helper_0_3" of module "vs_core" in dot format
digraph "vs_core_helper_0_3" {
  // inputs
  "mv_1" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "mv_1" -> "43 *";
  "stab" -> "43 *";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 16 ops and 1 copies, optimized to 16 ops and 0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// # SPOC calls: 4

// FREIA-SPoC helper function for module vs_core
freia_status vs_core_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po0,
  int32_t * po1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // bg [0 input 0] -> [0 alu] 14 absdiff
  // nope
  // in [0 input 1] -> [0 alu] 14 absdiff
  // nope
  // alu 14 absdiff stage 0
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN0_IN1;

  // mv_6 [0 alu] -> [0 measure 0] 14 absdiff
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // mv_6 [0 measure 0] -> [0 measure 0] 14 absdiff
  // nope


  // STAGE 1
  // in [0 input 1] -> [1 alu] 18 mul_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // in [1 input 1] -> [1 alu] 18 mul_const
  // nope
  // alu 18 mul_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_MUL_IN1_CONST;
  sp.alu[1][0].constant = pi2;


  // output image mv_6 on 0 and image 0`t0 on 1
  // mv_6 [0 measure 0] -> [1 output 0] 0 null
  // mv_6 [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv_6 [1 output 0] -> [7 output 0] 0 null
  // mv_6 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // mv_6 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // mv_6 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // mv_6 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // mv_6 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // mv_6 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`t0 [1 alu] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t0 [1 output 1] -> [7 output 1] 0 null
  // 0`t0 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`t0 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`t0 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`t0 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`t0 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`t0 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 24 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 25 global_min stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].minimum;

  return ret;
}

// FREIA-SPoC helper function for module vs_core
freia_status vs_core_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // bg [0 input 1] -> [0 alu] 19 mul_const
  // nope
  // alu 19 mul_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_MUL_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`t0 [0 input 0] -> [1 alu] 20 add
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`t0 [1 input 0] -> [1 alu] 20 add
  // nope
  // bg_2 [0 alu] -> [1 alu] 20 add
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // bg_2 [1 input 1] -> [1 alu] 20 add
  // nope
  // alu 20 add stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 2
  // bg_1 [1 alu] -> [2 alu] 21 div_const
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // bg_1 [2 input 0] -> [2 alu] 21 div_const
  // nope
  // alu 21 div_const stage 2
  si.alu[2][0].op = SPOC_ALU_DIV_IN0_CONST;
  sp.alu[2][0].constant = pi1;


  // output image bg on 0
  // bg [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // bg [2 output 0] -> [7 output 0] 0 null
  // bg [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // bg [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // bg [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // bg [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // bg [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module vs_core
freia_status vs_core_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  const int32_t * pi3,
  int32_t pi4,
  int32_t pi5)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // mv_6 [0 input 0] -> [0 threshold 0] 30 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 30 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 1
  // mv_5 [0 threshold 0] -> [1 poc 0] 33 erode_8c
  // mv_5 [1 input 0] -> [1 poc 0] 33 erode_8c
  // nope
  // poc 33 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi3[i];


  // STAGE 2
  // 0`t1_1 [1 poc 0] -> [2 poc 0] 34 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t1_1 [2 input 0] -> [2 poc 0] 34 dilate_8c
  // nope
  // poc 34 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi3[i];


  // STAGE 4
  // 0`t1 [2 poc 0] -> [4 poc 0] 37 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t1 [3 input 0] -> [4 poc 0] 37 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t1 [4 input 0] -> [4 poc 0] 37 dilate_8c
  // nope
  // poc 37 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi3[i];

  // 0`t1 [3 poc 0] -> [4 poc 1] 38 erode_8c
  si.mux[3][1].op = SPOC_MUX_IN0;
  si.mux[3][3].op = SPOC_MUX_IN0;
  // 0`t1 [4 input 1] -> [4 poc 1] 38 erode_8c
  // nope
  // poc 38 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi3[i];

  // mv_4 [4 poc 1] -> [4 alu] 39 sub
  // nope
  // 0`t2 [4 poc 0] -> [4 alu] 39 sub
  // nope
  // alu 39 sub stage 4
  si.alu[4][0].op = SPOC_ALU_SUB_IN0_IN1;


  // STAGE 5
  // mv_3 [4 alu] -> [5 alu] 41 add_const
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // mv_3 [5 input 0] -> [5 alu] 41 add_const
  // nope
  // alu 41 add_const stage 5
  si.alu[5][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[5][0].constant = pi4;


  // STAGE 6
  // mv_2 [5 alu] -> [6 alu] 42 and_const
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // mv_2 [6 input 0] -> [6 alu] 42 and_const
  // nope
  // alu 42 and_const stage 6
  si.alu[6][0].op = SPOC_ALU_AND_IN0_CONST;
  sp.alu[6][0].constant = pi5;


  // output image mv_1 on 0
  // mv_1 [6 alu] -> [6 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv_1 [6 output 0] -> [7 output 0] 0 null
  // mv_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module vs_core
freia_status vs_core_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // mv_1 [0 input 0] -> [0 alu] 43 mul
  // nope
  // stab [0 input 1] -> [0 alu] 43 mul
  // nope
  // alu 43 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image mv on 0
  // mv [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // mv [0 output 0] -> [7 output 0] 0 null
  // mv [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // mv [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // mv [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // mv [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // mv [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // mv [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // mv [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);           /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/
   // hardware accelerator generated variable
   freia_data2d *mv_6 = freia_common_create_data(mv->bpp, mv->widthWa, mv->heightWa);

   vs_core_helper_0_0_0(mv_6, t0, bg, in, &maxmotion, &minmotion, motion_a);           /*0014*/
   
   // bg update
   vs_core_helper_0_1_0(bg, t0, bg, motion_b, motion_a+motion_b);       /*0019*/
   
   // measure
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   vs_core_helper_0_2_0(mv, mv_6, binvalue, 255, true, freia_morpho_kernel_8c, -1, 1);                /*0030*/
   
   // open
   
   // gradient
   
   vs_core_helper_0_3_0(mv, mv, stab);                                  /*0043*/
   freia_common_destruct_data(mv_6);

   freia_common_destruct_data(t0);                                      /*0045*/
   return FREIA_OK;                                                     /*0048*/
}

! cleaned up function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);           /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/
   // hardware accelerator generated variable
   freia_data2d *mv_6 = freia_common_create_data(mv->bpp, mv->widthWa, mv->heightWa);

   vs_core_helper_0_0_0(mv_6, t0, bg, in, &maxmotion, &minmotion, motion_a);           /*0014*/
   
   // bg update
   vs_core_helper_0_1_0(bg, t0, bg, motion_b, motion_a+motion_b);       /*0019*/
   
   // measure
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   vs_core_helper_0_2_0(mv, mv_6, binvalue, 255, 1, freia_morpho_kernel_8c, -1, 1);    /*0030*/
   
   // open
   
   // gradient
   
   vs_core_helper_0_3_0(mv, mv, stab);                                  /*0043*/
   freia_common_destruct_data(mv_6);

   freia_common_destruct_data(t0);                                      /*0045*/
   return 0;                                                            /*0048*/
}
#
# TERAPIX
#

! initial function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);         /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0014*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0017*/
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0018*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0019*/
   freia_aipo_add(bg, bg, t0);                                          /*0020*/
   freia_aipo_div_const(bg, bg, motion_a+motion_b);                     /*0021*/
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0024*/
   freia_aipo_global_min(mv, &minmotion);                               /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   freia_aipo_sub(mv, t2, mv);                                          /*0039*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0041*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0042*/
   freia_aipo_mul(mv, stab, mv);                                        /*0043*/

   freia_common_destruct_data(t0);                                      /*0045*/
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return FREIA_OK;                                                     /*0048*/
}

! graphs

// graph for dag "dag_0" of module "vs_core" in dot format
digraph "dag_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv"];
  "41 -." [shape=trapezium,orientation=270];
  "41 -." -> "42 &." [label="mv"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 -." [label="mv"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "17 =" [shape=circle];
  "17 =" -> "18 *." [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv"];
  "14 -|" -> "25 min" [label="mv"];
  "14 -|" -> "24 max" [label="mv"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "17 =";
  "in" -> "14 -|";
}
// graph for dag "dag_cleaned_0" of module "vs_core" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv"];
  "14 -|" -> "25 min" [label="mv"];
  "14 -|" -> "24 max" [label="mv"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_0_0" of module "vs_core" in dot format
digraph "vs_core_helper_0_0_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];

  // outputs
  "mv_6" [shape=circle];
  "bg'" [shape=circle];

  // computation vertices
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg_1"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg_2"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "25 min" [shape=diamond];
  "24 max" [shape=diamond];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "25 min" [label="mv_6"];
  "14 -|" -> "24 max" [label="mv_6"];
  "14 -|" -> "mv_6";
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_1_0" of module "vs_core" in dot format
digraph "vs_core_helper_0_1_0" {
  // inputs
  "mv_6" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv_1"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv_2"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv_3"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv_4"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1_1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv_5"];
  "mv_6" -> "30 thr";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 16 ops and 1 copies, optimized to 16 ops and 0+0 copies

/* FREIA terapix helper function for module vs_core
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 7 image operations in dag
 * dag length is 4, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 23
 * - communication: 128
 */
freia_status vs_core_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po4,
  int32_t * po5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1_val initialization
  int16_t p_1_val[1];
  const int32_t x_1_val = 0;
  const int32_t y_1_val = 0;
  // array for reduction 1 extraction
  int32_t red_1[1];
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 1;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 2;
  const int32_t y_3 = 0;
  // operation 4 parameters
  int16_t p_4[1];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  // operation 6 parameters
  int16_t p_6[1];
  const int32_t x_6 = 4;
  const int32_t y_6 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_1 = 1023;
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: -|(2,1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_3;
  mcu_macro[1][0].xmin3 = imagelet_3;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  // 1: max(3)
  // initializing  1_val
  p_1_val[0] = INT16_MIN;
  gram.xoffset = x_1_val;
  gram.yoffset = y_1_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_val
  mem_init.xmin1 = reduction_1;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max at reduction_1
  mcu_macro[0][1].xmin2 = reduction_1;
  mcu_macro[1][1].xmin2 = reduction_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = 0;
  mcu_macro[1][1].xmin3 = 0;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  // 2: min(3)
  // initializing  2_val
  p_2_val[0] = INT16_MAX;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure min at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  // 3: *.(2) -> 2
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi6;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_MUL_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_MUL_CONST;
  // 4: *.(1) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  p_4[0] = pi7;
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_MUL_CONST;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_MUL_CONST;
  // 5: +(1,2) -> 2
  mcu_macro[0][5].xmin1 = imagelet_io_1_0;
  mcu_macro[1][5].xmin1 = imagelet_io_1_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_io_2_0;
  mcu_macro[1][5].xmin3 = imagelet_io_2_1;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ADD3;
  // 6: /.(2) -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_2_0;
  mcu_macro[1][6].xmin1 = imagelet_io_2_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_1_0;
  mcu_macro[1][6].xmin2 = imagelet_io_1_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  // copy of operation 6 parameters
  p_6[0] = pi8;
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DIV_CONST;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DIV_CONST;
  // output copy 3 -> 2
  mcu_macro[0][7].xmin1 = imagelet_3;
  mcu_macro[1][7].xmin1 = imagelet_3;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_2_0;
  mcu_macro[1][7].xmin2 = imagelet_io_2_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for bg
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for in
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for mv_6
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for bg
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures
  // get measure max result from reduction_1
  redter.xres = reduction_1;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_1;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MAX;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_1[0];
  // get measure min result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MIN;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po5 = (int32_t) red_2[0];

  return ret;
}


/* FREIA terapix helper function for module vs_core
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 9 image operations in dag
 * dag length is 9, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 79
 * - communication: 96
 */
freia_status vs_core_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  const int32_t * pi6,
  int32_t pi7,
  int32_t pi8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 6 parameters
  int16_t p_6[1];
  const int32_t x_6 = 6;
  const int32_t y_6 = 0;
  // operation 7 parameters
  int16_t p_7[1];
  const int32_t x_7 = 7;
  const int32_t y_7 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][9];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 170;
  int imagelet_1 = 0;
  int imagelet_2 = 170;
  int imagelet_3 = 340;
  int imagelet_4 = 510;
  int imagelet_5 = 680;
  int imagelet_6 = 850;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: thr(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  p_0[1] = pi4;
  p_0[2] = pi5;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 1: E8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi6[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: D8(3) -> 1
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_1;
  mcu_macro[1][2].xmin3 = x_1;
  mcu_macro[0][2].ymin3 = y_1;
  mcu_macro[1][2].ymin3 = y_1;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(1) -> 4
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_4;
  mcu_macro[1][4].xmin2 = imagelet_4;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_1;
  mcu_macro[1][4].xmin3 = x_1;
  mcu_macro[0][4].ymin3 = y_1;
  mcu_macro[1][4].ymin3 = y_1;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: -(3,4) -> 4
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_4;
  mcu_macro[1][5].xmin2 = imagelet_4;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_4;
  mcu_macro[1][5].xmin3 = imagelet_4;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_SUB3;
  // 6: +.(4) -> 4
  mcu_macro[0][6].xmin1 = imagelet_4;
  mcu_macro[1][6].xmin1 = imagelet_4;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_4;
  mcu_macro[1][6].xmin2 = imagelet_4;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  // copy of operation 6 parameters
  p_6[0] = pi7;
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 7: &.(4) -> 4
  mcu_macro[0][7].xmin1 = imagelet_4;
  mcu_macro[1][7].xmin1 = imagelet_4;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_4;
  mcu_macro[1][7].xmin2 = imagelet_4;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  // copy of operation 7 parameters
  p_7[0] = pi8;
  gram.xoffset = x_7;
  gram.yoffset = y_7;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_7;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][7].xmin3 = x_7;
  mcu_macro[1][7].xmin3 = x_7;
  mcu_macro[0][7].ymin3 = y_7;
  mcu_macro[1][7].ymin3 = y_7;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_AND_CONST;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_AND_CONST;
  // 8: *(2,4) -> 1
  mcu_macro[0][8].xmin1 = imagelet_io_2_0;
  mcu_macro[1][8].xmin1 = imagelet_io_2_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_4;
  mcu_macro[1][8].xmin2 = imagelet_4;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = imagelet_io_1_0;
  mcu_macro[1][8].xmin3 = imagelet_io_1_1;
  mcu_macro[0][8].ymin3 = 0;
  mcu_macro[1][8].ymin3 = 0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_MUL3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_MUL3;


  // inputs:
  // - imagelet 1 is i0 for mv_6
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for stab
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for mv
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 9;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   vs_core_helper_0_0_0(mv, bg, bg, in, &maxmotion, &minmotion, motion_a, motion_b, motion_a+motion_b);              /*0014*/
   
   // bg update
   
   // measure
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   vs_core_helper_0_1_0(mv, mv, stab, binvalue, 255, true, freia_morpho_kernel_8c, -1, 1);            /*0030*/
   
   // open
   
   // gradient
   
   
   return FREIA_OK;                                                     /*0048*/
}

! cleaned up function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   vs_core_helper_0_0_0(mv, bg, bg, in, &maxmotion, &minmotion, motion_a, motion_b, motion_a+motion_b);              /*0014*/
   
   // bg update
   
   // measure
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   vs_core_helper_0_1_0(mv, mv, stab, binvalue, 255, 1, freia_morpho_kernel_8c, -1, 1);               /*0030*/
   
   // open
   
   // gradient
   
   
   return 0;                                                            /*0048*/
}
#
# OPENCL
#

! initial function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);         /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   freia_aipo_absdiff(mv, in, bg);                                      /*0014*/
   
   // bg update
   freia_aipo_copy(t0, in);                                             /*0017*/
   freia_aipo_mul_const(t0, t0, motion_a);                              /*0018*/
   freia_aipo_mul_const(bg, bg, motion_b);                              /*0019*/
   freia_aipo_add(bg, bg, t0);                                          /*0020*/
   freia_aipo_div_const(bg, bg, motion_a+motion_b);                     /*0021*/
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0024*/
   freia_aipo_global_min(mv, &minmotion);                               /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   freia_aipo_sub(mv, t2, mv);                                          /*0039*/

   freia_aipo_sub_const(mv, mv, 1);                                     /*0041*/
   freia_aipo_and_const(mv, mv, 1);                                     /*0042*/
   freia_aipo_mul(mv, stab, mv);                                        /*0043*/

   freia_common_destruct_data(t0);                                      /*0045*/
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return FREIA_OK;                                                     /*0048*/
}

! graphs

// graph for dag "dag_0" of module "vs_core" in dot format
digraph "dag_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv"];
  "41 -." [shape=trapezium,orientation=270];
  "41 -." -> "42 &." [label="mv"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 -." [label="mv"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "17 =" [shape=circle];
  "17 =" -> "18 *." [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv"];
  "14 -|" -> "25 min" [label="mv"];
  "14 -|" -> "24 max" [label="mv"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "17 =";
  "in" -> "14 -|";
}
// graph for dag "dag_cleaned_0" of module "vs_core" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "bg'" [shape=circle];
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv_1"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv_2"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv_3"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv_4"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1_1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv_5"];
  "27 ?" [shape=none];
  "27 ?" -> "30 thr" [arrowhead=empty,label="binvalue"];
  "25 min" [shape=diamond];
  "25 min" -> "27 ?" [arrowhead=empty,label="minmotion"];
  "24 max" [shape=diamond];
  "24 max" -> "27 ?" [arrowhead=empty,label="maxmotion"];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg_1"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg_2"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "30 thr" [label="mv_6"];
  "14 -|" -> "25 min" [label="mv_6"];
  "14 -|" -> "24 max" [label="mv_6"];
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_0" of module "vs_core" in dot format
digraph "vs_core_helper_0_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];

  // outputs
  "mv_6" [shape=circle];
  "bg'" [shape=circle];

  // computation vertices
  "25 min" [shape=diamond];
  "24 max" [shape=diamond];
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg_1"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg_2"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "25 min" [label="mv_6"];
  "14 -|" -> "24 max" [label="mv_6"];
  "14 -|" -> "mv_6";
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_0_0" of module "vs_core" in dot format
digraph "vs_core_helper_0_0_0" {
  // inputs
  "bg" [shape=circle];
  "in" [shape=circle];

  // outputs
  "mv_6" [shape=circle];
  "bg'" [shape=circle];

  // computation vertices
  "21 /." [shape=trapezium,orientation=270];
  "21 /." -> "bg'";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 /." [label="bg_1"];
  "19 *." [shape=trapezium,orientation=270];
  "19 *." -> "20 +" [label="bg_2"];
  "18 *." [shape=trapezium,orientation=270];
  "18 *." -> "20 +" [label="t0"];
  "14 -|" [shape=trapezium,orientation=270];
  "14 -|" -> "mv_6";
  "bg" -> "19 *.";
  "bg" -> "14 -|";
  "in" -> "18 *.";
  "in" -> "14 -|";
}
// graph for dag "vs_core_helper_0_1" of module "vs_core" in dot format
digraph "vs_core_helper_0_1" {
  // inputs
  "mv_6" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv_1"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv_2"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv_3"];
  "38 E8" [shape=box];
  "38 E8" -> "39 -" [label="mv_4"];
  "37 D8" [shape=box];
  "37 D8" -> "39 -" [label="t2"];
  "34 D8" [shape=box];
  "34 D8" -> "38 E8" [label="t1"];
  "34 D8" -> "37 D8" [label="t1"];
  "33 E8" [shape=box];
  "33 E8" -> "34 D8" [label="t1_1"];
  "30 thr" [shape=parallelogram];
  "30 thr" -> "33 E8" [label="mv_5"];
  "mv_6" -> "30 thr";
}
// graph for dag "vs_core_helper_0_1_2" of module "vs_core" in dot format
digraph "vs_core_helper_0_1_2" {
  // inputs
  "t2" [shape=circle];
  "mv_4" [shape=circle];
  "stab" [shape=circle];

  // outputs
  "mv" [shape=circle];

  // computation vertices
  "43 *" [shape=trapezium,orientation=270];
  "43 *" -> "mv";
  "stab" -> "43 *";
  "42 &." [shape=trapezium,orientation=270];
  "42 &." -> "43 *" [label="mv_1"];
  "41 +." [shape=trapezium,orientation=270];
  "41 +." -> "42 &." [label="mv_2"];
  "39 -" [shape=trapezium,orientation=270];
  "39 -" -> "41 +." [label="mv_3"];
  "mv_4" -> "39 -";
  "t2" -> "39 -";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"


// dag 0: 16 ops and 1 copies, optimized to 16 ops and 0+0 copies

// hold kernels forvs_core_helper_0_0_0
static cl_kernel vs_core_helper_0_0_0_kernel[2];

// compile kernels for vs_core_helper_0_0_0
static freia_status vs_core_helper_0_0_0_compile(void)
{
  // OpenCL source for vs_core_helper_0_0_0
  const char * vs_core_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function vs_core_helper_0_0_0\n"
    "KERNEL void vs_core_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t14 = PIXEL_ABSDIFF(in1, in0);\n"
    "    PIXEL t18 = PIXEL_MUL(in1, c0);\n"
    "    PIXEL t19 = PIXEL_MUL(in0, c1);\n"
    "    PIXEL t20 = PIXEL_ADD(t19, t18);\n"
    "    PIXEL t21 = PIXEL_DIV(t20, c2);\n"
    "    // set output pixels\n"
    "    p0[i] = t14;\n"
    "    p1[i] = t21;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(vs_core_helper_0_0_0_source, "vs_core_helper_0_0_0", "-DPIXEL8", &vs_core_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(vs_core_helper_0_0_0_source, "vs_core_helper_0_0_0", "-DPIXEL16", &vs_core_helper_0_0_0_kernel[1]);
  return err;
}

// helper function vs_core_helper_0_0_0
freia_status vs_core_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = vs_core_helper_0_0_0_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = vs_core_helper_0_0_0_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_o1 = freia_common_data_get_offset(o1);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[o1->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_o1);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 10, sizeof(cl_int), &c0);
  err |= clSetKernelArg(kernel, 11, sizeof(cl_int), &c1);
  err |= clSetKernelArg(kernel, 12, sizeof(cl_int), &c2);

  // call kernel vs_core_helper_0_0_0
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}

// hold kernels forvs_core_helper_0_1_2
static cl_kernel vs_core_helper_0_1_2_kernel[2];

// compile kernels for vs_core_helper_0_1_2
static freia_status vs_core_helper_0_1_2_compile(void)
{
  // OpenCL source for vs_core_helper_0_1_2
  const char * vs_core_helper_0_1_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function vs_core_helper_0_1_2\n"
    "KERNEL void vs_core_helper_0_1_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    // pixel computations\n"
    "    PIXEL t39 = PIXEL_SUB(in0, in1);\n"
    "    PIXEL t41 = PIXEL_ADD(t39, c0);\n"
    "    PIXEL t42 = PIXEL_AND(t41, c1);\n"
    "    PIXEL t43 = PIXEL_MUL(in2, t42);\n"
    "    // set output pixels\n"
    "    p0[i] = t43;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(vs_core_helper_0_1_2_source, "vs_core_helper_0_1_2", "-DPIXEL8", &vs_core_helper_0_1_2_kernel[0]);
  err |= freia_op_compile_kernel(vs_core_helper_0_1_2_source, "vs_core_helper_0_1_2", "-DPIXEL16", &vs_core_helper_0_1_2_kernel[1]);
  return err;
}

// helper function vs_core_helper_0_1_2
freia_status vs_core_helper_0_1_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  int32_t c0,
  int32_t c1)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = vs_core_helper_0_1_2_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = vs_core_helper_0_1_2_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);
  cl_int ofs_i2 = freia_common_data_get_offset(i2);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_mem), &pool[i2->clId]);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &ofs_i2);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 10, sizeof(cl_int), &c0);
  err |= clSetKernelArg(kernel, 11, sizeof(cl_int), &c1);

  // call kernel vs_core_helper_0_1_2
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function vs_core

// opencl for dag 0

// opencl function vs_core_helper_0_0_0
KERNEL void vs_core_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  int c0,
  int c1,
  int c2)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * p1 = o1 + ofs_o1;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t14 = PIXEL_ABSDIFF(in1, in0);
    PIXEL t18 = PIXEL_MUL(in1, c0);
    PIXEL t19 = PIXEL_MUL(in0, c1);
    PIXEL t20 = PIXEL_ADD(t19, t18);
    PIXEL t21 = PIXEL_DIV(t20, c2);
    // set output pixels
    p0[i] = t14;
    p1[i] = t21;
  }
}

// opencl function vs_core_helper_0_1_2
KERNEL void vs_core_helper_0_1_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width,
  int pitch,
  int c0,
  int c1)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  GLOBAL PIXEL * j2 = i2 + ofs_i2;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];
    // pixel computations
    PIXEL t39 = PIXEL_SUB(in0, in1);
    PIXEL t41 = PIXEL_ADD(t39, c0);
    PIXEL t42 = PIXEL_AND(t41, c1);
    PIXEL t43 = PIXEL_MUL(in2, t42);
    // set output pixels
    p0[i] = t43;
  }
}

! updated function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   vs_core_helper_0_0_0(mv, bg, bg, in, motion_a, motion_b, motion_a+motion_b);        /*0014*/
   
   // bg update
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0024*/
   freia_aipo_global_min(mv, &minmotion);                               /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv, binvalue, 255, true);                   /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   vs_core_helper_0_1_2(mv, t2, mv, stab, -1, 1);                       /*0039*/
   
   
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return FREIA_OK;                                                     /*0048*/
}

! cleaned up function

freia_status vs_core(freia_data2d *bg, freia_data2d *mv, freia_data2d *in, freia_data2d *stab, int motion_a, int motion_b, int motion_trig, int motion_th)
{
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128);          /*0011*/
   int binvalue, maxmotion, minmotion;                                  /*0012*/

   vs_core_helper_0_0_0(mv, bg, bg, in, motion_a, motion_b, motion_a+motion_b);        /*0014*/
   
   // bg update
   
   // measure
   freia_aipo_global_max(mv, &maxmotion);                               /*0024*/
   freia_aipo_global_min(mv, &minmotion);                               /*0025*/
   if (maxmotion-minmotion>motion_trig)                                 /*0027*/
      binvalue = maxmotion*motion_th/100;                               /*0028*/

   freia_aipo_threshold(mv, mv, binvalue, 255, 1);                      /*0030*/
   
   // open
   freia_aipo_erode_8c(t1, mv, freia_morpho_kernel_8c);                 /*0033*/
   freia_aipo_dilate_8c(t1, t1, freia_morpho_kernel_8c);                /*0034*/
   
   // gradient
   freia_aipo_dilate_8c(t2, t1, freia_morpho_kernel_8c);                /*0037*/
   freia_aipo_erode_8c(mv, t1, freia_morpho_kernel_8c);                 /*0038*/
   vs_core_helper_0_1_2(mv, t2, mv, stab, -1, 1);                       /*0039*/
   
   
   freia_common_destruct_data(t1);                                      /*0046*/
   freia_common_destruct_data(t2);                                      /*0047*/
   return 0;                                                            /*0048*/
}
#
# FREIA COMPILATION DONE
#

