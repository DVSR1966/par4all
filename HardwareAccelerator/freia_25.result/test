
! initial function

freia_status freia_25(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses
   // o0 = i + i
   // o1 = i * i
   freia_aipo_add(o0, i, i);                                            /*0008*/
   freia_aipo_mul(o1, i, i);                                            /*0009*/

   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_25" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "9 *" [shape=trapezium,orientation=270];
  "9 *" -> "o1";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "o0";
  "i" -> "9 *";
  "i" -> "9 *";
  "i" -> "8 +";
  "i" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_25" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "9 *" [shape=trapezium,orientation=270];
  "9 *" -> "o1";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "o0";
  "i" -> "9 *";
  "i" -> "9 *";
  "i" -> "8 +";
  "i" -> "8 +";
}
// graph for dag "freia_25_helper_0_0" of module "freia_25" in dot format
digraph "freia_25_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];

  // computation vertices
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "o0";
  "i" -> "8 +";
  "i" -> "8 +";
}
// graph for dag "freia_25_helper_0_1" of module "freia_25" in dot format
digraph "freia_25_helper_0_1" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o1" [shape=circle];

  // computation vertices
  "9 *" [shape=trapezium,orientation=270];
  "9 *" -> "o1";
  "i" -> "9 *";
  "i" -> "9 *";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_25
freia_status freia_25_helper_0_0_0(freia_data2d * o0, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 alu] 8 add
  // nope
  // i [0 input 1] -> [0 alu] 8 add
  // nope
  // alu 8 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image o0 on 0
  // o0 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_25
freia_status freia_25_helper_0_1_0(freia_data2d * o0, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 alu] 9 mul
  // nope
  // i [0 input 1] -> [0 alu] 9 mul
  // nope
  // alu 9 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image o1 on 0
  // o1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i0);

  return ret;
}

! updated function

freia_status freia_25(freia_data2d *o0, freia_data2d *o1, freia_data2d *i)
{
   // parallel reuses
   // o0 = i + i
   // o1 = i * i
   freia_25_helper_0_0_0(o0, i);                                        /*0008*/
   freia_25_helper_0_1_0(o1, i);                                        /*0009*/

   return FREIA_OK;                                                     /*0011*/
}
