#
# AIPO
#
#
# compile generated freia_71
#

! initial function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0, *t1, *t2;                                          /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/
   t1 = freia_common_create_data(16, 1024, 720);                        /*0010*/
   t2 = freia_common_create_data(16, 1024, 720);                        /*0011*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_aipo_add_const(t1, t0, 1);                                     /*0014*/
   freia_aipo_not(t2, in);                                              /*0015*/
   freia_aipo_and(out, t2, t1);                                         /*0016*/

   freia_common_destruct_data(t0);                                      /*0018*/
   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_71" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_71" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}

! updated function for

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0, *t1, *t2;                                          /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/
   t1 = freia_common_create_data(16, 1024, 720);                        /*0010*/
   t2 = freia_common_create_data(16, 1024, 720);                        /*0011*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_aipo_add_const(t1, t0, 1);                                     /*0014*/
   freia_aipo_not(t2, in);                                              /*0015*/
   freia_aipo_and(out, t2, t1);                                         /*0016*/

   freia_common_destruct_data(t0);                                      /*0018*/
   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}
#
# SPOC
#

! initial function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0, *t1, *t2;                                          /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/
   t1 = freia_common_create_data(16, 1024, 720);                        /*0010*/
   t2 = freia_common_create_data(16, 1024, 720);                        /*0011*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_aipo_add_const(t1, t0, 1);                                     /*0014*/
   freia_aipo_not(t2, in);                                              /*0015*/
   freia_aipo_and(out, t2, t1);                                         /*0016*/

   freia_common_destruct_data(t0);                                      /*0018*/
   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_71" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_71" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "freia_71_helper_0_0" of module "freia_71" in dot format
digraph "freia_71_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_71
freia_status freia_71_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 poc 0] 13 erode_8c
  // nope
  // poc 13 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`t0 [0 poc 0] -> [0 alu] 14 add_const
  // nope
  // alu 14 add_const stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[0][0].constant = pi1;


  // STAGE 1
  // in [0 input 1] -> [1 alu] 15 not
  si.mux[0][3].op = SPOC_MUX_IN1;
  // in [1 input 1] -> [1 alu] 15 not
  // nope
  // alu 15 not stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_NOT_IN1;


  // STAGE 2
  // 0`t1 [0 alu] -> [2 alu] 16 and
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t1 [1 input 0] -> [2 alu] 16 and
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t1 [2 input 0] -> [2 alu] 16 and
  // nope
  // 0`t2 [1 alu] -> [2 alu] 16 and
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`t2 [2 input 1] -> [2 alu] 16 and
  // nope
  // alu 16 and stage 2
  si.alu[2][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image out on 0
  // out [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // out [2 output 0] -> [7 output 0] 0 null
  // out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

! updated function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/
   
   
   freia_71_helper_0_0_0(out, in, kernel1x3, 1);                        /*0013*/
   
   
   return FREIA_OK;                                                     /*0022*/
}

! cleaned up function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/
   
   
   freia_71_helper_0_0_0(out, in, kernel1x3, 1);                        /*0013*/
   
   
   return 0;                                                            /*0022*/
}
#
# TERAPIX
#

! initial function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0, *t1, *t2;                                          /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/
   t1 = freia_common_create_data(16, 1024, 720);                        /*0010*/
   t2 = freia_common_create_data(16, 1024, 720);                        /*0011*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_aipo_add_const(t1, t0, 1);                                     /*0014*/
   freia_aipo_not(t2, in);                                              /*0015*/
   freia_aipo_and(out, t2, t1);                                         /*0016*/

   freia_common_destruct_data(t0);                                      /*0018*/
   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_71" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_71" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "freia_71_helper_0_0_0" of module "freia_71" in dot format
digraph "freia_71_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies

/* FREIA terapix helper function for module freia_71
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 26
 * - communication: 64
 */
freia_status freia_71_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 341;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: !(1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_NOT;
  // 2: +.(2) -> 2
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi3;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 3: &(1,2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_2;
  mcu_macro[1][3].xmin2 = imagelet_2;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_1_0;
  mcu_macro[1][3].xmin3 = imagelet_io_1_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_AND3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/
   
   
   freia_71_helper_0_0_0(out, in, kernel1x3, 1);                        /*0013*/
   
   
   return FREIA_OK;                                                     /*0022*/
}

! cleaned up function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/
   
   
   freia_71_helper_0_0_0(out, in, kernel1x3, 1);                        /*0013*/
   
   
   return 0;                                                            /*0022*/
}
#
# OPENCL
#

! initial function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0, *t1, *t2;                                          /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/
   t1 = freia_common_create_data(16, 1024, 720);                        /*0010*/
   t2 = freia_common_create_data(16, 1024, 720);                        /*0011*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_aipo_add_const(t1, t0, 1);                                     /*0014*/
   freia_aipo_not(t2, in);                                              /*0015*/
   freia_aipo_and(out, t2, t1);                                         /*0016*/

   freia_common_destruct_data(t0);                                      /*0018*/
   freia_common_destruct_data(t1);                                      /*0019*/
   freia_common_destruct_data(t2);                                      /*0020*/

   return FREIA_OK;                                                     /*0022*/
}

! graphs

// graph for dag "dag_0" of module "freia_71" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_71" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "in" -> "15 !";
  "in" -> "13 E8";
}
// graph for dag "freia_71_helper_0_0" of module "freia_71" in dot format
digraph "freia_71_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "13 E8" [shape=box];
  "13 E8" -> "14 +." [label="t0"];
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "in" -> "13 E8";
  "in" -> "15 !";
}
// graph for dag "freia_71_helper_0_0_1" of module "freia_71" in dot format
digraph "freia_71_helper_0_0_1" {
  // inputs
  "t0" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "16 &" [shape=trapezium,orientation=270];
  "16 &" -> "out";
  "15 !" [shape=trapezium,orientation=270];
  "15 !" -> "16 &" [label="t2"];
  "in" -> "15 !";
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "16 &" [label="t1"];
  "t0" -> "14 +.";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"


// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies

// hold kernels forfreia_71_helper_0_0_1
static cl_kernel freia_71_helper_0_0_1_kernel[2];

// compile kernels for freia_71_helper_0_0_1
static freia_status freia_71_helper_0_0_1_compile(void)
{
  // OpenCL source for freia_71_helper_0_0_1
  const char * freia_71_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_71_helper_0_0_1\n"
    "KERNEL void freia_71_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t14 = PIXEL_ADD(in0, c0);\n"
    "    PIXEL t15 = PIXEL_NOT(in1);\n"
    "    PIXEL t16 = PIXEL_AND(t15, t14);\n"
    "    // set output pixels\n"
    "    p0[i] = t16;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_71_helper_0_0_1_source, "freia_71_helper_0_0_1", "-DPIXEL8", &freia_71_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(freia_71_helper_0_0_1_source, "freia_71_helper_0_0_1", "-DPIXEL16", &freia_71_helper_0_0_1_kernel[1]);
  return err;
}

// helper function freia_71_helper_0_0_1
freia_status freia_71_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = freia_71_helper_0_0_1_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = freia_71_helper_0_0_1_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_int), &c0);

  // call kernel freia_71_helper_0_0_1
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_71

// opencl for dag 0

// opencl function freia_71_helper_0_0_1
KERNEL void freia_71_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  int c0)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t14 = PIXEL_ADD(in0, c0);
    PIXEL t15 = PIXEL_NOT(in1);
    PIXEL t16 = PIXEL_AND(t15, t14);
    // set output pixels
    p0[i] = t16;
  }
}

! updated function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0;                                                    /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_71_helper_0_0_1(out, t0, in, 1);                               /*0014*/

   freia_common_destruct_data(t0);                                      /*0018*/

   return FREIA_OK;                                                     /*0022*/
}

! cleaned up function

int freia_71(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *t0;                                                    /*0006*/
   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0007*/

   t0 = freia_common_create_data(16, 1024, 720);                        /*0009*/

   freia_aipo_erode_8c(t0, in, kernel1x3);                              /*0013*/
   freia_71_helper_0_0_1(out, t0, in, 1);                               /*0014*/

   freia_common_destruct_data(t0);                                      /*0018*/

   return 0;                                                            /*0022*/
}
#
# FREIA COMPILATION DONE
#

