#
# SPOC
#

! initial function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_32" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_32" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "freia_32_helper_0_0" of module "freia_32" in dot format
digraph "freia_32_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_32
freia_status freia_32_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 9 add_const
  // nope
  // alu 9 add_const stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // i1 [0 input 1] -> [1 alu] 10 xor_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i1 [1 input 1] -> [1 alu] 10 xor_const
  // nope
  // alu 10 xor_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_XOR_IN1_CONST;
  sp.alu[1][0].constant = pi1;


  // output image o0 on 0 and image o1 on 1
  // o0 [0 alu] -> [1 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // o0 [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [1 output 0] -> [7 output 0] 0 null
  // o0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // o1 [1 alu] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [1 output 1] -> [7 output 1] 0 null
  // o1 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // o1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

! updated function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return FREIA_OK;                                                     /*0011*/
}
#
# TERAPIX
#

! initial function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_32" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_32" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "freia_32_helper_0_0" of module "freia_32" in dot format
digraph "freia_32_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_32
 * 2 input images, 2 output images
 * 4 image operations in dag
 * dag length is 2, dag width is 2
 * cost is 6 cycles per imagelet row
 */
freia_status freia_32_helper_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * i0,
  freia_data2d * i1,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  terapix_mcu_instr mcu_instr[2];

  // imagelet definitions...
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: +.(1) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_1;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_ADD_CONST;
  // 1: ^.(2) -> 2
  mcu_instr[1].macrocode.xmin1 = imagelet_2;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_2;
  mcu_instr[1].macrocode.ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi5;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[1].macrocode.xmin3 = x_1;
  mcu_instr[1].macrocode.ymin3 = y_1;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_XOR_CONST?;

  // inputs:
  // - imagelet 1 is i0 for i0
  // - imagelet 2 is i1 for i1

  // outputs:
  // - imagelet 1 is o0 for o0
  // - imagelet 2 is o1 for o1

  // double buffer management:
  // - buffer 1/3
  // - buffer 2/4

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);


  return ret;
}


! updated function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0(o0, o1, i0, i1, 10, 123);                        /*0009*/
   return FREIA_OK;                                                     /*0011*/
}
#
# FREIA COMPILATION DONE
#

