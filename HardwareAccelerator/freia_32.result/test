#
# AIPO
#
#
# compile generated freia_32
#

! initial function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_32" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_32" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}

! updated function for

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}
#
# SPOC
#

! initial function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_32" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_32" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "freia_32_helper_0_0" of module "freia_32" in dot format
digraph "freia_32_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_32
freia_status freia_32_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 9 add_const
  // nope
  // alu 9 add_const stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // i1 [0 input 1] -> [1 alu] 10 xor_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i1 [1 input 1] -> [1 alu] 10 xor_const
  // nope
  // alu 10 xor_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_XOR_IN1_CONST;
  sp.alu[1][0].constant = pi1;


  // output image o0 on 0 and image o1 on 1
  // o0 [0 alu] -> [1 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // o0 [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [1 output 0] -> [7 output 0] 0 null
  // o0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // o1 [1 alu] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [1 output 1] -> [7 output 1] 0 null
  // o1 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // o1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

! updated function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return FREIA_OK;                                                     /*0011*/
}

! cleaned up function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return 0;                                                            /*0011*/
}
#
# TERAPIX
#

! initial function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_32" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_32" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "freia_32_helper_0_0_0" of module "freia_32" in dot format
digraph "freia_32_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0 copies

/* FREIA terapix helper function for module freia_32
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 2 image operations in dag
 * dag length is 2, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 6
 * - communication: 128
 */
freia_status freia_32_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +.(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 1: ^.(2) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi5;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_XOR_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_XOR_CONST;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for o1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return FREIA_OK;                                                     /*0011*/
}

! cleaned up function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return 0;                                                            /*0011*/
}
#
# OPENCL
#

! initial function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_aipo_add_const(o0, i0, 10);                                    /*0009*/
   freia_aipo_xor_const(o1, i1, 123);                                   /*0010*/
   return FREIA_OK;                                                     /*0011*/
}

! graphs

// graph for dag "dag_0" of module "freia_32" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_32" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "freia_32_helper_0_0" of module "freia_32" in dot format
digraph "freia_32_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}
// graph for dag "freia_32_helper_0_0_0" of module "freia_32" in dot format
digraph "freia_32_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "10 ^." [shape=trapezium,orientation=270];
  "10 ^." -> "o1";
  "i1" -> "10 ^.";
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "o0";
  "i0" -> "9 +.";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"


// dag 0: 2 ops and 0 copies, optimized to 2 ops and 0+0 copies

// hold kernels forfreia_32_helper_0_0_0
static cl_kernel freia_32_helper_0_0_0_kernel[2];

// compile kernels for freia_32_helper_0_0_0
static freia_status freia_32_helper_0_0_0_compile(void)
{
  // OpenCL source for freia_32_helper_0_0_0
  const char * freia_32_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_32_helper_0_0_0\n"
    "KERNEL void freia_32_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t9 = ADD_OP(in0, c0);\n"
    "    PIXEL t10 = XOR_OP(in1, c1);\n"
    "    // set output pixels\n"
    "    p0[i] = t9;\n"
    "    p1[i] = t10;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_32_helper_0_0_0_source, "freia_32_helper_0_0_0", "-DPIXEL8", &freia_32_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(freia_32_helper_0_0_0_source, "freia_32_helper_0_0_0", "-DPIXEL16", &freia_32_helper_0_0_0_kernel[1]);
  return err;
}

// helper function freia_32_helper_0_0_0
freia_status freia_32_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = freia_32_helper_0_0_0_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = freia_32_helper_0_0_0_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_o1 = freia_common_data_get_offset(o1);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[o1->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_o1);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 10, sizeof(cl_int), &c0);
  err |= clSetKernelArg(kernel, 11, sizeof(cl_int), &c1);

  // call kernel freia_32_helper_0_0_0
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_32

// opencl for dag 0

// opencl function freia_32_helper_0_0_0
KERNEL void freia_32_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  int c0,
  int c1)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * p1 = o1 + ofs_o1;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t9 = ADD_OP(in0, c0);
    PIXEL t10 = XOR_OP(in1, c1);
    // set output pixels
    p0[i] = t9;
    p1[i] = t10;
  }
}

! updated function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return FREIA_OK;                                                     /*0011*/
}

! cleaned up function

freia_status freia_32(freia_data2d *o0, freia_data2d *o1, freia_data2d *i0, freia_data2d *i1)
{
   // test 2 independent alu operations
   // o0 = i0 +. 10
   // o1 = i1 ^. 123
   freia_32_helper_0_0_0(o0, o1, i0, i1, 10, 123);                      /*0009*/
   return 0;                                                            /*0011*/
}
#
# FREIA COMPILATION DONE
#

