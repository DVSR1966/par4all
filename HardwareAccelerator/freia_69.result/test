#
# AIPO
#
#
# compile generated freia_69
#

! initial function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{
   freia_data2d *t1, *t2;                                               /*0005*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0006*/
   t2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/

   freia_aipo_add_const(o0, in, 1);                                     /*0009*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0010*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0011*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0012*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0013*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0014*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0015*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0016*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0017*/
   freia_aipo_sub(o0, in, o0);                                          /*0018*/
   freia_aipo_not(t1, in);                                              /*0019*/
   freia_aipo_inf_const(o1, t1, 255);                                   /*0020*/
   freia_aipo_erode_8c(t2, t1, freia_morpho_kernel_8c);                 /*0021*/
   freia_aipo_inf(o1, o1, t2);                                          /*0022*/

   freia_common_destruct_data(t1);                                      /*0024*/
   freia_common_destruct_data(t2);                                      /*0025*/
   return 0;                                                            /*0026*/
}

! graphs

// graph for dag "dag_0" of module "freia_69" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "21 E8" [label="t1"];
  "19 !" -> "20 <." [label="t1"];
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_69" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1_1"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "21 E8" [label="t1"];
  "19 !" -> "20 <." [label="t1"];
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0_1"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0_2"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0_3"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0_4"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0_5"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0_6"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0_7"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0_8"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0_9"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}

! updated function for

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{
   freia_data2d *t1, *t2;                                               /*0005*/
   // hardware accelerator generated variable
   freia_data2d *o1_1 = freia_common_create_data(o1->bpp, o1->widthWa, o1->heightWa);
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0006*/
   t2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/

   freia_aipo_add_const(o0, in, 1);                                     /*0009*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0010*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0011*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0012*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0013*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0014*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0015*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0016*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0017*/
   freia_aipo_sub(o0, in, o0);                                          /*0018*/
   freia_aipo_not(t1, in);                                              /*0019*/
   freia_aipo_inf_const(o1_1, t1, 255);                                 /*0020*/
   freia_aipo_erode_8c(t2, t1, freia_morpho_kernel_8c);                 /*0021*/
   freia_aipo_inf(o1, o1_1, t2);                                        /*0022*/
   freia_common_destruct_data(o1_1);

   freia_common_destruct_data(t1);                                      /*0024*/
   freia_common_destruct_data(t2);                                      /*0025*/
   return 0;                                                            /*0026*/
}
#
# SPOC
#

! initial function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{
   freia_data2d *t1, *t2;                                               /*0005*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0006*/
   t2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/

   freia_aipo_add_const(o0, in, 1);                                     /*0009*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0010*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0011*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0012*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0013*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0014*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0015*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0016*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0017*/
   freia_aipo_sub(o0, in, o0);                                          /*0018*/
   freia_aipo_not(t1, in);                                              /*0019*/
   freia_aipo_inf_const(o1, t1, 255);                                   /*0020*/
   freia_aipo_erode_8c(t2, t1, freia_morpho_kernel_8c);                 /*0021*/
   freia_aipo_inf(o1, o1, t2);                                          /*0022*/

   freia_common_destruct_data(t1);                                      /*0024*/
   freia_common_destruct_data(t2);                                      /*0025*/
   return 0;                                                            /*0026*/
}

! graphs

// graph for dag "dag_0" of module "freia_69" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "21 E8" [label="t1"];
  "19 !" -> "20 <." [label="t1"];
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_69" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "21 E8" [label="t1"];
  "19 !" -> "20 <." [label="t1"];
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}
// graph for dag "freia_69_helper_0_0" of module "freia_69" in dot format
digraph "freia_69_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "t1" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "t1";
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0_1"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0_2"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0_3"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0_4"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0_5"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0_6"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0_7"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0_8"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0_9"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}
// graph for dag "freia_69_helper_0_1" of module "freia_69" in dot format
digraph "freia_69_helper_0_1" {
  // inputs
  "t1" [shape=circle];

  // outputs
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1_1"];
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "t1" -> "20 <.";
  "t1" -> "21 E8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 14 ops (0 copies), optimized to 14 (0+0 copies)
// split 0: 2 cuts
// split 1: 1 cut
// # SPOC calls: 3

// FREIA-SPoC helper function for module freia_69
freia_status freia_69_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  const int32_t * pi7)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 alu] 9 add_const
  // nope
  // alu 9 add_const stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // o0_9 [0 alu] -> [1 alu] 10 add_const
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // o0_9 [1 input 0] -> [1 alu] 10 add_const
  // nope
  // alu 10 add_const stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // o0_8 [1 alu] -> [2 alu] 11 add_const
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // o0_8 [2 input 0] -> [2 alu] 11 add_const
  // nope
  // alu 11 add_const stage 2
  si.alu[2][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[2][0].constant = pi2;


  // STAGE 3
  // o0_7 [2 alu] -> [3 alu] 12 add_const
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // o0_7 [3 input 0] -> [3 alu] 12 add_const
  // nope
  // alu 12 add_const stage 3
  si.alu[3][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[3][0].constant = pi3;


  // STAGE 4
  // o0_6 [3 alu] -> [4 alu] 13 add_const
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // o0_6 [4 input 0] -> [4 alu] 13 add_const
  // nope
  // alu 13 add_const stage 4
  si.alu[4][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[4][0].constant = pi4;


  // STAGE 5
  // o0_5 [4 alu] -> [5 alu] 14 add_const
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // o0_5 [5 input 0] -> [5 alu] 14 add_const
  // nope
  // alu 14 add_const stage 5
  si.alu[5][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[5][0].constant = pi5;


  // STAGE 6
  // o0_4 [5 alu] -> [6 alu] 15 add_const
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // o0_4 [6 input 0] -> [6 alu] 15 add_const
  // nope
  // alu 15 add_const stage 6
  si.alu[6][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[6][0].constant = pi6;


  // STAGE 7
  // o0_3 [6 alu] -> [7 poc 0] 16 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;
  // o0_3 [7 input 0] -> [7 poc 0] 16 erode_8c
  // nope
  // poc 16 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi7[i];

  // in [0 input 1] -> [7 alu] 19 not
  si.mux[0][3].op = SPOC_MUX_IN1;
  // in [1 input 1] -> [7 alu] 19 not
  si.mux[1][3].op = SPOC_MUX_IN1;
  // in [2 input 1] -> [7 alu] 19 not
  si.mux[2][3].op = SPOC_MUX_IN1;
  // in [3 input 1] -> [7 alu] 19 not
  si.mux[3][3].op = SPOC_MUX_IN1;
  // in [4 input 1] -> [7 alu] 19 not
  si.mux[4][3].op = SPOC_MUX_IN1;
  // in [5 input 1] -> [7 alu] 19 not
  si.mux[5][3].op = SPOC_MUX_IN1;
  // in [6 input 1] -> [7 alu] 19 not
  si.mux[6][3].op = SPOC_MUX_IN1;
  // in [7 input 1] -> [7 alu] 19 not
  // nope
  // alu 19 not stage 7 flipped
  si.alu[7][0].op = SPOC_ALU_NOT_IN1;


  // output image o0_2 on 0 and image 0`t1 on 1
  // o0_2 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0_2 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`t1 [7 alu] -> [7 output 1] 0 null
  si.mux[7][1].op = SPOC_MUX_IN1;
  si.mux[7][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t1 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_69
freia_status freia_69_helper_0_0_1(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // o0_2 [0 input 1] -> [0 poc 1] 17 erode_8c
  // nope
  // poc 17 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // in [0 input 0] -> [0 alu] 18 sub
  // nope
  // o0_1 [0 poc 1] -> [0 alu] 18 sub
  // nope
  // alu 18 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image o0 on 0
  // o0 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [0 output 0] -> [7 output 0] 0 null
  // o0 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_69
freia_status freia_69_helper_0_1_0(freia_data2d * o0, freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t1 [0 input 0] -> [0 poc 0] 21 erode_8c
  // nope
  // poc 21 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`t1 [0 input 1] -> [0 alu] 20 inf_const
  // nope
  // alu 20 inf_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[0][0].constant = pi1;


  // STAGE 1
  // 0`t2 [0 poc 0] -> [1 alu] 22 inf
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`t2 [1 input 0] -> [1 alu] 22 inf
  // nope
  // o1_1 [0 alu] -> [1 alu] 22 inf
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // o1_1 [1 input 1] -> [1 alu] 22 inf
  // nope
  // alu 22 inf stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image o1 on 0
  // o1 [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [1 output 0] -> [7 output 0] 0 null
  // o1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

! updated function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{
   freia_data2d *t1;                                                    /*0005*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0006*/

   freia_69_helper_0_0_0(o0, t1, in, 1, 1, 1, 1, 1, 1, 1, freia_morpho_kernel_8c);     /*0009*/
   freia_69_helper_0_0_1(o0, in, o0, freia_morpho_kernel_8c);           /*0017*/
   freia_69_helper_0_1_0(o1, t1, freia_morpho_kernel_8c, 255);          /*0020*/

   freia_common_destruct_data(t1);                                      /*0024*/
   return 0;                                                            /*0026*/
}

! cleaned up function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{
   freia_data2d *t1;                                                    /*0005*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0006*/

   freia_69_helper_0_0_0(o0, t1, in, 1, 1, 1, 1, 1, 1, 1, freia_morpho_kernel_8c);     /*0009*/
   freia_69_helper_0_0_1(o0, in, o0, freia_morpho_kernel_8c);           /*0017*/
   freia_69_helper_0_1_0(o1, t1, freia_morpho_kernel_8c, 255);          /*0020*/

   freia_common_destruct_data(t1);                                      /*0024*/
   return 0;                                                            /*0026*/
}
#
# TERAPIX
#

! initial function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{
   freia_data2d *t1, *t2;                                               /*0005*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0006*/
   t2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/

   freia_aipo_add_const(o0, in, 1);                                     /*0009*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0010*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0011*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0012*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0013*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0014*/
   freia_aipo_add_const(o0, o0, 1);                                     /*0015*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0016*/
   freia_aipo_erode_8c(o0, o0, freia_morpho_kernel_8c);                 /*0017*/
   freia_aipo_sub(o0, in, o0);                                          /*0018*/
   freia_aipo_not(t1, in);                                              /*0019*/
   freia_aipo_inf_const(o1, t1, 255);                                   /*0020*/
   freia_aipo_erode_8c(t2, t1, freia_morpho_kernel_8c);                 /*0021*/
   freia_aipo_inf(o1, o1, t2);                                          /*0022*/

   freia_common_destruct_data(t1);                                      /*0024*/
   freia_common_destruct_data(t2);                                      /*0025*/
   return 0;                                                            /*0026*/
}

! graphs

// graph for dag "dag_0" of module "freia_69" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "21 E8" [label="t1"];
  "19 !" -> "20 <." [label="t1"];
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_69" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "21 E8" [label="t1"];
  "19 !" -> "20 <." [label="t1"];
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0"];
  "in" -> "19 !";
  "in" -> "18 -";
  "in" -> "9 +.";
}
// graph for dag "freia_69_helper_0_0_0" of module "freia_69" in dot format
digraph "freia_69_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "18 -" [shape=trapezium,orientation=270];
  "18 -" -> "o0";
  "22 <" [shape=trapezium,orientation=270];
  "22 <" -> "o1";
  "20 <." [shape=trapezium,orientation=270];
  "20 <." -> "22 <" [label="o1_1"];
  "21 E8" [shape=box];
  "21 E8" -> "22 <" [label="t2"];
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "20 <." [label="t1"];
  "19 !" -> "21 E8" [label="t1"];
  "17 E8" [shape=box];
  "17 E8" -> "18 -" [label="o0_1"];
  "16 E8" [shape=box];
  "16 E8" -> "17 E8" [label="o0_2"];
  "15 +." [shape=trapezium,orientation=270];
  "15 +." -> "16 E8" [label="o0_3"];
  "14 +." [shape=trapezium,orientation=270];
  "14 +." -> "15 +." [label="o0_4"];
  "13 +." [shape=trapezium,orientation=270];
  "13 +." -> "14 +." [label="o0_5"];
  "12 +." [shape=trapezium,orientation=270];
  "12 +." -> "13 +." [label="o0_6"];
  "11 +." [shape=trapezium,orientation=270];
  "11 +." -> "12 +." [label="o0_7"];
  "10 +." [shape=trapezium,orientation=270];
  "10 +." -> "11 +." [label="o0_8"];
  "9 +." [shape=trapezium,orientation=270];
  "9 +." -> "10 +." [label="o0_9"];
  "in" -> "18 -";
  "in" -> "19 !";
  "in" -> "9 +.";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_69
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 14 image operations in dag
 * dag length is 11, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 81
 * - communication: 96
 */
freia_status freia_69_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * i0,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8,
  int32_t pi9,
  const int32_t * pi10,
  int32_t pi11)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 2;
  const int32_t y_2 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 3;
  const int32_t y_3 = 0;
  // operation 4 parameters
  int16_t p_4[1];
  const int32_t x_4 = 4;
  const int32_t y_4 = 0;
  // operation 5 parameters
  int16_t p_5[1];
  const int32_t x_5 = 5;
  const int32_t y_5 = 0;
  // operation 6 parameters
  int16_t p_6[1];
  const int32_t x_6 = 6;
  const int32_t y_6 = 0;
  // operation 7 parameters
  int16_t p_7[9];
  const int32_t x_7 = 7;
  const int32_t y_7 = 0;
  // operation 11 parameters
  int16_t p_11[1];
  const int32_t x_11 = 10;
  const int32_t y_11 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][15];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 170;
  int imagelet_1 = 0;
  int imagelet_2 = 170;
  int imagelet_3 = 340;
  int imagelet_4 = 510;
  int imagelet_5 = 680;
  int imagelet_6 = 850;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +.(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 1: +.(2) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi4;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 2: +.(2) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi5;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 3: +.(2) -> 2
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi6;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 4: +.(2) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  p_4[0] = pi7;
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 5: +.(2) -> 2
  mcu_macro[0][5].xmin1 = imagelet_io_2_0;
  mcu_macro[1][5].xmin1 = imagelet_io_2_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  // copy of operation 5 parameters
  p_5[0] = pi8;
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][5].xmin3 = x_5;
  mcu_macro[1][5].xmin3 = x_5;
  mcu_macro[0][5].ymin3 = y_5;
  mcu_macro[1][5].ymin3 = y_5;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 6: +.(2) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_2_0;
  mcu_macro[1][6].xmin1 = imagelet_io_2_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_2_0;
  mcu_macro[1][6].xmin2 = imagelet_io_2_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  // copy of operation 6 parameters
  p_6[0] = pi9;
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 7: E8(2) -> 3
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  // copy of operation 7 parameters
  for(i=0; i<9; i++)
    p_7[i] = pi10[i];
  gram.xoffset = x_7;
  gram.yoffset = y_7;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_7;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][7].xmin3 = x_7;
  mcu_macro[1][7].xmin3 = x_7;
  mcu_macro[0][7].ymin3 = y_7;
  mcu_macro[1][7].ymin3 = y_7;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_7;
  mcu_macro[1][8].xmin3 = x_7;
  mcu_macro[0][8].ymin3 = y_7;
  mcu_macro[1][8].ymin3 = y_7;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: !(1) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_NOT;
  // 10: E8(3) -> 4
  mcu_macro[0][10].xmin1 = imagelet_3;
  mcu_macro[1][10].xmin1 = imagelet_3;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_4;
  mcu_macro[1][10].xmin2 = imagelet_4;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_7;
  mcu_macro[1][10].xmin3 = x_7;
  mcu_macro[0][10].ymin3 = y_7;
  mcu_macro[1][10].ymin3 = y_7;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: <.(3) -> 3
  mcu_macro[0][11].xmin1 = imagelet_3;
  mcu_macro[1][11].xmin1 = imagelet_3;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_3;
  mcu_macro[1][11].xmin2 = imagelet_3;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  // copy of operation 11 parameters
  p_11[0] = pi11;
  gram.xoffset = x_11;
  gram.yoffset = y_11;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_11;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][11].xmin3 = x_11;
  mcu_macro[1][11].xmin3 = x_11;
  mcu_macro[0][11].ymin3 = y_11;
  mcu_macro[1][11].ymin3 = y_11;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_INF_CONST;
  // 12: <(3,4) -> 3
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_4;
  mcu_macro[1][12].xmin2 = imagelet_4;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = imagelet_3;
  mcu_macro[1][12].xmin3 = imagelet_3;
  mcu_macro[0][12].ymin3 = 0;
  mcu_macro[1][12].ymin3 = 0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_INF3;
  // 13: -(1,2) -> 1
  mcu_macro[0][13].xmin1 = imagelet_io_1_0;
  mcu_macro[1][13].xmin1 = imagelet_io_1_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_2_0;
  mcu_macro[1][13].xmin2 = imagelet_io_2_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = imagelet_io_1_0;
  mcu_macro[1][13].xmin3 = imagelet_io_1_1;
  mcu_macro[0][13].ymin3 = 0;
  mcu_macro[1][13].ymin3 = 0;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_SUB3;
  // output copy 3 -> 2
  mcu_macro[0][14].xmin1 = imagelet_3;
  mcu_macro[1][14].xmin1 = imagelet_3;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_2_0;
  mcu_macro[1][14].xmin2 = imagelet_io_2_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for o1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 15;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


! updated function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{

   freia_69_helper_0_0_0(o0, o1, in, 1, 1, 1, 1, 1, 1, 1, freia_morpho_kernel_8c, 255);               /*0009*/

   return 0;                                                            /*0026*/
}

! cleaned up function

int freia_69(freia_data2d *o0, freia_data2d *o1, const freia_data2d *in)
{

   freia_69_helper_0_0_0(o0, o1, in, 1, 1, 1, 1, 1, 1, 1, freia_morpho_kernel_8c, 255);               /*0009*/

   return 0;                                                            /*0026*/
}
#
# FREIA COMPILATION DONE
#

