#
# AIPO
#
#
# compile generated freia_22
#

! initial function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_aipo_div(o, i0, i1);                                           /*0010*/
   freia_aipo_or(o, o, i0);                                             /*0011*/
   freia_aipo_addsat(o, o, i0);                                         /*0012*/

   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_22" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "dag_cleaned_0" of module "freia_22" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o_1"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o_2"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}

! updated function for

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_aipo_div(o, i0, i1);                                           /*0010*/
   freia_aipo_or(o, o, i0);                                             /*0011*/
   freia_aipo_addsat(o, o, i0);                                         /*0012*/

   return FREIA_OK;                                                     /*0014*/
}
#
# SPOC
#

! initial function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_aipo_div(o, i0, i1);                                           /*0010*/
   freia_aipo_or(o, o, i0);                                             /*0011*/
   freia_aipo_addsat(o, o, i0);                                         /*0012*/

   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_22" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "dag_cleaned_0" of module "freia_22" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "freia_22_helper_0_0" of module "freia_22" in dot format
digraph "freia_22_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o_1"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o_2"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_22
freia_status freia_22_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 10 div
  // nope
  // i1 [0 input 1] -> [0 alu] 10 div
  // nope
  // alu 10 div stage 0
  si.alu[0][0].op = SPOC_ALU_DIV_IN0_IN1;


  // STAGE 1
  // i0 [0 input 0] -> [1 alu] 11 or
  si.mux[0][0].op = SPOC_MUX_IN0;
  // i0 [1 input 0] -> [1 alu] 11 or
  // nope
  // o_2 [0 alu] -> [1 alu] 11 or
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // o_2 [1 input 1] -> [1 alu] 11 or
  // nope
  // alu 11 or stage 1
  si.alu[1][0].op = SPOC_ALU_OR_IN0_IN1;


  // STAGE 2
  // i0 [1 poc 0] -> [2 alu] 12 addsat
  si.mux[1][0].op = SPOC_MUX_IN0;
  // i0 [2 input 0] -> [2 alu] 12 addsat
  // nope
  // o_1 [1 alu] -> [2 alu] 12 addsat
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // o_1 [2 input 1] -> [2 alu] 12 addsat
  // nope
  // alu 12 addsat stage 2
  si.alu[2][0].op = SPOC_ALU_ADDSAT_IN0_IN1;


  // output image o on 0
  // o [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [2 output 0] -> [7 output 0] 0 null
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return 0;                                                            /*0014*/
}
#
# TERAPIX
#

! initial function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_aipo_div(o, i0, i1);                                           /*0010*/
   freia_aipo_or(o, o, i0);                                             /*0011*/
   freia_aipo_addsat(o, o, i0);                                         /*0012*/

   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_22" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "dag_cleaned_0" of module "freia_22" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "freia_22_helper_0_0_0" of module "freia_22" in dot format
digraph "freia_22_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o_1"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o_2"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0 copies

/* FREIA terapix helper function for module freia_22
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 12
 * - communication: 96
 */
freia_status freia_22_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: /(1,2) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_2_0;
  mcu_macro[1][0].xmin3 = imagelet_io_2_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DIV3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DIV3;
  // 1: |(2,1) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_2_0;
  mcu_macro[1][1].xmin3 = imagelet_io_2_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_OR3;
  // 2: +s(2,1) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_1_0;
  mcu_macro[1][2].xmin3 = imagelet_io_1_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ADDSAT?;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ADDSAT?;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return 0;                                                            /*0014*/
}
#
# OPENCL
#

! initial function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_aipo_div(o, i0, i1);                                           /*0010*/
   freia_aipo_or(o, o, i0);                                             /*0011*/
   freia_aipo_addsat(o, o, i0);                                         /*0012*/

   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_22" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "dag_cleaned_0" of module "freia_22" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o_1"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o_2"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "freia_22_helper_0_0" of module "freia_22" in dot format
digraph "freia_22_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o_1"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o_2"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "freia_22_helper_0_0_0" of module "freia_22" in dot format
digraph "freia_22_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o_1"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o_2"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/OpenCL.h>
#include <private/freiaGatewayOpenCL.h>

// support function, should be in FREIA runtime?
static freia_status get_compiled_opencl(
  const char * source, // opencl source
  const char * kname, // expected kernel name
  const char * option // compiler option
  cl_kernel * kernel) // where to put the kernel
{
  freia_status err;
  char * opts;
  int n = asprint(&ops, "%s %s ", frclTarget.compileOptions, option);
  if (n==-1) return FREIA_UNLISTED_ERROR;
  cl_program prg =
    freia_op_compile_string_opencl(source, ops, &err);
  if (err != FREIA_OK) return err;
  *kernel = freia_op_get_kernel(prg, kname, &err);
  return err;
}

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0 copies

// hold kernels forfreia_22_helper_0_0_0
static cl_kernel freia_22_helper_0_0_0_kernel[2];

// compile kernels for freia_22_helper_0_0_0
static freia_status freia_22_helper_0_0_0_compile(void)
{
  // OpenCL source for freia_22_helper_0_0_0
  const char * freia_22_helper_0_0_0_source = "
// FREIA OpenCL specific includes
#include <freiaAtomicOpCommonOpenCL.hcl>

// opencl function freia_22_helper_0_0_0
KERNEL void freia_22_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t10 = PIXEL_DIV(in0, in1);
    PIXEL t11 = PIXEL_OR(t10, in0);
    PIXEL t12 = PIXEL_ADDSAT(t11, in0);
    // set output pixels
    p0[i] = t12;
  }
}
";
  freia_status err = FREIA_OK;
  err |= get_compiled_opencl(freia_22_helper_0_0_0_source, "freia_22_helper_0_0_0", "-DPIXEL8", &freia_22_helper_0_0_0_kernel[0]);
  err |= get_compiled_opencl(freia_22_helper_0_0_0_source, "freia_22_helper_0_0_0", "-DPIXEL16", &freia_22_helper_0_0_0_kernel[1]);
  return err;
}

// helper function freia_22_helper_0_0_0
freia_status freia_22_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel,

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = freia_22_helper_0_0_0_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = freia_22_helper_0_0_0_kernel[bpp];

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &pitch);

  // call kernel freia_22_helper_0_0_0
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
// FREIA OpenCL specific includes
#include <freiaAtomicOpCommonOpenCL.hcl>
// generated OpenCL kernels for function freia_22

// opencl for dag 0

// opencl function freia_22_helper_0_0_0
KERNEL void freia_22_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t10 = PIXEL_DIV(in0, in1);
    PIXEL t11 = PIXEL_OR(t10, in0);
    PIXEL t12 = PIXEL_ADDSAT(t11, in0);
    // set output pixels
    p0[i] = t12;
  }
}

! updated function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return 0;                                                            /*0014*/
}
#
# FREIA COMPILATION DONE
#

