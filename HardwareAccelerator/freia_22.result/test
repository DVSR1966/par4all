
! initial function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_aipo_div(o, i0, i1);                                           /*0010*/
   freia_aipo_or(o, o, i0);                                             /*0011*/
   freia_aipo_addsat(o, o, i0);                                         /*0012*/

   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_22" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "dag_cleaned_0" of module "freia_22" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}
// graph for dag "freia_22_helper_0_0" of module "freia_22" in dot format
digraph "freia_22_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "12 +s" [shape=trapezium,orientation=270];
  "12 +s" -> "o";
  "11 |" [shape=trapezium,orientation=270];
  "11 |" -> "12 +s" [label="o"];
  "10 /" [shape=trapezium,orientation=270];
  "10 /" -> "11 |" [label="o"];
  "i1" -> "10 /";
  "i0" -> "12 +s";
  "i0" -> "11 |";
  "i0" -> "10 /";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_22
freia_status freia_22_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 10 div
  // nope
  // i1 [0 input 1] -> [0 alu] 10 div
  // nope
  // alu 10 div stage 0
  si.alu[0][0].op = SPOC_ALU_DIV_IN0_IN1;


  // STAGE 1
  // i0 [0 input 0] -> [1 alu] 11 or
  si.mux[0][0].op = SPOC_MUX_IN0;
  // i0 [1 input 0] -> [1 alu] 11 or
  // nope
  // o [0 alu] -> [1 alu] 11 or
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // o [1 input 1] -> [1 alu] 11 or
  // nope
  // alu 11 or stage 1
  si.alu[1][0].op = SPOC_ALU_OR_IN0_IN1;


  // STAGE 2
  // i0 [1 poc 0] -> [2 alu] 12 addsat
  si.mux[1][0].op = SPOC_MUX_IN0;
  // i0 [2 input 0] -> [2 alu] 12 addsat
  // nope
  // o [1 alu] -> [2 alu] 12 addsat
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // o [2 input 1] -> [2 alu] 12 addsat
  // nope
  // alu 12 addsat stage 2
  si.alu[2][0].op = SPOC_ALU_ADDSAT_IN0_IN1;


  // output image o on 0
  // o [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [2 output 0] -> [7 output 0] 0 null
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_22(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   // external variable reuse
   // o = i0 / i1
   // o = o | i0
   // o = o +sat i0
   freia_22_helper_0_0_0(o, i0, i1);                                    /*0010*/

   return FREIA_OK;                                                     /*0014*/
}
