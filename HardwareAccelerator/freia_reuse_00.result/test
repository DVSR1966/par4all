
! initial function

freia_status freia_reuse_00(freia_data2d *o, freia_data2d *i, int32_t *k)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   // reuse same variable over and over
   // t = E6(i)
   // t = D6(t)
   // t = E8(t)
   // o = D8(t)
   freia_aipo_erode_6c(t, i, k);                                        /*0012*/
   freia_aipo_dilate_6c(t, t, k);                                       /*0013*/
   freia_aipo_erode_8c(t, t, k);                                        /*0014*/
   freia_aipo_dilate_8c(o, t, k);                                       /*0015*/

   freia_common_destruct_data(t);                                       /*0017*/

   return FREIA_OK;                                                     /*0019*/
}

! graphs

// graph for dag "dag_0" of module "freia_reuse_00" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 D8" [shape=box];
  "15 D8" -> "o";
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "13 D6" [shape=box];
  "13 D6" -> "14 E8" [label="t"];
  "12 E6" [shape=box];
  "12 E6" -> "13 D6" [label="t"];
  "i" -> "12 E6";
}
// graph for dag "dag_cleaned_0" of module "freia_reuse_00" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 D8" [shape=box];
  "15 D8" -> "o";
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "13 D6" [shape=box];
  "13 D6" -> "14 E8" [label="t"];
  "12 E6" [shape=box];
  "12 E6" -> "13 D6" [label="t"];
  "i" -> "12 E6";
}
// graph for dag "freia_reuse_00_helper_0_0" of module "freia_reuse_00" in dot format
digraph "freia_reuse_00_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "15 D8" [shape=box];
  "15 D8" -> "o";
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "13 D6" [shape=box];
  "13 D6" -> "14 E8" [label="t"];
  "12 E6" [shape=box];
  "12 E6" -> "13 D6" [label="t"];
  "i" -> "12 E6";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_reuse_00
freia_status freia_reuse_00_helper_0_0_0(freia_data2d * o0, freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 12 erode_6c
  // nope
  // poc 12 erode_6c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`t [0 poc 0] -> [1 poc 0] 13 dilate_6c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`t [1 input 0] -> [1 poc 0] 13 dilate_6c
  // nope
  // poc 13 dilate_6c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`t [1 poc 0] -> [2 poc 0] 14 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t [2 input 0] -> [2 poc 0] 14 erode_8c
  // nope
  // poc 14 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`t [2 poc 0] -> [3 poc 0] 15 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t [3 input 0] -> [3 poc 0] 15 dilate_8c
  // nope
  // poc 15 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // output image o on 0
  // o [3 poc 0] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [3 output 0] -> [7 output 0] 0 null
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_reuse_00(freia_data2d *o, freia_data2d *i, int32_t *k)
{
   // reuse same variable over and over
   // t = E6(i)
   // t = D6(t)
   // t = E8(t)
   // o = D8(t)
   freia_reuse_00_helper_0_0_0(o, i, k);                                /*0012*/
   
   
   return FREIA_OK;                                                     /*0019*/
}

