#
# AIPO
#
#
# compile generated freia_dead_04
#

! initial function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *t, *out;                                          /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   t = freia_common_create_data(16, 1024, 720);                         /*0014*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/

   freia_aipo_erode_8c(out, in, kernel);                                /*0020*/
   freia_aipo_sup(t, out, in);                                          /*0021*/
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_04" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs

  // computation vertices
  "21 >" [shape=trapezium,orientation=270];
  "20 E8" [shape=box];
  "20 E8" -> "21 >" [label="out"];
  "in" -> "21 >";
  "in" -> "20 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_04" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices
}

! updated function for

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *out;                                              /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/
   
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}
#
# SPOC
#

! initial function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *t, *out;                                          /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   t = freia_common_create_data(16, 1024, 720);                         /*0014*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/

   freia_aipo_erode_8c(out, in, kernel);                                /*0020*/
   freia_aipo_sup(t, out, in);                                          /*0021*/
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_04" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs

  // computation vertices
  "21 >" [shape=trapezium,orientation=270];
  "20 E8" [shape=box];
  "20 E8" -> "21 >" [label="out"];
  "in" -> "21 >";
  "in" -> "20 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_04" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 2 ops (0 copies), optimized to 0 (0 copies)
// # SPOC calls: 0

! updated function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *out;                                              /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/
   
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}

! cleaned up function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *out;                                              /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/
   
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}
#
# TERAPIX
#

! initial function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *t, *out;                                          /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   t = freia_common_create_data(16, 1024, 720);                         /*0014*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/

   freia_aipo_erode_8c(out, in, kernel);                                /*0020*/
   freia_aipo_sup(t, out, in);                                          /*0021*/
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_04" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs

  // computation vertices
  "21 >" [shape=trapezium,orientation=270];
  "20 E8" [shape=box];
  "20 E8" -> "21 >" [label="out"];
  "in" -> "21 >";
  "in" -> "20 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_04" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

! updated function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *out;                                              /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/
   
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}

! cleaned up function

int freia_dead_04(int32_t *kernel)
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_common_open_input(&fdin, 0);                                   /*0008*/
   freia_common_open_output(&fdout, 1);                                 /*0009*/

   freia_data2d *in, *out;                                              /*0011*/

   in = freia_common_create_data(16, 1024, 720);                        /*0013*/
   out = freia_common_create_data(16, 1024, 720);                       /*0015*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0018*/
   
   
   // output
   freia_common_tx_image(out, &fdout);                                  /*0024*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0027*/
   freia_common_destruct_data(t1);                                      /*0028*/
   freia_common_destruct_data(out);                                     /*0029*/

   freia_common_close_input(&fdin);                                     /*0031*/
   freia_common_close_output(&fdout);                                   /*0032*/

   return 0;                                                            /*0034*/
}
#
# FREIA COMPILATION DONE
#

