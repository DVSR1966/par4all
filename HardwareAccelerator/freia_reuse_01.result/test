
! initial function

freia_status freia_reuse_01(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t *k)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   
   // variable reuse & duplicate operations?
   freia_aipo_erode_6c(o0, i, k);                                       /*0008*/
   freia_aipo_erode_6c(t, i, k);                                        /*0009*/
   freia_aipo_erode_6c(t, t, k);                                        /*0010*/
   freia_aipo_dilate_6c(o1, i, k);                                      /*0011*/
   freia_aipo_dilate_6c(o1, o1, k);                                     /*0012*/
   freia_aipo_sub(o1, o1, t);                                           /*0013*/
   
   //freia_common_destruct_data(t);

   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_reuse_01" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "13 -" [shape=trapezium,orientation=270];
  "13 -" -> "o1";
  "12 D6" [shape=box];
  "12 D6" -> "13 -" [label="o1"];
  "11 D6" [shape=box];
  "11 D6" -> "12 D6" [label="o1"];
  "10 E6" [shape=box];
  "10 E6" -> "13 -" [label="t"];
  "9 E6" [shape=box];
  "9 E6" -> "10 E6" [label="t"];
  "8 E6" [shape=box];
  "8 E6" -> "o0";
  "i" -> "11 D6";
  "i" -> "9 E6";
  "i" -> "8 E6";
}
// graph for dag "dag_cleaned_0" of module "freia_reuse_01" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "13 -" [shape=trapezium,orientation=270];
  "13 -" -> "o1";
  "12 D6" [shape=box];
  "12 D6" -> "13 -" [label="o1"];
  "11 D6" [shape=box];
  "11 D6" -> "12 D6" [label="o1"];
  "10 E6" [shape=box];
  "10 E6" -> "13 -" [label="t"];
  "8 E6" [shape=box];
  "8 E6" -> "10 E6" [label="o0"];
  "8 E6" -> "o0";
  "i" -> "11 D6";
  "i" -> "8 E6";
}
// graph for dag "freia_reuse_01_helper_0_0" of module "freia_reuse_01" in dot format
digraph "freia_reuse_01_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "t" [shape=circle];

  // computation vertices
  "10 E6" [shape=box];
  "10 E6" -> "t";
  "8 E6" [shape=box];
  "8 E6" -> "10 E6" [label="o0"];
  "8 E6" -> "o0";
  "i" -> "8 E6";
}
// graph for dag "freia_reuse_01_helper_0_1" of module "freia_reuse_01" in dot format
digraph "freia_reuse_01_helper_0_1" {
  // inputs
  "t" [shape=circle];
  "i" [shape=circle];

  // outputs
  "o1" [shape=circle];

  // computation vertices
  "13 -" [shape=trapezium,orientation=270];
  "13 -" -> "o1";
  "t" -> "13 -";
  "12 D6" [shape=box];
  "12 D6" -> "13 -" [label="o1"];
  "11 D6" [shape=box];
  "11 D6" -> "12 D6" [label="o1"];
  "i" -> "11 D6";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_reuse_01
freia_status freia_reuse_01_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, int32_t *kern0, int32_t *kern1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 8 erode_6c
  // nope
  // poc 8 erode_6c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = kern0[i];


  // STAGE 2
  // o0 [0 poc 0] -> [2 poc 0] 10 erode_6c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // o0 [1 input 0] -> [2 poc 0] 10 erode_6c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o0 [2 input 0] -> [2 poc 0] 10 erode_6c
  // nope
  // poc 10 erode_6c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = kern1[i];


  // output image o0 on 1 and image 0`t on 0
  // o0 [1 poc 0] -> [2 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // o0 [2 input 1] -> [2 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // o0 [2 output 1] -> [7 output 1] 0 null
  // o0 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o0 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o0 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o0 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o0 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`t [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t [2 output 0] -> [7 output 0] 0 null
  // 0`t [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`t [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o1, o0, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module freia_reuse_01
freia_status freia_reuse_01_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1, int32_t *kern0, int32_t *kern1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 1] -> [0 poc 1] 11 dilate_6c
  // nope
  // poc 11 dilate_6c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = kern0[i];


  // STAGE 1
  // o1 [0 poc 1] -> [1 poc 1] 12 dilate_6c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // o1 [1 input 1] -> [1 poc 1] 12 dilate_6c
  // nope
  // poc 12 dilate_6c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_6_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = kern1[i];

  // 0`t [0 input 0] -> [1 alu] 13 sub
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`t [1 input 0] -> [1 alu] 13 sub
  // nope
  // o1 [1 poc 1] -> [1 alu] 13 sub
  // nope
  // alu 13 sub stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output image o1 on 0
  // o1 [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o1 [1 output 0] -> [7 output 0] 0 null
  // o1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_reuse_01(freia_data2d *o0, freia_data2d *o1, freia_data2d *i, int32_t *k)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   
   // variable reuse & duplicate operations?
   freia_reuse_01_helper_0_0_0(o0, t, i, k, k);                         /*0008*/
   freia_reuse_01_helper_0_1_0(o1, t, i, k, k);                         /*0011*/
   
   //freia_common_destruct_data(t);

   return FREIA_OK;                                                     /*0017*/
}
