#
# AIPO
#
#
# compile generated freia_03_5
#

! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}

! updated function for

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}
#
# SPOC
#

! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 8 ops and 0 copies, optimized to 8 ops and 0+0 copies
// split 0: 2 cuts
// # SPOC calls: 2

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i1 [0 input 1] -> [0 alu] 28 addsat_const
  // nope
  // alu 28 addsat_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ADDSAT_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // i0 [0 input 0] -> [1 alu] 27 add_const
  si.mux[0][0].op = SPOC_MUX_IN0;
  // i0 [1 input 0] -> [1 alu] 27 add_const
  // nope
  // alu 27 add_const stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`t1 [1 alu] -> [2 alu] 29 add
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`t1 [2 input 0] -> [2 alu] 29 add
  // nope
  // 0`t2 [0 alu] -> [2 alu] 29 add
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`t2 [1 input 1] -> [2 alu] 29 add
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`t2 [2 input 1] -> [2 alu] 29 add
  // nope
  // alu 29 add stage 2
  si.alu[2][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 3
  // 0`t1 [2 poc 0] -> [3 alu] 30 mul_const
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t1 [3 input 0] -> [3 alu] 30 mul_const
  // nope
  // alu 30 mul_const stage 3
  si.alu[3][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[3][0].constant = pi2;


  // STAGE 4
  // 0`t3 [2 alu] -> [4 alu] 31 div_const
  si.mux[2][1].op = SPOC_MUX_IN1;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`t3 [3 input 1] -> [4 alu] 31 div_const
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`t3 [4 input 1] -> [4 alu] 31 div_const
  // nope
  // alu 31 div_const stage 4 flipped
  si.alu[4][0].op = SPOC_ALU_DIV_IN1_CONST;
  sp.alu[4][0].constant = pi3;


  // output image 0`t4 on 0 and image 0`t5 on 1
  // 0`t4 [3 alu] -> [4 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`t4 [4 input 0] -> [4 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t4 [4 output 0] -> [4 output 0] 0 null
  // nope

  // 0`t5 [4 alu] -> [4 output 1] 0 null
  si.mux[4][1].op = SPOC_MUX_IN1;
  si.mux[4][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t5 [4 output 1] -> [4 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t4 [0 input 0] -> [0 alu] 32 and
  // nope
  // 0`t5 [0 input 1] -> [0 alu] 32 and
  // nope
  // alu 32 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // STAGE 1
  // alu 33 set_constant stage 1
  si.alu[1][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[1][0].constant = pi0;


  // STAGE 2
  // 0`t6 [0 alu] -> [2 alu] 34 mul
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t6 [1 input 0] -> [2 alu] 34 mul
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t6 [2 input 0] -> [2 alu] 34 mul
  // nope
  // 0`t7 [1 alu] -> [2 alu] 34 mul
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`t7 [2 input 1] -> [2 alu] 34 mul
  // nope
  // alu 34 mul stage 2
  si.alu[2][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image o on 0
  // o [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [2 output 0] -> [4 output 0] 0 null
  // o [3 input 0] -> [4 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [4 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);          /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(t4, t5, i0, i1, c2, c1, c3, c4);               /*0027*/
   freia_03_helper_0_0_1(o, t4, t5, c5);                                /*0032*/

   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/

   return FREIA_OK;                                                     /*0044*/
}

! cleaned up function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);          /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(t4, t5, i0, i1, c2, c1, c3, c4);               /*0027*/
   freia_03_helper_0_0_1(o, t4, t5, c5);                                /*0032*/

   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/

   return 0;                                                            /*0044*/
}
#
# TERAPIX
#

! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 8 ops and 0 copies, optimized to 8 ops and 0+0 copies

/* FREIA terapix helper function for module freia_03
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 8 image operations in dag
 * dag length is 6, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 26
 * - communication: 96
 */
freia_status freia_03_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 2;
  const int32_t y_3 = 0;
  // operation 4 parameters
  int16_t p_4[1];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  // operation 6 parameters
  int16_t p_6[1];
  const int32_t x_6 = 4;
  const int32_t y_6 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +s.(2) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADDSAT_CONST?;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADDSAT_CONST?;
  // 1: +.(1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi4;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 2: +(1,2) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_2_0;
  mcu_macro[1][2].xmin3 = imagelet_io_2_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ADD3;
  // 3: *.(1) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi5;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_MUL_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_MUL_CONST;
  // 4: /.(2) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  p_4[0] = pi6;
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DIV_CONST;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DIV_CONST;
  // 5: &(1,2) -> 2
  mcu_macro[0][5].xmin1 = imagelet_io_1_0;
  mcu_macro[1][5].xmin1 = imagelet_io_1_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_io_2_0;
  mcu_macro[1][5].xmin3 = imagelet_io_2_1;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_AND3;
  // 6: C() -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  // copy of operation 6 parameters
  p_6[0] = pi7;
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_SET_CONST;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_SET_CONST;
  // 7: *(2,1) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = imagelet_io_1_0;
  mcu_macro[1][7].xmin3 = imagelet_io_1_1;
  mcu_macro[0][7].ymin3 = 0;
  mcu_macro[1][7].ymin3 = 0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_MUL3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_MUL3;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(o, i0, i1, c2, c1, c3, c4, c5);                /*0027*/
   
   
   return FREIA_OK;                                                     /*0044*/
}

! cleaned up function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(o, i0, i1, c2, c1, c3, c4, c5);                /*0027*/
   
   
   return 0;                                                            /*0044*/
}
#
# OPENCL
#

! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"

// FREIA OpenCL runtime helper
extern freia_status freia_op_compile_kernel(
   const char*, const char*, const char*, cl_kernel *);

// dag 0: 8 ops and 0 copies, optimized to 8 ops and 0+0 copies

// hold kernels forfreia_03_helper_0_0_0
static cl_kernel freia_03_helper_0_0_0_kernel[2];

// compile kernels for freia_03_helper_0_0_0
static freia_status freia_03_helper_0_0_0_compile(void)
{
  // OpenCL source for freia_03_helper_0_0_0
  const char * freia_03_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_03_helper_0_0_0\n"
    "KERNEL void freia_03_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  int gid = get_global_id(1)*pitch + get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t27 = ADD_OP(in0, c0);\n"
    "    PIXEL t28 = ADDSAT_OP(in1, c1);\n"
    "    PIXEL t33 = SET_CONST_OP(c2);\n"
    "    PIXEL t29 = ADD_OP(t27, t28);\n"
    "    PIXEL t30 = MUL_OP(t27, c3);\n"
    "    PIXEL t31 = DIV_OP(t29, c4);\n"
    "    PIXEL t32 = AND_OP(t30, t31);\n"
    "    PIXEL t34 = MUL_OP(t32, t33);\n"
    "    // set output pixels\n"
    "    p0[i] = t34;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_03_helper_0_0_0_source, "freia_03_helper_0_0_0", "-DPIXEL8", &freia_03_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(freia_03_helper_0_0_0_source, "freia_03_helper_0_0_0", "-DPIXEL16", &freia_03_helper_0_0_0_kernel[1]);
  return err;
}

// helper function freia_03_helper_0_0_0
freia_status freia_03_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4)
{
  freia_status err = FREIA_OK;
  freia_data2d_opencl *pool= frclTarget.pool;
  int pitch = o0->row[1] - o0->row[0];
  int width = o0->widthWa;
  size_t workSize[2];
  workSize[0] = o0->heightWa;
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel;

  // handle on the fly compilation...
  static int to_compile = 1;

  if (to_compile) {
    freia_status cerr = freia_03_helper_0_0_0_compile();
    // compilation may have failed
    if (cerr) return cerr;
    to_compile = 0;
  }

  // now get kernel, which must be there...
  kernel = freia_03_helper_0_0_0_kernel[bpp];
  cl_int ofs_o0 = freia_common_data_get_offset(o0);
  cl_int ofs_i0 = freia_common_data_get_offset(i0);
  cl_int ofs_i1 = freia_common_data_get_offset(i1);

  // set kernel parameters
  err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &pool[o0->clId]);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_int), &ofs_o0);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &pool[i0->clId]);
  err |= clSetKernelArg(kernel, 3, sizeof(cl_int), &ofs_i0);
  err |= clSetKernelArg(kernel, 4, sizeof(cl_mem), &pool[i1->clId]);
  err |= clSetKernelArg(kernel, 5, sizeof(cl_int), &ofs_i1);
  err |= clSetKernelArg(kernel, 6, sizeof(cl_int), &width);
  err |= clSetKernelArg(kernel, 7, sizeof(cl_int), &pitch);
  err |= clSetKernelArg(kernel, 8, sizeof(cl_int), &c0);
  err |= clSetKernelArg(kernel, 9, sizeof(cl_int), &c1);
  err |= clSetKernelArg(kernel, 10, sizeof(cl_int), &c2);
  err |= clSetKernelArg(kernel, 11, sizeof(cl_int), &c3);
  err |= clSetKernelArg(kernel, 12, sizeof(cl_int), &c4);

  // call kernel freia_03_helper_0_0_0
  err |= clEnqueueNDRangeKernel(
            frclTarget.queue,
            kernel,
            1, // number of dimensions
            NULL, // undefined for OpenCL 1.0
            workSize, // x and y dimensions
            NULL, // local size
            0, // don't wait events
            NULL,
            NULL); // do not produce an event

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_03

// opencl for dag 0

// opencl function freia_03_helper_0_0_0
KERNEL void freia_03_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = get_global_id(1)*pitch + get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t27 = ADD_OP(in0, c0);
    PIXEL t28 = ADDSAT_OP(in1, c1);
    PIXEL t33 = SET_CONST_OP(c2);
    PIXEL t29 = ADD_OP(t27, t28);
    PIXEL t30 = MUL_OP(t27, c3);
    PIXEL t31 = DIV_OP(t29, c4);
    PIXEL t32 = AND_OP(t30, t31);
    PIXEL t34 = MUL_OP(t32, t33);
    // set output pixels
    p0[i] = t34;
  }
}

! updated function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(o, i0, i1, c1, c2, c5, c3, c4);                /*0027*/
   
   
   return FREIA_OK;                                                     /*0044*/
}

! cleaned up function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(o, i0, i1, c1, c2, c5, c3, c4);                /*0027*/
   
   
   return 0;                                                            /*0044*/
}
#
# FREIA COMPILATION DONE
#

