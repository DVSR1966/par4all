#
# AIPO
#

! initial function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   freia_aipo_sub(o, tmp, i1);                                          /*0008*/
   freia_common_destruct_data(tmp);                                     /*0009*/
   return FREIA_OK;                                                     /*0010*/
}

! graphs

// graph for dag "dag_0" of module "freia_00" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "dag_cleaned_0" of module "freia_00" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}

! updated function for

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   freia_aipo_sub(o, tmp, i1);                                          /*0008*/
   freia_common_destruct_data(tmp);                                     /*0009*/
   return FREIA_OK;                                                     /*0010*/
}
#
# SPOC
#

! initial function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   freia_aipo_sub(o, tmp, i1);                                          /*0008*/
   freia_common_destruct_data(tmp);                                     /*0009*/
   return FREIA_OK;                                                     /*0010*/
}

! graphs

// graph for dag "dag_0" of module "freia_00" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "dag_cleaned_0" of module "freia_00" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "freia_00_helper_0_0" of module "freia_00" in dot format
digraph "freia_00_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_00
freia_status freia_00_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 7 add
  // nope
  // i1 [0 input 1] -> [0 alu] 7 add
  // nope
  // alu 7 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 1
  // 0`tmp [0 alu] -> [1 alu] 8 sub
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`tmp [1 input 0] -> [1 alu] 8 sub
  // nope
  // i1 [0 input 1] -> [1 alu] 8 sub
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i1 [1 input 1] -> [1 alu] 8 sub
  // nope
  // alu 8 sub stage 1
  si.alu[1][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image o on 0
  // o [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_00_helper_0_0_0(o, i0, i1);                                    /*0007*/
   return FREIA_OK;                                                     /*0010*/
}

! cleaned up function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_00_helper_0_0_0(o, i0, i1);                                    /*0007*/
   return 0;                                                            /*0010*/
}
#
# TERAPIX
#

! initial function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   freia_aipo_sub(o, tmp, i1);                                          /*0008*/
   freia_common_destruct_data(tmp);                                     /*0009*/
   return FREIA_OK;                                                     /*0010*/
}

! graphs

// graph for dag "dag_0" of module "freia_00" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "dag_cleaned_0" of module "freia_00" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "freia_00_helper_0_0_0" of module "freia_00" in dot format
digraph "freia_00_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 -" [shape=trapezium,orientation=270];
  "8 -" -> "o";
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "8 -" [label="tmp"];
  "i1" -> "8 -";
  "i1" -> "7 +";
  "i0" -> "7 +";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_00
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 2 image operations in dag
 * dag length is 3, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 8
 * - communication: 96
 */
freia_status freia_00_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // memory initialization for reductions
  terapix_mcu_macrocode mem_init;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // 0: +(1,2) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_1_0;
  mcu_macro[1][0].xmin3 = imagelet_io_1_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD3;
  // 1: -(1,2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_SUB3;

  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_00_helper_0_0_0(o, i0, i1);                                    /*0007*/
   return FREIA_OK;                                                     /*0010*/
}

! cleaned up function

freia_status freia_00(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_00_helper_0_0_0(o, i0, i1);                                    /*0007*/
   return 0;                                                            /*0010*/
}
#
# FREIA COMPILATION DONE
#

