#
# AIPO
#
#
# compile generated freia_dead_02
#

! initial function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0007*/
   ret |= freia_common_destruct_data(tmp);                              /*0008*/
   return ret;                                                          /*0009*/
}

! graphs


! updated function for

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   ret |= 0;                                                            /*0008*/
   return ret;                                                          /*0009*/
}
#
# SPOC
#

! initial function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0007*/
   ret |= freia_common_destruct_data(tmp);                              /*0008*/
   return ret;                                                          /*0009*/
}

! graphs


! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

! updated function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   ret |= 0;                                                            /*0008*/
   return ret;                                                          /*0009*/
}

! cleaned up function

freia_status freia_dead_02(void)
{
   freia_status ret = 0;                                                /*0006*/
   return ret;                                                          /*0009*/
}
#
# TERAPIX
#

! initial function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0007*/
   ret |= freia_common_destruct_data(tmp);                              /*0008*/
   return ret;                                                          /*0009*/
}

! graphs


! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

! updated function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   ret |= 0;                                                            /*0008*/
   return ret;                                                          /*0009*/
}

! cleaned up function

freia_status freia_dead_02(void)
{
   freia_status ret = 0;                                                /*0006*/
   return ret;                                                          /*0009*/
}
#
# OPENCL
#

! initial function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0007*/
   ret |= freia_common_destruct_data(tmp);                              /*0008*/
   return ret;                                                          /*0009*/
}

! graphs


! acceleration function

// FREIA OpenCL includes
#include <CL/OpenCL.h>
#include <private/freiaGatewayOpenCL.h>

// support function, should be in FREIA runtime?
static freia_status get_compiled_opencl(
  const char * source, // opencl source
  const char * kname, // expected kernel name
  const char * option // compiler option
  cl_kernel * kernel) // where to put the kernel
{
  freia_status err;
  char * opts;
  int n = asprint(&ops, "%s %s ", frclTarget.compileOptions, option);
  if (n==-1) return FREIA_UNLISTED_ERROR;
  cl_program prg =
    freia_op_compile_string_opencl(source, ops, &err);
  if (err != FREIA_OK) return err;
  *kernel = freia_op_get_kernel(prg, kname, &err);
  return err;
}

! updated function

freia_status freia_dead_02(void)
{
   freia_status ret = FREIA_OK;                                         /*0006*/
   ret |= 0;                                                            /*0008*/
   return ret;                                                          /*0009*/
}

! cleaned up function

freia_status freia_dead_02(void)
{
   freia_status ret = 0;                                                /*0006*/
   return ret;                                                          /*0009*/
}
#
# FREIA COMPILATION DONE
#

