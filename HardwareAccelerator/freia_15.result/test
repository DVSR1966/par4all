#
# AIPO
#
#
# compile generated freia_15
#

! initial function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_15" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_15" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}

! updated function for

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}
#
# SPOC
#

! initial function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_15" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_15" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "freia_15_helper_0_0" of module "freia_15" in dot format
digraph "freia_15_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "i" -> "8 +.";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_15
freia_status freia_15_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po0,
  int32_t * po1,
  int32_t * po2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope


  // STAGE 1
  // i [0 measure 0] -> [1 alu] 8 add_const
  // i [1 input 0] -> [1 alu] 8 add_const
  // nope
  // alu 8 add_const stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[1][0].constant = pi3;


  // output image o on 0
  // o [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 9 global_min stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].minimum;

  // measure 10 global_max stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].maximum;

  // measure 11 global_vol stage 0 side 0
  *po2 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

! updated function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_15_helper_0_0_0(o, i, r0, r1, r2, c);                          /*0008*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_15_helper_0_0_0(o, i, r0, r1, r2, c);                          /*0008*/
   return 0;                                                            /*0012*/
}
#
# TERAPIX
#

! initial function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_15" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_15" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "freia_15_helper_0_0_0" of module "freia_15" in dot format
digraph "freia_15_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "i" -> "8 +.";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies

/* FREIA terapix helper function for module freia_15
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 12
 * - communication: 64
 */
freia_status freia_15_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po2,
  int32_t * po3,
  int32_t * po4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0_val initialization
  int16_t p_0_val[1];
  const int32_t x_0_val = 0;
  const int32_t y_0_val = 0;
  // array for reduction 0 extraction
  int32_t red_0[1];
  // operation 1_val initialization
  int16_t p_1_val[1];
  const int32_t x_1_val = 1;
  const int32_t y_1_val = 0;
  // array for reduction 1 extraction
  int32_t red_1[1];
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 2;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 3;
  const int32_t y_3 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 510;
  int imagelet_1 = 0;
  int imagelet_2 = 510;

  // memory for reductions
  int reduction_0 = 1023;
  int reduction_1 = 1022;
  int reduction_2 = 1020;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: min(1)
  // initializing  0_val
  p_0_val[0] = INT16_MAX;
  gram.xoffset = x_0_val;
  gram.yoffset = y_0_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_val
  mem_init.xmin1 = reduction_0;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure min at reduction_0
  mcu_macro[0][0].xmin2 = reduction_0;
  mcu_macro[1][0].xmin2 = reduction_0;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = 0;
  mcu_macro[1][0].xmin3 = 0;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  // 1: max(1)
  // initializing  1_val
  p_1_val[0] = INT16_MIN;
  gram.xoffset = x_1_val;
  gram.yoffset = y_1_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_val
  mem_init.xmin1 = reduction_1;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max at reduction_1
  mcu_macro[0][1].xmin2 = reduction_1;
  mcu_macro[1][1].xmin2 = reduction_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = 0;
  mcu_macro[1][1].xmin3 = 0;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // 3: +.(1) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi5;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ADD_CONST;


  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures
  // get measure min result from reduction_0
  redter.xres = reduction_0;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_0;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MIN;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po2 = (int32_t) red_0[0];
  // get measure max result from reduction_1
  redter.xres = reduction_1;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_1;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MAX;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po3 = (int32_t) red_1[0];
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


! updated function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_15_helper_0_0_0(o, i, r0, r1, r2, c);                          /*0008*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_15_helper_0_0_0(o, i, r0, r1, r2, c);                          /*0008*/
   return 0;                                                            /*0012*/
}
#
# OPENCL
#

! initial function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_15" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_15" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}
// graph for dag "freia_15_helper_0_0" of module "freia_15" in dot format
digraph "freia_15_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 vol" [shape=diamond];
  "10 max" [shape=diamond];
  "9 min" [shape=diamond];
  "8 +." [shape=trapezium,orientation=270];
  "8 +." -> "o";
  "i" -> "11 vol";
  "i" -> "10 max";
  "i" -> "9 min";
  "i" -> "8 +.";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freiaGatewayOpenCL.h"

// FREIA OpenCL runtime helper
extern freia_status freia_op_compile_kernel(
   const char*, const char*, const char*, cl_kernel *);

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_15

// opencl for dag 0

! updated function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_15(freia_data2d *o, freia_data2d *i, int32_t *r0, int32_t *r1, int32_t *r2, int32_t c)
{
   // test re ordering of mes
   freia_aipo_add_const(o, i, c);                                       /*0008*/
   freia_aipo_global_min(i, r0);                                        /*0009*/
   freia_aipo_global_max(i, r1);                                        /*0010*/
   freia_aipo_global_vol(i, r2);                                        /*0011*/
   return 0;                                                            /*0012*/
}
#
# FREIA COMPILATION DONE
#

