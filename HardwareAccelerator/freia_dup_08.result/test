#
# AIPO
#

! initial function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max(i, &max1);                                     /*0007*/
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_08" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_08" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}

! updated function for

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max(i, &max1);                                     /*0007*/
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# SPOC
#

! initial function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max(i, &max1);                                     /*0007*/
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_08" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_08" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "freia_dup_08_helper_0_0" of module "freia_dup_08" in dot format
digraph "freia_dup_08_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_dup_08
freia_status freia_dup_08_helper_0_0_0(freia_data2d * i0,
  int32_t * po0,
  int32_t * po1,
  int32_t * po2,
  int32_t * po3)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope


  // no output image

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 7 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 8 global_max_coord stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].maximum;
  *po2 = (uint32_t) reduc.measure[0][0].max_coord_x;
  *po3 = (uint32_t) reduc.measure[0][0].max_coord_y;

  return ret;
}

! updated function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_08_helper_0_0_0(i, &max1, &max2, &x, &y);                  /*0007*/
   return max1+max2+x+y;                                                /*0009*/
}

! cleaned up function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_08_helper_0_0_0(i, &max1, &max2, &x, &y);                  /*0007*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# TERAPIX
#

! initial function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max(i, &max1);                                     /*0007*/
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_08" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_08" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "freia_dup_08_helper_0_0_0" of module "freia_dup_08" in dot format
digraph "freia_dup_08_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_dup_08
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 0 output image
 * 2 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 6
 * - communication: 32
 */
freia_status freia_dup_08_helper_0_0_0(
  freia_data2d * i0,
  int32_t * po1,
  int32_t * po2,
  int32_t * po3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // memory initialization for reductions
  terapix_mcu_macrocode mem_init;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0_val initialization
  int16_t p_0_val[1];
  const int32_t x_0_val = 0;
  const int32_t y_0_val = 0;
  // operation 1_val initialization
  int16_t p_1_val[1];
  const int32_t x_1_val = 1;
  const int32_t y_1_val = 0;
  // operation 1_loc initialization
  int16_t p_1_loc[1];
  const int32_t x_1_loc = 2;
  const int32_t y_1_loc = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][1];

  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 509;
  int imagelet_1 = 0;
  int imagelet_2 = 509;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // initializing  0_val
  p_0_val[0] = INT16_MIN;
  gram.xoffset = x_0_val;
  gram.yoffset = y_0_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_val
  mem_init.xmin1 = 1023;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max at 1023
  mcu_macro[0][0].xmin2 = 1023;
  mcu_macro[1][0].xmin2 = 1023;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = 0;
  mcu_macro[1][0].xmin3 = 0;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  // 0: max(1)
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  // initializing  1_val
  p_1_val[0] = INT16_MIN;
  gram.xoffset = x_1_val;
  gram.yoffset = y_1_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_val
  mem_init.xmin1 = 1018;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // initializing  1_loc
  p_1_loc[0] = 0;
  gram.xoffset = x_1_loc;
  gram.yoffset = y_1_loc;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_loc;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_loc
  mem_init.xmin1 = 1019;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 4;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max! at 1018
  mcu_macro[0][1].xmin2 = 1018;
  mcu_macro[1][1].xmin2 = 1018;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = 0;
  mcu_macro[1][1].xmin3 = 0;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  // 1: max!(1)
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX_COORD;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_GLOBAL_MAX_COORD;
  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // no output


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 0;
  mcu_instr.out0 = NULL;
  mcu_instr.out1 = NULL;

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, i0);

  // extract measures
  // get measure max result from 1023
  // ??? not implemented yet...
  // get measure max! result from 1018
  // ??? not implemented yet...

  return ret;
}


! updated function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_08_helper_0_0_0(i, &max1, &max2, &x, &y);                  /*0007*/
   return max1+max2+x+y;                                                /*0009*/
}

! cleaned up function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_08_helper_0_0_0(i, &max1, &max2, &x, &y);                  /*0007*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# FREIA COMPILATION DONE
#

