
! initial function

freia_status freia_dup_07(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   // same operation performed twice, with commutator
   // t = inf(i0, i1)
   freia_aipo_inf(t, i0, i1);                                           /*0008*/
   // o = sup(i1, i0)
   // could be replaced by o = t
   freia_aipo_sup(o, i1, i0);                                           /*0011*/
   freia_common_destruct_data(t);                                       /*0012*/
   return FREIA_OK;                                                     /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_07" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 >" [shape=trapezium,orientation=270];
  "11 >" -> "o";
  "8 <" [shape=trapezium,orientation=270];
  "8 <" -> "t";
  "i1" -> "11 >";
  "i1" -> "8 <";
  "i0" -> "11 >";
  "i0" -> "8 <";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_07" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "11 =" -> "o";
  "8 <" [shape=trapezium,orientation=270];
  "8 <" -> "11 =" [label="t"];
  "8 <" -> "t";
  "i1" -> "8 <";
  "i0" -> "8 <";
}
// graph for dag "freia_dup_07_helper_0_0" of module "freia_dup_07" in dot format
digraph "freia_dup_07_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "t" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "11 =" -> "o";
  "8 <" [shape=trapezium,orientation=270];
  "8 <" -> "11 =" [label="t"];
  "8 <" -> "t";
  "i1" -> "8 <";
  "i0" -> "8 <";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_dup_07
freia_status freia_dup_07_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 8 inf
  // nope
  // i1 [0 input 1] -> [0 alu] 8 inf
  // nope
  // alu 8 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 1

  // output image 0`t on 1 and image o on 0
  // 0`t [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`t [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`t [1 output 1] -> [7 output 1] 0 null
  // 0`t [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`t [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`t [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`t [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`t [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`t [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // o [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o1, o0, i0, i1);

  return ret;
}

! updated function

freia_status freia_dup_07(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   // same operation performed twice, with commutator
   // t = inf(i0, i1)
   freia_dup_07_helper_0_0_0(t, o, i0, i1, i0);                         /*0008*/
   // o = sup(i1, i0)
   // could be replaced by o = t
   freia_common_destruct_data(t);                                       /*0012*/
   return FREIA_OK;                                                     /*0013*/
}
