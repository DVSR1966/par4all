#
# AIPO
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "150 ?" [shape=none];
  "148 ?" [shape=none];
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "143 ?" [shape=none];
  "141 ?" [shape=none];
  "141 ?" -> "135 ?" [arrowhead=empty,label="i_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "135 ?" [shape=none];
  "135 ?" -> "141 ?" [arrowhead=empty,label="i_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "129 ?" [shape=none];
  "127 ?" [shape=none];
  "127 ?" -> "121 ?" [arrowhead=empty,label="i_2"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "121 ?" [shape=none];
  "121 ?" -> "127 ?" [arrowhead=empty,label="i_2"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "110 ?" [shape=none];
  "107 ?" [shape=none];
  "107 ?" -> "97 ?" [arrowhead=empty,label="i_1"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "97 ?" [shape=none];
  "97 ?" -> "107 ?" [arrowhead=empty,label="i_1"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "87 ?" [shape=none];
  "85 ?" [shape=none];
  "85 ?" -> "68 ?" [arrowhead=empty,label="i_0"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "68 ?" [shape=none];
  "68 ?" -> "85 ?" [arrowhead=empty,label="i_0"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "150 ?" [shape=none];
  "148 ?" [shape=none];
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "143 ?" [shape=none];
  "141 ?" [shape=none];
  "141 ?" -> "135 ?" [arrowhead=empty,label="i_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "135 ?" [shape=none];
  "135 ?" -> "141 ?" [arrowhead=empty,label="i_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "129 ?" [shape=none];
  "127 ?" [shape=none];
  "127 ?" -> "121 ?" [arrowhead=empty,label="i_2"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "121 ?" [shape=none];
  "121 ?" -> "127 ?" [arrowhead=empty,label="i_2"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "110 ?" [shape=none];
  "107 ?" [shape=none];
  "107 ?" -> "97 ?" [arrowhead=empty,label="i_1"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "97 ?" [shape=none];
  "97 ?" -> "107 ?" [arrowhead=empty,label="i_1"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "87 ?" [shape=none];
  "85 ?" [shape=none];
  "85 ?" -> "68 ?" [arrowhead=empty,label="i_0"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "68 ?" [shape=none];
  "68 ?" -> "85 ?" [arrowhead=empty,label="i_0"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}

! updated function for

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# SPOC
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "150 ?" [shape=none];
  "148 ?" [shape=none];
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "143 ?" [shape=none];
  "141 ?" [shape=none];
  "141 ?" -> "135 ?" [arrowhead=empty,label="i_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "135 ?" [shape=none];
  "135 ?" -> "141 ?" [arrowhead=empty,label="i_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "129 ?" [shape=none];
  "127 ?" [shape=none];
  "127 ?" -> "121 ?" [arrowhead=empty,label="i_2"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "121 ?" [shape=none];
  "121 ?" -> "127 ?" [arrowhead=empty,label="i_2"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "110 ?" [shape=none];
  "107 ?" [shape=none];
  "107 ?" -> "97 ?" [arrowhead=empty,label="i_1"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "97 ?" [shape=none];
  "97 ?" -> "107 ?" [arrowhead=empty,label="i_1"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "87 ?" [shape=none];
  "85 ?" [shape=none];
  "85 ?" -> "68 ?" [arrowhead=empty,label="i_0"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "68 ?" [shape=none];
  "68 ?" -> "85 ?" [arrowhead=empty,label="i_0"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "150 ?" [shape=none];
  "148 ?" [shape=none];
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "143 ?" [shape=none];
  "141 ?" [shape=none];
  "141 ?" -> "135 ?" [arrowhead=empty,label="i_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "135 ?" [shape=none];
  "135 ?" -> "141 ?" [arrowhead=empty,label="i_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "129 ?" [shape=none];
  "127 ?" [shape=none];
  "127 ?" -> "121 ?" [arrowhead=empty,label="i_2"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "121 ?" [shape=none];
  "121 ?" -> "127 ?" [arrowhead=empty,label="i_2"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "110 ?" [shape=none];
  "107 ?" [shape=none];
  "107 ?" -> "97 ?" [arrowhead=empty,label="i_1"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "97 ?" [shape=none];
  "97 ?" -> "107 ?" [arrowhead=empty,label="i_1"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "87 ?" [shape=none];
  "85 ?" [shape=none];
  "85 ?" -> "68 ?" [arrowhead=empty,label="i_0"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "68 ?" [shape=none];
  "68 ?" -> "85 ?" [arrowhead=empty,label="i_0"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_helper_0_0" of module "license_plate" in dot format
digraph "license_plate_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "147 D8" [shape=box];
  "147 D8" -> "out";
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_helper_0_1" of module "license_plate" in dot format
digraph "license_plate_helper_0_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "in" -> "152 &";
  "out" -> "152 &";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 53 erode_8c
  // nope
  // poc 53 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen [0 poc 0] -> [1 poc 0] 54 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imopen [1 input 0] -> [1 poc 0] 54 erode_8c
  // nope
  // poc 54 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen [1 poc 0] -> [2 poc 0] 55 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imopen [2 input 0] -> [2 poc 0] 55 erode_8c
  // nope
  // poc 55 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen [2 poc 0] -> [3 poc 0] 56 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imopen [3 input 0] -> [3 poc 0] 56 erode_8c
  // nope
  // poc 56 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen [3 poc 0] -> [4 poc 0] 57 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imopen [4 input 0] -> [4 poc 0] 57 erode_8c
  // nope
  // poc 57 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen [4 poc 0] -> [5 poc 0] 58 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imopen [5 input 0] -> [5 poc 0] 58 erode_8c
  // nope
  // poc 58 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen [5 poc 0] -> [6 poc 0] 59 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imopen [6 input 0] -> [6 poc 0] 59 erode_8c
  // nope
  // poc 59 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen [6 poc 0] -> [7 poc 0] 60 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imopen [7 input 0] -> [7 poc 0] 60 erode_8c
  // nope
  // poc 60 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 8
  // 0`imopen [7 poc 0] -> [8 poc 0] 61 erode_8c
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`imopen [8 input 0] -> [8 poc 0] 61 erode_8c
  // nope
  // poc 61 erode_8c stage 8 side 0
  si.poc[8][0].op = SPOC_POC_ERODE;
  si.poc[8][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][0].kernel[i] = pi0[i];


  // STAGE 9
  // 0`imopen [8 poc 0] -> [9 poc 0] 62 erode_8c
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`imopen [9 input 0] -> [9 poc 0] 62 erode_8c
  // nope
  // poc 62 erode_8c stage 9 side 0
  si.poc[9][0].op = SPOC_POC_ERODE;
  si.poc[9][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][0].kernel[i] = pi0[i];


  // STAGE 10
  // 0`imopen [9 poc 0] -> [10 poc 0] 63 erode_8c
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`imopen [10 input 0] -> [10 poc 0] 63 erode_8c
  // nope
  // poc 63 erode_8c stage 10 side 0
  si.poc[10][0].op = SPOC_POC_ERODE;
  si.poc[10][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][0].kernel[i] = pi0[i];


  // STAGE 11
  // 0`imopen [10 poc 0] -> [11 poc 0] 64 erode_8c
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`imopen [11 input 0] -> [11 poc 0] 64 erode_8c
  // nope
  // poc 64 erode_8c stage 11 side 0
  si.poc[11][0].op = SPOC_POC_ERODE;
  si.poc[11][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][0].kernel[i] = pi0[i];


  // STAGE 12
  // 0`imopen [11 poc 0] -> [12 poc 0] 65 erode_8c
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`imopen [12 input 0] -> [12 poc 0] 65 erode_8c
  // nope
  // poc 65 erode_8c stage 12 side 0
  si.poc[12][0].op = SPOC_POC_ERODE;
  si.poc[12][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][0].kernel[i] = pi0[i];


  // STAGE 13
  // 0`imopen [12 poc 0] -> [13 poc 0] 66 erode_8c
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`imopen [13 input 0] -> [13 poc 0] 66 erode_8c
  // nope
  // poc 66 erode_8c stage 13 side 0
  si.poc[13][0].op = SPOC_POC_ERODE;
  si.poc[13][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][0].kernel[i] = pi0[i];


  // STAGE 14
  // 0`imopen [13 poc 0] -> [14 poc 0] 67 erode_8c
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`imopen [14 input 0] -> [14 poc 0] 67 erode_8c
  // nope
  // poc 67 erode_8c stage 14 side 0
  si.poc[14][0].op = SPOC_POC_ERODE;
  si.poc[14][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[14][0].kernel[i] = pi0[i];


  // STAGE 15
  // 0`imopen [14 poc 0] -> [15 poc 0] 70 dilate_8c
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`imopen [15 input 0] -> [15 poc 0] 70 dilate_8c
  // nope
  // poc 70 dilate_8c stage 15 side 0
  si.poc[15][0].op = SPOC_POC_DILATE;
  si.poc[15][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][0].kernel[i] = pi0[i];


  // STAGE 16
  // 0`imopen [15 poc 0] -> [16 poc 0] 71 dilate_8c
  si.mux[15][0].op = SPOC_MUX_IN0;
  // 0`imopen [16 input 0] -> [16 poc 0] 71 dilate_8c
  // nope
  // poc 71 dilate_8c stage 16 side 0
  si.poc[16][0].op = SPOC_POC_DILATE;
  si.poc[16][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[16][0].kernel[i] = pi0[i];


  // STAGE 17
  // 0`imopen [16 poc 0] -> [17 poc 0] 72 dilate_8c
  si.mux[16][0].op = SPOC_MUX_IN0;
  // 0`imopen [17 input 0] -> [17 poc 0] 72 dilate_8c
  // nope
  // poc 72 dilate_8c stage 17 side 0
  si.poc[17][0].op = SPOC_POC_DILATE;
  si.poc[17][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[17][0].kernel[i] = pi0[i];


  // STAGE 18
  // 0`imopen [17 poc 0] -> [18 poc 0] 73 dilate_8c
  si.mux[17][0].op = SPOC_MUX_IN0;
  // 0`imopen [18 input 0] -> [18 poc 0] 73 dilate_8c
  // nope
  // poc 73 dilate_8c stage 18 side 0
  si.poc[18][0].op = SPOC_POC_DILATE;
  si.poc[18][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[18][0].kernel[i] = pi0[i];


  // STAGE 19
  // 0`imopen [18 poc 0] -> [19 poc 0] 74 dilate_8c
  si.mux[18][0].op = SPOC_MUX_IN0;
  // 0`imopen [19 input 0] -> [19 poc 0] 74 dilate_8c
  // nope
  // poc 74 dilate_8c stage 19 side 0
  si.poc[19][0].op = SPOC_POC_DILATE;
  si.poc[19][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[19][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 89 dilate_8c
  // nope
  // poc 89 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imclose [0 poc 1] -> [1 poc 1] 90 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imclose [1 input 1] -> [1 poc 1] 90 dilate_8c
  // nope
  // poc 90 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imclose [1 poc 1] -> [2 poc 1] 91 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imclose [2 input 1] -> [2 poc 1] 91 dilate_8c
  // nope
  // poc 91 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imclose [2 poc 1] -> [3 poc 1] 92 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imclose [3 input 1] -> [3 poc 1] 92 dilate_8c
  // nope
  // poc 92 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imclose [3 poc 1] -> [4 poc 1] 93 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imclose [4 input 1] -> [4 poc 1] 93 dilate_8c
  // nope
  // poc 93 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imclose [4 poc 1] -> [5 poc 1] 94 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imclose [5 input 1] -> [5 poc 1] 94 dilate_8c
  // nope
  // poc 94 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imclose [5 poc 1] -> [6 poc 1] 95 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imclose [6 input 1] -> [6 poc 1] 95 dilate_8c
  // nope
  // poc 95 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imclose [6 poc 1] -> [7 poc 1] 96 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imclose [7 input 1] -> [7 poc 1] 96 dilate_8c
  // nope
  // poc 96 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // STAGE 8
  // 0`imclose [7 poc 1] -> [8 poc 1] 99 erode_8c
  si.mux[7][3].op = SPOC_MUX_IN1;
  // 0`imclose [8 input 1] -> [8 poc 1] 99 erode_8c
  // nope
  // poc 99 erode_8c stage 8 side 1
  si.poc[8][1].op = SPOC_POC_ERODE;
  si.poc[8][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][1].kernel[i] = pi0[i];


  // STAGE 9
  // 0`imclose [8 poc 1] -> [9 poc 1] 100 erode_8c
  si.mux[8][3].op = SPOC_MUX_IN1;
  // 0`imclose [9 input 1] -> [9 poc 1] 100 erode_8c
  // nope
  // poc 100 erode_8c stage 9 side 1
  si.poc[9][1].op = SPOC_POC_ERODE;
  si.poc[9][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][1].kernel[i] = pi0[i];


  // STAGE 10
  // 0`imclose [9 poc 1] -> [10 poc 1] 101 erode_8c
  si.mux[9][3].op = SPOC_MUX_IN1;
  // 0`imclose [10 input 1] -> [10 poc 1] 101 erode_8c
  // nope
  // poc 101 erode_8c stage 10 side 1
  si.poc[10][1].op = SPOC_POC_ERODE;
  si.poc[10][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][1].kernel[i] = pi0[i];


  // STAGE 11
  // 0`imclose [10 poc 1] -> [11 poc 1] 102 erode_8c
  si.mux[10][3].op = SPOC_MUX_IN1;
  // 0`imclose [11 input 1] -> [11 poc 1] 102 erode_8c
  // nope
  // poc 102 erode_8c stage 11 side 1
  si.poc[11][1].op = SPOC_POC_ERODE;
  si.poc[11][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][1].kernel[i] = pi0[i];


  // STAGE 12
  // 0`imclose [11 poc 1] -> [12 poc 1] 103 erode_8c
  si.mux[11][3].op = SPOC_MUX_IN1;
  // 0`imclose [12 input 1] -> [12 poc 1] 103 erode_8c
  // nope
  // poc 103 erode_8c stage 12 side 1
  si.poc[12][1].op = SPOC_POC_ERODE;
  si.poc[12][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][1].kernel[i] = pi0[i];


  // STAGE 13
  // 0`imclose [12 poc 1] -> [13 poc 1] 104 erode_8c
  si.mux[12][3].op = SPOC_MUX_IN1;
  // 0`imclose [13 input 1] -> [13 poc 1] 104 erode_8c
  // nope
  // poc 104 erode_8c stage 13 side 1
  si.poc[13][1].op = SPOC_POC_ERODE;
  si.poc[13][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][1].kernel[i] = pi0[i];


  // STAGE 14
  // 0`imclose [13 poc 1] -> [14 poc 1] 105 erode_8c
  si.mux[13][3].op = SPOC_MUX_IN1;
  // 0`imclose [14 input 1] -> [14 poc 1] 105 erode_8c
  // nope
  // poc 105 erode_8c stage 14 side 1
  si.poc[14][1].op = SPOC_POC_ERODE;
  si.poc[14][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[14][1].kernel[i] = pi0[i];


  // STAGE 15
  // 0`imclose [14 poc 1] -> [15 poc 1] 106 erode_8c
  si.mux[14][3].op = SPOC_MUX_IN1;
  // 0`imclose [15 input 1] -> [15 poc 1] 106 erode_8c
  // nope
  // poc 106 erode_8c stage 15 side 1
  si.poc[15][1].op = SPOC_POC_ERODE;
  si.poc[15][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][1].kernel[i] = pi0[i];

  // 0`imclose [15 poc 1] -> [15 threshold 1] 113 threshold
  si.mux[15][3].op = SPOC_MUX_IN1;
  // threshold 113 threshold stage 15 side 1
  si.th[15][1].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[15][1].boundmin = pi1;
  sp.th[15][1].boundmax = pi2;


  // output image 0`imopen on 0 and image 0`imcloseth on 1
  // 0`imopen [19 poc 0] -> [19 output 0] 0 null
  si.mux[19][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imopen [19 output 0] -> [19 output 0] 0 null
  // nope

  // 0`imcloseth [15 threshold 1] -> [19 output 1] 0 null
  // 0`imcloseth [16 input 1] -> [19 output 1] 0 null
  si.mux[16][3].op = SPOC_MUX_IN1;
  // 0`imcloseth [17 input 1] -> [19 output 1] 0 null
  si.mux[17][3].op = SPOC_MUX_IN1;
  // 0`imcloseth [18 input 1] -> [19 output 1] 0 null
  si.mux[18][3].op = SPOC_MUX_IN1;
  // 0`imcloseth [19 input 1] -> [19 output 1] 0 null
  si.mux[19][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imcloseth [19 output 1] -> [19 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_helper_0_0_1(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  const int32_t * pi4)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen [0 input 1] -> [0 poc 1] 75 dilate_8c
  // nope
  // poc 75 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen [0 poc 1] -> [1 poc 1] 76 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imopen [1 input 1] -> [1 poc 1] 76 dilate_8c
  // nope
  // poc 76 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen [1 poc 1] -> [2 poc 1] 77 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imopen [2 input 1] -> [2 poc 1] 77 dilate_8c
  // nope
  // poc 77 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen [2 poc 1] -> [3 poc 1] 78 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imopen [3 input 1] -> [3 poc 1] 78 dilate_8c
  // nope
  // poc 78 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen [3 poc 1] -> [4 poc 1] 79 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imopen [4 input 1] -> [4 poc 1] 79 dilate_8c
  // nope
  // poc 79 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen [4 poc 1] -> [5 poc 1] 80 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imopen [5 input 1] -> [5 poc 1] 80 dilate_8c
  // nope
  // poc 80 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen [5 poc 1] -> [6 poc 1] 81 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imopen [6 input 1] -> [6 poc 1] 81 dilate_8c
  // nope
  // poc 81 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen [6 poc 1] -> [7 poc 1] 82 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imopen [7 input 1] -> [7 poc 1] 82 dilate_8c
  // nope
  // poc 82 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // STAGE 8
  // 0`imopen [7 poc 1] -> [8 poc 1] 83 dilate_8c
  si.mux[7][3].op = SPOC_MUX_IN1;
  // 0`imopen [8 input 1] -> [8 poc 1] 83 dilate_8c
  // nope
  // poc 83 dilate_8c stage 8 side 1
  si.poc[8][1].op = SPOC_POC_DILATE;
  si.poc[8][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][1].kernel[i] = pi0[i];


  // STAGE 9
  // 0`imopen [8 poc 1] -> [9 poc 1] 84 dilate_8c
  si.mux[8][3].op = SPOC_MUX_IN1;
  // 0`imopen [9 input 1] -> [9 poc 1] 84 dilate_8c
  // nope
  // poc 84 dilate_8c stage 9 side 1
  si.poc[9][1].op = SPOC_POC_DILATE;
  si.poc[9][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][1].kernel[i] = pi0[i];

  // 0`imopen [9 poc 1] -> [9 threshold 1] 112 threshold
  si.mux[9][3].op = SPOC_MUX_IN1;
  // threshold 112 threshold stage 9 side 1
  si.th[9][1].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[9][1].boundmin = pi1;
  sp.th[9][1].boundmax = pi2;


  // STAGE 10
  // 0`imcloseth [0 input 0] -> [10 alu] 115 and
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [1 input 0] -> [10 alu] 115 and
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [2 input 0] -> [10 alu] 115 and
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [3 input 0] -> [10 alu] 115 and
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [4 input 0] -> [10 alu] 115 and
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [5 input 0] -> [10 alu] 115 and
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [6 input 0] -> [10 alu] 115 and
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [7 input 0] -> [10 alu] 115 and
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [8 input 0] -> [10 alu] 115 and
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [9 input 0] -> [10 alu] 115 and
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [10 input 0] -> [10 alu] 115 and
  // nope
  // 0`imopenth [9 threshold 1] -> [10 alu] 115 and
  // 0`imopenth [10 input 1] -> [10 alu] 115 and
  // nope
  // alu 115 and stage 10
  si.alu[10][0].op = SPOC_ALU_AND_IN0_IN1;


  // STAGE 11
  // 0`imand [10 alu] -> [11 poc 0] 117 erode_8c
  si.mux[10][0].op = SPOC_MUX_IN1;
  si.mux[10][2].op = SPOC_MUX_IN0;
  // 0`imand [11 input 0] -> [11 poc 0] 117 erode_8c
  // nope
  // poc 117 erode_8c stage 11 side 0
  si.poc[11][0].op = SPOC_POC_ERODE;
  si.poc[11][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][0].kernel[i] = pi4[i];


  // STAGE 12
  // 0`imfilt [11 poc 0] -> [12 poc 0] 118 erode_8c
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`imfilt [12 input 0] -> [12 poc 0] 118 erode_8c
  // nope
  // poc 118 erode_8c stage 12 side 0
  si.poc[12][0].op = SPOC_POC_ERODE;
  si.poc[12][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][0].kernel[i] = pi4[i];


  // STAGE 13
  // 0`imfilt [12 poc 0] -> [13 poc 0] 119 erode_8c
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`imfilt [13 input 0] -> [13 poc 0] 119 erode_8c
  // nope
  // poc 119 erode_8c stage 13 side 0
  si.poc[13][0].op = SPOC_POC_ERODE;
  si.poc[13][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][0].kernel[i] = pi4[i];


  // STAGE 14
  // 0`imfilt [13 poc 0] -> [14 poc 0] 120 erode_8c
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`imfilt [14 input 0] -> [14 poc 0] 120 erode_8c
  // nope
  // poc 120 erode_8c stage 14 side 0
  si.poc[14][0].op = SPOC_POC_ERODE;
  si.poc[14][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[14][0].kernel[i] = pi4[i];


  // STAGE 15
  // 0`imfilt [14 poc 0] -> [15 poc 0] 123 dilate_8c
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`imfilt [15 input 0] -> [15 poc 0] 123 dilate_8c
  // nope
  // poc 123 dilate_8c stage 15 side 0
  si.poc[15][0].op = SPOC_POC_DILATE;
  si.poc[15][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][0].kernel[i] = pi4[i];


  // STAGE 16
  // 0`imfilt [15 poc 0] -> [16 poc 0] 124 dilate_8c
  si.mux[15][0].op = SPOC_MUX_IN0;
  // 0`imfilt [16 input 0] -> [16 poc 0] 124 dilate_8c
  // nope
  // poc 124 dilate_8c stage 16 side 0
  si.poc[16][0].op = SPOC_POC_DILATE;
  si.poc[16][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[16][0].kernel[i] = pi4[i];


  // STAGE 17
  // 0`imfilt [16 poc 0] -> [17 poc 0] 125 dilate_8c
  si.mux[16][0].op = SPOC_MUX_IN0;
  // 0`imfilt [17 input 0] -> [17 poc 0] 125 dilate_8c
  // nope
  // poc 125 dilate_8c stage 17 side 0
  si.poc[17][0].op = SPOC_POC_DILATE;
  si.poc[17][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[17][0].kernel[i] = pi4[i];


  // STAGE 18
  // 0`imfilt [17 poc 0] -> [18 poc 0] 126 dilate_8c
  si.mux[17][0].op = SPOC_MUX_IN0;
  // 0`imfilt [18 input 0] -> [18 poc 0] 126 dilate_8c
  // nope
  // poc 126 dilate_8c stage 18 side 0
  si.poc[18][0].op = SPOC_POC_DILATE;
  si.poc[18][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[18][0].kernel[i] = pi4[i];


  // STAGE 19
  // 0`imfilt [18 poc 0] -> [19 poc 0] 131 erode_8c
  si.mux[18][0].op = SPOC_MUX_IN0;
  // 0`imfilt [19 input 0] -> [19 poc 0] 131 erode_8c
  // nope
  // poc 131 erode_8c stage 19 side 0
  si.poc[19][0].op = SPOC_POC_ERODE;
  si.poc[19][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[19][0].kernel[i] = pi0[i];


  // output image 0`imout on 0
  // 0`imout [19 poc 0] -> [19 output 0] 0 null
  si.mux[19][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout [19 output 0] -> [19 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_helper_0_0_2(freia_data2d * o0, freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout [0 input 0] -> [0 poc 0] 132 erode_8c
  // nope
  // poc 132 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imout [0 poc 0] -> [1 poc 0] 133 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imout [1 input 0] -> [1 poc 0] 133 erode_8c
  // nope
  // poc 133 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imout [1 poc 0] -> [2 poc 0] 134 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imout [2 input 0] -> [2 poc 0] 134 erode_8c
  // nope
  // poc 134 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imout [2 poc 0] -> [3 poc 0] 137 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imout [3 input 0] -> [3 poc 0] 137 dilate_8c
  // nope
  // poc 137 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imout [3 poc 0] -> [4 poc 0] 138 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imout [4 input 0] -> [4 poc 0] 138 dilate_8c
  // nope
  // poc 138 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imout [4 poc 0] -> [5 poc 0] 139 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imout [5 input 0] -> [5 poc 0] 139 dilate_8c
  // nope
  // poc 139 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imout [5 poc 0] -> [6 poc 0] 140 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imout [6 input 0] -> [6 poc 0] 140 dilate_8c
  // nope
  // poc 140 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imout [6 poc 0] -> [7 poc 0] 145 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imout [7 input 0] -> [7 poc 0] 145 dilate_8c
  // nope
  // poc 145 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // STAGE 8
  // 0`out [7 poc 0] -> [8 poc 0] 146 dilate_8c
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`out [8 input 0] -> [8 poc 0] 146 dilate_8c
  // nope
  // poc 146 dilate_8c stage 8 side 0
  si.poc[8][0].op = SPOC_POC_DILATE;
  si.poc[8][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][0].kernel[i] = pi1[i];


  // STAGE 9
  // 0`out [8 poc 0] -> [9 poc 0] 147 dilate_8c
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`out [9 input 0] -> [9 poc 0] 147 dilate_8c
  // nope
  // poc 147 dilate_8c stage 9 side 0
  si.poc[9][0].op = SPOC_POC_DILATE;
  si.poc[9][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][0].kernel[i] = pi1[i];


  // output image 0`out on 0
  // 0`out [9 poc 0] -> [9 output 0] 0 null
  si.mux[9][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [9 output 0] -> [19 output 0] 0 null
  // 0`out [10 input 0] -> [19 output 0] 0 null
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`out [11 input 0] -> [19 output 0] 0 null
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`out [12 input 0] -> [19 output 0] 0 null
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`out [13 input 0] -> [19 output 0] 0 null
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`out [14 input 0] -> [19 output 0] 0 null
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`out [15 input 0] -> [19 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;
  // 0`out [16 input 0] -> [19 output 0] 0 null
  si.mux[16][0].op = SPOC_MUX_IN0;
  // 0`out [17 input 0] -> [19 output 0] 0 null
  si.mux[17][0].op = SPOC_MUX_IN0;
  // 0`out [18 input 0] -> [19 output 0] 0 null
  si.mux[18][0].op = SPOC_MUX_IN0;
  // 0`out [19 input 0] -> [19 output 0] 0 null
  si.mux[19][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 152 and
  // nope
  // 0`out [0 input 1] -> [0 alu] 152 and
  // nope
  // alu 152 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [19 output 0] 0 null
  // 0`out [1 input 0] -> [19 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [19 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [19 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [19 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [19 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [19 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [19 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`out [8 input 0] -> [19 output 0] 0 null
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`out [9 input 0] -> [19 output 0] 0 null
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`out [10 input 0] -> [19 output 0] 0 null
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`out [11 input 0] -> [19 output 0] 0 null
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`out [12 input 0] -> [19 output 0] 0 null
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`out [13 input 0] -> [19 output 0] 0 null
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`out [14 input 0] -> [19 output 0] 0 null
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`out [15 input 0] -> [19 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;
  // 0`out [16 input 0] -> [19 output 0] 0 null
  si.mux[16][0].op = SPOC_MUX_IN0;
  // 0`out [17 input 0] -> [19 output 0] 0 null
  si.mux[17][0].op = SPOC_MUX_IN0;
  // 0`out [18 input 0] -> [19 output 0] 0 null
  si.mux[18][0].op = SPOC_MUX_IN0;
  // 0`out [19 input 0] -> [19 output 0] 0 null
  si.mux[19][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = license_plate_helper_0_0_0(imopen, imcloseth, in, kernel1x3, 150, 255, 1);  /*0053*/
   ret_0 |= 0;                                                          /*0054*/
   ret_0 |= 0;                                                          /*0055*/
   ret_0 |= 0;                                                          /*0056*/
   ret_0 |= 0;                                                          /*0057*/
   ret_0 |= 0;                                                          /*0058*/
   ret_0 |= 0;                                                          /*0059*/
   ret_0 |= 0;                                                          /*0060*/
   ret_0 |= 0;                                                          /*0061*/
   ret_0 |= 0;                                                          /*0062*/
   ret_0 |= 0;                                                          /*0063*/
   ret_0 |= 0;                                                          /*0064*/
   ret_0 |= 0;                                                          /*0065*/
   ret_0 |= 0;                                                          /*0066*/
   ret_0 |= 0;                                                          /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= 0;                                                          /*0070*/
   ret_0 |= 0;                                                          /*0071*/
   ret_0 |= 0;                                                          /*0072*/
   ret_0 |= 0;                                                          /*0073*/
   ret_0 |= 0;                                                          /*0074*/
   ret_0 |= license_plate_helper_0_0_1(imout, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);     /*0075*/
   ret_0 |= 0;                                                          /*0076*/
   ret_0 |= 0;                                                          /*0077*/
   ret_0 |= 0;                                                          /*0078*/
   ret_0 |= 0;                                                          /*0079*/
   ret_0 |= 0;                                                          /*0080*/
   ret_0 |= 0;                                                          /*0081*/
   ret_0 |= 0;                                                          /*0082*/
   ret_0 |= 0;                                                          /*0083*/
   ret_0 |= 0;                                                          /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = 0;                                                           /*0089*/
   ret_1 |= 0;                                                          /*0090*/
   ret_1 |= 0;                                                          /*0091*/
   ret_1 |= 0;                                                          /*0092*/
   ret_1 |= 0;                                                          /*0093*/
   ret_1 |= 0;                                                          /*0094*/
   ret_1 |= 0;                                                          /*0095*/
   ret_1 |= 0;                                                          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= 0;                                                          /*0099*/
   ret_1 |= 0;                                                          /*0100*/
   ret_1 |= 0;                                                          /*0101*/
   ret_1 |= 0;                                                          /*0102*/
   ret_1 |= 0;                                                          /*0103*/
   ret_1 |= 0;                                                          /*0104*/
   ret_1 |= 0;                                                          /*0105*/
   ret_1 |= 0;                                                          /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/
   
   
   
   ret_2 = 0;                                                           /*0117*/
   ret_2 |= 0;                                                          /*0118*/
   ret_2 |= 0;                                                          /*0119*/
   ret_2 |= 0;                                                          /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= 0;                                                          /*0123*/
   ret_2 |= 0;                                                          /*0124*/
   ret_2 |= 0;                                                          /*0125*/
   ret_2 |= 0;                                                          /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = 0;                                                           /*0131*/
   ret_3 |= license_plate_helper_0_0_2(out, imout, kernel1x3, freia_morpho_kernel_8c);                /*0132*/
   ret_3 |= 0;                                                          /*0133*/
   ret_3 |= 0;                                                          /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= 0;                                                          /*0137*/
   ret_3 |= 0;                                                          /*0138*/
   ret_3 |= 0;                                                          /*0139*/
   ret_3 |= 0;                                                          /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_helper_0_1_0(out, in, out);                            /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! cleaned up function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = license_plate_helper_0_0_0(imopen, imcloseth, in, kernel1x3, 150, 255, 1);  /*0053*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= license_plate_helper_0_0_1(imout, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);     /*0075*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = 0;                                                           /*0089*/
   i_1 = 8;                                                             /*0097*/

   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/
   
   
   
   ret_2 = 0;                                                           /*0117*/
   i_2 = 4;                                                             /*0121*/

   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = 0;                                                           /*0131*/
   ret_3 |= license_plate_helper_0_0_2(out, imout, kernel1x3, freia_morpho_kernel_8c);                /*0132*/
   i_3 = 4;                                                             /*0135*/

   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_helper_0_1_0(out, in, out);                            /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# TERAPIX
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "150 ?" [shape=none];
  "148 ?" [shape=none];
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "143 ?" [shape=none];
  "141 ?" [shape=none];
  "141 ?" -> "135 ?" [arrowhead=empty,label="i_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "135 ?" [shape=none];
  "135 ?" -> "141 ?" [arrowhead=empty,label="i_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "129 ?" [shape=none];
  "127 ?" [shape=none];
  "127 ?" -> "121 ?" [arrowhead=empty,label="i_2"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "121 ?" [shape=none];
  "121 ?" -> "127 ?" [arrowhead=empty,label="i_2"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "110 ?" [shape=none];
  "107 ?" [shape=none];
  "107 ?" -> "97 ?" [arrowhead=empty,label="i_1"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "97 ?" [shape=none];
  "97 ?" -> "107 ?" [arrowhead=empty,label="i_1"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "87 ?" [shape=none];
  "85 ?" [shape=none];
  "85 ?" -> "68 ?" [arrowhead=empty,label="i_0"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "68 ?" [shape=none];
  "68 ?" -> "85 ?" [arrowhead=empty,label="i_0"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "150 ?" [shape=none];
  "148 ?" [shape=none];
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "143 ?" [shape=none];
  "141 ?" [shape=none];
  "141 ?" -> "135 ?" [arrowhead=empty,label="i_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "135 ?" [shape=none];
  "135 ?" -> "141 ?" [arrowhead=empty,label="i_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "129 ?" [shape=none];
  "127 ?" [shape=none];
  "127 ?" -> "121 ?" [arrowhead=empty,label="i_2"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "121 ?" [shape=none];
  "121 ?" -> "127 ?" [arrowhead=empty,label="i_2"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "110 ?" [shape=none];
  "107 ?" [shape=none];
  "107 ?" -> "97 ?" [arrowhead=empty,label="i_1"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "97 ?" [shape=none];
  "97 ?" -> "107 ?" [arrowhead=empty,label="i_1"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "87 ?" [shape=none];
  "85 ?" [shape=none];
  "85 ?" -> "68 ?" [arrowhead=empty,label="i_0"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "68 ?" [shape=none];
  "68 ?" -> "85 ?" [arrowhead=empty,label="i_0"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_helper_0_0" of module "license_plate" in dot format
digraph "license_plate_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module license_plate
 * 1 input image, 1 output image
 * 69 image operations in dag
 * dag length is 53, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 993
 * - communication: 256
 */
freia_status license_plate_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8,
  const int32_t * pi9,
  const int32_t * pi10)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 46 parameters
  int16_t p_46[3];
  const int32_t x_46 = 3;
  const int32_t y_46 = 0;
  // operation 47 parameters
  int16_t p_47[3];
  const int32_t x_47 = 6;
  const int32_t y_47 = 0;
  // operation 49 parameters
  int16_t p_49[9];
  const int32_t x_49 = 9;
  const int32_t y_49 = 0;
  // operation 65 parameters
  int16_t p_65[9];
  const int32_t x_65 = 12;
  const int32_t y_65 = 0;
  terapix_mcu_macrocode mcu_macro[2][69];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];

  // imagelets definitions:
  // - 4 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(2) -> 4
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_4;
  mcu_macro[1][2].xmin2 = imagelet_4;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_2;
  mcu_macro[1][3].xmin2 = imagelet_2;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(4) -> 3
  mcu_macro[0][4].xmin1 = imagelet_4;
  mcu_macro[1][4].xmin1 = imagelet_4;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: D8(2) -> 4
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_4;
  mcu_macro[1][5].xmin2 = imagelet_4;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: E8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: D8(4) -> 3
  mcu_macro[0][7].xmin1 = imagelet_4;
  mcu_macro[1][7].xmin1 = imagelet_4;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: E8(2) -> 4
  mcu_macro[0][8].xmin1 = imagelet_2;
  mcu_macro[1][8].xmin1 = imagelet_2;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_4;
  mcu_macro[1][8].xmin2 = imagelet_4;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: D8(3) -> 2
  mcu_macro[0][9].xmin1 = imagelet_3;
  mcu_macro[1][9].xmin1 = imagelet_3;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_2;
  mcu_macro[1][9].xmin2 = imagelet_2;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_0;
  mcu_macro[1][9].xmin3 = x_0;
  mcu_macro[0][9].ymin3 = y_0;
  mcu_macro[1][9].ymin3 = y_0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: E8(4) -> 3
  mcu_macro[0][10].xmin1 = imagelet_4;
  mcu_macro[1][10].xmin1 = imagelet_4;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_3;
  mcu_macro[1][10].xmin2 = imagelet_3;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: D8(2) -> 4
  mcu_macro[0][11].xmin1 = imagelet_2;
  mcu_macro[1][11].xmin1 = imagelet_2;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_4;
  mcu_macro[1][11].xmin2 = imagelet_4;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_0;
  mcu_macro[1][11].xmin3 = x_0;
  mcu_macro[0][11].ymin3 = y_0;
  mcu_macro[1][11].ymin3 = y_0;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: E8(3) -> 2
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_2;
  mcu_macro[1][12].xmin2 = imagelet_2;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: D8(4) -> 3
  mcu_macro[0][13].xmin1 = imagelet_4;
  mcu_macro[1][13].xmin1 = imagelet_4;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_3;
  mcu_macro[1][13].xmin2 = imagelet_3;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_0;
  mcu_macro[1][13].xmin3 = x_0;
  mcu_macro[0][13].ymin3 = y_0;
  mcu_macro[1][13].ymin3 = y_0;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: E8(2) -> 4
  mcu_macro[0][14].xmin1 = imagelet_2;
  mcu_macro[1][14].xmin1 = imagelet_2;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_4;
  mcu_macro[1][14].xmin2 = imagelet_4;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: D8(3) -> 2
  mcu_macro[0][15].xmin1 = imagelet_3;
  mcu_macro[1][15].xmin1 = imagelet_3;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_2;
  mcu_macro[1][15].xmin2 = imagelet_2;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_0;
  mcu_macro[1][15].xmin3 = x_0;
  mcu_macro[0][15].ymin3 = y_0;
  mcu_macro[1][15].ymin3 = y_0;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: E8(4) -> 3
  mcu_macro[0][16].xmin1 = imagelet_4;
  mcu_macro[1][16].xmin1 = imagelet_4;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_3;
  mcu_macro[1][16].xmin2 = imagelet_3;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(2) -> 4
  mcu_macro[0][17].xmin1 = imagelet_2;
  mcu_macro[1][17].xmin1 = imagelet_2;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_4;
  mcu_macro[1][17].xmin2 = imagelet_4;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_0;
  mcu_macro[1][17].xmin3 = x_0;
  mcu_macro[0][17].ymin3 = y_0;
  mcu_macro[1][17].ymin3 = y_0;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(3) -> 2
  mcu_macro[0][18].xmin1 = imagelet_3;
  mcu_macro[1][18].xmin1 = imagelet_3;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_2;
  mcu_macro[1][18].xmin2 = imagelet_2;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(4) -> 3
  mcu_macro[0][19].xmin1 = imagelet_4;
  mcu_macro[1][19].xmin1 = imagelet_4;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_3;
  mcu_macro[1][19].xmin2 = imagelet_3;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_0;
  mcu_macro[1][19].xmin3 = x_0;
  mcu_macro[0][19].ymin3 = y_0;
  mcu_macro[1][19].ymin3 = y_0;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(2) -> 4
  mcu_macro[0][20].xmin1 = imagelet_2;
  mcu_macro[1][20].xmin1 = imagelet_2;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_4;
  mcu_macro[1][20].xmin2 = imagelet_4;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(3) -> 2
  mcu_macro[0][21].xmin1 = imagelet_3;
  mcu_macro[1][21].xmin1 = imagelet_3;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_2;
  mcu_macro[1][21].xmin2 = imagelet_2;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_0;
  mcu_macro[1][21].xmin3 = x_0;
  mcu_macro[0][21].ymin3 = y_0;
  mcu_macro[1][21].ymin3 = y_0;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 22: E8(4) -> 3
  mcu_macro[0][22].xmin1 = imagelet_4;
  mcu_macro[1][22].xmin1 = imagelet_4;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_3;
  mcu_macro[1][22].xmin2 = imagelet_3;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].xmin3 = x_0;
  mcu_macro[1][22].xmin3 = x_0;
  mcu_macro[0][22].ymin3 = y_0;
  mcu_macro[1][22].ymin3 = y_0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 23: E8(2) -> 4
  mcu_macro[0][23].xmin1 = imagelet_2;
  mcu_macro[1][23].xmin1 = imagelet_2;
  mcu_macro[0][23].ymin1 = 0;
  mcu_macro[1][23].ymin1 = 0;
  mcu_macro[0][23].xmin2 = imagelet_4;
  mcu_macro[1][23].xmin2 = imagelet_4;
  mcu_macro[0][23].ymin2 = 0;
  mcu_macro[1][23].ymin2 = 0;
  mcu_macro[0][23].xmin3 = x_0;
  mcu_macro[1][23].xmin3 = x_0;
  mcu_macro[0][23].ymin3 = y_0;
  mcu_macro[1][23].ymin3 = y_0;
  mcu_macro[0][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][23].iter2 = imagelet_size;
  mcu_macro[1][23].iter2 = imagelet_size;
  mcu_macro[0][23].iter3 = 0;
  mcu_macro[1][23].iter3 = 0;
  mcu_macro[0][23].iter4 = 0;
  mcu_macro[1][23].iter4 = 0;
  mcu_macro[0][23].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][23].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 24: E8(3) -> 2
  mcu_macro[0][24].xmin1 = imagelet_3;
  mcu_macro[1][24].xmin1 = imagelet_3;
  mcu_macro[0][24].ymin1 = 0;
  mcu_macro[1][24].ymin1 = 0;
  mcu_macro[0][24].xmin2 = imagelet_2;
  mcu_macro[1][24].xmin2 = imagelet_2;
  mcu_macro[0][24].ymin2 = 0;
  mcu_macro[1][24].ymin2 = 0;
  mcu_macro[0][24].xmin3 = x_0;
  mcu_macro[1][24].xmin3 = x_0;
  mcu_macro[0][24].ymin3 = y_0;
  mcu_macro[1][24].ymin3 = y_0;
  mcu_macro[0][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][24].iter2 = imagelet_size;
  mcu_macro[1][24].iter2 = imagelet_size;
  mcu_macro[0][24].iter3 = 0;
  mcu_macro[1][24].iter3 = 0;
  mcu_macro[0][24].iter4 = 0;
  mcu_macro[1][24].iter4 = 0;
  mcu_macro[0][24].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][24].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 25: E8(4) -> 3
  mcu_macro[0][25].xmin1 = imagelet_4;
  mcu_macro[1][25].xmin1 = imagelet_4;
  mcu_macro[0][25].ymin1 = 0;
  mcu_macro[1][25].ymin1 = 0;
  mcu_macro[0][25].xmin2 = imagelet_3;
  mcu_macro[1][25].xmin2 = imagelet_3;
  mcu_macro[0][25].ymin2 = 0;
  mcu_macro[1][25].ymin2 = 0;
  mcu_macro[0][25].xmin3 = x_0;
  mcu_macro[1][25].xmin3 = x_0;
  mcu_macro[0][25].ymin3 = y_0;
  mcu_macro[1][25].ymin3 = y_0;
  mcu_macro[0][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][25].iter2 = imagelet_size;
  mcu_macro[1][25].iter2 = imagelet_size;
  mcu_macro[0][25].iter3 = 0;
  mcu_macro[1][25].iter3 = 0;
  mcu_macro[0][25].iter4 = 0;
  mcu_macro[1][25].iter4 = 0;
  mcu_macro[0][25].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][25].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 26: E8(2) -> 4
  mcu_macro[0][26].xmin1 = imagelet_2;
  mcu_macro[1][26].xmin1 = imagelet_2;
  mcu_macro[0][26].ymin1 = 0;
  mcu_macro[1][26].ymin1 = 0;
  mcu_macro[0][26].xmin2 = imagelet_4;
  mcu_macro[1][26].xmin2 = imagelet_4;
  mcu_macro[0][26].ymin2 = 0;
  mcu_macro[1][26].ymin2 = 0;
  mcu_macro[0][26].xmin3 = x_0;
  mcu_macro[1][26].xmin3 = x_0;
  mcu_macro[0][26].ymin3 = y_0;
  mcu_macro[1][26].ymin3 = y_0;
  mcu_macro[0][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][26].iter2 = imagelet_size;
  mcu_macro[1][26].iter2 = imagelet_size;
  mcu_macro[0][26].iter3 = 0;
  mcu_macro[1][26].iter3 = 0;
  mcu_macro[0][26].iter4 = 0;
  mcu_macro[1][26].iter4 = 0;
  mcu_macro[0][26].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][26].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 27: E8(3) -> 2
  mcu_macro[0][27].xmin1 = imagelet_3;
  mcu_macro[1][27].xmin1 = imagelet_3;
  mcu_macro[0][27].ymin1 = 0;
  mcu_macro[1][27].ymin1 = 0;
  mcu_macro[0][27].xmin2 = imagelet_2;
  mcu_macro[1][27].xmin2 = imagelet_2;
  mcu_macro[0][27].ymin2 = 0;
  mcu_macro[1][27].ymin2 = 0;
  mcu_macro[0][27].xmin3 = x_0;
  mcu_macro[1][27].xmin3 = x_0;
  mcu_macro[0][27].ymin3 = y_0;
  mcu_macro[1][27].ymin3 = y_0;
  mcu_macro[0][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][27].iter2 = imagelet_size;
  mcu_macro[1][27].iter2 = imagelet_size;
  mcu_macro[0][27].iter3 = 0;
  mcu_macro[1][27].iter3 = 0;
  mcu_macro[0][27].iter4 = 0;
  mcu_macro[1][27].iter4 = 0;
  mcu_macro[0][27].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][27].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 28: E8(4) -> 3
  mcu_macro[0][28].xmin1 = imagelet_4;
  mcu_macro[1][28].xmin1 = imagelet_4;
  mcu_macro[0][28].ymin1 = 0;
  mcu_macro[1][28].ymin1 = 0;
  mcu_macro[0][28].xmin2 = imagelet_3;
  mcu_macro[1][28].xmin2 = imagelet_3;
  mcu_macro[0][28].ymin2 = 0;
  mcu_macro[1][28].ymin2 = 0;
  mcu_macro[0][28].xmin3 = x_0;
  mcu_macro[1][28].xmin3 = x_0;
  mcu_macro[0][28].ymin3 = y_0;
  mcu_macro[1][28].ymin3 = y_0;
  mcu_macro[0][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][28].iter2 = imagelet_size;
  mcu_macro[1][28].iter2 = imagelet_size;
  mcu_macro[0][28].iter3 = 0;
  mcu_macro[1][28].iter3 = 0;
  mcu_macro[0][28].iter4 = 0;
  mcu_macro[1][28].iter4 = 0;
  mcu_macro[0][28].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][28].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 29: E8(2) -> 4
  mcu_macro[0][29].xmin1 = imagelet_2;
  mcu_macro[1][29].xmin1 = imagelet_2;
  mcu_macro[0][29].ymin1 = 0;
  mcu_macro[1][29].ymin1 = 0;
  mcu_macro[0][29].xmin2 = imagelet_4;
  mcu_macro[1][29].xmin2 = imagelet_4;
  mcu_macro[0][29].ymin2 = 0;
  mcu_macro[1][29].ymin2 = 0;
  mcu_macro[0][29].xmin3 = x_0;
  mcu_macro[1][29].xmin3 = x_0;
  mcu_macro[0][29].ymin3 = y_0;
  mcu_macro[1][29].ymin3 = y_0;
  mcu_macro[0][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][29].iter2 = imagelet_size;
  mcu_macro[1][29].iter2 = imagelet_size;
  mcu_macro[0][29].iter3 = 0;
  mcu_macro[1][29].iter3 = 0;
  mcu_macro[0][29].iter4 = 0;
  mcu_macro[1][29].iter4 = 0;
  mcu_macro[0][29].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][29].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 30: D8(3) -> 2
  mcu_macro[0][30].xmin1 = imagelet_3;
  mcu_macro[1][30].xmin1 = imagelet_3;
  mcu_macro[0][30].ymin1 = 0;
  mcu_macro[1][30].ymin1 = 0;
  mcu_macro[0][30].xmin2 = imagelet_2;
  mcu_macro[1][30].xmin2 = imagelet_2;
  mcu_macro[0][30].ymin2 = 0;
  mcu_macro[1][30].ymin2 = 0;
  mcu_macro[0][30].xmin3 = x_0;
  mcu_macro[1][30].xmin3 = x_0;
  mcu_macro[0][30].ymin3 = y_0;
  mcu_macro[1][30].ymin3 = y_0;
  mcu_macro[0][30].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][30].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][30].iter2 = imagelet_size;
  mcu_macro[1][30].iter2 = imagelet_size;
  mcu_macro[0][30].iter3 = 0;
  mcu_macro[1][30].iter3 = 0;
  mcu_macro[0][30].iter4 = 0;
  mcu_macro[1][30].iter4 = 0;
  mcu_macro[0][30].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][30].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 31: E8(4) -> 3
  mcu_macro[0][31].xmin1 = imagelet_4;
  mcu_macro[1][31].xmin1 = imagelet_4;
  mcu_macro[0][31].ymin1 = 0;
  mcu_macro[1][31].ymin1 = 0;
  mcu_macro[0][31].xmin2 = imagelet_3;
  mcu_macro[1][31].xmin2 = imagelet_3;
  mcu_macro[0][31].ymin2 = 0;
  mcu_macro[1][31].ymin2 = 0;
  mcu_macro[0][31].xmin3 = x_0;
  mcu_macro[1][31].xmin3 = x_0;
  mcu_macro[0][31].ymin3 = y_0;
  mcu_macro[1][31].ymin3 = y_0;
  mcu_macro[0][31].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][31].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][31].iter2 = imagelet_size;
  mcu_macro[1][31].iter2 = imagelet_size;
  mcu_macro[0][31].iter3 = 0;
  mcu_macro[1][31].iter3 = 0;
  mcu_macro[0][31].iter4 = 0;
  mcu_macro[1][31].iter4 = 0;
  mcu_macro[0][31].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][31].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 32: D8(2) -> 4
  mcu_macro[0][32].xmin1 = imagelet_2;
  mcu_macro[1][32].xmin1 = imagelet_2;
  mcu_macro[0][32].ymin1 = 0;
  mcu_macro[1][32].ymin1 = 0;
  mcu_macro[0][32].xmin2 = imagelet_4;
  mcu_macro[1][32].xmin2 = imagelet_4;
  mcu_macro[0][32].ymin2 = 0;
  mcu_macro[1][32].ymin2 = 0;
  mcu_macro[0][32].xmin3 = x_0;
  mcu_macro[1][32].xmin3 = x_0;
  mcu_macro[0][32].ymin3 = y_0;
  mcu_macro[1][32].ymin3 = y_0;
  mcu_macro[0][32].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][32].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][32].iter2 = imagelet_size;
  mcu_macro[1][32].iter2 = imagelet_size;
  mcu_macro[0][32].iter3 = 0;
  mcu_macro[1][32].iter3 = 0;
  mcu_macro[0][32].iter4 = 0;
  mcu_macro[1][32].iter4 = 0;
  mcu_macro[0][32].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][32].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 33: D8(4) -> 2
  mcu_macro[0][33].xmin1 = imagelet_4;
  mcu_macro[1][33].xmin1 = imagelet_4;
  mcu_macro[0][33].ymin1 = 0;
  mcu_macro[1][33].ymin1 = 0;
  mcu_macro[0][33].xmin2 = imagelet_2;
  mcu_macro[1][33].xmin2 = imagelet_2;
  mcu_macro[0][33].ymin2 = 0;
  mcu_macro[1][33].ymin2 = 0;
  mcu_macro[0][33].xmin3 = x_0;
  mcu_macro[1][33].xmin3 = x_0;
  mcu_macro[0][33].ymin3 = y_0;
  mcu_macro[1][33].ymin3 = y_0;
  mcu_macro[0][33].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][33].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][33].iter2 = imagelet_size;
  mcu_macro[1][33].iter2 = imagelet_size;
  mcu_macro[0][33].iter3 = 0;
  mcu_macro[1][33].iter3 = 0;
  mcu_macro[0][33].iter4 = 0;
  mcu_macro[1][33].iter4 = 0;
  mcu_macro[0][33].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][33].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 34: D8(2) -> 4
  mcu_macro[0][34].xmin1 = imagelet_2;
  mcu_macro[1][34].xmin1 = imagelet_2;
  mcu_macro[0][34].ymin1 = 0;
  mcu_macro[1][34].ymin1 = 0;
  mcu_macro[0][34].xmin2 = imagelet_4;
  mcu_macro[1][34].xmin2 = imagelet_4;
  mcu_macro[0][34].ymin2 = 0;
  mcu_macro[1][34].ymin2 = 0;
  mcu_macro[0][34].xmin3 = x_0;
  mcu_macro[1][34].xmin3 = x_0;
  mcu_macro[0][34].ymin3 = y_0;
  mcu_macro[1][34].ymin3 = y_0;
  mcu_macro[0][34].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][34].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][34].iter2 = imagelet_size;
  mcu_macro[1][34].iter2 = imagelet_size;
  mcu_macro[0][34].iter3 = 0;
  mcu_macro[1][34].iter3 = 0;
  mcu_macro[0][34].iter4 = 0;
  mcu_macro[1][34].iter4 = 0;
  mcu_macro[0][34].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][34].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 35: D8(4) -> 2
  mcu_macro[0][35].xmin1 = imagelet_4;
  mcu_macro[1][35].xmin1 = imagelet_4;
  mcu_macro[0][35].ymin1 = 0;
  mcu_macro[1][35].ymin1 = 0;
  mcu_macro[0][35].xmin2 = imagelet_2;
  mcu_macro[1][35].xmin2 = imagelet_2;
  mcu_macro[0][35].ymin2 = 0;
  mcu_macro[1][35].ymin2 = 0;
  mcu_macro[0][35].xmin3 = x_0;
  mcu_macro[1][35].xmin3 = x_0;
  mcu_macro[0][35].ymin3 = y_0;
  mcu_macro[1][35].ymin3 = y_0;
  mcu_macro[0][35].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][35].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][35].iter2 = imagelet_size;
  mcu_macro[1][35].iter2 = imagelet_size;
  mcu_macro[0][35].iter3 = 0;
  mcu_macro[1][35].iter3 = 0;
  mcu_macro[0][35].iter4 = 0;
  mcu_macro[1][35].iter4 = 0;
  mcu_macro[0][35].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][35].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 36: D8(2) -> 4
  mcu_macro[0][36].xmin1 = imagelet_2;
  mcu_macro[1][36].xmin1 = imagelet_2;
  mcu_macro[0][36].ymin1 = 0;
  mcu_macro[1][36].ymin1 = 0;
  mcu_macro[0][36].xmin2 = imagelet_4;
  mcu_macro[1][36].xmin2 = imagelet_4;
  mcu_macro[0][36].ymin2 = 0;
  mcu_macro[1][36].ymin2 = 0;
  mcu_macro[0][36].xmin3 = x_0;
  mcu_macro[1][36].xmin3 = x_0;
  mcu_macro[0][36].ymin3 = y_0;
  mcu_macro[1][36].ymin3 = y_0;
  mcu_macro[0][36].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][36].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][36].iter2 = imagelet_size;
  mcu_macro[1][36].iter2 = imagelet_size;
  mcu_macro[0][36].iter3 = 0;
  mcu_macro[1][36].iter3 = 0;
  mcu_macro[0][36].iter4 = 0;
  mcu_macro[1][36].iter4 = 0;
  mcu_macro[0][36].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][36].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 37: D8(4) -> 2
  mcu_macro[0][37].xmin1 = imagelet_4;
  mcu_macro[1][37].xmin1 = imagelet_4;
  mcu_macro[0][37].ymin1 = 0;
  mcu_macro[1][37].ymin1 = 0;
  mcu_macro[0][37].xmin2 = imagelet_2;
  mcu_macro[1][37].xmin2 = imagelet_2;
  mcu_macro[0][37].ymin2 = 0;
  mcu_macro[1][37].ymin2 = 0;
  mcu_macro[0][37].xmin3 = x_0;
  mcu_macro[1][37].xmin3 = x_0;
  mcu_macro[0][37].ymin3 = y_0;
  mcu_macro[1][37].ymin3 = y_0;
  mcu_macro[0][37].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][37].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][37].iter2 = imagelet_size;
  mcu_macro[1][37].iter2 = imagelet_size;
  mcu_macro[0][37].iter3 = 0;
  mcu_macro[1][37].iter3 = 0;
  mcu_macro[0][37].iter4 = 0;
  mcu_macro[1][37].iter4 = 0;
  mcu_macro[0][37].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][37].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 38: D8(2) -> 4
  mcu_macro[0][38].xmin1 = imagelet_2;
  mcu_macro[1][38].xmin1 = imagelet_2;
  mcu_macro[0][38].ymin1 = 0;
  mcu_macro[1][38].ymin1 = 0;
  mcu_macro[0][38].xmin2 = imagelet_4;
  mcu_macro[1][38].xmin2 = imagelet_4;
  mcu_macro[0][38].ymin2 = 0;
  mcu_macro[1][38].ymin2 = 0;
  mcu_macro[0][38].xmin3 = x_0;
  mcu_macro[1][38].xmin3 = x_0;
  mcu_macro[0][38].ymin3 = y_0;
  mcu_macro[1][38].ymin3 = y_0;
  mcu_macro[0][38].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][38].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][38].iter2 = imagelet_size;
  mcu_macro[1][38].iter2 = imagelet_size;
  mcu_macro[0][38].iter3 = 0;
  mcu_macro[1][38].iter3 = 0;
  mcu_macro[0][38].iter4 = 0;
  mcu_macro[1][38].iter4 = 0;
  mcu_macro[0][38].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][38].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 39: D8(4) -> 2
  mcu_macro[0][39].xmin1 = imagelet_4;
  mcu_macro[1][39].xmin1 = imagelet_4;
  mcu_macro[0][39].ymin1 = 0;
  mcu_macro[1][39].ymin1 = 0;
  mcu_macro[0][39].xmin2 = imagelet_2;
  mcu_macro[1][39].xmin2 = imagelet_2;
  mcu_macro[0][39].ymin2 = 0;
  mcu_macro[1][39].ymin2 = 0;
  mcu_macro[0][39].xmin3 = x_0;
  mcu_macro[1][39].xmin3 = x_0;
  mcu_macro[0][39].ymin3 = y_0;
  mcu_macro[1][39].ymin3 = y_0;
  mcu_macro[0][39].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][39].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][39].iter2 = imagelet_size;
  mcu_macro[1][39].iter2 = imagelet_size;
  mcu_macro[0][39].iter3 = 0;
  mcu_macro[1][39].iter3 = 0;
  mcu_macro[0][39].iter4 = 0;
  mcu_macro[1][39].iter4 = 0;
  mcu_macro[0][39].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][39].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 40: D8(2) -> 4
  mcu_macro[0][40].xmin1 = imagelet_2;
  mcu_macro[1][40].xmin1 = imagelet_2;
  mcu_macro[0][40].ymin1 = 0;
  mcu_macro[1][40].ymin1 = 0;
  mcu_macro[0][40].xmin2 = imagelet_4;
  mcu_macro[1][40].xmin2 = imagelet_4;
  mcu_macro[0][40].ymin2 = 0;
  mcu_macro[1][40].ymin2 = 0;
  mcu_macro[0][40].xmin3 = x_0;
  mcu_macro[1][40].xmin3 = x_0;
  mcu_macro[0][40].ymin3 = y_0;
  mcu_macro[1][40].ymin3 = y_0;
  mcu_macro[0][40].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][40].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][40].iter2 = imagelet_size;
  mcu_macro[1][40].iter2 = imagelet_size;
  mcu_macro[0][40].iter3 = 0;
  mcu_macro[1][40].iter3 = 0;
  mcu_macro[0][40].iter4 = 0;
  mcu_macro[1][40].iter4 = 0;
  mcu_macro[0][40].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][40].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 41: D8(4) -> 2
  mcu_macro[0][41].xmin1 = imagelet_4;
  mcu_macro[1][41].xmin1 = imagelet_4;
  mcu_macro[0][41].ymin1 = 0;
  mcu_macro[1][41].ymin1 = 0;
  mcu_macro[0][41].xmin2 = imagelet_2;
  mcu_macro[1][41].xmin2 = imagelet_2;
  mcu_macro[0][41].ymin2 = 0;
  mcu_macro[1][41].ymin2 = 0;
  mcu_macro[0][41].xmin3 = x_0;
  mcu_macro[1][41].xmin3 = x_0;
  mcu_macro[0][41].ymin3 = y_0;
  mcu_macro[1][41].ymin3 = y_0;
  mcu_macro[0][41].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][41].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][41].iter2 = imagelet_size;
  mcu_macro[1][41].iter2 = imagelet_size;
  mcu_macro[0][41].iter3 = 0;
  mcu_macro[1][41].iter3 = 0;
  mcu_macro[0][41].iter4 = 0;
  mcu_macro[1][41].iter4 = 0;
  mcu_macro[0][41].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][41].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 42: D8(2) -> 4
  mcu_macro[0][42].xmin1 = imagelet_2;
  mcu_macro[1][42].xmin1 = imagelet_2;
  mcu_macro[0][42].ymin1 = 0;
  mcu_macro[1][42].ymin1 = 0;
  mcu_macro[0][42].xmin2 = imagelet_4;
  mcu_macro[1][42].xmin2 = imagelet_4;
  mcu_macro[0][42].ymin2 = 0;
  mcu_macro[1][42].ymin2 = 0;
  mcu_macro[0][42].xmin3 = x_0;
  mcu_macro[1][42].xmin3 = x_0;
  mcu_macro[0][42].ymin3 = y_0;
  mcu_macro[1][42].ymin3 = y_0;
  mcu_macro[0][42].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][42].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][42].iter2 = imagelet_size;
  mcu_macro[1][42].iter2 = imagelet_size;
  mcu_macro[0][42].iter3 = 0;
  mcu_macro[1][42].iter3 = 0;
  mcu_macro[0][42].iter4 = 0;
  mcu_macro[1][42].iter4 = 0;
  mcu_macro[0][42].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][42].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 43: D8(4) -> 2
  mcu_macro[0][43].xmin1 = imagelet_4;
  mcu_macro[1][43].xmin1 = imagelet_4;
  mcu_macro[0][43].ymin1 = 0;
  mcu_macro[1][43].ymin1 = 0;
  mcu_macro[0][43].xmin2 = imagelet_2;
  mcu_macro[1][43].xmin2 = imagelet_2;
  mcu_macro[0][43].ymin2 = 0;
  mcu_macro[1][43].ymin2 = 0;
  mcu_macro[0][43].xmin3 = x_0;
  mcu_macro[1][43].xmin3 = x_0;
  mcu_macro[0][43].ymin3 = y_0;
  mcu_macro[1][43].ymin3 = y_0;
  mcu_macro[0][43].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][43].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][43].iter2 = imagelet_size;
  mcu_macro[1][43].iter2 = imagelet_size;
  mcu_macro[0][43].iter3 = 0;
  mcu_macro[1][43].iter3 = 0;
  mcu_macro[0][43].iter4 = 0;
  mcu_macro[1][43].iter4 = 0;
  mcu_macro[0][43].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][43].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 44: D8(2) -> 4
  mcu_macro[0][44].xmin1 = imagelet_2;
  mcu_macro[1][44].xmin1 = imagelet_2;
  mcu_macro[0][44].ymin1 = 0;
  mcu_macro[1][44].ymin1 = 0;
  mcu_macro[0][44].xmin2 = imagelet_4;
  mcu_macro[1][44].xmin2 = imagelet_4;
  mcu_macro[0][44].ymin2 = 0;
  mcu_macro[1][44].ymin2 = 0;
  mcu_macro[0][44].xmin3 = x_0;
  mcu_macro[1][44].xmin3 = x_0;
  mcu_macro[0][44].ymin3 = y_0;
  mcu_macro[1][44].ymin3 = y_0;
  mcu_macro[0][44].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][44].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][44].iter2 = imagelet_size;
  mcu_macro[1][44].iter2 = imagelet_size;
  mcu_macro[0][44].iter3 = 0;
  mcu_macro[1][44].iter3 = 0;
  mcu_macro[0][44].iter4 = 0;
  mcu_macro[1][44].iter4 = 0;
  mcu_macro[0][44].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][44].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 45: D8(4) -> 2
  mcu_macro[0][45].xmin1 = imagelet_4;
  mcu_macro[1][45].xmin1 = imagelet_4;
  mcu_macro[0][45].ymin1 = 0;
  mcu_macro[1][45].ymin1 = 0;
  mcu_macro[0][45].xmin2 = imagelet_2;
  mcu_macro[1][45].xmin2 = imagelet_2;
  mcu_macro[0][45].ymin2 = 0;
  mcu_macro[1][45].ymin2 = 0;
  mcu_macro[0][45].xmin3 = x_0;
  mcu_macro[1][45].xmin3 = x_0;
  mcu_macro[0][45].ymin3 = y_0;
  mcu_macro[1][45].ymin3 = y_0;
  mcu_macro[0][45].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][45].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][45].iter2 = imagelet_size;
  mcu_macro[1][45].iter2 = imagelet_size;
  mcu_macro[0][45].iter3 = 0;
  mcu_macro[1][45].iter3 = 0;
  mcu_macro[0][45].iter4 = 0;
  mcu_macro[1][45].iter4 = 0;
  mcu_macro[0][45].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][45].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 46: thr(3) -> 4
  mcu_macro[0][46].xmin1 = imagelet_3;
  mcu_macro[1][46].xmin1 = imagelet_3;
  mcu_macro[0][46].ymin1 = 0;
  mcu_macro[1][46].ymin1 = 0;
  mcu_macro[0][46].xmin2 = imagelet_4;
  mcu_macro[1][46].xmin2 = imagelet_4;
  mcu_macro[0][46].ymin2 = 0;
  mcu_macro[1][46].ymin2 = 0;
  // copy of operation 46 parameters
  p_46[0] = pi3;
  p_46[1] = pi4;
  p_46[2] = pi5;
  gram.xoffset = x_46;
  gram.yoffset = y_46;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_46;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][46].xmin3 = x_46;
  mcu_macro[1][46].xmin3 = x_46;
  mcu_macro[0][46].ymin3 = y_46;
  mcu_macro[1][46].ymin3 = y_46;
  mcu_macro[0][46].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][46].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][46].iter2 = imagelet_size;
  mcu_macro[1][46].iter2 = imagelet_size;
  mcu_macro[0][46].iter3 = 0;
  mcu_macro[1][46].iter3 = 0;
  mcu_macro[0][46].iter4 = 0;
  mcu_macro[1][46].iter4 = 0;
  mcu_macro[0][46].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][46].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 47: thr(2) -> 3
  mcu_macro[0][47].xmin1 = imagelet_2;
  mcu_macro[1][47].xmin1 = imagelet_2;
  mcu_macro[0][47].ymin1 = 0;
  mcu_macro[1][47].ymin1 = 0;
  mcu_macro[0][47].xmin2 = imagelet_3;
  mcu_macro[1][47].xmin2 = imagelet_3;
  mcu_macro[0][47].ymin2 = 0;
  mcu_macro[1][47].ymin2 = 0;
  // copy of operation 47 parameters
  p_47[0] = pi6;
  p_47[1] = pi7;
  p_47[2] = pi8;
  gram.xoffset = x_47;
  gram.yoffset = y_47;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_47;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][47].xmin3 = x_47;
  mcu_macro[1][47].xmin3 = x_47;
  mcu_macro[0][47].ymin3 = y_47;
  mcu_macro[1][47].ymin3 = y_47;
  mcu_macro[0][47].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][47].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][47].iter2 = imagelet_size;
  mcu_macro[1][47].iter2 = imagelet_size;
  mcu_macro[0][47].iter3 = 0;
  mcu_macro[1][47].iter3 = 0;
  mcu_macro[0][47].iter4 = 0;
  mcu_macro[1][47].iter4 = 0;
  mcu_macro[0][47].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][47].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 48: &(3,4) -> 4
  mcu_macro[0][48].xmin1 = imagelet_3;
  mcu_macro[1][48].xmin1 = imagelet_3;
  mcu_macro[0][48].ymin1 = 0;
  mcu_macro[1][48].ymin1 = 0;
  mcu_macro[0][48].xmin2 = imagelet_4;
  mcu_macro[1][48].xmin2 = imagelet_4;
  mcu_macro[0][48].ymin2 = 0;
  mcu_macro[1][48].ymin2 = 0;
  mcu_macro[0][48].xmin3 = imagelet_4;
  mcu_macro[1][48].xmin3 = imagelet_4;
  mcu_macro[0][48].ymin3 = 0;
  mcu_macro[1][48].ymin3 = 0;
  mcu_macro[0][48].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][48].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][48].iter2 = imagelet_size;
  mcu_macro[1][48].iter2 = imagelet_size;
  mcu_macro[0][48].iter3 = 0;
  mcu_macro[1][48].iter3 = 0;
  mcu_macro[0][48].iter4 = 0;
  mcu_macro[1][48].iter4 = 0;
  mcu_macro[0][48].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][48].addrStart = TERAPIX_UCODE_AND3;
  // 49: E8(4) -> 3
  mcu_macro[0][49].xmin1 = imagelet_4;
  mcu_macro[1][49].xmin1 = imagelet_4;
  mcu_macro[0][49].ymin1 = 0;
  mcu_macro[1][49].ymin1 = 0;
  mcu_macro[0][49].xmin2 = imagelet_3;
  mcu_macro[1][49].xmin2 = imagelet_3;
  mcu_macro[0][49].ymin2 = 0;
  mcu_macro[1][49].ymin2 = 0;
  // copy of operation 49 parameters
  for(i=0; i<9; i++)
    p_49[i] = pi9[i];
  gram.xoffset = x_49;
  gram.yoffset = y_49;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_49;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][49].xmin3 = x_49;
  mcu_macro[1][49].xmin3 = x_49;
  mcu_macro[0][49].ymin3 = y_49;
  mcu_macro[1][49].ymin3 = y_49;
  mcu_macro[0][49].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][49].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][49].iter2 = imagelet_size;
  mcu_macro[1][49].iter2 = imagelet_size;
  mcu_macro[0][49].iter3 = 0;
  mcu_macro[1][49].iter3 = 0;
  mcu_macro[0][49].iter4 = 0;
  mcu_macro[1][49].iter4 = 0;
  mcu_macro[0][49].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][49].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 50: E8(3) -> 4
  mcu_macro[0][50].xmin1 = imagelet_3;
  mcu_macro[1][50].xmin1 = imagelet_3;
  mcu_macro[0][50].ymin1 = 0;
  mcu_macro[1][50].ymin1 = 0;
  mcu_macro[0][50].xmin2 = imagelet_4;
  mcu_macro[1][50].xmin2 = imagelet_4;
  mcu_macro[0][50].ymin2 = 0;
  mcu_macro[1][50].ymin2 = 0;
  mcu_macro[0][50].xmin3 = x_49;
  mcu_macro[1][50].xmin3 = x_49;
  mcu_macro[0][50].ymin3 = y_49;
  mcu_macro[1][50].ymin3 = y_49;
  mcu_macro[0][50].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][50].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][50].iter2 = imagelet_size;
  mcu_macro[1][50].iter2 = imagelet_size;
  mcu_macro[0][50].iter3 = 0;
  mcu_macro[1][50].iter3 = 0;
  mcu_macro[0][50].iter4 = 0;
  mcu_macro[1][50].iter4 = 0;
  mcu_macro[0][50].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][50].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 51: E8(4) -> 3
  mcu_macro[0][51].xmin1 = imagelet_4;
  mcu_macro[1][51].xmin1 = imagelet_4;
  mcu_macro[0][51].ymin1 = 0;
  mcu_macro[1][51].ymin1 = 0;
  mcu_macro[0][51].xmin2 = imagelet_3;
  mcu_macro[1][51].xmin2 = imagelet_3;
  mcu_macro[0][51].ymin2 = 0;
  mcu_macro[1][51].ymin2 = 0;
  mcu_macro[0][51].xmin3 = x_49;
  mcu_macro[1][51].xmin3 = x_49;
  mcu_macro[0][51].ymin3 = y_49;
  mcu_macro[1][51].ymin3 = y_49;
  mcu_macro[0][51].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][51].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][51].iter2 = imagelet_size;
  mcu_macro[1][51].iter2 = imagelet_size;
  mcu_macro[0][51].iter3 = 0;
  mcu_macro[1][51].iter3 = 0;
  mcu_macro[0][51].iter4 = 0;
  mcu_macro[1][51].iter4 = 0;
  mcu_macro[0][51].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][51].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 52: E8(3) -> 4
  mcu_macro[0][52].xmin1 = imagelet_3;
  mcu_macro[1][52].xmin1 = imagelet_3;
  mcu_macro[0][52].ymin1 = 0;
  mcu_macro[1][52].ymin1 = 0;
  mcu_macro[0][52].xmin2 = imagelet_4;
  mcu_macro[1][52].xmin2 = imagelet_4;
  mcu_macro[0][52].ymin2 = 0;
  mcu_macro[1][52].ymin2 = 0;
  mcu_macro[0][52].xmin3 = x_49;
  mcu_macro[1][52].xmin3 = x_49;
  mcu_macro[0][52].ymin3 = y_49;
  mcu_macro[1][52].ymin3 = y_49;
  mcu_macro[0][52].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][52].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][52].iter2 = imagelet_size;
  mcu_macro[1][52].iter2 = imagelet_size;
  mcu_macro[0][52].iter3 = 0;
  mcu_macro[1][52].iter3 = 0;
  mcu_macro[0][52].iter4 = 0;
  mcu_macro[1][52].iter4 = 0;
  mcu_macro[0][52].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][52].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 53: D8(4) -> 3
  mcu_macro[0][53].xmin1 = imagelet_4;
  mcu_macro[1][53].xmin1 = imagelet_4;
  mcu_macro[0][53].ymin1 = 0;
  mcu_macro[1][53].ymin1 = 0;
  mcu_macro[0][53].xmin2 = imagelet_3;
  mcu_macro[1][53].xmin2 = imagelet_3;
  mcu_macro[0][53].ymin2 = 0;
  mcu_macro[1][53].ymin2 = 0;
  mcu_macro[0][53].xmin3 = x_49;
  mcu_macro[1][53].xmin3 = x_49;
  mcu_macro[0][53].ymin3 = y_49;
  mcu_macro[1][53].ymin3 = y_49;
  mcu_macro[0][53].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][53].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][53].iter2 = imagelet_size;
  mcu_macro[1][53].iter2 = imagelet_size;
  mcu_macro[0][53].iter3 = 0;
  mcu_macro[1][53].iter3 = 0;
  mcu_macro[0][53].iter4 = 0;
  mcu_macro[1][53].iter4 = 0;
  mcu_macro[0][53].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][53].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 54: D8(3) -> 4
  mcu_macro[0][54].xmin1 = imagelet_3;
  mcu_macro[1][54].xmin1 = imagelet_3;
  mcu_macro[0][54].ymin1 = 0;
  mcu_macro[1][54].ymin1 = 0;
  mcu_macro[0][54].xmin2 = imagelet_4;
  mcu_macro[1][54].xmin2 = imagelet_4;
  mcu_macro[0][54].ymin2 = 0;
  mcu_macro[1][54].ymin2 = 0;
  mcu_macro[0][54].xmin3 = x_49;
  mcu_macro[1][54].xmin3 = x_49;
  mcu_macro[0][54].ymin3 = y_49;
  mcu_macro[1][54].ymin3 = y_49;
  mcu_macro[0][54].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][54].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][54].iter2 = imagelet_size;
  mcu_macro[1][54].iter2 = imagelet_size;
  mcu_macro[0][54].iter3 = 0;
  mcu_macro[1][54].iter3 = 0;
  mcu_macro[0][54].iter4 = 0;
  mcu_macro[1][54].iter4 = 0;
  mcu_macro[0][54].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][54].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 55: D8(4) -> 3
  mcu_macro[0][55].xmin1 = imagelet_4;
  mcu_macro[1][55].xmin1 = imagelet_4;
  mcu_macro[0][55].ymin1 = 0;
  mcu_macro[1][55].ymin1 = 0;
  mcu_macro[0][55].xmin2 = imagelet_3;
  mcu_macro[1][55].xmin2 = imagelet_3;
  mcu_macro[0][55].ymin2 = 0;
  mcu_macro[1][55].ymin2 = 0;
  mcu_macro[0][55].xmin3 = x_49;
  mcu_macro[1][55].xmin3 = x_49;
  mcu_macro[0][55].ymin3 = y_49;
  mcu_macro[1][55].ymin3 = y_49;
  mcu_macro[0][55].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][55].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][55].iter2 = imagelet_size;
  mcu_macro[1][55].iter2 = imagelet_size;
  mcu_macro[0][55].iter3 = 0;
  mcu_macro[1][55].iter3 = 0;
  mcu_macro[0][55].iter4 = 0;
  mcu_macro[1][55].iter4 = 0;
  mcu_macro[0][55].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][55].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 56: D8(3) -> 4
  mcu_macro[0][56].xmin1 = imagelet_3;
  mcu_macro[1][56].xmin1 = imagelet_3;
  mcu_macro[0][56].ymin1 = 0;
  mcu_macro[1][56].ymin1 = 0;
  mcu_macro[0][56].xmin2 = imagelet_4;
  mcu_macro[1][56].xmin2 = imagelet_4;
  mcu_macro[0][56].ymin2 = 0;
  mcu_macro[1][56].ymin2 = 0;
  mcu_macro[0][56].xmin3 = x_49;
  mcu_macro[1][56].xmin3 = x_49;
  mcu_macro[0][56].ymin3 = y_49;
  mcu_macro[1][56].ymin3 = y_49;
  mcu_macro[0][56].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][56].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][56].iter2 = imagelet_size;
  mcu_macro[1][56].iter2 = imagelet_size;
  mcu_macro[0][56].iter3 = 0;
  mcu_macro[1][56].iter3 = 0;
  mcu_macro[0][56].iter4 = 0;
  mcu_macro[1][56].iter4 = 0;
  mcu_macro[0][56].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][56].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 57: E8(4) -> 3
  mcu_macro[0][57].xmin1 = imagelet_4;
  mcu_macro[1][57].xmin1 = imagelet_4;
  mcu_macro[0][57].ymin1 = 0;
  mcu_macro[1][57].ymin1 = 0;
  mcu_macro[0][57].xmin2 = imagelet_3;
  mcu_macro[1][57].xmin2 = imagelet_3;
  mcu_macro[0][57].ymin2 = 0;
  mcu_macro[1][57].ymin2 = 0;
  mcu_macro[0][57].xmin3 = x_0;
  mcu_macro[1][57].xmin3 = x_0;
  mcu_macro[0][57].ymin3 = y_0;
  mcu_macro[1][57].ymin3 = y_0;
  mcu_macro[0][57].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][57].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][57].iter2 = imagelet_size;
  mcu_macro[1][57].iter2 = imagelet_size;
  mcu_macro[0][57].iter3 = 0;
  mcu_macro[1][57].iter3 = 0;
  mcu_macro[0][57].iter4 = 0;
  mcu_macro[1][57].iter4 = 0;
  mcu_macro[0][57].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][57].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 58: E8(3) -> 4
  mcu_macro[0][58].xmin1 = imagelet_3;
  mcu_macro[1][58].xmin1 = imagelet_3;
  mcu_macro[0][58].ymin1 = 0;
  mcu_macro[1][58].ymin1 = 0;
  mcu_macro[0][58].xmin2 = imagelet_4;
  mcu_macro[1][58].xmin2 = imagelet_4;
  mcu_macro[0][58].ymin2 = 0;
  mcu_macro[1][58].ymin2 = 0;
  mcu_macro[0][58].xmin3 = x_0;
  mcu_macro[1][58].xmin3 = x_0;
  mcu_macro[0][58].ymin3 = y_0;
  mcu_macro[1][58].ymin3 = y_0;
  mcu_macro[0][58].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][58].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][58].iter2 = imagelet_size;
  mcu_macro[1][58].iter2 = imagelet_size;
  mcu_macro[0][58].iter3 = 0;
  mcu_macro[1][58].iter3 = 0;
  mcu_macro[0][58].iter4 = 0;
  mcu_macro[1][58].iter4 = 0;
  mcu_macro[0][58].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][58].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 59: E8(4) -> 3
  mcu_macro[0][59].xmin1 = imagelet_4;
  mcu_macro[1][59].xmin1 = imagelet_4;
  mcu_macro[0][59].ymin1 = 0;
  mcu_macro[1][59].ymin1 = 0;
  mcu_macro[0][59].xmin2 = imagelet_3;
  mcu_macro[1][59].xmin2 = imagelet_3;
  mcu_macro[0][59].ymin2 = 0;
  mcu_macro[1][59].ymin2 = 0;
  mcu_macro[0][59].xmin3 = x_0;
  mcu_macro[1][59].xmin3 = x_0;
  mcu_macro[0][59].ymin3 = y_0;
  mcu_macro[1][59].ymin3 = y_0;
  mcu_macro[0][59].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][59].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][59].iter2 = imagelet_size;
  mcu_macro[1][59].iter2 = imagelet_size;
  mcu_macro[0][59].iter3 = 0;
  mcu_macro[1][59].iter3 = 0;
  mcu_macro[0][59].iter4 = 0;
  mcu_macro[1][59].iter4 = 0;
  mcu_macro[0][59].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][59].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 60: E8(3) -> 4
  mcu_macro[0][60].xmin1 = imagelet_3;
  mcu_macro[1][60].xmin1 = imagelet_3;
  mcu_macro[0][60].ymin1 = 0;
  mcu_macro[1][60].ymin1 = 0;
  mcu_macro[0][60].xmin2 = imagelet_4;
  mcu_macro[1][60].xmin2 = imagelet_4;
  mcu_macro[0][60].ymin2 = 0;
  mcu_macro[1][60].ymin2 = 0;
  mcu_macro[0][60].xmin3 = x_0;
  mcu_macro[1][60].xmin3 = x_0;
  mcu_macro[0][60].ymin3 = y_0;
  mcu_macro[1][60].ymin3 = y_0;
  mcu_macro[0][60].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][60].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][60].iter2 = imagelet_size;
  mcu_macro[1][60].iter2 = imagelet_size;
  mcu_macro[0][60].iter3 = 0;
  mcu_macro[1][60].iter3 = 0;
  mcu_macro[0][60].iter4 = 0;
  mcu_macro[1][60].iter4 = 0;
  mcu_macro[0][60].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][60].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 61: D8(4) -> 3
  mcu_macro[0][61].xmin1 = imagelet_4;
  mcu_macro[1][61].xmin1 = imagelet_4;
  mcu_macro[0][61].ymin1 = 0;
  mcu_macro[1][61].ymin1 = 0;
  mcu_macro[0][61].xmin2 = imagelet_3;
  mcu_macro[1][61].xmin2 = imagelet_3;
  mcu_macro[0][61].ymin2 = 0;
  mcu_macro[1][61].ymin2 = 0;
  mcu_macro[0][61].xmin3 = x_0;
  mcu_macro[1][61].xmin3 = x_0;
  mcu_macro[0][61].ymin3 = y_0;
  mcu_macro[1][61].ymin3 = y_0;
  mcu_macro[0][61].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][61].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][61].iter2 = imagelet_size;
  mcu_macro[1][61].iter2 = imagelet_size;
  mcu_macro[0][61].iter3 = 0;
  mcu_macro[1][61].iter3 = 0;
  mcu_macro[0][61].iter4 = 0;
  mcu_macro[1][61].iter4 = 0;
  mcu_macro[0][61].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][61].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 62: D8(3) -> 4
  mcu_macro[0][62].xmin1 = imagelet_3;
  mcu_macro[1][62].xmin1 = imagelet_3;
  mcu_macro[0][62].ymin1 = 0;
  mcu_macro[1][62].ymin1 = 0;
  mcu_macro[0][62].xmin2 = imagelet_4;
  mcu_macro[1][62].xmin2 = imagelet_4;
  mcu_macro[0][62].ymin2 = 0;
  mcu_macro[1][62].ymin2 = 0;
  mcu_macro[0][62].xmin3 = x_0;
  mcu_macro[1][62].xmin3 = x_0;
  mcu_macro[0][62].ymin3 = y_0;
  mcu_macro[1][62].ymin3 = y_0;
  mcu_macro[0][62].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][62].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][62].iter2 = imagelet_size;
  mcu_macro[1][62].iter2 = imagelet_size;
  mcu_macro[0][62].iter3 = 0;
  mcu_macro[1][62].iter3 = 0;
  mcu_macro[0][62].iter4 = 0;
  mcu_macro[1][62].iter4 = 0;
  mcu_macro[0][62].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][62].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 63: D8(4) -> 3
  mcu_macro[0][63].xmin1 = imagelet_4;
  mcu_macro[1][63].xmin1 = imagelet_4;
  mcu_macro[0][63].ymin1 = 0;
  mcu_macro[1][63].ymin1 = 0;
  mcu_macro[0][63].xmin2 = imagelet_3;
  mcu_macro[1][63].xmin2 = imagelet_3;
  mcu_macro[0][63].ymin2 = 0;
  mcu_macro[1][63].ymin2 = 0;
  mcu_macro[0][63].xmin3 = x_0;
  mcu_macro[1][63].xmin3 = x_0;
  mcu_macro[0][63].ymin3 = y_0;
  mcu_macro[1][63].ymin3 = y_0;
  mcu_macro[0][63].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][63].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][63].iter2 = imagelet_size;
  mcu_macro[1][63].iter2 = imagelet_size;
  mcu_macro[0][63].iter3 = 0;
  mcu_macro[1][63].iter3 = 0;
  mcu_macro[0][63].iter4 = 0;
  mcu_macro[1][63].iter4 = 0;
  mcu_macro[0][63].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][63].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 64: D8(3) -> 4
  mcu_macro[0][64].xmin1 = imagelet_3;
  mcu_macro[1][64].xmin1 = imagelet_3;
  mcu_macro[0][64].ymin1 = 0;
  mcu_macro[1][64].ymin1 = 0;
  mcu_macro[0][64].xmin2 = imagelet_4;
  mcu_macro[1][64].xmin2 = imagelet_4;
  mcu_macro[0][64].ymin2 = 0;
  mcu_macro[1][64].ymin2 = 0;
  mcu_macro[0][64].xmin3 = x_0;
  mcu_macro[1][64].xmin3 = x_0;
  mcu_macro[0][64].ymin3 = y_0;
  mcu_macro[1][64].ymin3 = y_0;
  mcu_macro[0][64].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][64].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][64].iter2 = imagelet_size;
  mcu_macro[1][64].iter2 = imagelet_size;
  mcu_macro[0][64].iter3 = 0;
  mcu_macro[1][64].iter3 = 0;
  mcu_macro[0][64].iter4 = 0;
  mcu_macro[1][64].iter4 = 0;
  mcu_macro[0][64].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][64].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 65: D8(4) -> 3
  mcu_macro[0][65].xmin1 = imagelet_4;
  mcu_macro[1][65].xmin1 = imagelet_4;
  mcu_macro[0][65].ymin1 = 0;
  mcu_macro[1][65].ymin1 = 0;
  mcu_macro[0][65].xmin2 = imagelet_3;
  mcu_macro[1][65].xmin2 = imagelet_3;
  mcu_macro[0][65].ymin2 = 0;
  mcu_macro[1][65].ymin2 = 0;
  // copy of operation 65 parameters
  for(i=0; i<9; i++)
    p_65[i] = pi10[i];
  gram.xoffset = x_65;
  gram.yoffset = y_65;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_65;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][65].xmin3 = x_65;
  mcu_macro[1][65].xmin3 = x_65;
  mcu_macro[0][65].ymin3 = y_65;
  mcu_macro[1][65].ymin3 = y_65;
  mcu_macro[0][65].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][65].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][65].iter2 = imagelet_size;
  mcu_macro[1][65].iter2 = imagelet_size;
  mcu_macro[0][65].iter3 = 0;
  mcu_macro[1][65].iter3 = 0;
  mcu_macro[0][65].iter4 = 0;
  mcu_macro[1][65].iter4 = 0;
  mcu_macro[0][65].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][65].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 66: D8(3) -> 4
  mcu_macro[0][66].xmin1 = imagelet_3;
  mcu_macro[1][66].xmin1 = imagelet_3;
  mcu_macro[0][66].ymin1 = 0;
  mcu_macro[1][66].ymin1 = 0;
  mcu_macro[0][66].xmin2 = imagelet_4;
  mcu_macro[1][66].xmin2 = imagelet_4;
  mcu_macro[0][66].ymin2 = 0;
  mcu_macro[1][66].ymin2 = 0;
  mcu_macro[0][66].xmin3 = x_65;
  mcu_macro[1][66].xmin3 = x_65;
  mcu_macro[0][66].ymin3 = y_65;
  mcu_macro[1][66].ymin3 = y_65;
  mcu_macro[0][66].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][66].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][66].iter2 = imagelet_size;
  mcu_macro[1][66].iter2 = imagelet_size;
  mcu_macro[0][66].iter3 = 0;
  mcu_macro[1][66].iter3 = 0;
  mcu_macro[0][66].iter4 = 0;
  mcu_macro[1][66].iter4 = 0;
  mcu_macro[0][66].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][66].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 67: D8(4) -> 3
  mcu_macro[0][67].xmin1 = imagelet_4;
  mcu_macro[1][67].xmin1 = imagelet_4;
  mcu_macro[0][67].ymin1 = 0;
  mcu_macro[1][67].ymin1 = 0;
  mcu_macro[0][67].xmin2 = imagelet_3;
  mcu_macro[1][67].xmin2 = imagelet_3;
  mcu_macro[0][67].ymin2 = 0;
  mcu_macro[1][67].ymin2 = 0;
  mcu_macro[0][67].xmin3 = x_65;
  mcu_macro[1][67].xmin3 = x_65;
  mcu_macro[0][67].ymin3 = y_65;
  mcu_macro[1][67].ymin3 = y_65;
  mcu_macro[0][67].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][67].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][67].iter2 = imagelet_size;
  mcu_macro[1][67].iter2 = imagelet_size;
  mcu_macro[0][67].iter3 = 0;
  mcu_macro[1][67].iter3 = 0;
  mcu_macro[0][67].iter4 = 0;
  mcu_macro[1][67].iter4 = 0;
  mcu_macro[0][67].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][67].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 68: &(3,1) -> 1
  mcu_macro[0][68].xmin1 = imagelet_3;
  mcu_macro[1][68].xmin1 = imagelet_3;
  mcu_macro[0][68].ymin1 = 0;
  mcu_macro[1][68].ymin1 = 0;
  mcu_macro[0][68].xmin2 = imagelet_io_1_0;
  mcu_macro[1][68].xmin2 = imagelet_io_1_1;
  mcu_macro[0][68].ymin2 = 0;
  mcu_macro[1][68].ymin2 = 0;
  mcu_macro[0][68].xmin3 = imagelet_io_1_0;
  mcu_macro[1][68].xmin3 = imagelet_io_1_1;
  mcu_macro[0][68].ymin3 = 0;
  mcu_macro[1][68].ymin3 = 0;
  mcu_macro[0][68].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][68].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][68].iter2 = imagelet_size;
  mcu_macro[1][68].iter2 = imagelet_size;
  mcu_macro[0][68].iter3 = 0;
  mcu_macro[1][68].iter3 = 0;
  mcu_macro[0][68].iter4 = 0;
  mcu_macro[1][68].iter4 = 0;
  mcu_macro[0][68].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][68].addrStart = TERAPIX_UCODE_AND3;

  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;


  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 41;
  mcu_instr.borderRight  = 41;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 69;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  ret = freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = license_plate_helper_0_0(out, in, kernel1x3, 150, 255, 1, 1, 50, 1, kernel3x1, freia_morpho_kernel_8c);   /*0053*/
   ret_0 |= 0;                                                          /*0054*/
   ret_0 |= 0;                                                          /*0055*/
   ret_0 |= 0;                                                          /*0056*/
   ret_0 |= 0;                                                          /*0057*/
   ret_0 |= 0;                                                          /*0058*/
   ret_0 |= 0;                                                          /*0059*/
   ret_0 |= 0;                                                          /*0060*/
   ret_0 |= 0;                                                          /*0061*/
   ret_0 |= 0;                                                          /*0062*/
   ret_0 |= 0;                                                          /*0063*/
   ret_0 |= 0;                                                          /*0064*/
   ret_0 |= 0;                                                          /*0065*/
   ret_0 |= 0;                                                          /*0066*/
   ret_0 |= 0;                                                          /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= 0;                                                          /*0070*/
   ret_0 |= 0;                                                          /*0071*/
   ret_0 |= 0;                                                          /*0072*/
   ret_0 |= 0;                                                          /*0073*/
   ret_0 |= 0;                                                          /*0074*/
   ret_0 |= 0;                                                          /*0075*/
   ret_0 |= 0;                                                          /*0076*/
   ret_0 |= 0;                                                          /*0077*/
   ret_0 |= 0;                                                          /*0078*/
   ret_0 |= 0;                                                          /*0079*/
   ret_0 |= 0;                                                          /*0080*/
   ret_0 |= 0;                                                          /*0081*/
   ret_0 |= 0;                                                          /*0082*/
   ret_0 |= 0;                                                          /*0083*/
   ret_0 |= 0;                                                          /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = 0;                                                           /*0089*/
   ret_1 |= 0;                                                          /*0090*/
   ret_1 |= 0;                                                          /*0091*/
   ret_1 |= 0;                                                          /*0092*/
   ret_1 |= 0;                                                          /*0093*/
   ret_1 |= 0;                                                          /*0094*/
   ret_1 |= 0;                                                          /*0095*/
   ret_1 |= 0;                                                          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= 0;                                                          /*0099*/
   ret_1 |= 0;                                                          /*0100*/
   ret_1 |= 0;                                                          /*0101*/
   ret_1 |= 0;                                                          /*0102*/
   ret_1 |= 0;                                                          /*0103*/
   ret_1 |= 0;                                                          /*0104*/
   ret_1 |= 0;                                                          /*0105*/
   ret_1 |= 0;                                                          /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/
   
   
   
   ret_2 = 0;                                                           /*0117*/
   ret_2 |= 0;                                                          /*0118*/
   ret_2 |= 0;                                                          /*0119*/
   ret_2 |= 0;                                                          /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= 0;                                                          /*0123*/
   ret_2 |= 0;                                                          /*0124*/
   ret_2 |= 0;                                                          /*0125*/
   ret_2 |= 0;                                                          /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = 0;                                                           /*0131*/
   ret_3 |= 0;                                                          /*0132*/
   ret_3 |= 0;                                                          /*0133*/
   ret_3 |= 0;                                                          /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= 0;                                                          /*0137*/
   ret_3 |= 0;                                                          /*0138*/
   ret_3 |= 0;                                                          /*0139*/
   ret_3 |= 0;                                                          /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! cleaned up function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *out;                                                   /*0018*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0020*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = license_plate_helper_0_0(out, in, kernel1x3, 150, 255, 1, 1, 50, 1, kernel3x1, freia_morpho_kernel_8c);   /*0053*/
   i_0 = 15;                                                            /*0068*/

   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = 0;                                                           /*0089*/
   i_1 = 8;                                                             /*0097*/

   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/
   
   
   
   ret_2 = 0;                                                           /*0117*/
   i_2 = 4;                                                             /*0121*/

   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = 0;                                                           /*0131*/
   i_3 = 4;                                                             /*0135*/

   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# FREIA COMPILATION DONE
#

