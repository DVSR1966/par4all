#
# AIPO
#
#
# compile generated license_plate_copies_1
#

! initial function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *immir;                                                 /*0014*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_data2d *imtmp_0;                                               /*0028*/
   freia_status ret_0;                                                  /*0029*/
   int i_0;                                                             /*0030*/
   freia_data2d *imtmp_1;                                               /*0031*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_data2d *imtmp_2;                                               /*0034*/
   freia_status ret_2;                                                  /*0035*/
   int i_2;                                                             /*0036*/
   freia_data2d *imtmp_3;                                               /*0037*/
   freia_status ret_3;                                                  /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0060*/

   ret_0 = freia_aipo_copy(imtmp_0, in);                                /*0062*/

   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0064*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0066*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0067*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0068*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0069*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0071*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0073*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0075*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0077*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0079*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0081*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0083*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0084*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0085*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0086*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0087*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0088*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0089*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0090*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0091*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0092*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0093*/
   i_0 = 15;                                                            /*0094*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0096*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0097*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0098*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0099*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0100*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0101*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0102*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0103*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0104*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0105*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0106*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0107*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0108*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0109*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0110*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0111*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0112*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0113*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0114*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0115*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0116*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0117*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0118*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0119*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0120*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0121*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0122*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0123*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0124*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0125*/
   i_0 = 15;                                                            /*0126*/

   freia_common_destruct_data(imtmp_0);                                 /*0128*/

   _return1 = ret_0;                                                    /*0130*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0132*/

   ret_1 = freia_aipo_copy(imtmp_1, in);                                /*0134*/

   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0136*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0137*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0138*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0139*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0140*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0141*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0142*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0143*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0144*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0145*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0146*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0147*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0148*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0149*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0150*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0151*/
   i_1 = 8;                                                             /*0152*/

   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0154*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0155*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0156*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0157*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0158*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0159*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0160*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0161*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0162*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0163*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0164*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0165*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0166*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0167*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0168*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0169*/
   i_1 = 8;                                                             /*0170*/

   freia_common_destruct_data(imtmp_1);                                 /*0172*/

   _return0 = ret_1;                                                    /*0174*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0176*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0177*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0179*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0181*/

   ret_2 = freia_aipo_copy(imtmp_2, imand);                             /*0183*/

   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0185*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0186*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0187*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0188*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0189*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0190*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0191*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0192*/
   i_2 = 4;                                                             /*0193*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0195*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0196*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0197*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0198*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0199*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0200*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0201*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0202*/
   i_2 = 4;                                                             /*0203*/

   freia_common_destruct_data(imtmp_2);                                 /*0205*/

   _return2 = ret_2;                                                    /*0207*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0209*/

   ret_3 = freia_aipo_copy(imtmp_3, imfilt);                            /*0211*/

   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0213*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0214*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0215*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0216*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0217*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0218*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0219*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0220*/
   i_3 = 4;                                                             /*0221*/

   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0223*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0224*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0225*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0226*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0227*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0228*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0229*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0230*/
   i_3 = 4;                                                             /*0231*/

   freia_common_destruct_data(imtmp_3);                                 /*0233*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(immir);                                   /*0249*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! graphs

// graph for dag "dag_0" of module "license_plate_copies" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "230 =" [shape=circle];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "229 D8" -> "230 =" [label="imout"];
  "228 =" [shape=circle];
  "228 =" -> "229 D8" [label="imtmp_3"];
  "227 D8" [shape=box];
  "227 D8" -> "228 =" [label="imout"];
  "226 =" [shape=circle];
  "226 =" -> "227 D8" [label="imtmp_3"];
  "225 D8" [shape=box];
  "225 D8" -> "226 =" [label="imout"];
  "224 =" [shape=circle];
  "224 =" -> "225 D8" [label="imtmp_3"];
  "223 D8" [shape=box];
  "223 D8" -> "224 =" [label="imout"];
  "220 =" [shape=circle];
  "220 =" -> "223 D8" [label="imtmp_3"];
  "219 E8" [shape=box];
  "219 E8" -> "220 =" [label="imout"];
  "218 =" [shape=circle];
  "218 =" -> "219 E8" [label="imtmp_3"];
  "217 E8" [shape=box];
  "217 E8" -> "218 =" [label="imout"];
  "216 =" [shape=circle];
  "216 =" -> "217 E8" [label="imtmp_3"];
  "215 E8" [shape=box];
  "215 E8" -> "216 =" [label="imout"];
  "214 =" [shape=circle];
  "214 =" -> "215 E8" [label="imtmp_3"];
  "213 E8" [shape=box];
  "213 E8" -> "214 =" [label="imout"];
  "211 =" [shape=circle];
  "211 =" -> "213 E8" [label="imtmp_3"];
  "202 =" [shape=circle];
  "201 D8" [shape=box];
  "201 D8" -> "211 =" [label="imfilt"];
  "201 D8" -> "202 =" [label="imfilt"];
  "200 =" [shape=circle];
  "200 =" -> "201 D8" [label="imtmp_2"];
  "199 D8" [shape=box];
  "199 D8" -> "200 =" [label="imfilt"];
  "198 =" [shape=circle];
  "198 =" -> "199 D8" [label="imtmp_2"];
  "197 D8" [shape=box];
  "197 D8" -> "198 =" [label="imfilt"];
  "196 =" [shape=circle];
  "196 =" -> "197 D8" [label="imtmp_2"];
  "195 D8" [shape=box];
  "195 D8" -> "196 =" [label="imfilt"];
  "192 =" [shape=circle];
  "192 =" -> "195 D8" [label="imtmp_2"];
  "191 E8" [shape=box];
  "191 E8" -> "192 =" [label="imfilt"];
  "190 =" [shape=circle];
  "190 =" -> "191 E8" [label="imtmp_2"];
  "189 E8" [shape=box];
  "189 E8" -> "190 =" [label="imfilt"];
  "188 =" [shape=circle];
  "188 =" -> "189 E8" [label="imtmp_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 =" [label="imfilt"];
  "186 =" [shape=circle];
  "186 =" -> "187 E8" [label="imtmp_2"];
  "185 E8" [shape=box];
  "185 E8" -> "186 =" [label="imfilt"];
  "183 =" [shape=circle];
  "183 =" -> "185 E8" [label="imtmp_2"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "183 =" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "169 =" [shape=circle];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "168 E8" -> "169 =" [label="imclose"];
  "167 =" [shape=circle];
  "167 =" -> "168 E8" [label="imtmp_1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 =" [label="imclose"];
  "165 =" [shape=circle];
  "165 =" -> "166 E8" [label="imtmp_1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 =" [label="imclose"];
  "163 =" [shape=circle];
  "163 =" -> "164 E8" [label="imtmp_1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 =" [label="imclose"];
  "161 =" [shape=circle];
  "161 =" -> "162 E8" [label="imtmp_1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 =" [label="imclose"];
  "159 =" [shape=circle];
  "159 =" -> "160 E8" [label="imtmp_1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 =" [label="imclose"];
  "157 =" [shape=circle];
  "157 =" -> "158 E8" [label="imtmp_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imclose"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imclose"];
  "151 =" [shape=circle];
  "151 =" -> "154 E8" [label="imtmp_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 =" [label="imclose"];
  "149 =" [shape=circle];
  "149 =" -> "150 D8" [label="imtmp_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 =" [label="imclose"];
  "147 =" [shape=circle];
  "147 =" -> "148 D8" [label="imtmp_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 =" [label="imclose"];
  "145 =" [shape=circle];
  "145 =" -> "146 D8" [label="imtmp_1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 =" [label="imclose"];
  "143 =" [shape=circle];
  "143 =" -> "144 D8" [label="imtmp_1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 =" [label="imclose"];
  "141 =" [shape=circle];
  "141 =" -> "142 D8" [label="imtmp_1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 =" [label="imclose"];
  "139 =" [shape=circle];
  "139 =" -> "140 D8" [label="imtmp_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 =" [label="imclose"];
  "137 =" [shape=circle];
  "137 =" -> "138 D8" [label="imtmp_1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "136 D8" [label="imtmp_1"];
  "125 =" [shape=circle];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "124 D8" -> "125 =" [label="imopen"];
  "123 =" [shape=circle];
  "123 =" -> "124 D8" [label="imtmp_0"];
  "122 D8" [shape=box];
  "122 D8" -> "123 =" [label="imopen"];
  "121 =" [shape=circle];
  "121 =" -> "122 D8" [label="imtmp_0"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imopen"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_0"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imopen"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imopen"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imopen"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_0"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imopen"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_0"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imopen"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_0"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imopen"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_0"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imopen"];
  "105 =" [shape=circle];
  "105 =" -> "106 D8" [label="imtmp_0"];
  "104 D8" [shape=box];
  "104 D8" -> "105 =" [label="imopen"];
  "103 =" [shape=circle];
  "103 =" -> "104 D8" [label="imtmp_0"];
  "102 D8" [shape=box];
  "102 D8" -> "103 =" [label="imopen"];
  "101 =" [shape=circle];
  "101 =" -> "102 D8" [label="imtmp_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 =" [label="imopen"];
  "99 =" [shape=circle];
  "99 =" -> "100 D8" [label="imtmp_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 =" [label="imopen"];
  "97 =" [shape=circle];
  "97 =" -> "98 D8" [label="imtmp_0"];
  "96 D8" [shape=box];
  "96 D8" -> "97 =" [label="imopen"];
  "93 =" [shape=circle];
  "93 =" -> "96 D8" [label="imtmp_0"];
  "92 E8" [shape=box];
  "92 E8" -> "93 =" [label="imopen"];
  "91 =" [shape=circle];
  "91 =" -> "92 E8" [label="imtmp_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 =" [label="imopen"];
  "89 =" [shape=circle];
  "89 =" -> "90 E8" [label="imtmp_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 =" [label="imopen"];
  "87 =" [shape=circle];
  "87 =" -> "88 E8" [label="imtmp_0"];
  "86 E8" [shape=box];
  "86 E8" -> "87 =" [label="imopen"];
  "85 =" [shape=circle];
  "85 =" -> "86 E8" [label="imtmp_0"];
  "84 E8" [shape=box];
  "84 E8" -> "85 =" [label="imopen"];
  "83 =" [shape=circle];
  "83 =" -> "84 E8" [label="imtmp_0"];
  "82 E8" [shape=box];
  "82 E8" -> "83 =" [label="imopen"];
  "81 =" [shape=circle];
  "81 =" -> "82 E8" [label="imtmp_0"];
  "80 E8" [shape=box];
  "80 E8" -> "81 =" [label="imopen"];
  "79 =" [shape=circle];
  "79 =" -> "80 E8" [label="imtmp_0"];
  "78 E8" [shape=box];
  "78 E8" -> "79 =" [label="imopen"];
  "77 =" [shape=circle];
  "77 =" -> "78 E8" [label="imtmp_0"];
  "76 E8" [shape=box];
  "76 E8" -> "77 =" [label="imopen"];
  "75 =" [shape=circle];
  "75 =" -> "76 E8" [label="imtmp_0"];
  "74 E8" [shape=box];
  "74 E8" -> "75 =" [label="imopen"];
  "73 =" [shape=circle];
  "73 =" -> "74 E8" [label="imtmp_0"];
  "72 E8" [shape=box];
  "72 E8" -> "73 =" [label="imopen"];
  "71 =" [shape=circle];
  "71 =" -> "72 E8" [label="imtmp_0"];
  "70 E8" [shape=box];
  "70 E8" -> "71 =" [label="imopen"];
  "69 =" [shape=circle];
  "69 =" -> "70 E8" [label="imtmp_0"];
  "68 E8" [shape=box];
  "68 E8" -> "69 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "68 E8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "62 =" [shape=circle];
  "62 =" -> "64 E8" [label="imtmp_0"];
  "in" -> "244 &";
  "in" -> "134 =";
  "in" -> "62 =";
}
// graph for dag "dag_cleaned_0" of module "license_plate_copies" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out_1"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_2"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_3"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout_1"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout_2"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout_3"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout_4"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout_5"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout_6"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout_7"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt_1"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt_2"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt_3"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt_4"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt_5"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt_6"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt_7"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose_1"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose_2"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose_3"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose_4"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose_5"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose_6"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose_7"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose_8"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose_9"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose_10"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose_11"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose_12"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose_13"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose_14"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose_15"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen_1"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen_2"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen_3"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen_4"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen_5"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen_6"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen_7"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen_8"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen_9"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen_10"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen_11"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen_12"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen_13"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen_14"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen_15"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen_16"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen_17"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen_18"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen_19"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen_20"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen_21"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen_22"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen_23"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen_24"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen_25"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen_26"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen_27"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen_28"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_29"];
  "in" -> "64 E8";
  "in" -> "136 D8";
  "in" -> "244 &";
}

! updated function for

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1 = 0;                                              /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2 = 0;                                              /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3 = 0;                                              /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   freia_aipo_erode_8c(imopen, in, kernel1x3);                          /*0064*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0066*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0068*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0070*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0072*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0074*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0076*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0078*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0080*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0082*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0084*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0086*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0088*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0090*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0092*/

   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0096*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0098*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0100*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0102*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0104*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0106*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0108*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0110*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0112*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0114*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0116*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0118*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0120*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0122*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0124*/

   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/

   freia_aipo_dilate_8c(imclose, in, kernel1x3);                        /*0136*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0138*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0140*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0142*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0144*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0146*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0148*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0150*/

   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0154*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0156*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0158*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0160*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0162*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0164*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0166*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0168*/

   _return0 = ret_1;                                                    /*0174*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0176*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0177*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0179*/

   ret_2 = 0;                                                           /*0183*/

   freia_aipo_erode_8c(imfilt, imand, kernel3x1);                       /*0185*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0187*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0189*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0191*/

   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0195*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0197*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0199*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0201*/

   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/

   freia_aipo_erode_8c(imout, imfilt, kernel1x3);                       /*0213*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0215*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0217*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0219*/

   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0223*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0225*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0227*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0229*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}
#
# SPOC
#

! initial function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *immir;                                                 /*0014*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_data2d *imtmp_0;                                               /*0028*/
   freia_status ret_0;                                                  /*0029*/
   int i_0;                                                             /*0030*/
   freia_data2d *imtmp_1;                                               /*0031*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_data2d *imtmp_2;                                               /*0034*/
   freia_status ret_2;                                                  /*0035*/
   int i_2;                                                             /*0036*/
   freia_data2d *imtmp_3;                                               /*0037*/
   freia_status ret_3;                                                  /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0060*/

   ret_0 = freia_aipo_copy(imtmp_0, in);                                /*0062*/

   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0064*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0066*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0067*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0068*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0069*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0071*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0073*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0075*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0077*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0079*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0081*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0083*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0084*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0085*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0086*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0087*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0088*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0089*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0090*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0091*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0092*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0093*/
   i_0 = 15;                                                            /*0094*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0096*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0097*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0098*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0099*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0100*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0101*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0102*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0103*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0104*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0105*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0106*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0107*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0108*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0109*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0110*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0111*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0112*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0113*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0114*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0115*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0116*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0117*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0118*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0119*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0120*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0121*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0122*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0123*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0124*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0125*/
   i_0 = 15;                                                            /*0126*/

   freia_common_destruct_data(imtmp_0);                                 /*0128*/

   _return1 = ret_0;                                                    /*0130*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0132*/

   ret_1 = freia_aipo_copy(imtmp_1, in);                                /*0134*/

   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0136*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0137*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0138*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0139*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0140*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0141*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0142*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0143*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0144*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0145*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0146*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0147*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0148*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0149*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0150*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0151*/
   i_1 = 8;                                                             /*0152*/

   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0154*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0155*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0156*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0157*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0158*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0159*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0160*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0161*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0162*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0163*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0164*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0165*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0166*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0167*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0168*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0169*/
   i_1 = 8;                                                             /*0170*/

   freia_common_destruct_data(imtmp_1);                                 /*0172*/

   _return0 = ret_1;                                                    /*0174*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0176*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0177*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0179*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0181*/

   ret_2 = freia_aipo_copy(imtmp_2, imand);                             /*0183*/

   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0185*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0186*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0187*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0188*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0189*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0190*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0191*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0192*/
   i_2 = 4;                                                             /*0193*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0195*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0196*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0197*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0198*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0199*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0200*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0201*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0202*/
   i_2 = 4;                                                             /*0203*/

   freia_common_destruct_data(imtmp_2);                                 /*0205*/

   _return2 = ret_2;                                                    /*0207*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0209*/

   ret_3 = freia_aipo_copy(imtmp_3, imfilt);                            /*0211*/

   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0213*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0214*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0215*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0216*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0217*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0218*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0219*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0220*/
   i_3 = 4;                                                             /*0221*/

   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0223*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0224*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0225*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0226*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0227*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0228*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0229*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0230*/
   i_3 = 4;                                                             /*0231*/

   freia_common_destruct_data(imtmp_3);                                 /*0233*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(immir);                                   /*0249*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! graphs

// graph for dag "dag_0" of module "license_plate_copies" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "230 =" [shape=circle];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "229 D8" -> "230 =" [label="imout"];
  "228 =" [shape=circle];
  "228 =" -> "229 D8" [label="imtmp_3"];
  "227 D8" [shape=box];
  "227 D8" -> "228 =" [label="imout"];
  "226 =" [shape=circle];
  "226 =" -> "227 D8" [label="imtmp_3"];
  "225 D8" [shape=box];
  "225 D8" -> "226 =" [label="imout"];
  "224 =" [shape=circle];
  "224 =" -> "225 D8" [label="imtmp_3"];
  "223 D8" [shape=box];
  "223 D8" -> "224 =" [label="imout"];
  "220 =" [shape=circle];
  "220 =" -> "223 D8" [label="imtmp_3"];
  "219 E8" [shape=box];
  "219 E8" -> "220 =" [label="imout"];
  "218 =" [shape=circle];
  "218 =" -> "219 E8" [label="imtmp_3"];
  "217 E8" [shape=box];
  "217 E8" -> "218 =" [label="imout"];
  "216 =" [shape=circle];
  "216 =" -> "217 E8" [label="imtmp_3"];
  "215 E8" [shape=box];
  "215 E8" -> "216 =" [label="imout"];
  "214 =" [shape=circle];
  "214 =" -> "215 E8" [label="imtmp_3"];
  "213 E8" [shape=box];
  "213 E8" -> "214 =" [label="imout"];
  "211 =" [shape=circle];
  "211 =" -> "213 E8" [label="imtmp_3"];
  "202 =" [shape=circle];
  "201 D8" [shape=box];
  "201 D8" -> "211 =" [label="imfilt"];
  "201 D8" -> "202 =" [label="imfilt"];
  "200 =" [shape=circle];
  "200 =" -> "201 D8" [label="imtmp_2"];
  "199 D8" [shape=box];
  "199 D8" -> "200 =" [label="imfilt"];
  "198 =" [shape=circle];
  "198 =" -> "199 D8" [label="imtmp_2"];
  "197 D8" [shape=box];
  "197 D8" -> "198 =" [label="imfilt"];
  "196 =" [shape=circle];
  "196 =" -> "197 D8" [label="imtmp_2"];
  "195 D8" [shape=box];
  "195 D8" -> "196 =" [label="imfilt"];
  "192 =" [shape=circle];
  "192 =" -> "195 D8" [label="imtmp_2"];
  "191 E8" [shape=box];
  "191 E8" -> "192 =" [label="imfilt"];
  "190 =" [shape=circle];
  "190 =" -> "191 E8" [label="imtmp_2"];
  "189 E8" [shape=box];
  "189 E8" -> "190 =" [label="imfilt"];
  "188 =" [shape=circle];
  "188 =" -> "189 E8" [label="imtmp_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 =" [label="imfilt"];
  "186 =" [shape=circle];
  "186 =" -> "187 E8" [label="imtmp_2"];
  "185 E8" [shape=box];
  "185 E8" -> "186 =" [label="imfilt"];
  "183 =" [shape=circle];
  "183 =" -> "185 E8" [label="imtmp_2"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "183 =" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "169 =" [shape=circle];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "168 E8" -> "169 =" [label="imclose"];
  "167 =" [shape=circle];
  "167 =" -> "168 E8" [label="imtmp_1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 =" [label="imclose"];
  "165 =" [shape=circle];
  "165 =" -> "166 E8" [label="imtmp_1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 =" [label="imclose"];
  "163 =" [shape=circle];
  "163 =" -> "164 E8" [label="imtmp_1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 =" [label="imclose"];
  "161 =" [shape=circle];
  "161 =" -> "162 E8" [label="imtmp_1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 =" [label="imclose"];
  "159 =" [shape=circle];
  "159 =" -> "160 E8" [label="imtmp_1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 =" [label="imclose"];
  "157 =" [shape=circle];
  "157 =" -> "158 E8" [label="imtmp_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imclose"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imclose"];
  "151 =" [shape=circle];
  "151 =" -> "154 E8" [label="imtmp_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 =" [label="imclose"];
  "149 =" [shape=circle];
  "149 =" -> "150 D8" [label="imtmp_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 =" [label="imclose"];
  "147 =" [shape=circle];
  "147 =" -> "148 D8" [label="imtmp_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 =" [label="imclose"];
  "145 =" [shape=circle];
  "145 =" -> "146 D8" [label="imtmp_1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 =" [label="imclose"];
  "143 =" [shape=circle];
  "143 =" -> "144 D8" [label="imtmp_1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 =" [label="imclose"];
  "141 =" [shape=circle];
  "141 =" -> "142 D8" [label="imtmp_1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 =" [label="imclose"];
  "139 =" [shape=circle];
  "139 =" -> "140 D8" [label="imtmp_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 =" [label="imclose"];
  "137 =" [shape=circle];
  "137 =" -> "138 D8" [label="imtmp_1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "136 D8" [label="imtmp_1"];
  "125 =" [shape=circle];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "124 D8" -> "125 =" [label="imopen"];
  "123 =" [shape=circle];
  "123 =" -> "124 D8" [label="imtmp_0"];
  "122 D8" [shape=box];
  "122 D8" -> "123 =" [label="imopen"];
  "121 =" [shape=circle];
  "121 =" -> "122 D8" [label="imtmp_0"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imopen"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_0"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imopen"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imopen"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imopen"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_0"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imopen"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_0"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imopen"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_0"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imopen"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_0"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imopen"];
  "105 =" [shape=circle];
  "105 =" -> "106 D8" [label="imtmp_0"];
  "104 D8" [shape=box];
  "104 D8" -> "105 =" [label="imopen"];
  "103 =" [shape=circle];
  "103 =" -> "104 D8" [label="imtmp_0"];
  "102 D8" [shape=box];
  "102 D8" -> "103 =" [label="imopen"];
  "101 =" [shape=circle];
  "101 =" -> "102 D8" [label="imtmp_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 =" [label="imopen"];
  "99 =" [shape=circle];
  "99 =" -> "100 D8" [label="imtmp_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 =" [label="imopen"];
  "97 =" [shape=circle];
  "97 =" -> "98 D8" [label="imtmp_0"];
  "96 D8" [shape=box];
  "96 D8" -> "97 =" [label="imopen"];
  "93 =" [shape=circle];
  "93 =" -> "96 D8" [label="imtmp_0"];
  "92 E8" [shape=box];
  "92 E8" -> "93 =" [label="imopen"];
  "91 =" [shape=circle];
  "91 =" -> "92 E8" [label="imtmp_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 =" [label="imopen"];
  "89 =" [shape=circle];
  "89 =" -> "90 E8" [label="imtmp_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 =" [label="imopen"];
  "87 =" [shape=circle];
  "87 =" -> "88 E8" [label="imtmp_0"];
  "86 E8" [shape=box];
  "86 E8" -> "87 =" [label="imopen"];
  "85 =" [shape=circle];
  "85 =" -> "86 E8" [label="imtmp_0"];
  "84 E8" [shape=box];
  "84 E8" -> "85 =" [label="imopen"];
  "83 =" [shape=circle];
  "83 =" -> "84 E8" [label="imtmp_0"];
  "82 E8" [shape=box];
  "82 E8" -> "83 =" [label="imopen"];
  "81 =" [shape=circle];
  "81 =" -> "82 E8" [label="imtmp_0"];
  "80 E8" [shape=box];
  "80 E8" -> "81 =" [label="imopen"];
  "79 =" [shape=circle];
  "79 =" -> "80 E8" [label="imtmp_0"];
  "78 E8" [shape=box];
  "78 E8" -> "79 =" [label="imopen"];
  "77 =" [shape=circle];
  "77 =" -> "78 E8" [label="imtmp_0"];
  "76 E8" [shape=box];
  "76 E8" -> "77 =" [label="imopen"];
  "75 =" [shape=circle];
  "75 =" -> "76 E8" [label="imtmp_0"];
  "74 E8" [shape=box];
  "74 E8" -> "75 =" [label="imopen"];
  "73 =" [shape=circle];
  "73 =" -> "74 E8" [label="imtmp_0"];
  "72 E8" [shape=box];
  "72 E8" -> "73 =" [label="imopen"];
  "71 =" [shape=circle];
  "71 =" -> "72 E8" [label="imtmp_0"];
  "70 E8" [shape=box];
  "70 E8" -> "71 =" [label="imopen"];
  "69 =" [shape=circle];
  "69 =" -> "70 E8" [label="imtmp_0"];
  "68 E8" [shape=box];
  "68 E8" -> "69 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "68 E8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "62 =" [shape=circle];
  "62 =" -> "64 E8" [label="imtmp_0"];
  "in" -> "244 &";
  "in" -> "134 =";
  "in" -> "62 =";
}
// graph for dag "dag_cleaned_0" of module "license_plate_copies" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen"];
  "in" -> "64 E8";
  "in" -> "136 D8";
  "in" -> "244 &";
}
// graph for dag "license_plate_copies_helper_0_0" of module "license_plate_copies" in dot format
digraph "license_plate_copies_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out_1" [shape=circle];

  // computation vertices
  "239 D8" [shape=box];
  "239 D8" -> "out_1";
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_2"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_3"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout_1"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout_2"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout_3"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout_4"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout_5"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout_6"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout_7"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt_1"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt_2"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt_3"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt_4"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt_5"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt_6"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt_7"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose_1"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose_2"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose_3"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose_4"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose_5"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose_6"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose_7"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose_8"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose_9"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose_10"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose_11"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose_12"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose_13"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose_14"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose_15"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen_1"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen_2"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen_3"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen_4"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen_5"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen_6"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen_7"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen_8"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen_9"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen_10"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen_11"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen_12"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen_13"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen_14"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen_15"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen_16"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen_17"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen_18"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen_19"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen_20"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen_21"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen_22"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen_23"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen_24"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen_25"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen_26"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen_27"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen_28"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_29"];
  "in" -> "136 D8";
  "in" -> "64 E8";
}
// graph for dag "license_plate_copies_helper_0_1" of module "license_plate_copies" in dot format
digraph "license_plate_copies_helper_0_1" {
  // inputs
  "in" [shape=circle];
  "out_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "in" -> "244 &";
  "out_1" -> "244 &";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 69 ops and 66 copies, optimized to 69 ops and 0+0 copies
// split 0: 50 cuts
// split 1: 1 cut
// # SPOC calls: 51

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 64 erode_8c
  // nope
  // poc 64 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`in [0 input 1] -> [0 poc 1] 136 dilate_8c
  // nope
  // poc 136 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_29 on 0 and image 0`imclose_15 on 1
  // 0`imopen_29 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imopen_29 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imclose_15 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imclose_15 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_29 [0 input 1] -> [0 poc 1] 66 erode_8c
  // nope
  // poc 66 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_15 [0 input 0] -> [0 poc 0] 138 dilate_8c
  // nope
  // poc 138 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_14 on 0 and image 0`imopen_28 on 1
  // 0`imclose_14 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_14 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_28 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_28 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_2(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_28 [0 input 1] -> [0 poc 1] 68 erode_8c
  // nope
  // poc 68 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_14 [0 input 0] -> [0 poc 0] 140 dilate_8c
  // nope
  // poc 140 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_13 on 0 and image 0`imopen_27 on 1
  // 0`imclose_13 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_13 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_27 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_27 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_3(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_27 [0 input 1] -> [0 poc 1] 70 erode_8c
  // nope
  // poc 70 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_13 [0 input 0] -> [0 poc 0] 142 dilate_8c
  // nope
  // poc 142 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_12 on 0 and image 0`imopen_26 on 1
  // 0`imclose_12 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_12 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_26 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_26 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_4(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_26 [0 input 1] -> [0 poc 1] 72 erode_8c
  // nope
  // poc 72 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_12 [0 input 0] -> [0 poc 0] 144 dilate_8c
  // nope
  // poc 144 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_11 on 0 and image 0`imopen_25 on 1
  // 0`imclose_11 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_11 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_25 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_25 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_5(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_25 [0 input 1] -> [0 poc 1] 74 erode_8c
  // nope
  // poc 74 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_11 [0 input 0] -> [0 poc 0] 146 dilate_8c
  // nope
  // poc 146 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_10 on 0 and image 0`imopen_24 on 1
  // 0`imclose_10 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_10 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_24 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_24 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_6(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_24 [0 input 1] -> [0 poc 1] 76 erode_8c
  // nope
  // poc 76 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_10 [0 input 0] -> [0 poc 0] 148 dilate_8c
  // nope
  // poc 148 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_9 on 0 and image 0`imopen_23 on 1
  // 0`imclose_9 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_9 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_23 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_23 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_7(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_23 [0 input 1] -> [0 poc 1] 78 erode_8c
  // nope
  // poc 78 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_9 [0 input 0] -> [0 poc 0] 150 dilate_8c
  // nope
  // poc 150 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_8 on 0 and image 0`imopen_22 on 1
  // 0`imclose_8 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_8 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_22 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_22 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_8(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_22 [0 input 1] -> [0 poc 1] 80 erode_8c
  // nope
  // poc 80 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_8 [0 input 0] -> [0 poc 0] 154 erode_8c
  // nope
  // poc 154 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_7 on 0 and image 0`imopen_21 on 1
  // 0`imclose_7 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_7 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_21 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_21 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_9(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_21 [0 input 1] -> [0 poc 1] 82 erode_8c
  // nope
  // poc 82 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_7 [0 input 0] -> [0 poc 0] 156 erode_8c
  // nope
  // poc 156 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_6 on 0 and image 0`imopen_20 on 1
  // 0`imclose_6 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_6 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_20 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_20 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_10(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_20 [0 input 1] -> [0 poc 1] 84 erode_8c
  // nope
  // poc 84 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_6 [0 input 0] -> [0 poc 0] 158 erode_8c
  // nope
  // poc 158 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_5 on 0 and image 0`imopen_19 on 1
  // 0`imclose_5 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_5 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_19 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_19 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_11(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_19 [0 input 1] -> [0 poc 1] 86 erode_8c
  // nope
  // poc 86 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_5 [0 input 0] -> [0 poc 0] 160 erode_8c
  // nope
  // poc 160 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_4 on 0 and image 0`imopen_18 on 1
  // 0`imclose_4 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_4 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_18 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_18 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_12(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_18 [0 input 1] -> [0 poc 1] 88 erode_8c
  // nope
  // poc 88 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_4 [0 input 0] -> [0 poc 0] 162 erode_8c
  // nope
  // poc 162 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_3 on 0 and image 0`imopen_17 on 1
  // 0`imclose_3 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_3 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_17 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_17 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_13(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_17 [0 input 1] -> [0 poc 1] 90 erode_8c
  // nope
  // poc 90 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_3 [0 input 0] -> [0 poc 0] 164 erode_8c
  // nope
  // poc 164 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_2 on 0 and image 0`imopen_16 on 1
  // 0`imclose_2 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_2 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_16 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_16 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_14(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_16 [0 input 1] -> [0 poc 1] 92 erode_8c
  // nope
  // poc 92 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_2 [0 input 0] -> [0 poc 0] 166 erode_8c
  // nope
  // poc 166 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imclose_1 on 0 and image 0`imopen_15 on 1
  // 0`imclose_1 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imclose_1 [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_15 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_15 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_15(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_15 [0 input 1] -> [0 poc 1] 96 dilate_8c
  // nope
  // poc 96 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imclose_1 [0 input 0] -> [0 poc 0] 168 erode_8c
  // nope
  // poc 168 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`imclose [0 poc 0] -> [0 threshold 0] 177 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 177 threshold stage 0 side 0
  si.th[0][0].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi1;
  sp.th[0][0].boundmax = pi2;


  // output image 0`imcloseth on 0 and image 0`imopen_14 on 1
  // 0`imcloseth [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`imcloseth [0 output 0] -> [0 output 0] 0 null
  // nope

  // 0`imopen_14 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_14 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_16(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_14 [0 input 1] -> [0 poc 1] 98 dilate_8c
  // nope
  // poc 98 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_13 on 1
  // 0`imopen_13 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_13 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_17(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_13 [0 input 1] -> [0 poc 1] 100 dilate_8c
  // nope
  // poc 100 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_12 on 1
  // 0`imopen_12 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_12 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_18(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_12 [0 input 1] -> [0 poc 1] 102 dilate_8c
  // nope
  // poc 102 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_11 on 1
  // 0`imopen_11 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_11 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_19(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_11 [0 input 1] -> [0 poc 1] 104 dilate_8c
  // nope
  // poc 104 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_10 on 1
  // 0`imopen_10 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_10 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_20(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_10 [0 input 1] -> [0 poc 1] 106 dilate_8c
  // nope
  // poc 106 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_9 on 1
  // 0`imopen_9 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_9 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_21(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_9 [0 input 1] -> [0 poc 1] 108 dilate_8c
  // nope
  // poc 108 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_8 on 1
  // 0`imopen_8 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_8 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_22(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_8 [0 input 1] -> [0 poc 1] 110 dilate_8c
  // nope
  // poc 110 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_7 on 1
  // 0`imopen_7 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_7 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_23(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_7 [0 input 1] -> [0 poc 1] 112 dilate_8c
  // nope
  // poc 112 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_6 on 1
  // 0`imopen_6 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_6 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_24(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_6 [0 input 1] -> [0 poc 1] 114 dilate_8c
  // nope
  // poc 114 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_5 on 1
  // 0`imopen_5 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_5 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_25(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_5 [0 input 1] -> [0 poc 1] 116 dilate_8c
  // nope
  // poc 116 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_4 on 1
  // 0`imopen_4 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_4 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_26(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_4 [0 input 1] -> [0 poc 1] 118 dilate_8c
  // nope
  // poc 118 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_3 on 1
  // 0`imopen_3 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_3 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_27(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_3 [0 input 1] -> [0 poc 1] 120 dilate_8c
  // nope
  // poc 120 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_2 on 1
  // 0`imopen_2 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_2 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_28(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_2 [0 input 1] -> [0 poc 1] 122 dilate_8c
  // nope
  // poc 122 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`imopen_1 on 1
  // 0`imopen_1 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_1 [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_29(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_1 [0 input 1] -> [0 poc 1] 124 dilate_8c
  // nope
  // poc 124 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imopen [0 poc 1] -> [0 threshold 1] 176 threshold
  si.mux[0][3].op = SPOC_MUX_IN1;
  // threshold 176 threshold stage 0 side 1
  si.th[0][1].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = pi1;
  sp.th[0][1].boundmax = pi2;


  // output image 0`imopenth on 1
  // 0`imopenth [0 threshold 1] -> [0 output 1] 0 null
  // nope

  // fill in to the end...
  // 0`imopenth [0 output 1] -> [0 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_30(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imcloseth [0 input 0] -> [0 alu] 179 and
  // nope
  // 0`imopenth [0 input 1] -> [0 alu] 179 and
  // nope
  // alu 179 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`imand on 0
  // 0`imand [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imand [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_31(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imand [0 input 0] -> [0 poc 0] 185 erode_8c
  // nope
  // poc 185 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_7 on 0
  // 0`imfilt_7 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_7 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_32(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_7 [0 input 0] -> [0 poc 0] 187 erode_8c
  // nope
  // poc 187 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_6 on 0
  // 0`imfilt_6 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_6 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_33(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_6 [0 input 0] -> [0 poc 0] 189 erode_8c
  // nope
  // poc 189 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_5 on 0
  // 0`imfilt_5 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_5 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_34(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_5 [0 input 0] -> [0 poc 0] 191 erode_8c
  // nope
  // poc 191 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_4 on 0
  // 0`imfilt_4 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_4 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_35(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_4 [0 input 0] -> [0 poc 0] 195 dilate_8c
  // nope
  // poc 195 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_3 on 0
  // 0`imfilt_3 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_3 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_36(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_3 [0 input 0] -> [0 poc 0] 197 dilate_8c
  // nope
  // poc 197 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_2 on 0
  // 0`imfilt_2 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_2 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_37(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_2 [0 input 0] -> [0 poc 0] 199 dilate_8c
  // nope
  // poc 199 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt_1 on 0
  // 0`imfilt_1 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_1 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_38(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_1 [0 input 0] -> [0 poc 0] 201 dilate_8c
  // nope
  // poc 201 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imfilt on 0
  // 0`imfilt [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_39(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt [0 input 0] -> [0 poc 0] 213 erode_8c
  // nope
  // poc 213 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_7 on 0
  // 0`imout_7 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_7 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_40(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_7 [0 input 0] -> [0 poc 0] 215 erode_8c
  // nope
  // poc 215 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_6 on 0
  // 0`imout_6 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_6 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_41(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_6 [0 input 0] -> [0 poc 0] 217 erode_8c
  // nope
  // poc 217 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_5 on 0
  // 0`imout_5 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_5 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_42(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_5 [0 input 0] -> [0 poc 0] 219 erode_8c
  // nope
  // poc 219 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_4 on 0
  // 0`imout_4 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_4 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_43(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_4 [0 input 0] -> [0 poc 0] 223 dilate_8c
  // nope
  // poc 223 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_3 on 0
  // 0`imout_3 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_3 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_44(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_3 [0 input 0] -> [0 poc 0] 225 dilate_8c
  // nope
  // poc 225 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_2 on 0
  // 0`imout_2 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_2 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_45(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_2 [0 input 0] -> [0 poc 0] 227 dilate_8c
  // nope
  // poc 227 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout_1 on 0
  // 0`imout_1 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_1 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_46(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_1 [0 input 0] -> [0 poc 0] 229 dilate_8c
  // nope
  // poc 229 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`imout on 0
  // 0`imout [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_47(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout [0 input 0] -> [0 poc 0] 237 dilate_8c
  // nope
  // poc 237 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`out_3 on 0
  // 0`out_3 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_3 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_48(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out_3 [0 input 0] -> [0 poc 0] 238 dilate_8c
  // nope
  // poc 238 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`out_2 on 0
  // 0`out_2 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_2 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_0_49(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out_2 [0 input 0] -> [0 poc 0] 239 dilate_8c
  // nope
  // poc 239 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`out_1 on 0
  // 0`out_1 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_1 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate_copies
freia_status license_plate_copies_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 244 and
  // nope
  // 0`out_1 [0 input 1] -> [0 alu] 244 and
  // nope
  // alu 244 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2 = 0;                                              /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3 = 0;                                              /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   license_plate_copies_helper_0_0_0(imopen, imclose, in, kernel1x3);   /*0064*/
   license_plate_copies_helper_0_0_1(imclose, imopen, imclose, imopen, kernel1x3);     /*0066*/
   license_plate_copies_helper_0_0_2(imclose, imopen, imclose, imopen, kernel1x3);     /*0068*/
   license_plate_copies_helper_0_0_3(imclose, imopen, imclose, imopen, kernel1x3);     /*0070*/
   license_plate_copies_helper_0_0_4(imclose, imopen, imclose, imopen, kernel1x3);     /*0072*/
   license_plate_copies_helper_0_0_5(imclose, imopen, imclose, imopen, kernel1x3);     /*0074*/
   license_plate_copies_helper_0_0_6(imclose, imopen, imclose, imopen, kernel1x3);     /*0076*/
   license_plate_copies_helper_0_0_7(imclose, imopen, imclose, imopen, kernel1x3);     /*0078*/
   license_plate_copies_helper_0_0_8(imclose, imopen, imclose, imopen, kernel1x3);     /*0080*/
   license_plate_copies_helper_0_0_9(imclose, imopen, imclose, imopen, kernel1x3);     /*0082*/
   license_plate_copies_helper_0_0_10(imclose, imopen, imclose, imopen, kernel1x3);    /*0084*/
   license_plate_copies_helper_0_0_11(imclose, imopen, imclose, imopen, kernel1x3);    /*0086*/
   license_plate_copies_helper_0_0_12(imclose, imopen, imclose, imopen, kernel1x3);    /*0088*/
   license_plate_copies_helper_0_0_13(imclose, imopen, imclose, imopen, kernel1x3);    /*0090*/
   license_plate_copies_helper_0_0_14(imclose, imopen, imclose, imopen, kernel1x3);    /*0092*/

   license_plate_copies_helper_0_0_15(imcloseth, imopen, imclose, imopen, kernel1x3, 150, 255, 1);    /*0096*/
   license_plate_copies_helper_0_0_16(imopen, imcloseth, imopen, kernel1x3);           /*0098*/
   license_plate_copies_helper_0_0_17(imopen, imcloseth, imopen, kernel1x3);           /*0100*/
   license_plate_copies_helper_0_0_18(imopen, imcloseth, imopen, kernel1x3);           /*0102*/
   license_plate_copies_helper_0_0_19(imopen, imcloseth, imopen, kernel1x3);           /*0104*/
   license_plate_copies_helper_0_0_20(imopen, imcloseth, imopen, kernel1x3);           /*0106*/
   license_plate_copies_helper_0_0_21(imopen, imcloseth, imopen, kernel1x3);           /*0108*/
   license_plate_copies_helper_0_0_22(imopen, imcloseth, imopen, kernel1x3);           /*0110*/
   license_plate_copies_helper_0_0_23(imopen, imcloseth, imopen, kernel1x3);           /*0112*/
   license_plate_copies_helper_0_0_24(imopen, imcloseth, imopen, kernel1x3);           /*0114*/
   license_plate_copies_helper_0_0_25(imopen, imcloseth, imopen, kernel1x3);           /*0116*/
   license_plate_copies_helper_0_0_26(imopen, imcloseth, imopen, kernel1x3);           /*0118*/
   license_plate_copies_helper_0_0_27(imopen, imcloseth, imopen, kernel1x3);           /*0120*/
   license_plate_copies_helper_0_0_28(imopen, imcloseth, imopen, kernel1x3);           /*0122*/
   license_plate_copies_helper_0_0_29(imopenth, imcloseth, imopen, kernel1x3, 1, 50, 1);              /*0124*/

   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/
   
   
   
   _return0 = ret_1;                                                    /*0174*/
   
   
   license_plate_copies_helper_0_0_30(imand, imcloseth, imopenth);      /*0179*/

   ret_2 = 0;                                                           /*0183*/

   license_plate_copies_helper_0_0_31(imfilt, imand, kernel3x1);        /*0185*/
   license_plate_copies_helper_0_0_32(imfilt, imfilt, kernel3x1);       /*0187*/
   license_plate_copies_helper_0_0_33(imfilt, imfilt, kernel3x1);       /*0189*/
   license_plate_copies_helper_0_0_34(imfilt, imfilt, kernel3x1);       /*0191*/

   license_plate_copies_helper_0_0_35(imfilt, imfilt, kernel3x1);       /*0195*/
   license_plate_copies_helper_0_0_36(imfilt, imfilt, kernel3x1);       /*0197*/
   license_plate_copies_helper_0_0_37(imfilt, imfilt, kernel3x1);       /*0199*/
   license_plate_copies_helper_0_0_38(imfilt, imfilt, kernel3x1);       /*0201*/

   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/

   license_plate_copies_helper_0_0_39(imout, imfilt, kernel1x3);        /*0213*/
   license_plate_copies_helper_0_0_40(imout, imout, kernel1x3);         /*0215*/
   license_plate_copies_helper_0_0_41(imout, imout, kernel1x3);         /*0217*/
   license_plate_copies_helper_0_0_42(imout, imout, kernel1x3);         /*0219*/

   license_plate_copies_helper_0_0_43(imout, imout, kernel1x3);         /*0223*/
   license_plate_copies_helper_0_0_44(imout, imout, kernel1x3);         /*0225*/
   license_plate_copies_helper_0_0_45(imout, imout, kernel1x3);         /*0227*/
   license_plate_copies_helper_0_0_46(imout, imout, kernel1x3);         /*0229*/

   _return3 = ret_3;                                                    /*0235*/

   license_plate_copies_helper_0_0_47(out, imout, freia_morpho_kernel_8c);             /*0237*/
   license_plate_copies_helper_0_0_48(out, out, freia_morpho_kernel_8c);               /*0238*/
   license_plate_copies_helper_0_0_49(out, out, freia_morpho_kernel_8c);               /*0239*/

   license_plate_copies_helper_0_1_0(out, in, out);                     /*0244*/
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! cleaned up function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2 = 0;                                              /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3 = 0;                                              /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   license_plate_copies_helper_0_0_0(imopen, imclose, in, kernel1x3);   /*0064*/
   license_plate_copies_helper_0_0_1(imclose, imopen, imclose, imopen, kernel1x3);     /*0066*/
   license_plate_copies_helper_0_0_2(imclose, imopen, imclose, imopen, kernel1x3);     /*0068*/
   license_plate_copies_helper_0_0_3(imclose, imopen, imclose, imopen, kernel1x3);     /*0070*/
   license_plate_copies_helper_0_0_4(imclose, imopen, imclose, imopen, kernel1x3);     /*0072*/
   license_plate_copies_helper_0_0_5(imclose, imopen, imclose, imopen, kernel1x3);     /*0074*/
   license_plate_copies_helper_0_0_6(imclose, imopen, imclose, imopen, kernel1x3);     /*0076*/
   license_plate_copies_helper_0_0_7(imclose, imopen, imclose, imopen, kernel1x3);     /*0078*/
   license_plate_copies_helper_0_0_8(imclose, imopen, imclose, imopen, kernel1x3);     /*0080*/
   license_plate_copies_helper_0_0_9(imclose, imopen, imclose, imopen, kernel1x3);     /*0082*/
   license_plate_copies_helper_0_0_10(imclose, imopen, imclose, imopen, kernel1x3);    /*0084*/
   license_plate_copies_helper_0_0_11(imclose, imopen, imclose, imopen, kernel1x3);    /*0086*/
   license_plate_copies_helper_0_0_12(imclose, imopen, imclose, imopen, kernel1x3);    /*0088*/
   license_plate_copies_helper_0_0_13(imclose, imopen, imclose, imopen, kernel1x3);    /*0090*/
   license_plate_copies_helper_0_0_14(imclose, imopen, imclose, imopen, kernel1x3);    /*0092*/

   license_plate_copies_helper_0_0_15(imcloseth, imopen, imclose, imopen, kernel1x3, 150, 255, 1);    /*0096*/
   license_plate_copies_helper_0_0_16(imopen, imcloseth, imopen, kernel1x3);           /*0098*/
   license_plate_copies_helper_0_0_17(imopen, imcloseth, imopen, kernel1x3);           /*0100*/
   license_plate_copies_helper_0_0_18(imopen, imcloseth, imopen, kernel1x3);           /*0102*/
   license_plate_copies_helper_0_0_19(imopen, imcloseth, imopen, kernel1x3);           /*0104*/
   license_plate_copies_helper_0_0_20(imopen, imcloseth, imopen, kernel1x3);           /*0106*/
   license_plate_copies_helper_0_0_21(imopen, imcloseth, imopen, kernel1x3);           /*0108*/
   license_plate_copies_helper_0_0_22(imopen, imcloseth, imopen, kernel1x3);           /*0110*/
   license_plate_copies_helper_0_0_23(imopen, imcloseth, imopen, kernel1x3);           /*0112*/
   license_plate_copies_helper_0_0_24(imopen, imcloseth, imopen, kernel1x3);           /*0114*/
   license_plate_copies_helper_0_0_25(imopen, imcloseth, imopen, kernel1x3);           /*0116*/
   license_plate_copies_helper_0_0_26(imopen, imcloseth, imopen, kernel1x3);           /*0118*/
   license_plate_copies_helper_0_0_27(imopen, imcloseth, imopen, kernel1x3);           /*0120*/
   license_plate_copies_helper_0_0_28(imopen, imcloseth, imopen, kernel1x3);           /*0122*/
   license_plate_copies_helper_0_0_29(imopenth, imcloseth, imopen, kernel1x3, 1, 50, 1);              /*0124*/

   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/
   
   
   
   _return0 = ret_1;                                                    /*0174*/
   
   
   license_plate_copies_helper_0_0_30(imand, imcloseth, imopenth);      /*0179*/

   ret_2 = 0;                                                           /*0183*/

   license_plate_copies_helper_0_0_31(imfilt, imand, kernel3x1);        /*0185*/
   license_plate_copies_helper_0_0_32(imfilt, imfilt, kernel3x1);       /*0187*/
   license_plate_copies_helper_0_0_33(imfilt, imfilt, kernel3x1);       /*0189*/
   license_plate_copies_helper_0_0_34(imfilt, imfilt, kernel3x1);       /*0191*/

   license_plate_copies_helper_0_0_35(imfilt, imfilt, kernel3x1);       /*0195*/
   license_plate_copies_helper_0_0_36(imfilt, imfilt, kernel3x1);       /*0197*/
   license_plate_copies_helper_0_0_37(imfilt, imfilt, kernel3x1);       /*0199*/
   license_plate_copies_helper_0_0_38(imfilt, imfilt, kernel3x1);       /*0201*/

   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/

   license_plate_copies_helper_0_0_39(imout, imfilt, kernel1x3);        /*0213*/
   license_plate_copies_helper_0_0_40(imout, imout, kernel1x3);         /*0215*/
   license_plate_copies_helper_0_0_41(imout, imout, kernel1x3);         /*0217*/
   license_plate_copies_helper_0_0_42(imout, imout, kernel1x3);         /*0219*/

   license_plate_copies_helper_0_0_43(imout, imout, kernel1x3);         /*0223*/
   license_plate_copies_helper_0_0_44(imout, imout, kernel1x3);         /*0225*/
   license_plate_copies_helper_0_0_45(imout, imout, kernel1x3);         /*0227*/
   license_plate_copies_helper_0_0_46(imout, imout, kernel1x3);         /*0229*/

   _return3 = ret_3;                                                    /*0235*/

   license_plate_copies_helper_0_0_47(out, imout, freia_morpho_kernel_8c);             /*0237*/
   license_plate_copies_helper_0_0_48(out, out, freia_morpho_kernel_8c);               /*0238*/
   license_plate_copies_helper_0_0_49(out, out, freia_morpho_kernel_8c);               /*0239*/

   license_plate_copies_helper_0_1_0(out, in, out);                     /*0244*/
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}
#
# TERAPIX
#

! initial function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *immir;                                                 /*0014*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_data2d *imtmp_0;                                               /*0028*/
   freia_status ret_0;                                                  /*0029*/
   int i_0;                                                             /*0030*/
   freia_data2d *imtmp_1;                                               /*0031*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_data2d *imtmp_2;                                               /*0034*/
   freia_status ret_2;                                                  /*0035*/
   int i_2;                                                             /*0036*/
   freia_data2d *imtmp_3;                                               /*0037*/
   freia_status ret_3;                                                  /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0060*/

   ret_0 = freia_aipo_copy(imtmp_0, in);                                /*0062*/

   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0064*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0066*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0067*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0068*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0069*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0071*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0073*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0075*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0077*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0079*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0081*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0083*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0084*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0085*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0086*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0087*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0088*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0089*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0090*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0091*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0092*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0093*/
   i_0 = 15;                                                            /*0094*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0096*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0097*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0098*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0099*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0100*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0101*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0102*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0103*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0104*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0105*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0106*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0107*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0108*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0109*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0110*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0111*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0112*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0113*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0114*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0115*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0116*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0117*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0118*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0119*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0120*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0121*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0122*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0123*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0124*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0125*/
   i_0 = 15;                                                            /*0126*/

   freia_common_destruct_data(imtmp_0);                                 /*0128*/

   _return1 = ret_0;                                                    /*0130*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0132*/

   ret_1 = freia_aipo_copy(imtmp_1, in);                                /*0134*/

   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0136*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0137*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0138*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0139*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0140*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0141*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0142*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0143*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0144*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0145*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0146*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0147*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0148*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0149*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0150*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0151*/
   i_1 = 8;                                                             /*0152*/

   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0154*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0155*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0156*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0157*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0158*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0159*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0160*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0161*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0162*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0163*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0164*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0165*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0166*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0167*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0168*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0169*/
   i_1 = 8;                                                             /*0170*/

   freia_common_destruct_data(imtmp_1);                                 /*0172*/

   _return0 = ret_1;                                                    /*0174*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0176*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0177*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0179*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0181*/

   ret_2 = freia_aipo_copy(imtmp_2, imand);                             /*0183*/

   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0185*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0186*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0187*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0188*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0189*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0190*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0191*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0192*/
   i_2 = 4;                                                             /*0193*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0195*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0196*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0197*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0198*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0199*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0200*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0201*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0202*/
   i_2 = 4;                                                             /*0203*/

   freia_common_destruct_data(imtmp_2);                                 /*0205*/

   _return2 = ret_2;                                                    /*0207*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0209*/

   ret_3 = freia_aipo_copy(imtmp_3, imfilt);                            /*0211*/

   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0213*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0214*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0215*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0216*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0217*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0218*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0219*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0220*/
   i_3 = 4;                                                             /*0221*/

   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0223*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0224*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0225*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0226*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0227*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0228*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0229*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0230*/
   i_3 = 4;                                                             /*0231*/

   freia_common_destruct_data(imtmp_3);                                 /*0233*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(immir);                                   /*0249*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! graphs

// graph for dag "dag_0" of module "license_plate_copies" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "230 =" [shape=circle];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "229 D8" -> "230 =" [label="imout"];
  "228 =" [shape=circle];
  "228 =" -> "229 D8" [label="imtmp_3"];
  "227 D8" [shape=box];
  "227 D8" -> "228 =" [label="imout"];
  "226 =" [shape=circle];
  "226 =" -> "227 D8" [label="imtmp_3"];
  "225 D8" [shape=box];
  "225 D8" -> "226 =" [label="imout"];
  "224 =" [shape=circle];
  "224 =" -> "225 D8" [label="imtmp_3"];
  "223 D8" [shape=box];
  "223 D8" -> "224 =" [label="imout"];
  "220 =" [shape=circle];
  "220 =" -> "223 D8" [label="imtmp_3"];
  "219 E8" [shape=box];
  "219 E8" -> "220 =" [label="imout"];
  "218 =" [shape=circle];
  "218 =" -> "219 E8" [label="imtmp_3"];
  "217 E8" [shape=box];
  "217 E8" -> "218 =" [label="imout"];
  "216 =" [shape=circle];
  "216 =" -> "217 E8" [label="imtmp_3"];
  "215 E8" [shape=box];
  "215 E8" -> "216 =" [label="imout"];
  "214 =" [shape=circle];
  "214 =" -> "215 E8" [label="imtmp_3"];
  "213 E8" [shape=box];
  "213 E8" -> "214 =" [label="imout"];
  "211 =" [shape=circle];
  "211 =" -> "213 E8" [label="imtmp_3"];
  "202 =" [shape=circle];
  "201 D8" [shape=box];
  "201 D8" -> "211 =" [label="imfilt"];
  "201 D8" -> "202 =" [label="imfilt"];
  "200 =" [shape=circle];
  "200 =" -> "201 D8" [label="imtmp_2"];
  "199 D8" [shape=box];
  "199 D8" -> "200 =" [label="imfilt"];
  "198 =" [shape=circle];
  "198 =" -> "199 D8" [label="imtmp_2"];
  "197 D8" [shape=box];
  "197 D8" -> "198 =" [label="imfilt"];
  "196 =" [shape=circle];
  "196 =" -> "197 D8" [label="imtmp_2"];
  "195 D8" [shape=box];
  "195 D8" -> "196 =" [label="imfilt"];
  "192 =" [shape=circle];
  "192 =" -> "195 D8" [label="imtmp_2"];
  "191 E8" [shape=box];
  "191 E8" -> "192 =" [label="imfilt"];
  "190 =" [shape=circle];
  "190 =" -> "191 E8" [label="imtmp_2"];
  "189 E8" [shape=box];
  "189 E8" -> "190 =" [label="imfilt"];
  "188 =" [shape=circle];
  "188 =" -> "189 E8" [label="imtmp_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 =" [label="imfilt"];
  "186 =" [shape=circle];
  "186 =" -> "187 E8" [label="imtmp_2"];
  "185 E8" [shape=box];
  "185 E8" -> "186 =" [label="imfilt"];
  "183 =" [shape=circle];
  "183 =" -> "185 E8" [label="imtmp_2"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "183 =" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "169 =" [shape=circle];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "168 E8" -> "169 =" [label="imclose"];
  "167 =" [shape=circle];
  "167 =" -> "168 E8" [label="imtmp_1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 =" [label="imclose"];
  "165 =" [shape=circle];
  "165 =" -> "166 E8" [label="imtmp_1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 =" [label="imclose"];
  "163 =" [shape=circle];
  "163 =" -> "164 E8" [label="imtmp_1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 =" [label="imclose"];
  "161 =" [shape=circle];
  "161 =" -> "162 E8" [label="imtmp_1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 =" [label="imclose"];
  "159 =" [shape=circle];
  "159 =" -> "160 E8" [label="imtmp_1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 =" [label="imclose"];
  "157 =" [shape=circle];
  "157 =" -> "158 E8" [label="imtmp_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imclose"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imclose"];
  "151 =" [shape=circle];
  "151 =" -> "154 E8" [label="imtmp_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 =" [label="imclose"];
  "149 =" [shape=circle];
  "149 =" -> "150 D8" [label="imtmp_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 =" [label="imclose"];
  "147 =" [shape=circle];
  "147 =" -> "148 D8" [label="imtmp_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 =" [label="imclose"];
  "145 =" [shape=circle];
  "145 =" -> "146 D8" [label="imtmp_1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 =" [label="imclose"];
  "143 =" [shape=circle];
  "143 =" -> "144 D8" [label="imtmp_1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 =" [label="imclose"];
  "141 =" [shape=circle];
  "141 =" -> "142 D8" [label="imtmp_1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 =" [label="imclose"];
  "139 =" [shape=circle];
  "139 =" -> "140 D8" [label="imtmp_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 =" [label="imclose"];
  "137 =" [shape=circle];
  "137 =" -> "138 D8" [label="imtmp_1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "136 D8" [label="imtmp_1"];
  "125 =" [shape=circle];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "124 D8" -> "125 =" [label="imopen"];
  "123 =" [shape=circle];
  "123 =" -> "124 D8" [label="imtmp_0"];
  "122 D8" [shape=box];
  "122 D8" -> "123 =" [label="imopen"];
  "121 =" [shape=circle];
  "121 =" -> "122 D8" [label="imtmp_0"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imopen"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_0"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imopen"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imopen"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imopen"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_0"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imopen"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_0"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imopen"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_0"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imopen"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_0"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imopen"];
  "105 =" [shape=circle];
  "105 =" -> "106 D8" [label="imtmp_0"];
  "104 D8" [shape=box];
  "104 D8" -> "105 =" [label="imopen"];
  "103 =" [shape=circle];
  "103 =" -> "104 D8" [label="imtmp_0"];
  "102 D8" [shape=box];
  "102 D8" -> "103 =" [label="imopen"];
  "101 =" [shape=circle];
  "101 =" -> "102 D8" [label="imtmp_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 =" [label="imopen"];
  "99 =" [shape=circle];
  "99 =" -> "100 D8" [label="imtmp_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 =" [label="imopen"];
  "97 =" [shape=circle];
  "97 =" -> "98 D8" [label="imtmp_0"];
  "96 D8" [shape=box];
  "96 D8" -> "97 =" [label="imopen"];
  "93 =" [shape=circle];
  "93 =" -> "96 D8" [label="imtmp_0"];
  "92 E8" [shape=box];
  "92 E8" -> "93 =" [label="imopen"];
  "91 =" [shape=circle];
  "91 =" -> "92 E8" [label="imtmp_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 =" [label="imopen"];
  "89 =" [shape=circle];
  "89 =" -> "90 E8" [label="imtmp_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 =" [label="imopen"];
  "87 =" [shape=circle];
  "87 =" -> "88 E8" [label="imtmp_0"];
  "86 E8" [shape=box];
  "86 E8" -> "87 =" [label="imopen"];
  "85 =" [shape=circle];
  "85 =" -> "86 E8" [label="imtmp_0"];
  "84 E8" [shape=box];
  "84 E8" -> "85 =" [label="imopen"];
  "83 =" [shape=circle];
  "83 =" -> "84 E8" [label="imtmp_0"];
  "82 E8" [shape=box];
  "82 E8" -> "83 =" [label="imopen"];
  "81 =" [shape=circle];
  "81 =" -> "82 E8" [label="imtmp_0"];
  "80 E8" [shape=box];
  "80 E8" -> "81 =" [label="imopen"];
  "79 =" [shape=circle];
  "79 =" -> "80 E8" [label="imtmp_0"];
  "78 E8" [shape=box];
  "78 E8" -> "79 =" [label="imopen"];
  "77 =" [shape=circle];
  "77 =" -> "78 E8" [label="imtmp_0"];
  "76 E8" [shape=box];
  "76 E8" -> "77 =" [label="imopen"];
  "75 =" [shape=circle];
  "75 =" -> "76 E8" [label="imtmp_0"];
  "74 E8" [shape=box];
  "74 E8" -> "75 =" [label="imopen"];
  "73 =" [shape=circle];
  "73 =" -> "74 E8" [label="imtmp_0"];
  "72 E8" [shape=box];
  "72 E8" -> "73 =" [label="imopen"];
  "71 =" [shape=circle];
  "71 =" -> "72 E8" [label="imtmp_0"];
  "70 E8" [shape=box];
  "70 E8" -> "71 =" [label="imopen"];
  "69 =" [shape=circle];
  "69 =" -> "70 E8" [label="imtmp_0"];
  "68 E8" [shape=box];
  "68 E8" -> "69 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "68 E8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "62 =" [shape=circle];
  "62 =" -> "64 E8" [label="imtmp_0"];
  "in" -> "244 &";
  "in" -> "134 =";
  "in" -> "62 =";
}
// graph for dag "dag_cleaned_0" of module "license_plate_copies" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen"];
  "in" -> "64 E8";
  "in" -> "136 D8";
  "in" -> "244 &";
}
// graph for dag "license_plate_copies_helper_0_0" of module "license_plate_copies" in dot format
digraph "license_plate_copies_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out_1"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_2"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_3"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout_1"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout_2"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout_3"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout_4"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout_5"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout_6"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout_7"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt_1"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt_2"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt_3"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt_4"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt_5"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt_6"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt_7"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen_1"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen_2"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen_3"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen_4"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen_5"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen_6"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen_7"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen_8"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen_9"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen_10"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen_11"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen_12"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen_13"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen_14"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose_1"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen_15"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose_2"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen_16"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose_3"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen_17"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose_4"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen_18"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose_5"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen_19"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose_6"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen_20"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose_7"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen_21"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose_8"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen_22"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose_9"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen_23"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose_10"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen_24"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose_11"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen_25"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose_12"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen_26"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose_13"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen_27"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose_14"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen_28"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_29"];
  "in" -> "244 &";
  "in" -> "136 D8";
  "in" -> "64 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 69 ops and 66 copies, optimized to 69 ops and 0+0 copies

/* FREIA terapix helper function for module license_plate_copies
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = none
 * OVERLAP  = false
 * IMAGE H  = 720
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 69 image operations in dag
 * dag length is 53, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 993
 * - communication: 64
 */
freia_status license_plate_copies_helper_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8,
  const int32_t * pi9,
  const int32_t * pi10)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 46 parameters
  int16_t p_46[3];
  const int32_t x_46 = 3;
  const int32_t y_46 = 0;
  // operation 47 parameters
  int16_t p_47[3];
  const int32_t x_47 = 6;
  const int32_t y_47 = 0;
  // operation 49 parameters
  int16_t p_49[9];
  const int32_t x_49 = 9;
  const int32_t y_49 = 0;
  // operation 65 parameters
  int16_t p_65[9];
  const int32_t x_65 = 12;
  const int32_t y_65 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][69];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 1 double buffer imagelets
  // imagelet max size: 204
  int imagelet_size = 202;
  int imagelet_1 = 0;
  int imagelet_2 = 202;
  int imagelet_3 = 404;
  int imagelet_4 = 606;
  int imagelet_5 = 808;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(2) -> 4
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_4;
  mcu_macro[1][2].xmin2 = imagelet_4;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_2;
  mcu_macro[1][3].xmin2 = imagelet_2;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(4) -> 3
  mcu_macro[0][4].xmin1 = imagelet_4;
  mcu_macro[1][4].xmin1 = imagelet_4;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: D8(2) -> 4
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_4;
  mcu_macro[1][5].xmin2 = imagelet_4;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: E8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: D8(4) -> 3
  mcu_macro[0][7].xmin1 = imagelet_4;
  mcu_macro[1][7].xmin1 = imagelet_4;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: E8(2) -> 4
  mcu_macro[0][8].xmin1 = imagelet_2;
  mcu_macro[1][8].xmin1 = imagelet_2;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_4;
  mcu_macro[1][8].xmin2 = imagelet_4;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: D8(3) -> 2
  mcu_macro[0][9].xmin1 = imagelet_3;
  mcu_macro[1][9].xmin1 = imagelet_3;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_2;
  mcu_macro[1][9].xmin2 = imagelet_2;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_0;
  mcu_macro[1][9].xmin3 = x_0;
  mcu_macro[0][9].ymin3 = y_0;
  mcu_macro[1][9].ymin3 = y_0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: E8(4) -> 3
  mcu_macro[0][10].xmin1 = imagelet_4;
  mcu_macro[1][10].xmin1 = imagelet_4;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_3;
  mcu_macro[1][10].xmin2 = imagelet_3;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: D8(2) -> 4
  mcu_macro[0][11].xmin1 = imagelet_2;
  mcu_macro[1][11].xmin1 = imagelet_2;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_4;
  mcu_macro[1][11].xmin2 = imagelet_4;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_0;
  mcu_macro[1][11].xmin3 = x_0;
  mcu_macro[0][11].ymin3 = y_0;
  mcu_macro[1][11].ymin3 = y_0;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: E8(3) -> 2
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_2;
  mcu_macro[1][12].xmin2 = imagelet_2;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: D8(4) -> 3
  mcu_macro[0][13].xmin1 = imagelet_4;
  mcu_macro[1][13].xmin1 = imagelet_4;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_3;
  mcu_macro[1][13].xmin2 = imagelet_3;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_0;
  mcu_macro[1][13].xmin3 = x_0;
  mcu_macro[0][13].ymin3 = y_0;
  mcu_macro[1][13].ymin3 = y_0;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: E8(2) -> 4
  mcu_macro[0][14].xmin1 = imagelet_2;
  mcu_macro[1][14].xmin1 = imagelet_2;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_4;
  mcu_macro[1][14].xmin2 = imagelet_4;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: D8(3) -> 2
  mcu_macro[0][15].xmin1 = imagelet_3;
  mcu_macro[1][15].xmin1 = imagelet_3;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_2;
  mcu_macro[1][15].xmin2 = imagelet_2;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_0;
  mcu_macro[1][15].xmin3 = x_0;
  mcu_macro[0][15].ymin3 = y_0;
  mcu_macro[1][15].ymin3 = y_0;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: E8(4) -> 3
  mcu_macro[0][16].xmin1 = imagelet_4;
  mcu_macro[1][16].xmin1 = imagelet_4;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_3;
  mcu_macro[1][16].xmin2 = imagelet_3;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(2) -> 4
  mcu_macro[0][17].xmin1 = imagelet_2;
  mcu_macro[1][17].xmin1 = imagelet_2;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_4;
  mcu_macro[1][17].xmin2 = imagelet_4;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_0;
  mcu_macro[1][17].xmin3 = x_0;
  mcu_macro[0][17].ymin3 = y_0;
  mcu_macro[1][17].ymin3 = y_0;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(3) -> 2
  mcu_macro[0][18].xmin1 = imagelet_3;
  mcu_macro[1][18].xmin1 = imagelet_3;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_2;
  mcu_macro[1][18].xmin2 = imagelet_2;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(4) -> 3
  mcu_macro[0][19].xmin1 = imagelet_4;
  mcu_macro[1][19].xmin1 = imagelet_4;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_3;
  mcu_macro[1][19].xmin2 = imagelet_3;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_0;
  mcu_macro[1][19].xmin3 = x_0;
  mcu_macro[0][19].ymin3 = y_0;
  mcu_macro[1][19].ymin3 = y_0;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(2) -> 4
  mcu_macro[0][20].xmin1 = imagelet_2;
  mcu_macro[1][20].xmin1 = imagelet_2;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_4;
  mcu_macro[1][20].xmin2 = imagelet_4;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(3) -> 2
  mcu_macro[0][21].xmin1 = imagelet_3;
  mcu_macro[1][21].xmin1 = imagelet_3;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_2;
  mcu_macro[1][21].xmin2 = imagelet_2;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_0;
  mcu_macro[1][21].xmin3 = x_0;
  mcu_macro[0][21].ymin3 = y_0;
  mcu_macro[1][21].ymin3 = y_0;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 22: E8(4) -> 3
  mcu_macro[0][22].xmin1 = imagelet_4;
  mcu_macro[1][22].xmin1 = imagelet_4;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_3;
  mcu_macro[1][22].xmin2 = imagelet_3;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].xmin3 = x_0;
  mcu_macro[1][22].xmin3 = x_0;
  mcu_macro[0][22].ymin3 = y_0;
  mcu_macro[1][22].ymin3 = y_0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 23: E8(2) -> 4
  mcu_macro[0][23].xmin1 = imagelet_2;
  mcu_macro[1][23].xmin1 = imagelet_2;
  mcu_macro[0][23].ymin1 = 0;
  mcu_macro[1][23].ymin1 = 0;
  mcu_macro[0][23].xmin2 = imagelet_4;
  mcu_macro[1][23].xmin2 = imagelet_4;
  mcu_macro[0][23].ymin2 = 0;
  mcu_macro[1][23].ymin2 = 0;
  mcu_macro[0][23].xmin3 = x_0;
  mcu_macro[1][23].xmin3 = x_0;
  mcu_macro[0][23].ymin3 = y_0;
  mcu_macro[1][23].ymin3 = y_0;
  mcu_macro[0][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][23].iter2 = imagelet_size;
  mcu_macro[1][23].iter2 = imagelet_size;
  mcu_macro[0][23].iter3 = 0;
  mcu_macro[1][23].iter3 = 0;
  mcu_macro[0][23].iter4 = 0;
  mcu_macro[1][23].iter4 = 0;
  mcu_macro[0][23].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][23].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 24: E8(3) -> 2
  mcu_macro[0][24].xmin1 = imagelet_3;
  mcu_macro[1][24].xmin1 = imagelet_3;
  mcu_macro[0][24].ymin1 = 0;
  mcu_macro[1][24].ymin1 = 0;
  mcu_macro[0][24].xmin2 = imagelet_2;
  mcu_macro[1][24].xmin2 = imagelet_2;
  mcu_macro[0][24].ymin2 = 0;
  mcu_macro[1][24].ymin2 = 0;
  mcu_macro[0][24].xmin3 = x_0;
  mcu_macro[1][24].xmin3 = x_0;
  mcu_macro[0][24].ymin3 = y_0;
  mcu_macro[1][24].ymin3 = y_0;
  mcu_macro[0][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][24].iter2 = imagelet_size;
  mcu_macro[1][24].iter2 = imagelet_size;
  mcu_macro[0][24].iter3 = 0;
  mcu_macro[1][24].iter3 = 0;
  mcu_macro[0][24].iter4 = 0;
  mcu_macro[1][24].iter4 = 0;
  mcu_macro[0][24].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][24].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 25: E8(4) -> 3
  mcu_macro[0][25].xmin1 = imagelet_4;
  mcu_macro[1][25].xmin1 = imagelet_4;
  mcu_macro[0][25].ymin1 = 0;
  mcu_macro[1][25].ymin1 = 0;
  mcu_macro[0][25].xmin2 = imagelet_3;
  mcu_macro[1][25].xmin2 = imagelet_3;
  mcu_macro[0][25].ymin2 = 0;
  mcu_macro[1][25].ymin2 = 0;
  mcu_macro[0][25].xmin3 = x_0;
  mcu_macro[1][25].xmin3 = x_0;
  mcu_macro[0][25].ymin3 = y_0;
  mcu_macro[1][25].ymin3 = y_0;
  mcu_macro[0][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][25].iter2 = imagelet_size;
  mcu_macro[1][25].iter2 = imagelet_size;
  mcu_macro[0][25].iter3 = 0;
  mcu_macro[1][25].iter3 = 0;
  mcu_macro[0][25].iter4 = 0;
  mcu_macro[1][25].iter4 = 0;
  mcu_macro[0][25].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][25].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 26: E8(2) -> 4
  mcu_macro[0][26].xmin1 = imagelet_2;
  mcu_macro[1][26].xmin1 = imagelet_2;
  mcu_macro[0][26].ymin1 = 0;
  mcu_macro[1][26].ymin1 = 0;
  mcu_macro[0][26].xmin2 = imagelet_4;
  mcu_macro[1][26].xmin2 = imagelet_4;
  mcu_macro[0][26].ymin2 = 0;
  mcu_macro[1][26].ymin2 = 0;
  mcu_macro[0][26].xmin3 = x_0;
  mcu_macro[1][26].xmin3 = x_0;
  mcu_macro[0][26].ymin3 = y_0;
  mcu_macro[1][26].ymin3 = y_0;
  mcu_macro[0][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][26].iter2 = imagelet_size;
  mcu_macro[1][26].iter2 = imagelet_size;
  mcu_macro[0][26].iter3 = 0;
  mcu_macro[1][26].iter3 = 0;
  mcu_macro[0][26].iter4 = 0;
  mcu_macro[1][26].iter4 = 0;
  mcu_macro[0][26].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][26].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 27: E8(3) -> 2
  mcu_macro[0][27].xmin1 = imagelet_3;
  mcu_macro[1][27].xmin1 = imagelet_3;
  mcu_macro[0][27].ymin1 = 0;
  mcu_macro[1][27].ymin1 = 0;
  mcu_macro[0][27].xmin2 = imagelet_2;
  mcu_macro[1][27].xmin2 = imagelet_2;
  mcu_macro[0][27].ymin2 = 0;
  mcu_macro[1][27].ymin2 = 0;
  mcu_macro[0][27].xmin3 = x_0;
  mcu_macro[1][27].xmin3 = x_0;
  mcu_macro[0][27].ymin3 = y_0;
  mcu_macro[1][27].ymin3 = y_0;
  mcu_macro[0][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][27].iter2 = imagelet_size;
  mcu_macro[1][27].iter2 = imagelet_size;
  mcu_macro[0][27].iter3 = 0;
  mcu_macro[1][27].iter3 = 0;
  mcu_macro[0][27].iter4 = 0;
  mcu_macro[1][27].iter4 = 0;
  mcu_macro[0][27].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][27].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 28: E8(4) -> 3
  mcu_macro[0][28].xmin1 = imagelet_4;
  mcu_macro[1][28].xmin1 = imagelet_4;
  mcu_macro[0][28].ymin1 = 0;
  mcu_macro[1][28].ymin1 = 0;
  mcu_macro[0][28].xmin2 = imagelet_3;
  mcu_macro[1][28].xmin2 = imagelet_3;
  mcu_macro[0][28].ymin2 = 0;
  mcu_macro[1][28].ymin2 = 0;
  mcu_macro[0][28].xmin3 = x_0;
  mcu_macro[1][28].xmin3 = x_0;
  mcu_macro[0][28].ymin3 = y_0;
  mcu_macro[1][28].ymin3 = y_0;
  mcu_macro[0][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][28].iter2 = imagelet_size;
  mcu_macro[1][28].iter2 = imagelet_size;
  mcu_macro[0][28].iter3 = 0;
  mcu_macro[1][28].iter3 = 0;
  mcu_macro[0][28].iter4 = 0;
  mcu_macro[1][28].iter4 = 0;
  mcu_macro[0][28].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][28].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 29: E8(2) -> 4
  mcu_macro[0][29].xmin1 = imagelet_2;
  mcu_macro[1][29].xmin1 = imagelet_2;
  mcu_macro[0][29].ymin1 = 0;
  mcu_macro[1][29].ymin1 = 0;
  mcu_macro[0][29].xmin2 = imagelet_4;
  mcu_macro[1][29].xmin2 = imagelet_4;
  mcu_macro[0][29].ymin2 = 0;
  mcu_macro[1][29].ymin2 = 0;
  mcu_macro[0][29].xmin3 = x_0;
  mcu_macro[1][29].xmin3 = x_0;
  mcu_macro[0][29].ymin3 = y_0;
  mcu_macro[1][29].ymin3 = y_0;
  mcu_macro[0][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][29].iter2 = imagelet_size;
  mcu_macro[1][29].iter2 = imagelet_size;
  mcu_macro[0][29].iter3 = 0;
  mcu_macro[1][29].iter3 = 0;
  mcu_macro[0][29].iter4 = 0;
  mcu_macro[1][29].iter4 = 0;
  mcu_macro[0][29].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][29].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 30: D8(3) -> 2
  mcu_macro[0][30].xmin1 = imagelet_3;
  mcu_macro[1][30].xmin1 = imagelet_3;
  mcu_macro[0][30].ymin1 = 0;
  mcu_macro[1][30].ymin1 = 0;
  mcu_macro[0][30].xmin2 = imagelet_2;
  mcu_macro[1][30].xmin2 = imagelet_2;
  mcu_macro[0][30].ymin2 = 0;
  mcu_macro[1][30].ymin2 = 0;
  mcu_macro[0][30].xmin3 = x_0;
  mcu_macro[1][30].xmin3 = x_0;
  mcu_macro[0][30].ymin3 = y_0;
  mcu_macro[1][30].ymin3 = y_0;
  mcu_macro[0][30].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][30].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][30].iter2 = imagelet_size;
  mcu_macro[1][30].iter2 = imagelet_size;
  mcu_macro[0][30].iter3 = 0;
  mcu_macro[1][30].iter3 = 0;
  mcu_macro[0][30].iter4 = 0;
  mcu_macro[1][30].iter4 = 0;
  mcu_macro[0][30].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][30].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 31: E8(4) -> 3
  mcu_macro[0][31].xmin1 = imagelet_4;
  mcu_macro[1][31].xmin1 = imagelet_4;
  mcu_macro[0][31].ymin1 = 0;
  mcu_macro[1][31].ymin1 = 0;
  mcu_macro[0][31].xmin2 = imagelet_3;
  mcu_macro[1][31].xmin2 = imagelet_3;
  mcu_macro[0][31].ymin2 = 0;
  mcu_macro[1][31].ymin2 = 0;
  mcu_macro[0][31].xmin3 = x_0;
  mcu_macro[1][31].xmin3 = x_0;
  mcu_macro[0][31].ymin3 = y_0;
  mcu_macro[1][31].ymin3 = y_0;
  mcu_macro[0][31].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][31].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][31].iter2 = imagelet_size;
  mcu_macro[1][31].iter2 = imagelet_size;
  mcu_macro[0][31].iter3 = 0;
  mcu_macro[1][31].iter3 = 0;
  mcu_macro[0][31].iter4 = 0;
  mcu_macro[1][31].iter4 = 0;
  mcu_macro[0][31].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][31].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 32: D8(2) -> 4
  mcu_macro[0][32].xmin1 = imagelet_2;
  mcu_macro[1][32].xmin1 = imagelet_2;
  mcu_macro[0][32].ymin1 = 0;
  mcu_macro[1][32].ymin1 = 0;
  mcu_macro[0][32].xmin2 = imagelet_4;
  mcu_macro[1][32].xmin2 = imagelet_4;
  mcu_macro[0][32].ymin2 = 0;
  mcu_macro[1][32].ymin2 = 0;
  mcu_macro[0][32].xmin3 = x_0;
  mcu_macro[1][32].xmin3 = x_0;
  mcu_macro[0][32].ymin3 = y_0;
  mcu_macro[1][32].ymin3 = y_0;
  mcu_macro[0][32].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][32].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][32].iter2 = imagelet_size;
  mcu_macro[1][32].iter2 = imagelet_size;
  mcu_macro[0][32].iter3 = 0;
  mcu_macro[1][32].iter3 = 0;
  mcu_macro[0][32].iter4 = 0;
  mcu_macro[1][32].iter4 = 0;
  mcu_macro[0][32].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][32].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 33: D8(4) -> 2
  mcu_macro[0][33].xmin1 = imagelet_4;
  mcu_macro[1][33].xmin1 = imagelet_4;
  mcu_macro[0][33].ymin1 = 0;
  mcu_macro[1][33].ymin1 = 0;
  mcu_macro[0][33].xmin2 = imagelet_2;
  mcu_macro[1][33].xmin2 = imagelet_2;
  mcu_macro[0][33].ymin2 = 0;
  mcu_macro[1][33].ymin2 = 0;
  mcu_macro[0][33].xmin3 = x_0;
  mcu_macro[1][33].xmin3 = x_0;
  mcu_macro[0][33].ymin3 = y_0;
  mcu_macro[1][33].ymin3 = y_0;
  mcu_macro[0][33].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][33].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][33].iter2 = imagelet_size;
  mcu_macro[1][33].iter2 = imagelet_size;
  mcu_macro[0][33].iter3 = 0;
  mcu_macro[1][33].iter3 = 0;
  mcu_macro[0][33].iter4 = 0;
  mcu_macro[1][33].iter4 = 0;
  mcu_macro[0][33].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][33].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 34: D8(2) -> 4
  mcu_macro[0][34].xmin1 = imagelet_2;
  mcu_macro[1][34].xmin1 = imagelet_2;
  mcu_macro[0][34].ymin1 = 0;
  mcu_macro[1][34].ymin1 = 0;
  mcu_macro[0][34].xmin2 = imagelet_4;
  mcu_macro[1][34].xmin2 = imagelet_4;
  mcu_macro[0][34].ymin2 = 0;
  mcu_macro[1][34].ymin2 = 0;
  mcu_macro[0][34].xmin3 = x_0;
  mcu_macro[1][34].xmin3 = x_0;
  mcu_macro[0][34].ymin3 = y_0;
  mcu_macro[1][34].ymin3 = y_0;
  mcu_macro[0][34].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][34].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][34].iter2 = imagelet_size;
  mcu_macro[1][34].iter2 = imagelet_size;
  mcu_macro[0][34].iter3 = 0;
  mcu_macro[1][34].iter3 = 0;
  mcu_macro[0][34].iter4 = 0;
  mcu_macro[1][34].iter4 = 0;
  mcu_macro[0][34].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][34].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 35: D8(4) -> 2
  mcu_macro[0][35].xmin1 = imagelet_4;
  mcu_macro[1][35].xmin1 = imagelet_4;
  mcu_macro[0][35].ymin1 = 0;
  mcu_macro[1][35].ymin1 = 0;
  mcu_macro[0][35].xmin2 = imagelet_2;
  mcu_macro[1][35].xmin2 = imagelet_2;
  mcu_macro[0][35].ymin2 = 0;
  mcu_macro[1][35].ymin2 = 0;
  mcu_macro[0][35].xmin3 = x_0;
  mcu_macro[1][35].xmin3 = x_0;
  mcu_macro[0][35].ymin3 = y_0;
  mcu_macro[1][35].ymin3 = y_0;
  mcu_macro[0][35].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][35].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][35].iter2 = imagelet_size;
  mcu_macro[1][35].iter2 = imagelet_size;
  mcu_macro[0][35].iter3 = 0;
  mcu_macro[1][35].iter3 = 0;
  mcu_macro[0][35].iter4 = 0;
  mcu_macro[1][35].iter4 = 0;
  mcu_macro[0][35].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][35].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 36: D8(2) -> 4
  mcu_macro[0][36].xmin1 = imagelet_2;
  mcu_macro[1][36].xmin1 = imagelet_2;
  mcu_macro[0][36].ymin1 = 0;
  mcu_macro[1][36].ymin1 = 0;
  mcu_macro[0][36].xmin2 = imagelet_4;
  mcu_macro[1][36].xmin2 = imagelet_4;
  mcu_macro[0][36].ymin2 = 0;
  mcu_macro[1][36].ymin2 = 0;
  mcu_macro[0][36].xmin3 = x_0;
  mcu_macro[1][36].xmin3 = x_0;
  mcu_macro[0][36].ymin3 = y_0;
  mcu_macro[1][36].ymin3 = y_0;
  mcu_macro[0][36].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][36].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][36].iter2 = imagelet_size;
  mcu_macro[1][36].iter2 = imagelet_size;
  mcu_macro[0][36].iter3 = 0;
  mcu_macro[1][36].iter3 = 0;
  mcu_macro[0][36].iter4 = 0;
  mcu_macro[1][36].iter4 = 0;
  mcu_macro[0][36].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][36].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 37: D8(4) -> 2
  mcu_macro[0][37].xmin1 = imagelet_4;
  mcu_macro[1][37].xmin1 = imagelet_4;
  mcu_macro[0][37].ymin1 = 0;
  mcu_macro[1][37].ymin1 = 0;
  mcu_macro[0][37].xmin2 = imagelet_2;
  mcu_macro[1][37].xmin2 = imagelet_2;
  mcu_macro[0][37].ymin2 = 0;
  mcu_macro[1][37].ymin2 = 0;
  mcu_macro[0][37].xmin3 = x_0;
  mcu_macro[1][37].xmin3 = x_0;
  mcu_macro[0][37].ymin3 = y_0;
  mcu_macro[1][37].ymin3 = y_0;
  mcu_macro[0][37].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][37].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][37].iter2 = imagelet_size;
  mcu_macro[1][37].iter2 = imagelet_size;
  mcu_macro[0][37].iter3 = 0;
  mcu_macro[1][37].iter3 = 0;
  mcu_macro[0][37].iter4 = 0;
  mcu_macro[1][37].iter4 = 0;
  mcu_macro[0][37].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][37].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 38: D8(2) -> 4
  mcu_macro[0][38].xmin1 = imagelet_2;
  mcu_macro[1][38].xmin1 = imagelet_2;
  mcu_macro[0][38].ymin1 = 0;
  mcu_macro[1][38].ymin1 = 0;
  mcu_macro[0][38].xmin2 = imagelet_4;
  mcu_macro[1][38].xmin2 = imagelet_4;
  mcu_macro[0][38].ymin2 = 0;
  mcu_macro[1][38].ymin2 = 0;
  mcu_macro[0][38].xmin3 = x_0;
  mcu_macro[1][38].xmin3 = x_0;
  mcu_macro[0][38].ymin3 = y_0;
  mcu_macro[1][38].ymin3 = y_0;
  mcu_macro[0][38].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][38].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][38].iter2 = imagelet_size;
  mcu_macro[1][38].iter2 = imagelet_size;
  mcu_macro[0][38].iter3 = 0;
  mcu_macro[1][38].iter3 = 0;
  mcu_macro[0][38].iter4 = 0;
  mcu_macro[1][38].iter4 = 0;
  mcu_macro[0][38].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][38].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 39: D8(4) -> 2
  mcu_macro[0][39].xmin1 = imagelet_4;
  mcu_macro[1][39].xmin1 = imagelet_4;
  mcu_macro[0][39].ymin1 = 0;
  mcu_macro[1][39].ymin1 = 0;
  mcu_macro[0][39].xmin2 = imagelet_2;
  mcu_macro[1][39].xmin2 = imagelet_2;
  mcu_macro[0][39].ymin2 = 0;
  mcu_macro[1][39].ymin2 = 0;
  mcu_macro[0][39].xmin3 = x_0;
  mcu_macro[1][39].xmin3 = x_0;
  mcu_macro[0][39].ymin3 = y_0;
  mcu_macro[1][39].ymin3 = y_0;
  mcu_macro[0][39].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][39].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][39].iter2 = imagelet_size;
  mcu_macro[1][39].iter2 = imagelet_size;
  mcu_macro[0][39].iter3 = 0;
  mcu_macro[1][39].iter3 = 0;
  mcu_macro[0][39].iter4 = 0;
  mcu_macro[1][39].iter4 = 0;
  mcu_macro[0][39].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][39].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 40: D8(2) -> 4
  mcu_macro[0][40].xmin1 = imagelet_2;
  mcu_macro[1][40].xmin1 = imagelet_2;
  mcu_macro[0][40].ymin1 = 0;
  mcu_macro[1][40].ymin1 = 0;
  mcu_macro[0][40].xmin2 = imagelet_4;
  mcu_macro[1][40].xmin2 = imagelet_4;
  mcu_macro[0][40].ymin2 = 0;
  mcu_macro[1][40].ymin2 = 0;
  mcu_macro[0][40].xmin3 = x_0;
  mcu_macro[1][40].xmin3 = x_0;
  mcu_macro[0][40].ymin3 = y_0;
  mcu_macro[1][40].ymin3 = y_0;
  mcu_macro[0][40].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][40].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][40].iter2 = imagelet_size;
  mcu_macro[1][40].iter2 = imagelet_size;
  mcu_macro[0][40].iter3 = 0;
  mcu_macro[1][40].iter3 = 0;
  mcu_macro[0][40].iter4 = 0;
  mcu_macro[1][40].iter4 = 0;
  mcu_macro[0][40].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][40].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 41: D8(4) -> 2
  mcu_macro[0][41].xmin1 = imagelet_4;
  mcu_macro[1][41].xmin1 = imagelet_4;
  mcu_macro[0][41].ymin1 = 0;
  mcu_macro[1][41].ymin1 = 0;
  mcu_macro[0][41].xmin2 = imagelet_2;
  mcu_macro[1][41].xmin2 = imagelet_2;
  mcu_macro[0][41].ymin2 = 0;
  mcu_macro[1][41].ymin2 = 0;
  mcu_macro[0][41].xmin3 = x_0;
  mcu_macro[1][41].xmin3 = x_0;
  mcu_macro[0][41].ymin3 = y_0;
  mcu_macro[1][41].ymin3 = y_0;
  mcu_macro[0][41].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][41].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][41].iter2 = imagelet_size;
  mcu_macro[1][41].iter2 = imagelet_size;
  mcu_macro[0][41].iter3 = 0;
  mcu_macro[1][41].iter3 = 0;
  mcu_macro[0][41].iter4 = 0;
  mcu_macro[1][41].iter4 = 0;
  mcu_macro[0][41].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][41].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 42: D8(2) -> 4
  mcu_macro[0][42].xmin1 = imagelet_2;
  mcu_macro[1][42].xmin1 = imagelet_2;
  mcu_macro[0][42].ymin1 = 0;
  mcu_macro[1][42].ymin1 = 0;
  mcu_macro[0][42].xmin2 = imagelet_4;
  mcu_macro[1][42].xmin2 = imagelet_4;
  mcu_macro[0][42].ymin2 = 0;
  mcu_macro[1][42].ymin2 = 0;
  mcu_macro[0][42].xmin3 = x_0;
  mcu_macro[1][42].xmin3 = x_0;
  mcu_macro[0][42].ymin3 = y_0;
  mcu_macro[1][42].ymin3 = y_0;
  mcu_macro[0][42].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][42].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][42].iter2 = imagelet_size;
  mcu_macro[1][42].iter2 = imagelet_size;
  mcu_macro[0][42].iter3 = 0;
  mcu_macro[1][42].iter3 = 0;
  mcu_macro[0][42].iter4 = 0;
  mcu_macro[1][42].iter4 = 0;
  mcu_macro[0][42].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][42].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 43: D8(4) -> 2
  mcu_macro[0][43].xmin1 = imagelet_4;
  mcu_macro[1][43].xmin1 = imagelet_4;
  mcu_macro[0][43].ymin1 = 0;
  mcu_macro[1][43].ymin1 = 0;
  mcu_macro[0][43].xmin2 = imagelet_2;
  mcu_macro[1][43].xmin2 = imagelet_2;
  mcu_macro[0][43].ymin2 = 0;
  mcu_macro[1][43].ymin2 = 0;
  mcu_macro[0][43].xmin3 = x_0;
  mcu_macro[1][43].xmin3 = x_0;
  mcu_macro[0][43].ymin3 = y_0;
  mcu_macro[1][43].ymin3 = y_0;
  mcu_macro[0][43].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][43].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][43].iter2 = imagelet_size;
  mcu_macro[1][43].iter2 = imagelet_size;
  mcu_macro[0][43].iter3 = 0;
  mcu_macro[1][43].iter3 = 0;
  mcu_macro[0][43].iter4 = 0;
  mcu_macro[1][43].iter4 = 0;
  mcu_macro[0][43].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][43].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 44: D8(2) -> 4
  mcu_macro[0][44].xmin1 = imagelet_2;
  mcu_macro[1][44].xmin1 = imagelet_2;
  mcu_macro[0][44].ymin1 = 0;
  mcu_macro[1][44].ymin1 = 0;
  mcu_macro[0][44].xmin2 = imagelet_4;
  mcu_macro[1][44].xmin2 = imagelet_4;
  mcu_macro[0][44].ymin2 = 0;
  mcu_macro[1][44].ymin2 = 0;
  mcu_macro[0][44].xmin3 = x_0;
  mcu_macro[1][44].xmin3 = x_0;
  mcu_macro[0][44].ymin3 = y_0;
  mcu_macro[1][44].ymin3 = y_0;
  mcu_macro[0][44].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][44].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][44].iter2 = imagelet_size;
  mcu_macro[1][44].iter2 = imagelet_size;
  mcu_macro[0][44].iter3 = 0;
  mcu_macro[1][44].iter3 = 0;
  mcu_macro[0][44].iter4 = 0;
  mcu_macro[1][44].iter4 = 0;
  mcu_macro[0][44].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][44].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 45: D8(4) -> 2
  mcu_macro[0][45].xmin1 = imagelet_4;
  mcu_macro[1][45].xmin1 = imagelet_4;
  mcu_macro[0][45].ymin1 = 0;
  mcu_macro[1][45].ymin1 = 0;
  mcu_macro[0][45].xmin2 = imagelet_2;
  mcu_macro[1][45].xmin2 = imagelet_2;
  mcu_macro[0][45].ymin2 = 0;
  mcu_macro[1][45].ymin2 = 0;
  mcu_macro[0][45].xmin3 = x_0;
  mcu_macro[1][45].xmin3 = x_0;
  mcu_macro[0][45].ymin3 = y_0;
  mcu_macro[1][45].ymin3 = y_0;
  mcu_macro[0][45].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][45].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][45].iter2 = imagelet_size;
  mcu_macro[1][45].iter2 = imagelet_size;
  mcu_macro[0][45].iter3 = 0;
  mcu_macro[1][45].iter3 = 0;
  mcu_macro[0][45].iter4 = 0;
  mcu_macro[1][45].iter4 = 0;
  mcu_macro[0][45].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][45].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 46: thr(3) -> 4
  mcu_macro[0][46].xmin1 = imagelet_3;
  mcu_macro[1][46].xmin1 = imagelet_3;
  mcu_macro[0][46].ymin1 = 0;
  mcu_macro[1][46].ymin1 = 0;
  mcu_macro[0][46].xmin2 = imagelet_4;
  mcu_macro[1][46].xmin2 = imagelet_4;
  mcu_macro[0][46].ymin2 = 0;
  mcu_macro[1][46].ymin2 = 0;
  // copy of operation 46 parameters
  p_46[0] = pi3;
  p_46[1] = pi4;
  p_46[2] = pi5;
  gram.xoffset = x_46;
  gram.yoffset = y_46;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_46;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][46].xmin3 = x_46;
  mcu_macro[1][46].xmin3 = x_46;
  mcu_macro[0][46].ymin3 = y_46;
  mcu_macro[1][46].ymin3 = y_46;
  mcu_macro[0][46].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][46].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][46].iter2 = imagelet_size;
  mcu_macro[1][46].iter2 = imagelet_size;
  mcu_macro[0][46].iter3 = 0;
  mcu_macro[1][46].iter3 = 0;
  mcu_macro[0][46].iter4 = 0;
  mcu_macro[1][46].iter4 = 0;
  mcu_macro[0][46].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][46].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 47: thr(2) -> 3
  mcu_macro[0][47].xmin1 = imagelet_2;
  mcu_macro[1][47].xmin1 = imagelet_2;
  mcu_macro[0][47].ymin1 = 0;
  mcu_macro[1][47].ymin1 = 0;
  mcu_macro[0][47].xmin2 = imagelet_3;
  mcu_macro[1][47].xmin2 = imagelet_3;
  mcu_macro[0][47].ymin2 = 0;
  mcu_macro[1][47].ymin2 = 0;
  // copy of operation 47 parameters
  p_47[0] = pi6;
  p_47[1] = pi7;
  p_47[2] = pi8;
  gram.xoffset = x_47;
  gram.yoffset = y_47;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_47;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][47].xmin3 = x_47;
  mcu_macro[1][47].xmin3 = x_47;
  mcu_macro[0][47].ymin3 = y_47;
  mcu_macro[1][47].ymin3 = y_47;
  mcu_macro[0][47].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][47].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][47].iter2 = imagelet_size;
  mcu_macro[1][47].iter2 = imagelet_size;
  mcu_macro[0][47].iter3 = 0;
  mcu_macro[1][47].iter3 = 0;
  mcu_macro[0][47].iter4 = 0;
  mcu_macro[1][47].iter4 = 0;
  mcu_macro[0][47].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][47].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 48: &(3,4) -> 4
  mcu_macro[0][48].xmin1 = imagelet_3;
  mcu_macro[1][48].xmin1 = imagelet_3;
  mcu_macro[0][48].ymin1 = 0;
  mcu_macro[1][48].ymin1 = 0;
  mcu_macro[0][48].xmin2 = imagelet_4;
  mcu_macro[1][48].xmin2 = imagelet_4;
  mcu_macro[0][48].ymin2 = 0;
  mcu_macro[1][48].ymin2 = 0;
  mcu_macro[0][48].xmin3 = imagelet_4;
  mcu_macro[1][48].xmin3 = imagelet_4;
  mcu_macro[0][48].ymin3 = 0;
  mcu_macro[1][48].ymin3 = 0;
  mcu_macro[0][48].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][48].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][48].iter2 = imagelet_size;
  mcu_macro[1][48].iter2 = imagelet_size;
  mcu_macro[0][48].iter3 = 0;
  mcu_macro[1][48].iter3 = 0;
  mcu_macro[0][48].iter4 = 0;
  mcu_macro[1][48].iter4 = 0;
  mcu_macro[0][48].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][48].addrStart = TERAPIX_UCODE_AND3;
  // 49: E8(4) -> 3
  mcu_macro[0][49].xmin1 = imagelet_4;
  mcu_macro[1][49].xmin1 = imagelet_4;
  mcu_macro[0][49].ymin1 = 0;
  mcu_macro[1][49].ymin1 = 0;
  mcu_macro[0][49].xmin2 = imagelet_3;
  mcu_macro[1][49].xmin2 = imagelet_3;
  mcu_macro[0][49].ymin2 = 0;
  mcu_macro[1][49].ymin2 = 0;
  // copy of operation 49 parameters
  for(i=0; i<9; i++)
    p_49[i] = pi9[i];
  gram.xoffset = x_49;
  gram.yoffset = y_49;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_49;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][49].xmin3 = x_49;
  mcu_macro[1][49].xmin3 = x_49;
  mcu_macro[0][49].ymin3 = y_49;
  mcu_macro[1][49].ymin3 = y_49;
  mcu_macro[0][49].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][49].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][49].iter2 = imagelet_size;
  mcu_macro[1][49].iter2 = imagelet_size;
  mcu_macro[0][49].iter3 = 0;
  mcu_macro[1][49].iter3 = 0;
  mcu_macro[0][49].iter4 = 0;
  mcu_macro[1][49].iter4 = 0;
  mcu_macro[0][49].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][49].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 50: E8(3) -> 4
  mcu_macro[0][50].xmin1 = imagelet_3;
  mcu_macro[1][50].xmin1 = imagelet_3;
  mcu_macro[0][50].ymin1 = 0;
  mcu_macro[1][50].ymin1 = 0;
  mcu_macro[0][50].xmin2 = imagelet_4;
  mcu_macro[1][50].xmin2 = imagelet_4;
  mcu_macro[0][50].ymin2 = 0;
  mcu_macro[1][50].ymin2 = 0;
  mcu_macro[0][50].xmin3 = x_49;
  mcu_macro[1][50].xmin3 = x_49;
  mcu_macro[0][50].ymin3 = y_49;
  mcu_macro[1][50].ymin3 = y_49;
  mcu_macro[0][50].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][50].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][50].iter2 = imagelet_size;
  mcu_macro[1][50].iter2 = imagelet_size;
  mcu_macro[0][50].iter3 = 0;
  mcu_macro[1][50].iter3 = 0;
  mcu_macro[0][50].iter4 = 0;
  mcu_macro[1][50].iter4 = 0;
  mcu_macro[0][50].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][50].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 51: E8(4) -> 3
  mcu_macro[0][51].xmin1 = imagelet_4;
  mcu_macro[1][51].xmin1 = imagelet_4;
  mcu_macro[0][51].ymin1 = 0;
  mcu_macro[1][51].ymin1 = 0;
  mcu_macro[0][51].xmin2 = imagelet_3;
  mcu_macro[1][51].xmin2 = imagelet_3;
  mcu_macro[0][51].ymin2 = 0;
  mcu_macro[1][51].ymin2 = 0;
  mcu_macro[0][51].xmin3 = x_49;
  mcu_macro[1][51].xmin3 = x_49;
  mcu_macro[0][51].ymin3 = y_49;
  mcu_macro[1][51].ymin3 = y_49;
  mcu_macro[0][51].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][51].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][51].iter2 = imagelet_size;
  mcu_macro[1][51].iter2 = imagelet_size;
  mcu_macro[0][51].iter3 = 0;
  mcu_macro[1][51].iter3 = 0;
  mcu_macro[0][51].iter4 = 0;
  mcu_macro[1][51].iter4 = 0;
  mcu_macro[0][51].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][51].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 52: E8(3) -> 4
  mcu_macro[0][52].xmin1 = imagelet_3;
  mcu_macro[1][52].xmin1 = imagelet_3;
  mcu_macro[0][52].ymin1 = 0;
  mcu_macro[1][52].ymin1 = 0;
  mcu_macro[0][52].xmin2 = imagelet_4;
  mcu_macro[1][52].xmin2 = imagelet_4;
  mcu_macro[0][52].ymin2 = 0;
  mcu_macro[1][52].ymin2 = 0;
  mcu_macro[0][52].xmin3 = x_49;
  mcu_macro[1][52].xmin3 = x_49;
  mcu_macro[0][52].ymin3 = y_49;
  mcu_macro[1][52].ymin3 = y_49;
  mcu_macro[0][52].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][52].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][52].iter2 = imagelet_size;
  mcu_macro[1][52].iter2 = imagelet_size;
  mcu_macro[0][52].iter3 = 0;
  mcu_macro[1][52].iter3 = 0;
  mcu_macro[0][52].iter4 = 0;
  mcu_macro[1][52].iter4 = 0;
  mcu_macro[0][52].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][52].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 53: D8(4) -> 3
  mcu_macro[0][53].xmin1 = imagelet_4;
  mcu_macro[1][53].xmin1 = imagelet_4;
  mcu_macro[0][53].ymin1 = 0;
  mcu_macro[1][53].ymin1 = 0;
  mcu_macro[0][53].xmin2 = imagelet_3;
  mcu_macro[1][53].xmin2 = imagelet_3;
  mcu_macro[0][53].ymin2 = 0;
  mcu_macro[1][53].ymin2 = 0;
  mcu_macro[0][53].xmin3 = x_49;
  mcu_macro[1][53].xmin3 = x_49;
  mcu_macro[0][53].ymin3 = y_49;
  mcu_macro[1][53].ymin3 = y_49;
  mcu_macro[0][53].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][53].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][53].iter2 = imagelet_size;
  mcu_macro[1][53].iter2 = imagelet_size;
  mcu_macro[0][53].iter3 = 0;
  mcu_macro[1][53].iter3 = 0;
  mcu_macro[0][53].iter4 = 0;
  mcu_macro[1][53].iter4 = 0;
  mcu_macro[0][53].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][53].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 54: D8(3) -> 4
  mcu_macro[0][54].xmin1 = imagelet_3;
  mcu_macro[1][54].xmin1 = imagelet_3;
  mcu_macro[0][54].ymin1 = 0;
  mcu_macro[1][54].ymin1 = 0;
  mcu_macro[0][54].xmin2 = imagelet_4;
  mcu_macro[1][54].xmin2 = imagelet_4;
  mcu_macro[0][54].ymin2 = 0;
  mcu_macro[1][54].ymin2 = 0;
  mcu_macro[0][54].xmin3 = x_49;
  mcu_macro[1][54].xmin3 = x_49;
  mcu_macro[0][54].ymin3 = y_49;
  mcu_macro[1][54].ymin3 = y_49;
  mcu_macro[0][54].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][54].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][54].iter2 = imagelet_size;
  mcu_macro[1][54].iter2 = imagelet_size;
  mcu_macro[0][54].iter3 = 0;
  mcu_macro[1][54].iter3 = 0;
  mcu_macro[0][54].iter4 = 0;
  mcu_macro[1][54].iter4 = 0;
  mcu_macro[0][54].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][54].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 55: D8(4) -> 3
  mcu_macro[0][55].xmin1 = imagelet_4;
  mcu_macro[1][55].xmin1 = imagelet_4;
  mcu_macro[0][55].ymin1 = 0;
  mcu_macro[1][55].ymin1 = 0;
  mcu_macro[0][55].xmin2 = imagelet_3;
  mcu_macro[1][55].xmin2 = imagelet_3;
  mcu_macro[0][55].ymin2 = 0;
  mcu_macro[1][55].ymin2 = 0;
  mcu_macro[0][55].xmin3 = x_49;
  mcu_macro[1][55].xmin3 = x_49;
  mcu_macro[0][55].ymin3 = y_49;
  mcu_macro[1][55].ymin3 = y_49;
  mcu_macro[0][55].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][55].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][55].iter2 = imagelet_size;
  mcu_macro[1][55].iter2 = imagelet_size;
  mcu_macro[0][55].iter3 = 0;
  mcu_macro[1][55].iter3 = 0;
  mcu_macro[0][55].iter4 = 0;
  mcu_macro[1][55].iter4 = 0;
  mcu_macro[0][55].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][55].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 56: D8(3) -> 4
  mcu_macro[0][56].xmin1 = imagelet_3;
  mcu_macro[1][56].xmin1 = imagelet_3;
  mcu_macro[0][56].ymin1 = 0;
  mcu_macro[1][56].ymin1 = 0;
  mcu_macro[0][56].xmin2 = imagelet_4;
  mcu_macro[1][56].xmin2 = imagelet_4;
  mcu_macro[0][56].ymin2 = 0;
  mcu_macro[1][56].ymin2 = 0;
  mcu_macro[0][56].xmin3 = x_49;
  mcu_macro[1][56].xmin3 = x_49;
  mcu_macro[0][56].ymin3 = y_49;
  mcu_macro[1][56].ymin3 = y_49;
  mcu_macro[0][56].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][56].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][56].iter2 = imagelet_size;
  mcu_macro[1][56].iter2 = imagelet_size;
  mcu_macro[0][56].iter3 = 0;
  mcu_macro[1][56].iter3 = 0;
  mcu_macro[0][56].iter4 = 0;
  mcu_macro[1][56].iter4 = 0;
  mcu_macro[0][56].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][56].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 57: E8(4) -> 3
  mcu_macro[0][57].xmin1 = imagelet_4;
  mcu_macro[1][57].xmin1 = imagelet_4;
  mcu_macro[0][57].ymin1 = 0;
  mcu_macro[1][57].ymin1 = 0;
  mcu_macro[0][57].xmin2 = imagelet_3;
  mcu_macro[1][57].xmin2 = imagelet_3;
  mcu_macro[0][57].ymin2 = 0;
  mcu_macro[1][57].ymin2 = 0;
  mcu_macro[0][57].xmin3 = x_0;
  mcu_macro[1][57].xmin3 = x_0;
  mcu_macro[0][57].ymin3 = y_0;
  mcu_macro[1][57].ymin3 = y_0;
  mcu_macro[0][57].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][57].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][57].iter2 = imagelet_size;
  mcu_macro[1][57].iter2 = imagelet_size;
  mcu_macro[0][57].iter3 = 0;
  mcu_macro[1][57].iter3 = 0;
  mcu_macro[0][57].iter4 = 0;
  mcu_macro[1][57].iter4 = 0;
  mcu_macro[0][57].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][57].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 58: E8(3) -> 4
  mcu_macro[0][58].xmin1 = imagelet_3;
  mcu_macro[1][58].xmin1 = imagelet_3;
  mcu_macro[0][58].ymin1 = 0;
  mcu_macro[1][58].ymin1 = 0;
  mcu_macro[0][58].xmin2 = imagelet_4;
  mcu_macro[1][58].xmin2 = imagelet_4;
  mcu_macro[0][58].ymin2 = 0;
  mcu_macro[1][58].ymin2 = 0;
  mcu_macro[0][58].xmin3 = x_0;
  mcu_macro[1][58].xmin3 = x_0;
  mcu_macro[0][58].ymin3 = y_0;
  mcu_macro[1][58].ymin3 = y_0;
  mcu_macro[0][58].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][58].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][58].iter2 = imagelet_size;
  mcu_macro[1][58].iter2 = imagelet_size;
  mcu_macro[0][58].iter3 = 0;
  mcu_macro[1][58].iter3 = 0;
  mcu_macro[0][58].iter4 = 0;
  mcu_macro[1][58].iter4 = 0;
  mcu_macro[0][58].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][58].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 59: E8(4) -> 3
  mcu_macro[0][59].xmin1 = imagelet_4;
  mcu_macro[1][59].xmin1 = imagelet_4;
  mcu_macro[0][59].ymin1 = 0;
  mcu_macro[1][59].ymin1 = 0;
  mcu_macro[0][59].xmin2 = imagelet_3;
  mcu_macro[1][59].xmin2 = imagelet_3;
  mcu_macro[0][59].ymin2 = 0;
  mcu_macro[1][59].ymin2 = 0;
  mcu_macro[0][59].xmin3 = x_0;
  mcu_macro[1][59].xmin3 = x_0;
  mcu_macro[0][59].ymin3 = y_0;
  mcu_macro[1][59].ymin3 = y_0;
  mcu_macro[0][59].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][59].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][59].iter2 = imagelet_size;
  mcu_macro[1][59].iter2 = imagelet_size;
  mcu_macro[0][59].iter3 = 0;
  mcu_macro[1][59].iter3 = 0;
  mcu_macro[0][59].iter4 = 0;
  mcu_macro[1][59].iter4 = 0;
  mcu_macro[0][59].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][59].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 60: E8(3) -> 4
  mcu_macro[0][60].xmin1 = imagelet_3;
  mcu_macro[1][60].xmin1 = imagelet_3;
  mcu_macro[0][60].ymin1 = 0;
  mcu_macro[1][60].ymin1 = 0;
  mcu_macro[0][60].xmin2 = imagelet_4;
  mcu_macro[1][60].xmin2 = imagelet_4;
  mcu_macro[0][60].ymin2 = 0;
  mcu_macro[1][60].ymin2 = 0;
  mcu_macro[0][60].xmin3 = x_0;
  mcu_macro[1][60].xmin3 = x_0;
  mcu_macro[0][60].ymin3 = y_0;
  mcu_macro[1][60].ymin3 = y_0;
  mcu_macro[0][60].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][60].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][60].iter2 = imagelet_size;
  mcu_macro[1][60].iter2 = imagelet_size;
  mcu_macro[0][60].iter3 = 0;
  mcu_macro[1][60].iter3 = 0;
  mcu_macro[0][60].iter4 = 0;
  mcu_macro[1][60].iter4 = 0;
  mcu_macro[0][60].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][60].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 61: D8(4) -> 3
  mcu_macro[0][61].xmin1 = imagelet_4;
  mcu_macro[1][61].xmin1 = imagelet_4;
  mcu_macro[0][61].ymin1 = 0;
  mcu_macro[1][61].ymin1 = 0;
  mcu_macro[0][61].xmin2 = imagelet_3;
  mcu_macro[1][61].xmin2 = imagelet_3;
  mcu_macro[0][61].ymin2 = 0;
  mcu_macro[1][61].ymin2 = 0;
  mcu_macro[0][61].xmin3 = x_0;
  mcu_macro[1][61].xmin3 = x_0;
  mcu_macro[0][61].ymin3 = y_0;
  mcu_macro[1][61].ymin3 = y_0;
  mcu_macro[0][61].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][61].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][61].iter2 = imagelet_size;
  mcu_macro[1][61].iter2 = imagelet_size;
  mcu_macro[0][61].iter3 = 0;
  mcu_macro[1][61].iter3 = 0;
  mcu_macro[0][61].iter4 = 0;
  mcu_macro[1][61].iter4 = 0;
  mcu_macro[0][61].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][61].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 62: D8(3) -> 4
  mcu_macro[0][62].xmin1 = imagelet_3;
  mcu_macro[1][62].xmin1 = imagelet_3;
  mcu_macro[0][62].ymin1 = 0;
  mcu_macro[1][62].ymin1 = 0;
  mcu_macro[0][62].xmin2 = imagelet_4;
  mcu_macro[1][62].xmin2 = imagelet_4;
  mcu_macro[0][62].ymin2 = 0;
  mcu_macro[1][62].ymin2 = 0;
  mcu_macro[0][62].xmin3 = x_0;
  mcu_macro[1][62].xmin3 = x_0;
  mcu_macro[0][62].ymin3 = y_0;
  mcu_macro[1][62].ymin3 = y_0;
  mcu_macro[0][62].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][62].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][62].iter2 = imagelet_size;
  mcu_macro[1][62].iter2 = imagelet_size;
  mcu_macro[0][62].iter3 = 0;
  mcu_macro[1][62].iter3 = 0;
  mcu_macro[0][62].iter4 = 0;
  mcu_macro[1][62].iter4 = 0;
  mcu_macro[0][62].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][62].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 63: D8(4) -> 3
  mcu_macro[0][63].xmin1 = imagelet_4;
  mcu_macro[1][63].xmin1 = imagelet_4;
  mcu_macro[0][63].ymin1 = 0;
  mcu_macro[1][63].ymin1 = 0;
  mcu_macro[0][63].xmin2 = imagelet_3;
  mcu_macro[1][63].xmin2 = imagelet_3;
  mcu_macro[0][63].ymin2 = 0;
  mcu_macro[1][63].ymin2 = 0;
  mcu_macro[0][63].xmin3 = x_0;
  mcu_macro[1][63].xmin3 = x_0;
  mcu_macro[0][63].ymin3 = y_0;
  mcu_macro[1][63].ymin3 = y_0;
  mcu_macro[0][63].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][63].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][63].iter2 = imagelet_size;
  mcu_macro[1][63].iter2 = imagelet_size;
  mcu_macro[0][63].iter3 = 0;
  mcu_macro[1][63].iter3 = 0;
  mcu_macro[0][63].iter4 = 0;
  mcu_macro[1][63].iter4 = 0;
  mcu_macro[0][63].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][63].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 64: D8(3) -> 4
  mcu_macro[0][64].xmin1 = imagelet_3;
  mcu_macro[1][64].xmin1 = imagelet_3;
  mcu_macro[0][64].ymin1 = 0;
  mcu_macro[1][64].ymin1 = 0;
  mcu_macro[0][64].xmin2 = imagelet_4;
  mcu_macro[1][64].xmin2 = imagelet_4;
  mcu_macro[0][64].ymin2 = 0;
  mcu_macro[1][64].ymin2 = 0;
  mcu_macro[0][64].xmin3 = x_0;
  mcu_macro[1][64].xmin3 = x_0;
  mcu_macro[0][64].ymin3 = y_0;
  mcu_macro[1][64].ymin3 = y_0;
  mcu_macro[0][64].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][64].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][64].iter2 = imagelet_size;
  mcu_macro[1][64].iter2 = imagelet_size;
  mcu_macro[0][64].iter3 = 0;
  mcu_macro[1][64].iter3 = 0;
  mcu_macro[0][64].iter4 = 0;
  mcu_macro[1][64].iter4 = 0;
  mcu_macro[0][64].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][64].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 65: D8(4) -> 3
  mcu_macro[0][65].xmin1 = imagelet_4;
  mcu_macro[1][65].xmin1 = imagelet_4;
  mcu_macro[0][65].ymin1 = 0;
  mcu_macro[1][65].ymin1 = 0;
  mcu_macro[0][65].xmin2 = imagelet_3;
  mcu_macro[1][65].xmin2 = imagelet_3;
  mcu_macro[0][65].ymin2 = 0;
  mcu_macro[1][65].ymin2 = 0;
  // copy of operation 65 parameters
  for(i=0; i<9; i++)
    p_65[i] = pi10[i];
  gram.xoffset = x_65;
  gram.yoffset = y_65;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_65;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][65].xmin3 = x_65;
  mcu_macro[1][65].xmin3 = x_65;
  mcu_macro[0][65].ymin3 = y_65;
  mcu_macro[1][65].ymin3 = y_65;
  mcu_macro[0][65].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][65].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][65].iter2 = imagelet_size;
  mcu_macro[1][65].iter2 = imagelet_size;
  mcu_macro[0][65].iter3 = 0;
  mcu_macro[1][65].iter3 = 0;
  mcu_macro[0][65].iter4 = 0;
  mcu_macro[1][65].iter4 = 0;
  mcu_macro[0][65].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][65].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 66: D8(3) -> 4
  mcu_macro[0][66].xmin1 = imagelet_3;
  mcu_macro[1][66].xmin1 = imagelet_3;
  mcu_macro[0][66].ymin1 = 0;
  mcu_macro[1][66].ymin1 = 0;
  mcu_macro[0][66].xmin2 = imagelet_4;
  mcu_macro[1][66].xmin2 = imagelet_4;
  mcu_macro[0][66].ymin2 = 0;
  mcu_macro[1][66].ymin2 = 0;
  mcu_macro[0][66].xmin3 = x_65;
  mcu_macro[1][66].xmin3 = x_65;
  mcu_macro[0][66].ymin3 = y_65;
  mcu_macro[1][66].ymin3 = y_65;
  mcu_macro[0][66].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][66].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][66].iter2 = imagelet_size;
  mcu_macro[1][66].iter2 = imagelet_size;
  mcu_macro[0][66].iter3 = 0;
  mcu_macro[1][66].iter3 = 0;
  mcu_macro[0][66].iter4 = 0;
  mcu_macro[1][66].iter4 = 0;
  mcu_macro[0][66].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][66].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 67: D8(4) -> 3
  mcu_macro[0][67].xmin1 = imagelet_4;
  mcu_macro[1][67].xmin1 = imagelet_4;
  mcu_macro[0][67].ymin1 = 0;
  mcu_macro[1][67].ymin1 = 0;
  mcu_macro[0][67].xmin2 = imagelet_3;
  mcu_macro[1][67].xmin2 = imagelet_3;
  mcu_macro[0][67].ymin2 = 0;
  mcu_macro[1][67].ymin2 = 0;
  mcu_macro[0][67].xmin3 = x_65;
  mcu_macro[1][67].xmin3 = x_65;
  mcu_macro[0][67].ymin3 = y_65;
  mcu_macro[1][67].ymin3 = y_65;
  mcu_macro[0][67].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][67].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][67].iter2 = imagelet_size;
  mcu_macro[1][67].iter2 = imagelet_size;
  mcu_macro[0][67].iter3 = 0;
  mcu_macro[1][67].iter3 = 0;
  mcu_macro[0][67].iter4 = 0;
  mcu_macro[1][67].iter4 = 0;
  mcu_macro[0][67].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][67].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 68: &(3,1) -> 1
  mcu_macro[0][68].xmin1 = imagelet_3;
  mcu_macro[1][68].xmin1 = imagelet_3;
  mcu_macro[0][68].ymin1 = 0;
  mcu_macro[1][68].ymin1 = 0;
  mcu_macro[0][68].xmin2 = imagelet_io_1_0;
  mcu_macro[1][68].xmin2 = imagelet_io_1_1;
  mcu_macro[0][68].ymin2 = 0;
  mcu_macro[1][68].ymin2 = 0;
  mcu_macro[0][68].xmin3 = imagelet_io_1_0;
  mcu_macro[1][68].xmin3 = imagelet_io_1_1;
  mcu_macro[0][68].ymin3 = 0;
  mcu_macro[1][68].ymin3 = 0;
  mcu_macro[0][68].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][68].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][68].iter2 = imagelet_size;
  mcu_macro[1][68].iter2 = imagelet_size;
  mcu_macro[0][68].iter3 = 0;
  mcu_macro[1][68].iter3 = 0;
  mcu_macro[0][68].iter4 = 0;
  mcu_macro[1][68].iter4 = 0;
  mcu_macro[0][68].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][68].addrStart = TERAPIX_UCODE_AND3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 41;
  mcu_instr.borderRight  = 41;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 69;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2;                                                  /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3;                                                  /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   license_plate_copies_helper_0_0(out, in, kernel1x3, 150, 255, 1, 1, 50, 1, kernel3x1, freia_morpho_kernel_8c);    /*0064*/
   
   
   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/
   
   
   
   _return0 = ret_1;                                                    /*0174*/
   
   
   
   ret_2 = 0;                                                           /*0183*/
   
   
   
   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/
   
   
   
   _return3 = ret_3;                                                    /*0235*/
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! cleaned up function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2;                                                  /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3;                                                  /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   license_plate_copies_helper_0_0(out, in, kernel1x3, 150, 255, 1, 1, 50, 1, kernel3x1, freia_morpho_kernel_8c);    /*0064*/
   
   
   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/
   
   
   
   _return0 = ret_1;                                                    /*0174*/
   
   
   
   ret_2 = 0;                                                           /*0183*/
   
   
   
   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/
   
   
   
   _return3 = ret_3;                                                    /*0235*/
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}
#
# OPENCL
#

! initial function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *immir;                                                 /*0014*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imopenth;                                              /*0017*/
   freia_data2d *imcloseth;                                             /*0018*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_data2d *imtmp_0;                                               /*0028*/
   freia_status ret_0;                                                  /*0029*/
   int i_0;                                                             /*0030*/
   freia_data2d *imtmp_1;                                               /*0031*/
   freia_status ret_1;                                                  /*0032*/
   int i_1;                                                             /*0033*/
   freia_data2d *imtmp_2;                                               /*0034*/
   freia_status ret_2;                                                  /*0035*/
   int i_2;                                                             /*0036*/
   freia_data2d *imtmp_3;                                               /*0037*/
   freia_status ret_3;                                                  /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0050*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0051*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0060*/

   ret_0 = freia_aipo_copy(imtmp_0, in);                                /*0062*/

   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0064*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0066*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0067*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0068*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0069*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0071*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0073*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0075*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0077*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0079*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0081*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0083*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0084*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0085*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0086*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0087*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0088*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0089*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0090*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0091*/
   ret_0 |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);            /*0092*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0093*/
   i_0 = 15;                                                            /*0094*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0096*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0097*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0098*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0099*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0100*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0101*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0102*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0103*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0104*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0105*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0106*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0107*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0108*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0109*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0110*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0111*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0112*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0113*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0114*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0115*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0116*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0117*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0118*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0119*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0120*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0121*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0122*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0123*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);           /*0124*/
   ret_0 |= freia_aipo_copy(imtmp_0, imopen);                           /*0125*/
   i_0 = 15;                                                            /*0126*/

   freia_common_destruct_data(imtmp_0);                                 /*0128*/

   _return1 = ret_0;                                                    /*0130*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0132*/

   ret_1 = freia_aipo_copy(imtmp_1, in);                                /*0134*/

   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0136*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0137*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0138*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0139*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0140*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0141*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0142*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0143*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0144*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0145*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0146*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0147*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0148*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0149*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);          /*0150*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0151*/
   i_1 = 8;                                                             /*0152*/

   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0154*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0155*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0156*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0157*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0158*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0159*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0160*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0161*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0162*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0163*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0164*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0165*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0166*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0167*/
   ret_1 |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);           /*0168*/
   ret_1 |= freia_aipo_copy(imtmp_1, imclose);                          /*0169*/
   i_1 = 8;                                                             /*0170*/

   freia_common_destruct_data(imtmp_1);                                 /*0172*/

   _return0 = ret_1;                                                    /*0174*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0176*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0177*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0179*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0181*/

   ret_2 = freia_aipo_copy(imtmp_2, imand);                             /*0183*/

   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0185*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0186*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0187*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0188*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0189*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0190*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);            /*0191*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0192*/
   i_2 = 4;                                                             /*0193*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0195*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0196*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0197*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0198*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0199*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0200*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);           /*0201*/
   ret_2 |= freia_aipo_copy(imtmp_2, imfilt);                           /*0202*/
   i_2 = 4;                                                             /*0203*/

   freia_common_destruct_data(imtmp_2);                                 /*0205*/

   _return2 = ret_2;                                                    /*0207*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0209*/

   ret_3 = freia_aipo_copy(imtmp_3, imfilt);                            /*0211*/

   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0213*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0214*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0215*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0216*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0217*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0218*/
   ret_3 |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);             /*0219*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0220*/
   i_3 = 4;                                                             /*0221*/

   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0223*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0224*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0225*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0226*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0227*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0228*/
   ret_3 |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);            /*0229*/
   ret_3 |= freia_aipo_copy(imtmp_3, imout);                            /*0230*/
   i_3 = 4;                                                             /*0231*/

   freia_common_destruct_data(imtmp_3);                                 /*0233*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(immir);                                   /*0249*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imopenth);                                /*0252*/
   freia_common_destruct_data(imcloseth);                               /*0253*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! graphs

// graph for dag "dag_0" of module "license_plate_copies" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "230 =" [shape=circle];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "229 D8" -> "230 =" [label="imout"];
  "228 =" [shape=circle];
  "228 =" -> "229 D8" [label="imtmp_3"];
  "227 D8" [shape=box];
  "227 D8" -> "228 =" [label="imout"];
  "226 =" [shape=circle];
  "226 =" -> "227 D8" [label="imtmp_3"];
  "225 D8" [shape=box];
  "225 D8" -> "226 =" [label="imout"];
  "224 =" [shape=circle];
  "224 =" -> "225 D8" [label="imtmp_3"];
  "223 D8" [shape=box];
  "223 D8" -> "224 =" [label="imout"];
  "220 =" [shape=circle];
  "220 =" -> "223 D8" [label="imtmp_3"];
  "219 E8" [shape=box];
  "219 E8" -> "220 =" [label="imout"];
  "218 =" [shape=circle];
  "218 =" -> "219 E8" [label="imtmp_3"];
  "217 E8" [shape=box];
  "217 E8" -> "218 =" [label="imout"];
  "216 =" [shape=circle];
  "216 =" -> "217 E8" [label="imtmp_3"];
  "215 E8" [shape=box];
  "215 E8" -> "216 =" [label="imout"];
  "214 =" [shape=circle];
  "214 =" -> "215 E8" [label="imtmp_3"];
  "213 E8" [shape=box];
  "213 E8" -> "214 =" [label="imout"];
  "211 =" [shape=circle];
  "211 =" -> "213 E8" [label="imtmp_3"];
  "202 =" [shape=circle];
  "201 D8" [shape=box];
  "201 D8" -> "211 =" [label="imfilt"];
  "201 D8" -> "202 =" [label="imfilt"];
  "200 =" [shape=circle];
  "200 =" -> "201 D8" [label="imtmp_2"];
  "199 D8" [shape=box];
  "199 D8" -> "200 =" [label="imfilt"];
  "198 =" [shape=circle];
  "198 =" -> "199 D8" [label="imtmp_2"];
  "197 D8" [shape=box];
  "197 D8" -> "198 =" [label="imfilt"];
  "196 =" [shape=circle];
  "196 =" -> "197 D8" [label="imtmp_2"];
  "195 D8" [shape=box];
  "195 D8" -> "196 =" [label="imfilt"];
  "192 =" [shape=circle];
  "192 =" -> "195 D8" [label="imtmp_2"];
  "191 E8" [shape=box];
  "191 E8" -> "192 =" [label="imfilt"];
  "190 =" [shape=circle];
  "190 =" -> "191 E8" [label="imtmp_2"];
  "189 E8" [shape=box];
  "189 E8" -> "190 =" [label="imfilt"];
  "188 =" [shape=circle];
  "188 =" -> "189 E8" [label="imtmp_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 =" [label="imfilt"];
  "186 =" [shape=circle];
  "186 =" -> "187 E8" [label="imtmp_2"];
  "185 E8" [shape=box];
  "185 E8" -> "186 =" [label="imfilt"];
  "183 =" [shape=circle];
  "183 =" -> "185 E8" [label="imtmp_2"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "183 =" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "169 =" [shape=circle];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "168 E8" -> "169 =" [label="imclose"];
  "167 =" [shape=circle];
  "167 =" -> "168 E8" [label="imtmp_1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 =" [label="imclose"];
  "165 =" [shape=circle];
  "165 =" -> "166 E8" [label="imtmp_1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 =" [label="imclose"];
  "163 =" [shape=circle];
  "163 =" -> "164 E8" [label="imtmp_1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 =" [label="imclose"];
  "161 =" [shape=circle];
  "161 =" -> "162 E8" [label="imtmp_1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 =" [label="imclose"];
  "159 =" [shape=circle];
  "159 =" -> "160 E8" [label="imtmp_1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 =" [label="imclose"];
  "157 =" [shape=circle];
  "157 =" -> "158 E8" [label="imtmp_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imclose"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imclose"];
  "151 =" [shape=circle];
  "151 =" -> "154 E8" [label="imtmp_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 =" [label="imclose"];
  "149 =" [shape=circle];
  "149 =" -> "150 D8" [label="imtmp_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 =" [label="imclose"];
  "147 =" [shape=circle];
  "147 =" -> "148 D8" [label="imtmp_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 =" [label="imclose"];
  "145 =" [shape=circle];
  "145 =" -> "146 D8" [label="imtmp_1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 =" [label="imclose"];
  "143 =" [shape=circle];
  "143 =" -> "144 D8" [label="imtmp_1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 =" [label="imclose"];
  "141 =" [shape=circle];
  "141 =" -> "142 D8" [label="imtmp_1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 =" [label="imclose"];
  "139 =" [shape=circle];
  "139 =" -> "140 D8" [label="imtmp_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 =" [label="imclose"];
  "137 =" [shape=circle];
  "137 =" -> "138 D8" [label="imtmp_1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "136 D8" [label="imtmp_1"];
  "125 =" [shape=circle];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "124 D8" -> "125 =" [label="imopen"];
  "123 =" [shape=circle];
  "123 =" -> "124 D8" [label="imtmp_0"];
  "122 D8" [shape=box];
  "122 D8" -> "123 =" [label="imopen"];
  "121 =" [shape=circle];
  "121 =" -> "122 D8" [label="imtmp_0"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imopen"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_0"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imopen"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imopen"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imopen"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_0"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imopen"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_0"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imopen"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_0"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imopen"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_0"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imopen"];
  "105 =" [shape=circle];
  "105 =" -> "106 D8" [label="imtmp_0"];
  "104 D8" [shape=box];
  "104 D8" -> "105 =" [label="imopen"];
  "103 =" [shape=circle];
  "103 =" -> "104 D8" [label="imtmp_0"];
  "102 D8" [shape=box];
  "102 D8" -> "103 =" [label="imopen"];
  "101 =" [shape=circle];
  "101 =" -> "102 D8" [label="imtmp_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 =" [label="imopen"];
  "99 =" [shape=circle];
  "99 =" -> "100 D8" [label="imtmp_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 =" [label="imopen"];
  "97 =" [shape=circle];
  "97 =" -> "98 D8" [label="imtmp_0"];
  "96 D8" [shape=box];
  "96 D8" -> "97 =" [label="imopen"];
  "93 =" [shape=circle];
  "93 =" -> "96 D8" [label="imtmp_0"];
  "92 E8" [shape=box];
  "92 E8" -> "93 =" [label="imopen"];
  "91 =" [shape=circle];
  "91 =" -> "92 E8" [label="imtmp_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 =" [label="imopen"];
  "89 =" [shape=circle];
  "89 =" -> "90 E8" [label="imtmp_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 =" [label="imopen"];
  "87 =" [shape=circle];
  "87 =" -> "88 E8" [label="imtmp_0"];
  "86 E8" [shape=box];
  "86 E8" -> "87 =" [label="imopen"];
  "85 =" [shape=circle];
  "85 =" -> "86 E8" [label="imtmp_0"];
  "84 E8" [shape=box];
  "84 E8" -> "85 =" [label="imopen"];
  "83 =" [shape=circle];
  "83 =" -> "84 E8" [label="imtmp_0"];
  "82 E8" [shape=box];
  "82 E8" -> "83 =" [label="imopen"];
  "81 =" [shape=circle];
  "81 =" -> "82 E8" [label="imtmp_0"];
  "80 E8" [shape=box];
  "80 E8" -> "81 =" [label="imopen"];
  "79 =" [shape=circle];
  "79 =" -> "80 E8" [label="imtmp_0"];
  "78 E8" [shape=box];
  "78 E8" -> "79 =" [label="imopen"];
  "77 =" [shape=circle];
  "77 =" -> "78 E8" [label="imtmp_0"];
  "76 E8" [shape=box];
  "76 E8" -> "77 =" [label="imopen"];
  "75 =" [shape=circle];
  "75 =" -> "76 E8" [label="imtmp_0"];
  "74 E8" [shape=box];
  "74 E8" -> "75 =" [label="imopen"];
  "73 =" [shape=circle];
  "73 =" -> "74 E8" [label="imtmp_0"];
  "72 E8" [shape=box];
  "72 E8" -> "73 =" [label="imopen"];
  "71 =" [shape=circle];
  "71 =" -> "72 E8" [label="imtmp_0"];
  "70 E8" [shape=box];
  "70 E8" -> "71 =" [label="imopen"];
  "69 =" [shape=circle];
  "69 =" -> "70 E8" [label="imtmp_0"];
  "68 E8" [shape=box];
  "68 E8" -> "69 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "68 E8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "62 =" [shape=circle];
  "62 =" -> "64 E8" [label="imtmp_0"];
  "in" -> "244 &";
  "in" -> "134 =";
  "in" -> "62 =";
}
// graph for dag "dag_cleaned_0" of module "license_plate_copies" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out_1"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_2"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_3"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout_1"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout_2"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout_3"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout_4"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout_5"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout_6"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout_7"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt_1"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt_2"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt_3"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt_4"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt_5"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt_6"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt_7"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose_1"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose_2"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose_3"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose_4"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose_5"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose_6"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose_7"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose_8"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose_9"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose_10"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose_11"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose_12"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose_13"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose_14"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose_15"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen_1"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen_2"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen_3"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen_4"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen_5"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen_6"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen_7"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen_8"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen_9"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen_10"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen_11"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen_12"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen_13"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen_14"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen_15"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen_16"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen_17"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen_18"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen_19"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen_20"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen_21"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen_22"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen_23"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen_24"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen_25"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen_26"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen_27"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen_28"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_29"];
  "in" -> "64 E8";
  "in" -> "136 D8";
  "in" -> "244 &";
}
// graph for dag "license_plate_copies_helper_0_0" of module "license_plate_copies" in dot format
digraph "license_plate_copies_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "244 &" [shape=trapezium,orientation=270];
  "244 &" -> "out";
  "239 D8" [shape=box];
  "239 D8" -> "244 &" [label="out_1"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_2"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_3"];
  "229 D8" [shape=box];
  "229 D8" -> "237 D8" [label="imout"];
  "227 D8" [shape=box];
  "227 D8" -> "229 D8" [label="imout_1"];
  "225 D8" [shape=box];
  "225 D8" -> "227 D8" [label="imout_2"];
  "223 D8" [shape=box];
  "223 D8" -> "225 D8" [label="imout_3"];
  "219 E8" [shape=box];
  "219 E8" -> "223 D8" [label="imout_4"];
  "217 E8" [shape=box];
  "217 E8" -> "219 E8" [label="imout_5"];
  "215 E8" [shape=box];
  "215 E8" -> "217 E8" [label="imout_6"];
  "213 E8" [shape=box];
  "213 E8" -> "215 E8" [label="imout_7"];
  "201 D8" [shape=box];
  "201 D8" -> "213 E8" [label="imfilt"];
  "199 D8" [shape=box];
  "199 D8" -> "201 D8" [label="imfilt_1"];
  "197 D8" [shape=box];
  "197 D8" -> "199 D8" [label="imfilt_2"];
  "195 D8" [shape=box];
  "195 D8" -> "197 D8" [label="imfilt_3"];
  "191 E8" [shape=box];
  "191 E8" -> "195 D8" [label="imfilt_4"];
  "189 E8" [shape=box];
  "189 E8" -> "191 E8" [label="imfilt_5"];
  "187 E8" [shape=box];
  "187 E8" -> "189 E8" [label="imfilt_6"];
  "185 E8" [shape=box];
  "185 E8" -> "187 E8" [label="imfilt_7"];
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "185 E8" [label="imand"];
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "168 E8" [shape=box];
  "168 E8" -> "177 thr" [label="imclose"];
  "166 E8" [shape=box];
  "166 E8" -> "168 E8" [label="imclose_1"];
  "164 E8" [shape=box];
  "164 E8" -> "166 E8" [label="imclose_2"];
  "162 E8" [shape=box];
  "162 E8" -> "164 E8" [label="imclose_3"];
  "160 E8" [shape=box];
  "160 E8" -> "162 E8" [label="imclose_4"];
  "158 E8" [shape=box];
  "158 E8" -> "160 E8" [label="imclose_5"];
  "156 E8" [shape=box];
  "156 E8" -> "158 E8" [label="imclose_6"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imclose_7"];
  "150 D8" [shape=box];
  "150 D8" -> "154 E8" [label="imclose_8"];
  "148 D8" [shape=box];
  "148 D8" -> "150 D8" [label="imclose_9"];
  "146 D8" [shape=box];
  "146 D8" -> "148 D8" [label="imclose_10"];
  "144 D8" [shape=box];
  "144 D8" -> "146 D8" [label="imclose_11"];
  "142 D8" [shape=box];
  "142 D8" -> "144 D8" [label="imclose_12"];
  "140 D8" [shape=box];
  "140 D8" -> "142 D8" [label="imclose_13"];
  "138 D8" [shape=box];
  "138 D8" -> "140 D8" [label="imclose_14"];
  "136 D8" [shape=box];
  "136 D8" -> "138 D8" [label="imclose_15"];
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "124 D8" [shape=box];
  "124 D8" -> "176 thr" [label="imopen"];
  "122 D8" [shape=box];
  "122 D8" -> "124 D8" [label="imopen_1"];
  "120 D8" [shape=box];
  "120 D8" -> "122 D8" [label="imopen_2"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imopen_3"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imopen_4"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imopen_5"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imopen_6"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imopen_7"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imopen_8"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imopen_9"];
  "104 D8" [shape=box];
  "104 D8" -> "106 D8" [label="imopen_10"];
  "102 D8" [shape=box];
  "102 D8" -> "104 D8" [label="imopen_11"];
  "100 D8" [shape=box];
  "100 D8" -> "102 D8" [label="imopen_12"];
  "98 D8" [shape=box];
  "98 D8" -> "100 D8" [label="imopen_13"];
  "96 D8" [shape=box];
  "96 D8" -> "98 D8" [label="imopen_14"];
  "92 E8" [shape=box];
  "92 E8" -> "96 D8" [label="imopen_15"];
  "90 E8" [shape=box];
  "90 E8" -> "92 E8" [label="imopen_16"];
  "88 E8" [shape=box];
  "88 E8" -> "90 E8" [label="imopen_17"];
  "86 E8" [shape=box];
  "86 E8" -> "88 E8" [label="imopen_18"];
  "84 E8" [shape=box];
  "84 E8" -> "86 E8" [label="imopen_19"];
  "82 E8" [shape=box];
  "82 E8" -> "84 E8" [label="imopen_20"];
  "80 E8" [shape=box];
  "80 E8" -> "82 E8" [label="imopen_21"];
  "78 E8" [shape=box];
  "78 E8" -> "80 E8" [label="imopen_22"];
  "76 E8" [shape=box];
  "76 E8" -> "78 E8" [label="imopen_23"];
  "74 E8" [shape=box];
  "74 E8" -> "76 E8" [label="imopen_24"];
  "72 E8" [shape=box];
  "72 E8" -> "74 E8" [label="imopen_25"];
  "70 E8" [shape=box];
  "70 E8" -> "72 E8" [label="imopen_26"];
  "68 E8" [shape=box];
  "68 E8" -> "70 E8" [label="imopen_27"];
  "66 E8" [shape=box];
  "66 E8" -> "68 E8" [label="imopen_28"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_29"];
  "in" -> "244 &";
  "in" -> "136 D8";
  "in" -> "64 E8";
}
// graph for dag "license_plate_copies_helper_0_0_1" of module "license_plate_copies" in dot format
digraph "license_plate_copies_helper_0_0_1" {
  // inputs
  "imclose" [shape=circle];
  "imopen" [shape=circle];

  // outputs
  "imand" [shape=circle];

  // computation vertices
  "179 &" [shape=trapezium,orientation=270];
  "179 &" -> "imand";
  "177 thr" [shape=parallelogram];
  "177 thr" -> "179 &" [label="imcloseth"];
  "imclose" -> "177 thr";
  "176 thr" [shape=parallelogram];
  "176 thr" -> "179 &" [label="imopenth"];
  "imopen" -> "176 thr";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 69 ops and 66 copies, optimized to 69 ops and 0+0 copies

// hold kernels for license_plate_copies_helper_0_0_1
static cl_kernel license_plate_copies_helper_0_0_1_kernel[2];

// compile kernels for license_plate_copies_helper_0_0_1
static freia_status license_plate_copies_helper_0_0_1_compile(void)
{
  // OpenCL source for license_plate_copies_helper_0_0_1
  const char * license_plate_copies_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_copies_helper_0_0_1\n"
    "KERNEL void license_plate_copies_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4,\n"
    "  int c5)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "  int gid = pitch*get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t176 = PIXEL_THRESHOLD(in1, c0, c1, c2);\n"
    "    PIXEL t177 = PIXEL_THRESHOLD(in0, c3, c4, c5);\n"
    "    PIXEL t179 = PIXEL_AND(t176, t177);\n"
    "    // set output pixels\n"
    "    p0[i] = t179;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_copies_helper_0_0_1_source, "license_plate_copies_helper_0_0_1", "-DPIXEL8", &license_plate_copies_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_copies_helper_0_0_1_source, "license_plate_copies_helper_0_0_1", "-DPIXEL16", &license_plate_copies_helper_0_0_1_kernel[1]);
  return err;
}

// helper function license_plate_copies_helper_0_0_1
freia_status license_plate_copies_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4,
  int32_t c5)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_copies_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_copies_helper_0_0_1_kernel[bpp];

  // call kernel license_plate_copies_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 1, 2, 6, 0, o0, i0, i1, c0, c1, c2, c3, c4, c5);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function license_plate_copies

// opencl for dag 0

// opencl function license_plate_copies_helper_0_0_1
KERNEL void license_plate_copies_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4,
  int c5)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;
  int gid = pitch*get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t176 = PIXEL_THRESHOLD(in1, c0, c1, c2);
    PIXEL t177 = PIXEL_THRESHOLD(in0, c3, c4, c5);
    PIXEL t179 = PIXEL_AND(t176, t177);
    // set output pixels
    p0[i] = t179;
  }
}

! updated function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1 = 0;                                              /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2 = 0;                                              /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3 = 0;                                              /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   freia_aipo_erode_8c(imopen, in, kernel1x3);                          /*0064*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0066*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0068*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0070*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0072*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0074*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0076*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0078*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0080*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0082*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0084*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0086*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0088*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0090*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0092*/

   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0096*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0098*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0100*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0102*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0104*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0106*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0108*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0110*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0112*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0114*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0116*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0118*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0120*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0122*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0124*/

   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/

   freia_aipo_dilate_8c(imclose, in, kernel1x3);                        /*0136*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0138*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0140*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0142*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0144*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0146*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0148*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0150*/

   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0154*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0156*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0158*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0160*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0162*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0164*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0166*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0168*/

   _return0 = ret_1;                                                    /*0174*/

   license_plate_copies_helper_0_0_1(imand, imclose, imopen, 1, 50, 1, 150, 255, 1);   /*0176*/
   
   
   ret_2 = 0;                                                           /*0183*/

   freia_aipo_erode_8c(imfilt, imand, kernel3x1);                       /*0185*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0187*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0189*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0191*/

   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0195*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0197*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0199*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0201*/

   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/

   freia_aipo_erode_8c(imout, imfilt, kernel1x3);                       /*0213*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0215*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0217*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0219*/

   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0223*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0225*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0227*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0229*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}

! cleaned up function

int license_plate_copies(void)
{
   freia_dataio fdin;                                                   /*0010*/
   freia_dataio fdout;                                                  /*0011*/

   freia_data2d *in;                                                    /*0013*/
   freia_data2d *imopen;                                                /*0015*/
   freia_data2d *imclose;                                               /*0016*/
   freia_data2d *imand;                                                 /*0019*/
   freia_data2d *imfilt;                                                /*0020*/
   freia_data2d *imout;                                                 /*0021*/
   freia_data2d *out;                                                   /*0022*/

   const  int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};           /*0024*/
   const  int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};           /*0025*/

   freia_status _return0, _return1, _return2, _return3, _return4;       /*0027*/
   freia_status ret_0 = 0;                                              /*0029*/
   int i_0;                                                             /*0030*/
   freia_status ret_1 = 0;                                              /*0032*/
   int i_1;                                                             /*0033*/
   freia_status ret_2 = 0;                                              /*0035*/
   int i_2;                                                             /*0036*/
   freia_status ret_3 = 0;                                              /*0038*/
   int i_3, i_4;                                                        /*0039*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0042*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0043*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0046*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0048*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0049*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0052*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0053*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0054*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0055*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0058*/

   i_0 = 15;                                                            /*0094*/
   i_0 = 15;                                                            /*0126*/
   i_1 = 8;                                                             /*0152*/
   i_1 = 8;                                                             /*0170*/
   i_2 = 4;                                                             /*0193*/
   i_2 = 4;                                                             /*0203*/
   i_3 = 4;                                                             /*0221*/
   i_3 = 4;                                                             /*0231*/
   i_4 = 3;                                                             /*0240*/

   _return4 = 0;                                                        /*0242*/
   
   
   
   
   ret_0 = 0;                                                           /*0062*/

   freia_aipo_erode_8c(imopen, in, kernel1x3);                          /*0064*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0066*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0068*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0070*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0072*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0074*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0076*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0078*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0080*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0082*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0084*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0086*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0088*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0090*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0092*/

   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0096*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0098*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0100*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0102*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0104*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0106*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0108*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0110*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0112*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0114*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0116*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0118*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0120*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0122*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0124*/

   _return1 = ret_0;                                                    /*0130*/

   ret_1 = 0;                                                           /*0134*/

   freia_aipo_dilate_8c(imclose, in, kernel1x3);                        /*0136*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0138*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0140*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0142*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0144*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0146*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0148*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0150*/

   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0154*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0156*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0158*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0160*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0162*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0164*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0166*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0168*/

   _return0 = ret_1;                                                    /*0174*/

   license_plate_copies_helper_0_0_1(imand, imclose, imopen, 1, 50, 1, 150, 255, 1);   /*0176*/
   
   
   ret_2 = 0;                                                           /*0183*/

   freia_aipo_erode_8c(imfilt, imand, kernel3x1);                       /*0185*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0187*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0189*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0191*/

   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0195*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0197*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0199*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0201*/

   _return2 = ret_2;                                                    /*0207*/

   ret_3 = 0;                                                           /*0211*/

   freia_aipo_erode_8c(imout, imfilt, kernel1x3);                       /*0213*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0215*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0217*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0219*/

   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0223*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0225*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0227*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0229*/

   _return3 = ret_3;                                                    /*0235*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0237*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0238*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0239*/

   freia_aipo_and(out, out, in);                                        /*0244*/
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0245*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0248*/
   freia_common_destruct_data(imopen);                                  /*0250*/
   freia_common_destruct_data(imclose);                                 /*0251*/
   freia_common_destruct_data(imand);                                   /*0254*/
   freia_common_destruct_data(imfilt);                                  /*0255*/
   freia_common_destruct_data(imout);                                   /*0256*/
   freia_common_destruct_data(out);                                     /*0257*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0260*/
   freia_common_close_output(&fdout);                                   /*0261*/

   return 0;                                                            /*0263*/
}
#
# FREIA COMPILATION DONE
#

