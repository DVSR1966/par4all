
! initial function

freia_status freia_skip_01(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = FREIA_OK;
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   int32_t max;
   int32_t seuil;
   freia_aipo_global_max(i, &max);                                      /*0008*/
   freia_aipo_sub_const(t, i, 20);                                      /*0009*/
   seuil = max-10;                                                      /*0010*/
   freia_aipo_threshold(o, t, 0, seuil, false);                         /*0011*/
   freia_common_destruct_data(t);                                       /*0012*/
   return ret;                                                          /*0013*/
}

! graphs

// graph for dag "dag_0" of module "freia_skip_01" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 thr" [shape=parallelogram];
  "11 thr" -> "o";
  "10 ?" [shape=none];
  "10 ?" -> "11 thr" [arrowhead=empty,label="seuil"];
  "9 -." [shape=trapezium,orientation=270];
  "9 -." -> "11 thr" [label="t"];
  "8 max" [shape=diamond];
  "8 max" -> "10 ?" [arrowhead=empty,label="max"];
  "i" -> "9 -.";
  "i" -> "8 max";
}
// graph for dag "dag_cleaned_0" of module "freia_skip_01" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 thr" [shape=parallelogram];
  "11 thr" -> "o";
  "10 ?" [shape=none];
  "10 ?" -> "11 thr" [arrowhead=empty,label="seuil"];
  "9 -." [shape=trapezium,orientation=270];
  "9 -." -> "11 thr" [label="t"];
  "8 max" [shape=diamond];
  "8 max" -> "10 ?" [arrowhead=empty,label="max"];
  "i" -> "9 -.";
  "i" -> "8 max";
}
// graph for dag "freia_skip_01_helper_0_0" of module "freia_skip_01" in dot format
digraph "freia_skip_01_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "t" [shape=circle];

  // computation vertices
  "9 -." [shape=trapezium,orientation=270];
  "9 -." -> "t";
  "8 max" [shape=diamond];
  "i" -> "9 -.";
  "i" -> "8 max";
}
// graph for dag "freia_skip_01_helper_0_1" of module "freia_skip_01" in dot format
digraph "freia_skip_01_helper_0_1" {
  // inputs
  "t" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "11 thr" [shape=parallelogram];
  "11 thr" -> "o";
  "t" -> "11 thr";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_skip_01
freia_status freia_skip_01_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, int32_t * red0, int32_t cst1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 
  si.mux[0][0].op = SPOC_MUX_IN0;


  // STAGE 1
  // i [0 measure 0] -> [1 alu] 9 sub_const
  // i [1 input 0] -> [1 alu] 9 sub_const
  // nope
  // alu 9 sub_const stage 1
  si.alu[1][0].op = SPOC_ALU_SUB_IN0_CONST;
  sp.alu[1][0].constant = cst1;


  // output image 0`t on 0
  // 0`t [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 8 global_max stage 0 side 0
  *red0 = (int32_t) reduc.measure[0][0].maximum;

  return ret;
}

// FREIA-SPoC helper function for module freia_skip_01
freia_status freia_skip_01_helper_0_1_0(freia_data2d * o0, freia_data2d * i0, int32_t inf0, int32_t sup1, bool bin2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_sel op = 0;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t [0 input 0] -> [0 threshold 0] 11 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 11 threshold stage 0 side 0
  si.th[0][0].op = bin2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = inf0;
  sp.th[0][0].boundmax = sup1;


  // output image o on 0
  // o [0 threshold 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(op, param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_skip_01(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = FREIA_OK;
   freia_data2d *t = freia_common_create_data(16, 128, 128);
   int32_t max;
   int32_t seuil;
   freia_skip_01_helper_0_0_0(t, i, &max, 20);                          /*0008*/
   seuil = max-10;                                                      /*0010*/
   freia_skip_01_helper_0_1_0(o, t, 0, seuil, false);                   /*0011*/
   freia_common_destruct_data(t);                                       /*0012*/
   return ret;                                                          /*0013*/
}
