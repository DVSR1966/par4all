#! /bin/bash
#
# $Id$
#
# Copyright 1989-2010 MINES ParisTech
#
# This file is part of PIPS.
#
# PIPS is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# PIPS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PIPS.  If not, see <http://www.gnu.org/licenses/>.
#
# TODO
# - doxygen?
# - check documentation generation? I recall that latex errors are ignored in nlpmake.
#

# usage: $0 [options] email@domain /path/to/prod [/path/to/valid ...]
# - designed to be run from cron.
# - check that pips does still compile.
# - report is sent by mail if the status changed.
# - run the validation and send a mail on any changes if third arg.
# - if there is a persistant LOCK, investigate by hand...

# default settings
nice=
wait=
tail=
force=
report=
source=
autoconf=
parallel=1
validate=mail-diff-validate
vname=
build=compile

# get options
while [[ $1 == -* ]]
do
  case $1 in
    # how to compile pips
    -a|--autoconf) autoconf=1 ;;
    --nlpmake) autoconf= ;;
    --nlpmake=*) autoconf= ; build=${1//*=/} ;;
    -n|--nice) nice=nice ;;
    # force compilation & validation & validation mail
    -f|--force) validate=mail-validate ; force=1 ;;
    # force compilation status report even if unchanged
    -r|--report) report=1 ;;
    # how long to wait for lock
    -w|--wait) wait=1200 ;;
    --wait=*) wait=${1//*=/} ;;
    # whether to run in parallel
    -p|--parallel) parallel=1 ;;
    -s|--sequential) parallel= ;;
    # trace length to include on compilation error
    -t|--tail) tail=$2 ; shift ;;
    --tail=*) tail=${1//*=/} ;;
    # compilation & validation name
    -v|--vname) vname=$2 ; shift ;;
    --vname=*) wait=${1//*=/} ;;
    # environment setup
    -S|--source) source=$2; shift ;;
    --source=*) source=${1//*=/} ;;
    # this help
    -h|--help)
      echo -e \
        "Usage: $0 [options] em@il /path/to/prod [/path/to/validation ...]\n" \
        "check pips compilation and validation health\n" \
	"available options:\n" \
	"  -a: compile with autoconf\n" \
	"  -f: force even if not needed\n" \
	"  -h: show this help and exit\n"
	"  -n: run with nice\n" \
	"  -p: run in parallel (the default)\n" \
	"  -r: report compilation result even if not changed\n" \
	"  -s: do not run in parallel\n" \
	"  -S file: source file for environment\n" \
        "  -t len: trace length on compilation error\n" \
	"  -v name: validation name\n" \
	"  -w: wait for lock\n" \
      exit 0
      ;;
    *) echo "$0 unexpected option: $1" >&2 ; exit 1 ;;
  esac
  shift
done

# get arguments (destination email & directories)
dest=${1:-$LOGNAME@cri.ensmp.fr}
prod=${2:-.}
shift 2

# set default vname with some guessing
[ "$vname" ] || { vname=${prod%/*} ; vname=${vname##*/} ; }
[ "$vname" ] || vname=CHECK

arch=$(uname -m)

# remove pips-related environment variables to use default settings
unset -v EXTERN_ROOT NEWGEN_ROOT LINEAR_ROOT PIPS_ROOT PIPS_ARCH

if [ "$parallel" ]
then
  # compute load & jobs depending on the available hardware
  # note that the reported hardware can be somehow virtual
  nproc=$(grep '^processor' /proc/cpuinfo | wc -l)
  load=$(($nproc + 2)) jobs=$nproc
  make="make -j $jobs -l $load"
  tail=$((12 + 3 * $nproc))
else
  make=make
  tail=15
fi

# report current-state compile message
# current-state: ok skip locked KO:*
# compile: ok unknown unchanged unbuild build exe
# side effect: the function exits!
function report()
{
  [ $# -eq 3 ] || {
    # internal error
    echo "report() got $# args but expecting 3" >> LOG
    exit 1
  }

  # get function arguments
  local current=$1 compile=$2 msg=$3
  local previous='unknown' prevcomp='unknown'

  # get previous state if available
  test -f STATE && read previous prevcomp < STATE

  # log report anyway...
  echo "$(date +%Y%m%d%H%M%S): $current $compile (${COMPILE_SECONDS:-$SECONDS} seconds) $msg" >> LOG

  # out if locked
  [ $current = 'locked' ] && {
    echo "message: $msg" | mailx -s 'PIPS compilation status is locked' $dest
    exit 0
  }

  # out if locked (2)
  [ $current = 'skip-lock' ] && exit 0

  # no compilation, nothing to report...
  # however, if there was a *temporary* KO (network down),
  # it is nice to report that it is up again...
  [ $current = 'skip' -a $previous != 'KO:svn-up' ] && { rmdir LOCK ; exit 0 ; }

  # no change, no report, unless forced
  [ ! "$report" -a "$previous" -a $current = "$previous" ] && {
    rmdir LOCK; exit 0;
  }

  # else generate report
  {
    # summary
    echo $vname $arch compilation status has changed to $current

    # some details
    echo previous state: $previous
    echo previous compile: $prevcomp
    echo new state: $current
    echo new compile: $compile
    echo message: $msg
    echo run time: ${COMPILE_SECONDS:-$SECONDS}
    echo full time: $SECONDS

    # revisions
    echo
    echo version:
    cat CURRENT
    [ -f CURRENT_VALID ] && cat CURRENT_VALID
    echo
    echo previous:
    cat PREVIOUS
    [ -f PREVIOUS_VALID ] && cat PREVIOUS_VALID

    if [ $current != 'ok' ]
    then
      # show stderr/stdout?
      test -f err && {
        echo
        echo err:
        tail -$tail err
      }

      test -f out && {
        echo
        echo out:
        tail -$tail out
      }

      # show recent commits
      echo
      echo last commits:
      local repos
      for repos in pips newgen linear pips/makes
      do
        echo $repos:
	svn log --revision COMMITTED $repos
      done
    fi
  } | mailx -a "Reply-To: $dest" -s "$vname $arch compilation status is $current" $dest

  # fix compile with previous state on 'unchanged'
  [ $compile = 'unchanged' ] && compile=$prevcomp

  # hmmm... regenerate previous before network interruption
  [ $current = 'skip' ] && current=$compile

  # record new state
  echo $current $compile > STATE

  # good bye! always 0 for cron
  rmdir LOCK
  exit 0
}

# check for working copy... this should not fail!
[ -d $prod ] || \
    report 'KO:no-dir' 'unknown' "working copy directory '$prod' not found"
[ -d $prod/.svn ] || \
    report 'KO:no-wc' 'unknown' "'$prod' is not a working copy"

# idem for validation if required
for valid in "$@" ; do
  [ -d $valid ] || \
    report 'KO:no-dir' 'unknown' "working copy directory '$valid' not found"
  [ -d $valid/.svn ] || \
    report 'KO:no-wc' 'unknown' "'$valid' is not a working copy"
done

# environment
if [ "$source" ]
then
  source $source || \
    report 'KO:source' 'unknown' "cannot 'source $source'"
fi

cd $prod || \
    report 'KO:cd-prod' 'unknown' "cannot 'cd $prod'"

# manual locking based on mkdir
if [ "$wait" ]
then
  # we DO want to wait for the lock for some time
  while ! mkdir LOCK > /dev/null 2>&1 ; do
    [ $wait -eq 0 ] && break
    let wait--
    sleep 1
  done
  # did we get the lock?
  test -d LOCK ||
  {
    # we report unconditionnaly, as --wait should be rare
    report 'locked' 'unknown' "waiting for copy '$prod', but still locked..."
    exit 2
  }
else
  mkdir LOCK > /dev/null 2>&1 ||
  {
    # warn after 3600 seconds (1h) locking
    created=$(stat -c %Y LOCK)
    now=$(date +%s)
    delay=$(($now - $created))
    if [ $delay -gt 3600 ]
    then
      touch LOCK
      report 'locked' 'unknown' "working copy '$prod' is already locked..."
    else
      report 'skip-lock' 'unknown' "working copy '$prod' is locked"
    fi
  }
fi

rm -f out err
for valid in "$@" ; do
  $nice svn up $prod $valid >> out 2>> err || {
    # possible failures: network dns svn...
    # hmmm... try to cleanup after svn up failure
    svn cleanup $prod $valid >> out 2>> err
    report 'KO:svn-up' 'unchanged' 'cannot "svn up"'
  }
done

# source state
[ -f CURRENT ] || touch CURRENT
mv CURRENT PREVIOUS
{
  # this is local, it should not fail
  echo pips: $(svnversion -c pips)
  echo newgen: $(svnversion -c newgen)
  echo linear: $(svnversion -c linear)
  echo nlpmake: $(svnversion -c pips/makes)
} > CURRENT

# validation state
for valid in "$@" ; do
  svalid=${valid##*/}
  [ -f CURRENT_$svalid ] || touch CURRENT_$svalid
  mv CURRENT_$svalid PREVIOUS_$svalid
  echo validation: $(svnversion -c $valid) > CURRENT_$svalid
done

# recompilation, possibly forced
if [ "$force" ] || ! cmp -s CURRENT PREVIOUS
then
  if [ "$autoconf" ]
  then
    # AUTOCONF compilation
    # polylib is assumed to be available somewhere
    # aggressive cleanup
    rm -rf ../install
    # ???
    $nice $make unbuild > out 2> err \
      || report 'KO:make' 'unbuild' 'cannot "make unbuild"'
    $nice $make auto > out 2> err \
      || report 'KO:make' 'auto' 'cannot "make auto"'
    # check exe, script & lib
    test -x ../install/bin/tpips \
      || report 'KO:make' 'executable' 'no "tpips" executable found!'
    test -x ../install/bin/pips_validation_summary.pl \
      || report 'KO:make' 'script' 'missing script...'
    # get python directory, which depends on python version
    ldpips=$(pkg-config --variable=pythondir pips)/pips
    test -d "$ldpips" -a -f "$ldpips"/_pypips.so \
      || report 'KO:make' 'library' 'no "pyps" dynamic library found!'
  else
    # NLPMAKE compilation
    # something may have changed, let us recompile
    $nice $make unbuild > out 2> err \
      || report 'KO:make' 'unbuild' 'cannot "make unbuild"'
    # what about a "timeout"? how to differentiate from a simple failure?
    $nice $make $build > out 2> err \
      || report 'KO:make' $build "cannot \"make $build\""
    # check executable & script
    test -x pips/bin/${PIPS_ARCH:-$(./pips/makes/arch.sh)}/tpips \
      || report 'KO:make' 'executable' 'no "tpips" executable found!'
    test -x pips/utils/pips_validation_summary.pl \
      || report 'KO:make' 'script' 'missing script!'
  fi

  # record compilation time, for "report"
  COMPILE_SECONDS=$SECONDS

  # clean up if no error
  rm -f out err

  # run the validation with new tpips
  for valid in "$@" ; do
    {
      $nice $make -C $valid parallel-clean
      $nice $make -C $valid VNAME="$vname $arch" EMAIL=$dest $validate
      $nice $make -C $valid parallel-clean
    } > out 2> err
  done

  # the report is delayed so as to keep the lock
  report 'ok' 'ok' 'pips is fine'

else
  # no source updates, but maybe a validation update?
  for valid in "$@" ; do
    svalid=${valid##*/}
    if ! cmp -s CURRENT_$svalid PREVIOUS_$svalid
    then
      # the validation changed, run it with current tpips
      # run the validation
      {
        $nice $make -C $valid parallel-clean
        $nice $make -C $valid VNAME="$vname $arch" EMAIL=$dest mail-diff-validate
        # cleanup to help next "svn up" run smoothly
        $nice $make -C $valid parallel-clean
      } > out 2> err
    fi
  done

  # the report is delayed so as to keep the lock
  report 'skip' 'unchanged' 'no commit since last check'

fi
