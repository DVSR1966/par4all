#! @PYTHON@
# -*- coding: utf-8 -*-


"""iPyPS -- An enhanced Interactive Python front-end to PIPS

This is inspired by the ipython script to lauch iPyPs instead of iPython

Ronan.Keryell@hpc-project.com
"""

# The banner used for ipyps greeting
banner = """Welcome to iPyPS, the interactive Python PIPS environment shell

?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object'. ?object also works, ?? prints more.

workspace -> the method to start with a PIPS workspace,
              a program database to work on;
module    -> to manipulate a PIPS module (a function, a procedure);
modules   -> to manipulate a set of PIPS modules.
%load     -> load and execute a PyPS file
"""

# Load IPython, be compatible with several versions ...
try:
    from IPython.Shell import IPShellEmbed as InteractiveShellEmbed
    shell_params = { 'banner' : banner } # use a dictionary to match the parameter name change
except:
    from IPython.frontend.terminal.embed import InteractiveShellEmbed
    shell_params = { 'banner1' : banner }
    InteractiveShellEmbed.expose_magic = InteractiveShellEmbed.define_magic # use python magic for method aliasisng

import sys

# Load PyPS:
from pyps import *



# Inject line arguments to set the default prompt to something with iPyPS:
sys.argv[1:1] = [ '-prompt_in1', 'iPyPS [\#]: ']
#print sys.argv


# Create an embedded shell to inherit pyps current namespace into the
# interactive one. I guess there is a more direct way...
ipshell = InteractiveShellEmbed(**shell_params)

def load_pyps(self, filename):
    "Load and execute a PyPS file"

    try:
        exec(open(filename).read())
    # To avoid crashing iPython if something goes wrong:
    except:
        # We cannot get the exception because of 2.5 compliancy:
        print("Error while loading PyPS file" )

try:
    import IPython.ipapi
    ip = IPython.ipapi.get()
except:
    ip = ipshell # once again, manage several IPython versions ...

# Add a new magic function:
ip.expose_magic('load', load_pyps)


# Call the iPython shell itself:
ipshell()
