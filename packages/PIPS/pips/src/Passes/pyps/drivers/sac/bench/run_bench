#!/usr/bin/perl

=head1 DESCRIPTION

Run the benchmarks as created by `./benchmark.py --outdir blah'.

Invoke as `./run_bench --dir blah --datafile pips-graph.dat'.

=cut

use strict;
use warnings;

use Cwd qw/abs_path getcwd/;
use File::Find;
use Getopt::Long;

my $sourcedir = "";
my $datafile = "pips-graph.dat";

GetOptions("dir=s" => \$sourcedir,
	   "datafile=s" => \$datafile);

my %datapoints;
# %datapoints has the structure:
# {DOTPROD.c => {ref => 123, seq => 456, 3dnow => 789},
#  DOTPROD2.c => {ref => 147, seq => 258, 3dnow => 369}};

my %args = ("jacobi.c" => getcwd ."/bonjour.pgm",
	    "DOTPROD2.c" => "20000000",
	    "DOTPROD2.c-unfold" => "20000000",
	    "alphablending.c" => "20000000",
	    );

sub xsystem {
    system @_ and die;
}

# Unfortunately, SIMD.h is included with an absolute path. Change it
# into  a relative path.
xsystem 'find $sourcedir -type f -name \\*.c -print0 | xargs -0 -L1 sed -i \'s!#include.*SIMD.h.*!#include "SIMD.h"!\'';

sub action {
    my $location = $File::Find::dir;

    # we only want the second level files
    return unless -d;
    return if $location eq ".";
    return if m/whetstone/;

    my $curloc = getcwd;
    chdir $_;

    my $benchname = $_;
    my ($benchtype) = ($location =~ m!/([^/]+)$!);
    print "$benchname of type $benchtype in ", getcwd, "\n";
    if ($benchtype eq "3dnow") {
	xsystem "gcc *.c -O3 -march=native -m3dnow";
    } else {
	xsystem "gcc *.c -O3";
    }

    my @times;
    for my $i (0 .. 50) {
	xsystem "./a.out ". ($args{$benchname} or ""). " &>/dev/null";
	open TIME, "_pips_time.tmp" or die;
	my $time = <TIME>;
	close TIME;
	chomp $time;
	$times[$i] = int($time);
    }
    @times = sort {$a <=> $b} @times;
    my $timing = $times[@times / 2];
    $datapoints{$benchname}{$benchtype} = $timing;
    chdir $curloc;
}

find {wanted => \&action}, $sourcedir;

open DAT, ">", $datafile;
print DAT "Compilation	ref	seq	3dnow\n";
for my $benchname (keys %datapoints) {
    print DAT $benchname;
    my $avgtime = 0;
    $avgtime += $_ for values %{$datapoints{$benchname}};
    $avgtime /= 3.0;
    for my $benchtype (keys %{$datapoints{$benchname}}) {
	print DAT "\t", $datapoints{$benchname}{$benchtype} / $avgtime;
    }
    print DAT "\n";
}
