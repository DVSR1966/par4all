
PROPER POINTER EFFECTS

int main()
{
   s_with_pointer a, b;
   s_with_array_of_struct_with_pointer e, f;
   int i, j;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
   
   /* definition of a */
   a.p = (int *) malloc(10*sizeof(int));
//             <    is written>: i
   for(i = 0; i <= 9; i += 1)
//             <    is read   >: a.p i
//             <    is written>: a.p[i]
      (a.p)[i] = i;
//             <    is read   >: a.p
//             <    is written>: b.p
   
   /* definition of b */
   b = a;
//             <    is written>: i
   for(i = 0; i <= 9; i += 1)
//             <    is read   >: b.p i
//             <    is written>: b.p[i]
      (b.p)[i] = i*10;
//             <    is written>: i
   
   /* definition of e */
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: e.champ[i].p _MALLOC_EFFECTS:_MALLOC_
      (e.champ)[i].p = malloc(10*sizeof(int));
//             <    is written>: j
      for(j = 0; j <= 9; j += 1)
//             <    is read   >: e.champ[i].p i j
//             <    is written>: e.champ[i].p[j]
         ((e.champ)[i].p)[j] = i+j;
   }
//             <may be read   >: e.champ[*].p
//             <may be written>: f.champ[*].p
   
   /* definition of f, also modifies e */
   f = e;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1)
//             <    is written>: j
      for(j = 0; j <= 9; j += 1)
//             <    is read   >: f.champ[i].p i j
//             <    is written>: f.champ[i].p[j]
         ((f.champ)[i].p)[j] = i*j;

   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   s_with_pointer a, b;

// Points To:
// a.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// b.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   s_with_array_of_struct_with_pointer e, f;

// Points To:
// a.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// b.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int i, j;

// Points To:
// a.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// b.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   
   /* definition of a */
   a.p = (int *) malloc(10*sizeof(int));

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   for(i = 0; i <= 9; i += 1)

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      (a.p)[i] = i;

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   
   /* definition of b */
   b = a;

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT

   for(i = 0; i <= 9; i += 1)

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT

      (b.p)[i] = i*10;

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT

   
   /* definition of e */
   for(i = 0; i <= 4; i += 1) {

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT
// e.champ[*].p -> *HEAP*_l_29[0] , MAY

      (e.champ)[i].p = malloc(10*sizeof(int));

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT
// e.champ[*].p -> *HEAP*_l_29[0] , MAY

      for(j = 0; j <= 9; j += 1)

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT
// e.champ[*].p -> *HEAP*_l_29[0] , EXACT

         ((e.champ)[i].p)[j] = i+j;
   }

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT
// e.champ[*].p -> *HEAP*_l_29[0] , MAY

   
   /* definition of f, also modifies e */
   f = e;

// Points To:
// a.p -> *HEAP*_l_17[0] , EXACT
// b.p -> *HEAP*_l_17[0] , EXACT
// e.champ[*].p -> *HEAP*_l_29[0] , MAY

   for(i = 0; i <= 4; i += 1)

// Points To:
// a.p -> *HEAP*_l_17[0] , MAY
// b.p -> *HEAP*_l_17[0] , MAY
// e.champ[*].p -> *HEAP*_l_29[0] , MAY

      for(j = 0; j <= 9; j += 1)

// Points To:
// a.p -> *HEAP*_l_17[0] , MAY
// b.p -> *HEAP*_l_17[0] , MAY
// e.champ[*].p -> *HEAP*_l_29[0] , MAY

         ((f.champ)[i].p)[j] = i*j;

// Points To:
// a.p -> *HEAP*_l_17[0] , MAY
// b.p -> *HEAP*_l_17[0] , MAY
// e.champ[*].p -> *HEAP*_l_29[0] , MAY


   return 0;
}
