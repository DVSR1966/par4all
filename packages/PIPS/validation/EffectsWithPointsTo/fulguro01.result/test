
void flgr1d_arith_add_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *data1, FLGR_Data1D *data2)
{
   int j;
//             <    is read   >: _data1_2[0].array data1
//             <    is written>: psrc1
   fgINT32 *psrc1 = (fgINT32 *) data1->array;
//             <    is read   >: _data2_3[0].array data2
//             <    is written>: psrc2
   fgINT32 *psrc2 = (fgINT32 *) data2->array;
//             <    is read   >: _datdest_1[0].array datdest
//             <    is written>: pdest
   fgINT32 *pdest = (fgINT32 *) datdest->array;
   fgINT32 v1;
   fgINT32 v2;
   fgINT32 result;
//             <    is read   >: _datdest_1[0].spp datdest
//             <    is written>: spp
   int spp = datdest->spp;
//             <    is read   >: _datdest_1[0].length datdest spp
//             <    is written>: length
   int length = datdest->length*spp;
//             <    is read   >: length
//             <    is written>: j
   for(j = 0; j <= length-1; j += 1) {
//             <    is read   >: j length psrc1
//             <    is written>: v1
      v1 = flgr1d_get_data_array_fgINT32(psrc1, j);
//             <    is read   >: j length psrc2
//             <    is written>: v2
      v2 = flgr1d_get_data_array_fgINT32(psrc2, j);
//             <    is read   >: length v1 v2
//             <    is written>: result
      result = flgr_defop_add_fgINT32(v1, v2);
//             <    is read   >: j length pdest result
      flgr1d_set_data_array_fgINT32(pdest, j, result);
   }
   return;
}
FLGR_Ret flgr2d_arith_add(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
   FLGR_Ret ret;
//             <    is read   >: data1 data2 datdest
   if (datdest==(void *) 0||data1==(void *) 0||data2==(void *) 0) {
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5102);
      return FLGR_RET_NULL_OBJECT;
   }
//             <    is read   >: data1 datdest
//             <    is written>: ret
   if ((ret = flgr2d_is_data_same_attributes(datdest, data1))!=FLGR_RET_OK)
//             <    is read   >: ret
      return ret;
//             <    is read   >: data1 data2
//             <    is written>: ret
   if ((ret = flgr2d_is_data_same_attributes(data2, data1))!=FLGR_RET_OK)
//             <    is read   >: ret
      return ret;
//             <    is read   >: _datdest_1[0].type datdest

   if (datdest->type==FLGR_BIT) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgBIT(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_UINT8) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT8(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_UINT16) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT16(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_UINT32) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_INT8) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgINT8(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_INT16) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgINT16(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_INT32) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      flgr2d_arith_add_fgINT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_FLOAT32) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgFLOAT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <    is read   >: _datdest_1[0].type datdest
   if (datdest->type==FLGR_FLOAT64) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgFLOAT64(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: _datdest_1[0].type datdest stderr 
//                               __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
   fprintf(stderr, "type <%s> unknown!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5109, flgr_get_type_string(datdest->type));
   return FLGR_RET_TYPE_UNKNOWN;
}
int flgr2d_arith_add_fgBIT(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_arith_add_fgFLOAT32(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_arith_add_fgFLOAT64(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_arith_add_fgINT16(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
void flgr2d_arith_add_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
//             <    is read   >: _datdest_1[0].row datdest
//             <    is written>: pdest
   FLGR_Data1D **pdest = datdest->row;
//             <    is read   >: _data1_2[0].row data1
//             <    is written>: p1
   FLGR_Data1D **p1 = data1->row;
//             <    is read   >: _data2_3[0].row data2
//             <    is written>: p2
   FLGR_Data1D **p2 = data2->row;
   int i;
//             <    is written>: i
   i = 0;
//             <    is read   >: _data1_2[0].size_y data1 i
   while (i<data1->size_y) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
      flgr1d_arith_add_fgINT32(*pdest, *p1, *p2);
//             <    is read   >: i p1 p2 pdest
//             <    is written>: i p1 p2 pdest
      i++, pdest++, p1++, p2++;
   }
   return;
}
int flgr2d_arith_add_fgINT8(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_arith_add_fgUINT16(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_arith_add_fgUINT32(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_arith_add_fgUINT8(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
int flgr2d_is_data_same_attributes(FLGR_Data2D *f1, FLGR_Data2D *f2)
{
}
int flgr_get_type_string(enum FLGR_TYPE f1)
{
}
static fgINT32 flgr1d_get_data_array_fgINT32(fgINT32 *array, int pos)
{
//             <    is read   >: array pos
   return flgr_get_array_fgINT32(array, pos);
}
static void flgr1d_set_data_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <    is read   >: array pos value
   flgr_set_array_fgINT32(array, pos, value);
}
static fgINT32 flgr_defop_add_fgINT32(fgINT32 a, fgINT32 b)
{
//             <    is read   >: a b
   return a+b;
}
static fgINT32 flgr_get_array_fgINT32(fgINT32 *array, int pos)
{
//             <    is read   >: _array_1[pos] array pos
   return array[pos];
}
static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <    is read   >: array pos value
//             <    is written>: _array_1[pos]
   array[pos] = value;
}

 *********************** Use-Def Chains *********************


****************** End of Dependence Graph ******************
