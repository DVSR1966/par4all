
PROPER  EFFECTS 

int foo(float (*b)[3])
{
   float c;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: b
   (*b)[3] = 2.0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: c
   c = (*b)[3];
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: b
   b[1][3] = 2.0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: c
   c = b[1][3];
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   (*b)[3]++;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   (*b)[3] += 5.0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   b[1][3]++;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   b[1][3] += 5.0;
   return 1;
}
int foo2(float b[5][3])
{
   float c;
//             <    is written>: b[0][3]
   (*b)[3] = 2.0;
//             <    is read   >: b[0][3]
//             <    is written>: c
   c = (*b)[3];
//             <    is written>: b[1][3]
   b[1][3] = 2.0;
//             <    is read   >: b[1][3]
//             <    is written>: c
   c = b[1][3];
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3]++;
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3] += 5.0;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3]++;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3] += 5.0;

   return 1;
}
int foo3()
{
   float c;
//             <    is written>: d[0][3]
   (*d)[3] = 2.0;
//             <    is read   >: d[0][3]
//             <    is written>: c
   c = (*d)[3];
//             <    is written>: d[1][3]
   d[1][3] = 2.0;
//             <    is read   >: d[1][3]
//             <    is written>: c
   c = d[1][3];
//             <    is read   >: d[0][3]
//             <    is written>: d[0][3]
   (*d)[3]++;
//             <    is read   >: d[0][3]
//             <    is written>: d[0][3]
   (*d)[3] += 5.0;
//             <    is read   >: d[1][3]
//             <    is written>: d[1][3]
   d[1][3]++;
//             <    is read   >: d[1][3]
//             <    is written>: d[1][3]
   d[1][3] += 5.0;

   return 1;
}
int main()
{
   float a[5][3], ret;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*

   ret = foo(a);
//             <    is read   >: a[0][3] a[1][3]
//             <    is written>: a[0][3] a[1][3] ret
   ret = foo2(a);
//             <    is read   >: d[0][3] d[1][3]
//             <    is written>: d[0][3] d[1][3] ret
   ret = foo3();

   return 1;
}

POINTS-TO


// Points To:
// b -> &_b_1[0] , EXACT

int foo(float (*b)[3])
{

// Points To:
// b -> &_b_1[0] , EXACT

   float c;

// Points To:
// b -> &_b_1[0] , EXACT

   (*b)[3] = 2.0;

// Points To:
// b -> &_b_1[0] , EXACT

   c = (*b)[3];

// Points To:
// b -> &_b_1[0] , EXACT

   b[1][3] = 2.0;

// Points To:
// b -> &_b_1[0] , EXACT

   c = b[1][3];

// Points To:
// b -> &_b_1[0] , EXACT

   (*b)[3]++;

// Points To:
// b -> &_b_1[0] , EXACT

   (*b)[3] += 5.0;

// Points To:
// b -> &_b_1[0] , EXACT

   b[1][3]++;

// Points To:
// b -> &_b_1[0] , EXACT

   b[1][3] += 5.0;

// Points To:
// b -> &_b_1[0] , EXACT

   return 1;
}

// Points To: none

int foo2(float b[5][3])
{

// Points To: none

   float c;

// Points To: none

   (*b)[3] = 2.0;

// Points To: none

   c = (*b)[3];

// Points To: none

   b[1][3] = 2.0;

// Points To: none

   c = b[1][3];

// Points To: none

   (*b)[3]++;

// Points To: none

   (*b)[3] += 5.0;

// Points To: none

   b[1][3]++;

// Points To: none

   b[1][3] += 5.0;

// Points To: none


   return 1;
}

// Points To: none

int foo3()
{

// Points To: none

   float c;

// Points To: none

   (*d)[3] = 2.0;

// Points To: none

   c = (*d)[3];

// Points To: none

   d[1][3] = 2.0;

// Points To: none

   c = d[1][3];

// Points To: none

   (*d)[3]++;

// Points To: none

   (*d)[3] += 5.0;

// Points To: none

   d[1][3]++;

// Points To: none

   d[1][3] += 5.0;

// Points To: none


   return 1;
}

// Points To: none

int main()
{

// Points To: none

   float a[5][3], ret;

// Points To: none


   ret = foo(a);

// Points To: none

   ret = foo2(a);

// Points To: none

   ret = foo3();

// Points To: none


   return 1;
}

PROPER  EFFECTS WITH POINTS TO

int foo(float (*b)[3])
{
   float c;
//             <    is read   >: b
//             <    is written>: _b_1[0][3]
   (*b)[3] = 2.0;
//             <    is read   >: _b_1[0][3] b
//             <    is written>: c
   c = (*b)[3];
//             <    is read   >: b
//             <    is written>: _b_1[1][3]
   b[1][3] = 2.0;
//             <    is read   >: _b_1[1][3] b
//             <    is written>: c
   c = b[1][3];
//             <    is read   >: _b_1[0][3] b
//             <    is written>: _b_1[0][3]
   (*b)[3]++;
//             <    is read   >: _b_1[0][3] b
//             <    is written>: _b_1[0][3]
   (*b)[3] += 5.0;
//             <    is read   >: _b_1[1][3] b
//             <    is written>: _b_1[1][3]
   b[1][3]++;
//             <    is read   >: _b_1[1][3] b
//             <    is written>: _b_1[1][3]
   b[1][3] += 5.0;
   return 1;
}
int foo2(float b[5][3])
{
   float c;
//             <    is written>: b[0][3]
   (*b)[3] = 2.0;
//             <    is read   >: b[0][3]
//             <    is written>: c
   c = (*b)[3];
//             <    is written>: b[1][3]
   b[1][3] = 2.0;
//             <    is read   >: b[1][3]
//             <    is written>: c
   c = b[1][3];
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3]++;
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3] += 5.0;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3]++;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3] += 5.0;

   return 1;
}
int foo3()
{
   float c;
//             <    is written>: d[0][3]
   (*d)[3] = 2.0;
//             <    is read   >: d[0][3]
//             <    is written>: c
   c = (*d)[3];
//             <    is written>: d[1][3]
   d[1][3] = 2.0;
//             <    is read   >: d[1][3]
//             <    is written>: c
   c = d[1][3];
//             <    is read   >: d[0][3]
//             <    is written>: d[0][3]
   (*d)[3]++;
//             <    is read   >: d[0][3]
//             <    is written>: d[0][3]
   (*d)[3] += 5.0;
//             <    is read   >: d[1][3]
//             <    is written>: d[1][3]
   d[1][3]++;
//             <    is read   >: d[1][3]
//             <    is written>: d[1][3]
   d[1][3] += 5.0;

   return 1;
}
int main()
{
   float a[5][3], ret;
//             <    is read   >: a[0][3] a[1][3]
//             <    is written>: a[0][3] a[1][3] ret

   ret = foo(a);
//             <    is read   >: a[0][3] a[1][3]
//             <    is written>: a[0][3] a[1][3] ret
   ret = foo2(a);
//             <    is read   >: d[0][3] d[1][3]
//             <    is written>: d[0][3] d[1][3] ret
   ret = foo3();

   return 1;
}

 *********************** Use-Def Chains *********************

	64 --> 65 with conflicts
		from <ret-W-EXACT> to <ret-W-EXACT>
	63 --> 64 with conflicts
		from <ret-W-EXACT> to <ret-W-EXACT>
		from <a[1][3]-W-EXACT> to <a[1][3]-W-EXACT>
		from <a[0][3]-W-EXACT> to <a[0][3]-W-EXACT>
		from <a[1][3]-W-EXACT> to <a[1][3]-R-EXACT>
		from <a[0][3]-W-EXACT> to <a[0][3]-R-EXACT>
		from <a[1][3]-R-EXACT> to <a[1][3]-W-EXACT>
		from <a[0][3]-R-EXACT> to <a[0][3]-W-EXACT>

****************** End of Dependence Graph ******************
