
PROPER  EFFECTS 

pointer alloc_pointer(int v)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   pointer p = malloc(sizeof(int));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: p v
   *p = v;
//             <    is read   >: p
   return p;
}
int main(void)
{
   pointer p1, p2, p3;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   p2 = alloc_pointer(17);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   p3 = alloc_pointer(19);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   
   // 36 17 19
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: p3
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   
   // 36 17 53
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_

   pointer_free(p1);
//             <    is read   >: p2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p2);
//             <    is read   >: p3 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p3);
}
void pointer_add(pointer q1, const pointer q2, const pointer q3)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   *q1 = *q2+*q3;
}
void pointer_free(pointer p)
{
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}
int pointer_get(const pointer p)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   return *p;
}
void pointer_set(pointer p, int v)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: p v
   *p = v;
}

POINTS-TO


// Points To: none

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> &*HEAP*_l_6 , EXACT

   *p = v;

// Points To:
// p -> &*HEAP*_l_6 , EXACT

   return p;
}

// Points To: none

int main(void)
{

// Points To: none

   pointer p1, p2, p3;

// Points To:
// p1 -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p2 = alloc_pointer(17);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p3 = alloc_pointer(19);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   
   // 36 17 19
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   
   // 36 17 53
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT


   pointer_free(p1);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   pointer_free(p2);

// Points To:
// p1 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p2 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT
// p3 -> &*ANY_MODULE*:*ANYWHERE*_b0 , EXACT

   pointer_free(p3);
}

// Points To:
// q1 -> &_q1_1[0] , EXACT
// q2 -> &_q2_2[0] , EXACT
// q3 -> &_q3_3[0] , EXACT

void pointer_add(pointer q1, const pointer q2, const pointer q3)
{

// Points To:
// q1 -> &_q1_1[0] , EXACT
// q2 -> &_q2_2[0] , EXACT
// q3 -> &_q3_3[0] , EXACT

   *q1 = *q2+*q3;
}

// Points To:
// p -> &_p_4[0] , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> &_p_4[0] , EXACT

   free(p);
}

// Points To:
// p -> &_p_5[0] , EXACT

int pointer_get(const pointer p)
{

// Points To:
// p -> &_p_5[0] , EXACT

   return *p;
}

// Points To:
// p -> &_p_6[0] , EXACT

void pointer_set(pointer p, int v)
{

// Points To:
// p -> &_p_6[0] , EXACT

   *p = v;
}

PROPER  EFFECTS WITH POINTS TO

pointer alloc_pointer(int v)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   pointer p = malloc(sizeof(int));
//             <    is read   >: p v
//             <    is written>: *HEAP*_l_6
   *p = v;
//             <    is read   >: p
   return p;
}
int main(void)
{
   pointer p1, p2, p3;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p2 _MALLOC_EFFECTS:_MALLOC_
   p2 = alloc_pointer(17);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p3 _MALLOC_EFFECTS:_MALLOC_
   p3 = alloc_pointer(19);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   
   // 36 17 19
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: p3
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   
   // 36 17 53
   fprintf(stdout, "p1=%d p2=%d p3=%d\n", pointer_get(p1), pointer_get(p2), pointer_get(p3));
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_

   pointer_free(p1);
//             <    is read   >: p2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p2);
//             <    is read   >: p3 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p3);
}
void pointer_add(pointer q1, const pointer q2, const pointer q3)
{
//             <    is read   >: _q2_2[0] _q3_3[0] q1 q2 q3
//             <    is written>: _q1_1[0]
   *q1 = *q2+*q3;
}
void pointer_free(pointer p)
{
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}
int pointer_get(const pointer p)
{
//             <    is read   >: _p_5[0] p
   return *p;
}
void pointer_set(pointer p, int v)
{
//             <    is read   >: p v
//             <    is written>: _p_6[0]
   *p = v;
}

 *********************** Use-Def Chains *********************

	31 --> 32 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	30 --> 32 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	30 --> 31 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	25 --> 32 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p3-R-EXACT>
	25 --> 31 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p2-R-EXACT>
	25 --> 30 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p1-R-EXACT>
	25 --> 28 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout-R-EXACT>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <stdout[0]-W-MAY>
	22 --> 32 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p3-R-EXACT>
	22 --> 31 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p2-R-EXACT>
	22 --> 30 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p1-R-EXACT>
	22 --> 28 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout-R-EXACT>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	22 --> 25 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
		from <p3-R-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	19 --> 28 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY>
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT>
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY>
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <stdout[0]-W-MAY>
	19 --> 25 with conflicts
		from <stdout[0]-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <stdout[0]-R-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <stdout-R-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	19 --> 22 with conflicts
		from <stdout[0]-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <stdout[0]-R-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <stdout-R-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	16 --> 32 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p3-R-EXACT>
	16 --> 31 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p2-R-EXACT>
	16 --> 30 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p1-R-EXACT>
	16 --> 28 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout-R-EXACT>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <stdout[0]-W-MAY>
	16 --> 25 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	16 --> 22 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <p3-R-EXACT>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	16 --> 19 with conflicts
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-W-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout[0]-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <stdout-R-EXACT>
		from <*ANY_MODULE*:*ANYWHERE*-W-MAY> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
		from <*ANY_MODULE*:*ANYWHERE*-R-MAY> to <stdout[0]-W-MAY>
	13 --> 32 with conflicts
		from <p3-W-EXACT> to <p3-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	13 --> 31 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	13 --> 30 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	13 --> 28 with conflicts
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	13 --> 25 with conflicts
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	13 --> 22 with conflicts
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p3-W-EXACT> to <p3-R-EXACT>
	13 --> 19 with conflicts
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	13 --> 16 with conflicts
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p3-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	12 --> 32 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	12 --> 31 with conflicts
		from <p2-W-EXACT> to <p2-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	12 --> 30 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	12 --> 28 with conflicts
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	12 --> 25 with conflicts
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	12 --> 22 with conflicts
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	12 --> 19 with conflicts
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	12 --> 16 with conflicts
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p2-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	12 --> 13 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 32 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 31 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 30 with conflicts
		from <p1-W-EXACT> to <p1-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 28 with conflicts
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	11 --> 25 with conflicts
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	11 --> 22 with conflicts
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
	11 --> 19 with conflicts
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	11 --> 16 with conflicts
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-W-MAY>
		from <p1-W-EXACT> to <*ANY_MODULE*:*ANYWHERE*-R-MAY>
	11 --> 13 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 12 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>

****************** End of Dependence Graph ******************
