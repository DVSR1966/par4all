
PROPER  EFFECTS 

void compute()
{
   int i, j;
//             <    is written>: i

   for(i = 1; i <= 62; i += 1)
//             <    is written>: j
      for(j = 1; j <= 62; j += 1)
//             <    is read   >: i j
//             <    is written>: tab[i][j]
         tab[i][j] = i*j;
}
int main(int argc, char *argv[])
{
   int t;
//             <    is written>: t
   
   
   for(t = 0; t <= 63; t += 1)
//             <may be written>: tab[*][*]
      compute();
   
   
   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

void compute()
{

// Points To: none

   int i, j;

// Points To: none


   for(i = 1; i <= 62; i += 1)

// Points To: none

      for(j = 1; j <= 62; j += 1)

// Points To: none

         tab[i][j] = i*j;
}

// Points To IN:
// argv[*] -> _argv_2[0] , EXACT


// Points To OUT:
// argv[*] -> _argv_2[0] , EXACT

int main(int argc, char *argv[])
{

// Points To:
// argv[*] -> _argv_2[0] , EXACT

   int t;

// Points To:
// argv[*] -> _argv_2[0] , EXACT

   
   
   for(t = 0; t <= 63; t += 1)

// Points To:
// argv[*] -> _argv_2[0] , EXACT

      compute();

// Points To:
// argv[*] -> _argv_2[0] , EXACT

   
   
   return 0;
}

PROPER  EFFECTS WITH POINTS TO

void compute()
{
   int i, j;
//             <    is written>: i

   for(i = 1; i <= 62; i += 1)
//             <    is written>: j
      for(j = 1; j <= 62; j += 1)
//             <    is read   >: i j
//             <    is written>: tab[i][j]
         tab[i][j] = i*j;
}
int main(int argc, char *argv[])
{
   int t;
//             <    is written>: t
   
   
   for(t = 0; t <= 63; t += 1)
//             <may be written>: tab[*][*]
      compute();
   
   
   return 0;
}

 *********************** Use-Def Chains *********************

	29 --> 29 with conflicts
		from <tab[*][*]-W-MAY> to <tab[*][*]-W-MAY>

****************** End of Dependence Graph ******************
