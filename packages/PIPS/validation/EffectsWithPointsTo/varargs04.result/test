
PROPER  EFFECTS 

void f2(int n_ptrs, char *array[31])
{
   int ptr_no;
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//             <may be read   >: stderr[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
      fprintf(stderr, "%s\n", array[ptr_no]);
}
void f3(int n_ptrs, int f4_after, ...)
{
   va_list ap, ap_save;
   char *array[31];
//             <    is written>: ptr_no
   int ptr_no = 0;
//             <    is read   >: n_ptrs
   if (n_ptrs>31)
//             <    is written>: n_ptrs
      n_ptrs = 31;
//             <    is read   >: ap
//             <    is written>: ap
   va_start(ap, f4_after);
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1) {
//             <    is read   >: ap n_ptrs ptr_no
//             <    is written>: ap array[ptr_no]
      array[ptr_no] = va_arg(ap, char *);
//             <    is read   >: f4_after n_ptrs ptr_no
      if (ptr_no==f4_after)
//             <    is read   >: ap ap_save n_ptrs
//             <    is written>: ap_save
         va_copy(ap_save, ap);
   }
//             <may be written>: ap
//             <    is read   >: ap
   va_end(ap);
//             <may be read   >: stderr stderr[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[2]
//             <may be written>: stderr[0] __IO_EFFECTS:LUNS[2]
   f2(n_ptrs, array);
//             <    is read   >: f4_after n_ptrs
//             <    is written>: n_ptrs
   // Now process the saved copy.
   n_ptrs -= f4_after;
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//             <    is read   >: ap_save n_ptrs ptr_no
//             <    is written>: ap_save array[ptr_no]
      array[ptr_no] = va_arg(ap_save, char *);
//             <may be written>: ap_save
//             <    is read   >: ap_save
   va_end(ap_save);
//             <may be read   >: stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
   f4(n_ptrs, array);
}
void f4(int n_ptrs, char *array[31])
{
   int ptr_no;
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      fprintf(stdout, "%s\n", array[ptr_no]);
}
int main()
{
//             <may be read   >: stderr stderr[0] stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[1] 
//                               __IO_EFFECTS:LUNS[2]
//             <may be written>: stderr[0] stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[1] 
//                               __IO_EFFECTS:LUNS[2]
   f3(6, 4, "ch1", "ch2", "ch3", "ch4", "ch5", "ch6");
   return 0;
}

POINTS-TO


// Points To IN:
// array[*] -> _array_2[0] , EXACT


// Points To OUT: none

void f2(int n_ptrs, char *array[31])
{

// Points To:
// array[*] -> _array_2[0] , EXACT

   int ptr_no;

// Points To:
// array[*] -> _array_2[0] , EXACT

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)

// Points To:
// array[*] -> _array_2[0] , EXACT

      fprintf(stderr, "%s\n", array[ptr_no]);
}

// Points To IN: none


// Points To OUT: none

void f3(int n_ptrs, int f4_after, ...)
{

// Points To: none

   va_list ap, ap_save;

// Points To: none

   char *array[31];

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int ptr_no = 0;

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   if (n_ptrs>31)

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      n_ptrs = 31;

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   va_start(ap, f4_after);

// Points To:
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1) {

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

      array[ptr_no] = va_arg(ap, char *);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

      if (ptr_no==f4_after)

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , EXACT

         va_copy(ap_save, ap);
   }

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   va_end(ap);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   f2(n_ptrs, array);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   // Now process the saved copy.
   n_ptrs -= f4_after;

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

      array[ptr_no] = va_arg(ap_save, char *);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   va_end(ap_save);

// Points To:
// array[*] -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// array[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

   f4(n_ptrs, array);
}

// Points To IN:
// array[*] -> _array_2[0] , EXACT


// Points To OUT: none

void f4(int n_ptrs, char *array[31])
{

// Points To:
// array[*] -> _array_2[0] , EXACT

   int ptr_no;

// Points To:
// array[*] -> _array_2[0] , EXACT

   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)

// Points To:
// array[*] -> _array_2[0] , EXACT

      fprintf(stdout, "%s\n", array[ptr_no]);
}

// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   f3(6, 4, "ch1", "ch2", "ch3", "ch4", "ch5", "ch6");

// Points To: none

   return 0;
}

PROPER  EFFECTS WITH POINTS TO

void f2(int n_ptrs, char *array[31])
{
   int ptr_no;
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//             <may be read   >: _array_2[*] stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: array[ptr_no] n_ptrs ptr_no stderr 
//                               __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
      fprintf(stderr, "%s\n", array[ptr_no]);
}
void f3(int n_ptrs, int f4_after, ...)
{
   va_list ap, ap_save;
   char *array[31];
//             <    is written>: ptr_no
   int ptr_no = 0;
//             <    is read   >: n_ptrs
   if (n_ptrs>31)
//             <    is written>: n_ptrs
      n_ptrs = 31;
//             <    is read   >: ap
//             <    is written>: ap
   va_start(ap, f4_after);
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1) {
//             <    is read   >: ap n_ptrs ptr_no
//             <    is written>: ap array[ptr_no]
      array[ptr_no] = va_arg(ap, char *);
//             <    is read   >: f4_after n_ptrs ptr_no
      if (ptr_no==f4_after)
//             <    is read   >: ap ap_save n_ptrs
//             <    is written>: ap_save
         va_copy(ap_save, ap);
   }
//             <may be written>: ap
//             <    is read   >: ap
   va_end(ap);
//             <may be read   >: array[*] stderr stderr[0] 
//                               __IO_EFFECTS:LUNS[2]
//             <may be written>: stderr[0] __IO_EFFECTS:LUNS[2]
//             <    is read   >: n_ptrs
   f2(n_ptrs, array);
//             <    is read   >: f4_after n_ptrs
//             <    is written>: n_ptrs
   // Now process the saved copy.
   n_ptrs -= f4_after;
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//             <    is read   >: ap_save n_ptrs ptr_no
//             <    is written>: ap_save array[ptr_no]
      array[ptr_no] = va_arg(ap_save, char *);
//             <may be written>: ap_save
//             <    is read   >: ap_save
   va_end(ap_save);
//             <may be read   >: array[*] stdout stdout[0] 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: n_ptrs
   f4(n_ptrs, array);
}
void f4(int n_ptrs, char *array[31])
{
   int ptr_no;
//             <    is read   >: n_ptrs
//             <    is written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//             <may be read   >: _array_2[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: array[ptr_no] n_ptrs ptr_no stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      fprintf(stdout, "%s\n", array[ptr_no]);
}
int main()
{
//             <may be read   >: stderr stderr[0] stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[1] 
//                               __IO_EFFECTS:LUNS[2]
//             <may be written>: stderr[0] stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[1] 
//                               __IO_EFFECTS:LUNS[2]
   f3(6, 4, "ch1", "ch2", "ch3", "ch4", "ch5", "ch6");
   return 0;
}

 *********************** Use-Def Chains *********************


****************** End of Dependence Graph ******************
