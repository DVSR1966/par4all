
Parsed code for "extern03!"

// BEGIN BLOCK
/* Check that successive external floating point dependent
   initializations are properly taken into account.

   Transformers are computed "in context". Make sure that the
   precondition is used in the declarations.

   In fact, program_precondition should then be a prerequisite for
   transformer computation, but it would only be useful when a "main"
   is analyzed.
 */

float delta = 1.;
float delta2 = delta+2.;

int main();
// END BLOCK

Cumulated effects for "main"

//               <must be read   >: delta delta2
int main()
{
//               <must be read   >: delta delta2
   // BEGIN BLOCK
//               <must be written>: i
   float i = 0.;
//               <must be written>: k
   int k = 1;
//               <must be read   >: delta i
//               <must be written>: i

   i = i+delta;
//               <must be read   >: delta i
//               <must be written>: i
   i = i+delta;
//               <must be read   >: delta2 i
//               <must be written>: i
   i = i+delta2;
   // END BLOCK
}

Transformers for "main"


//  T() {1.+2.==delta2, 1.==delta}

int main()
{

//  T() {1.+2.==delta2, 1.==delta}

   // BEGIN BLOCK

//  T(i) {0.==i}

   float i = 0.;

//  T(k) {0.==i, 1.+2.==delta2, 1.==delta, k==1}

   int k = 1;

//  T(i) {0.+1.==i, 0.==i#init, 1.+2.==delta2, 1.==delta, k==1}


   i = i+delta;

//  T(i) {0.+1.==i#init, 1.+2.==delta2, 1.==delta, 1.+i#init==i, k==1}

   i = i+delta;

//  T(i) {0.+21.==i#init, 1.+2.==delta2, 1.==delta, delta2+i#init==i,
//    k==1}

   i = i+delta2;
   // END BLOCK
}

Preconditions for "main"


//  P() {1.+2.==delta2, 1.==delta}

int main()
{

//  P() {1.+2.==delta2, 1.==delta}

   // BEGIN BLOCK

//  P() {1.+2.==delta2, 1.==delta}

   float i = 0.;

//  P(i) {0.==i, 1.+2.==delta2, 1.==delta}

   int k = 1;

//  P(i,k) {0.==i, 1.+2.==delta2, 1.==delta, k==1}


   i = i+delta;

//  P(i,k) {0.+1.==i, 1.+2.==delta2, 1.==delta, k==1}

   i = i+delta;

//  P(i,k) {0.+21.==i, 1.+2.==delta2, 1.==delta, k==1}

   i = i+delta2;
   // END BLOCK
}
