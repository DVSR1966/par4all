      PROGRAM SEQ

c     Goal: show different dependence tests and privatization

      PARAMETER (N=10)
      PARAMETER (LX=32, MX=92, NX=42)

      REAL A(N,N), B(N,N), C(N,N,2)

      REAL D(LX, MX, NX)

      READ *, A                                                         0001

      CALL MATMUL(B, A, A, N, N, N)                                     0002

      CALL SMATMUL(B, A, A, N, N, N)                                    0003

      CALL TRANSPOSE(B, N)                                              0004

      CALL FLIPFLOP(C, N, 0.25)                                         0005

      CALL INIT                                                         0006
      CALL TESTINIT                                                     0007
      CALL DIGITALIZE(D, LX, MX, NX)                                    0008

      END

      SUBROUTINE MATMUL(X, Y, Z, L, M, N)
c     compute x := y * z
      REAL X(L,N), Y(L,M), Z(M,N)

      DOALL I = 1, L                                                    0001
         DOALL J = 1, N                                                 0002
            X(I,J) = 0.                                                 0003
         ENDDO
      ENDDO
      DOALL I = 1, L                                                    0001
         DOALL J = 1, N                                                 0002
            DO K = 1, M                                                 0004
               X(I,J) = X(I,J)+Y(I,K)*Z(K,J)                            0005
            ENDDO
         ENDDO
      ENDDO

      END

 **************** Effective Dependence Graph ****************

	05 --> 05 with conflicts
		from <X(I,J)-R-MUST> to <X(I,J)-W-MUST> at levels  3
	05 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-R-MUST> at levels  3
	05 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-W-MUST> at levels  3
	04 --> 04 with conflicts
		from <K-W-MUST> to <K-W-MUST> at levels  1 2
	03 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-R-MUST> at levels  3
	03 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(I,J)-W-MUST> at levels  3
	02 --> 02 with conflicts
		from <J-W-MUST> to <J-W-MUST> at levels  1

****************** End of Dependence Graph ******************

      SUBROUTINE SMATMUL(X, Y, Z, L, M, N)
c     compute x := y * z
      REAL X(L,N), Y(L,M), Z(M,N)

      DO I = 1, L                                                       0001
         DO J = 1, N                                                    0002
            S = 0.                                                      0003
            DO K = 1, M                                                 0004
               S = S+Y(I,K)*Z(K,J)                                      0005
            ENDDO
            X(I,J) = S                                                  0006
         ENDDO
      ENDDO

      END

 **************** Effective Dependence Graph ****************

	06 --> 05 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2
	06 --> 03 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2
	05 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	05 --> 05 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2 3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2 3
	05 --> 03 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  1 2
	05 --> 03 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2
	04 --> 04 with conflicts
		from <K-W-MUST> to <K-W-MUST> at levels  1 2
	03 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  1 2 3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2 3
	03 --> 03 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  1 2
	02 --> 02 with conflicts
		from <J-W-MUST> to <J-W-MUST> at levels  1

****************** End of Dependence Graph ******************

      SUBROUTINE SMATMUL(X, Y, Z, L, M, N)
c     compute x := y * z
      REAL X(L,N), Y(L,M), Z(M,N)

      DOALL I = 1, L                                                    0001
         PRIVATE J
         DOALL J = 1, N                                                 0002
            PRIVATE S,K
            S = 0.                                                      0003
            DO K = 1, M                                                 0004
               S = S+Y(I,K)*Z(K,J)                                      0005
            ENDDO
            X(I,J) = S                                                  0006
         ENDDO
      ENDDO

      END

 **************** Effective Dependence Graph ****************

	05 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	05 --> 05 with conflicts
		from <S-R-MUST> to <S-W-MUST> at levels  3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	05 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  3
	03 --> 06 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-R-MUST> at levels  3
	03 --> 05 with conflicts
		from <S-W-MUST> to <S-W-MUST> at levels  3

****************** End of Dependence Graph ******************

      SUBROUTINE TRANSPOSE(X,N)
      REAL X(N,N)

      DO I = 1, N-1                                                     0001
         DO J = I+1, N                                                  0002
            T = X(I,J)                                                  0003
            X(I,J) = X(J,I)                                             0004
            X(J,I) = T                                                  0005
         ENDDO
      ENDDO

      END

 **************** Effective Dependence Graph ****************

	05 --> 04 with conflicts
		from <X(J,I)-W-MUST> to <X(I,J)-W-MUST> at levels  1
	05 --> 03 with conflicts
		from <T-R-MUST> to <T-W-MUST> at levels  1 2
	05 --> 03 with conflicts
		from <X(J,I)-W-MUST> to <X(I,J)-R-MUST> at levels  1
	04 --> 05 with conflicts
		from <X(J,I)-R-MUST> to <X(J,I)-W-MUST> at levels  3
	04 --> 05 with conflicts
		from <X(I,J)-W-MUST> to <X(J,I)-W-MUST> at levels  1 3
	04 --> 04 with conflicts
		from <X(J,I)-R-MUST> to <X(I,J)-W-MUST> at levels  1
	04 --> 04 with conflicts
		from <X(I,J)-W-MUST> to <X(J,I)-R-MUST> at levels  1
	03 --> 05 with conflicts
		from <X(I,J)-R-MUST> to <X(J,I)-W-MUST> at levels  1 3
	03 --> 05 with conflicts
		from <T-W-MUST> to <T-R-MUST> at levels  1 2 3
	03 --> 04 with conflicts
		from <X(I,J)-R-MUST> to <X(I,J)-W-MUST> at levels  3
	03 --> 03 with conflicts
		from <T-W-MUST> to <T-W-MUST> at levels  1 2
	02 --> 02 with conflicts
		from <J-W-MUST> to <J-W-MUST> at levels  1

****************** End of Dependence Graph ******************

      SUBROUTINE TRANSPOSE(X,N)
      REAL X(N,N)

      DOALL I = 1, N-1                                                  0001
         PRIVATE J
         DOALL J = I+1, N                                               0002
            PRIVATE T
            T = X(I,J)                                                  0003
            X(I,J) = X(J,I)                                             0004
            X(J,I) = T                                                  0005
         ENDDO
      ENDDO

      END

 **************** Effective Dependence Graph ****************

	04 --> 05 with conflicts
		from <X(J,I)-R-MUST> to <X(J,I)-W-MUST> at levels  3
	03 --> 05 with conflicts
		from <T-W-MUST> to <T-R-MUST> at levels  3
	03 --> 04 with conflicts
		from <X(I,J)-R-MUST> to <X(I,J)-W-MUST> at levels  3

****************** End of Dependence Graph ******************

      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

      NEW = 1                                                           0001

10    CONTINUE                                                          0002
      OLD = NEW                                                         0003
      NEW = 3-OLD                                                       0004

      DO J = 2, N-1                                                     0005
         DO I = 2, N-1                                                  0006
            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END

      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

      NEW = 1                                                           0001

10    CONTINUE                                                          0002
      OLD = NEW                                                         0003
      NEW = 3-OLD                                                       0004

      DO J = 2, N-1                                                     0005
         DO I = 2, N-1                                                  0006
            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END

C  P() {}


      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

C  P() {}


      NEW = 1                                                           0001

C  P(I,J,NEW,OLD) {}


10    CONTINUE                                                          0002

C  P(I,J,NEW,OLD) {}

      OLD = NEW                                                         0003

C  P(I,J,NEW,OLD) {NEW==OLD}

      NEW = 3-OLD                                                       0004

C  P(I,J,NEW,OLD) {NEW+OLD==3}


      DO J = 2, N-1                                                     0005

C  P(I,J,NEW,OLD) {NEW+OLD==3, 2<=J, J+1<=N}

         DO I = 2, N-1                                                  0006

C  P(I,J,NEW,OLD) {NEW+OLD==3, 2<=I, I+1<=N, 2<=J, J+1<=N}

            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

C  P(I,J,NEW,OLD) {NEW+OLD==3, N<=J}


      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END

      SUBROUTINE FLIPFLOP(X,N,C)
      INTEGER N
      REAL X(N,N,2), C

      INTEGER I, J, NEW, OLD, T

      NEW = 1                                                           0001

10    CONTINUE                                                          0002
      OLD = NEW                                                         0003
      NEW = 3-OLD                                                       0004

      DOALL J = 2, N-1                                                  0005
         DOALL I = 2, N-1                                               0006
            X(I,J,NEW) = C*X(I,J,OLD)+(1-C)*(X(I+1,J,OLD)+X(I-1,J,OLD   0007
     &      )+X(I,J-1,OLD)+X(I,J+1,OLD))                                0007
         ENDDO
      ENDDO

      IF (ABS(X(5,5,NEW)-X(5,5,OLD)).GT.0.01) GOTO 10                   0008

      END

      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

      MS = MM1/2                                                        0001
      MM = MP1/2                                                        0002

      DO K = 2, N-1                                                     0003
         DO J = 2, MM                                                   0004
            JJ = J+MS                                                   0005
            X(J,K,1) = X(JJ,K,2)                                        0006
            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END

      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

      MS = MM1/2                                                        0001
      MM = MP1/2                                                        0002

      DOALL K = 2, N-1                                                  0003
         PRIVATE J
         DO J = 2, MM                                                   0004
            JJ = J+MS                                                   0005
            X(J,K,1) = X(JJ,K,2)                                        0006
            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END

C  P() {LX==32, MM1==MP1-2, MX==92, NX==42, 1<=MM1, MM1<=91}


      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

C  P() {LX==32, MM1==MP1-2, MX==92, NX==42, 1<=MM1, MM1<=91}


      MS = MM1/2                                                        0001

C  P(MS) {LX==32, MM1==MP1-2, MX==92, NX==42, 1<=MM1, MM1<=91,
C    2MS<=MM1, MM1<=2MS+1}

      MM = MP1/2                                                        0002

C  P(MM,MS) {LX==32, MM1==MP1-2, MX==92, NX==42, MM1+1<=2MM,
C    2MM<=MM1+2, 1<=MM1, MM1<=91, 2MS<=MM1, MM1<=2MS+1}


      DO K = 2, N-1                                                     0003

C  P(J,JJ,K,MM,MS) {LX==32, MM1==MP1-2, MX==92, NX==42, 2<=K, K+1<=N,
C    MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1, MM1<=91, 2MS<=MM1, MM1<=2MS+1}

         DO J = 2, MM                                                   0004

C  P(J,JJ,K,MM,MS) {LX==32, MM1==MP1-2, MX==92, NX==42, 2<=J, J<=MM,
C    2<=K, K+1<=N, MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1, MM1<=91, 2MS<=MM1,
C    MM1<=2MS+1}

            JJ = J+MS                                                   0005

C  P(J,JJ,K,MM,MS) {J+MS==JJ, LX==32, MM1==MP1-2, MX==92, NX==42,
C    2<=J, J<=MM, 2<=K, K+1<=N, MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1,
C    MM1<=91, 2MS<=MM1, MM1<=2MS+1}

            X(J,K,1) = X(JJ,K,2)                                        0006

C  P(J,JJ,K,MM,MS) {J+MS==JJ, LX==32, MM1==MP1-2, MX==92, NX==42,
C    2<=J, J<=MM, 2<=K, K+1<=N, MM1+1<=2MM, 2MM<=MM1+2, 1<=MM1,
C    MM1<=91, 2MS<=MM1, MM1<=2MS+1}

            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END

      SUBROUTINE DIGITALIZE(X, LX, MX, NX)
      REAL X(MX,NX,LX)

      COMMON /C2/ M,MM1,MP1

      MS = MM1/2                                                        0001
      MM = MP1/2                                                        0002

      DOALL K = 2, N-1                                                  0003
         PRIVATE J
         DOALL J = 2, MM                                                0004
            PRIVATE JJ
            JJ = J+MS                                                   0005
            X(J,K,1) = X(JJ,K,2)                                        0006
            X(JJ,K,1) = X(J,K,2)                                        0007
         ENDDO
      ENDDO

      END
