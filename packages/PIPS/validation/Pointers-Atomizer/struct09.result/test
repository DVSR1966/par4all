atomized code
int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   //PIPS generated variable
   int I_0;
   
   // just to create a block for prettyprinting
   if (1) {
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
      for(i = 0; i <= 9; i += 1)
         (a.p)[i] = i;
      
      // definition of b, also modifies a
      b = a;
      printf("\nstruct with pointer copy : \n");
      for(i = 0; i <= 9; i += 1) {
         (b.p)[i] = i*10;
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
         (c.array)[i] = i;
      
      // definition of d, does not modify c
      d = c;
      printf("\nstruct with array copy : \n");
      for(i = 0; i <= 9; i += 1) {
         (d.array)[i] = i*10;

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
         I_0 = 10*sizeof(int);
         (e.champ)[i].p = malloc(I_0);
         for(j = 0; j <= 9; j += 1)
            ((e.champ)[i].p)[j] = i+j;
      }
      
      // definition of f, also modifies e
      f = e;
      printf("\nstruct with array of structs with pointer copy : \n");
      for(i = 0; i <= 4; i += 1)
         for(j = 0; j <= 9; j += 1) {
            ((f.champ)[i].p)[j] = i*j;
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
         for(j = 0; j <= 9; j += 1)
            ((g.champ)[i].array)[j] = i+j;
      
      // definition of h, does not modify g
      h = g;
      printf("\nstruct with array of structs with array copy : \n");
      for(i = 0; i <= 4; i += 1)
         for(j = 0; j <= 9; j += 1) {
            ((h.champ)[i].array)[j] = i*j;
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}
