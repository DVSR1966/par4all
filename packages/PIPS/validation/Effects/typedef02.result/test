void compute()
{
   int i, j;
//               <must be written>: i

   for(i = 1; i <= 62; i += 1)
//               <must be written>: j
      for(j = 1; j <= 62; j += 1) {
//               <must be read   >: i j
//               <must be written>: TOP-LEVEL:tab1[i][j]
         tab1[i][j] = i*j;
//               <must be read   >: i j
//               <must be written>: TOP-LEVEL:tab2[i][j]
         tab2[i][j] = i*j;
//               <must be read   >: TOP-LEVEL:tab3 i j
//               <must be written>: TOP-LEVEL:tab3[i][j]
         tab3[i][j] = i*j;
      }
}
//               <may be read    >: TOP-LEVEL:tab3
//               <may be written >: TOP-LEVEL:tab1[*][*] 
//                                  TOP-LEVEL:tab2[*][*] 
//                                  TOP-LEVEL:tab3[*][*]
void compute()
{
   int i, j;
//               <may be read    >: TOP-LEVEL:tab3 i j
//               <may be written >: TOP-LEVEL:tab1[*][*] 
//                                  TOP-LEVEL:tab2[*][*] 
//                                  TOP-LEVEL:tab3[*][*] j
//               <must be written>: i

   for(i = 1; i <= 62; i += 1)
//               <may be read    >: TOP-LEVEL:tab3 i j
//               <may be written >: TOP-LEVEL:tab1[*][*] 
//                                  TOP-LEVEL:tab2[*][*] 
//                                  TOP-LEVEL:tab3[*][*]
//               <must be written>: j
      for(j = 1; j <= 62; j += 1) {
//               <may be written >: TOP-LEVEL:tab1[*][*]
//               <must be read   >: i j
         tab1[i][j] = i*j;
//               <may be written >: TOP-LEVEL:tab2[*][*]
//               <must be read   >: i j
         tab2[i][j] = i*j;
//               <may be written >: TOP-LEVEL:tab3[*][*]
//               <must be read   >: TOP-LEVEL:tab3 i j
         tab3[i][j] = i*j;
      }
}

//  <TOP-LEVEL:tab1[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=62, 1<=PHI2,
//    PHI2<=62}>
//  <TOP-LEVEL:tab2[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=62, 1<=PHI2,
//    PHI2<=62}>
//  <TOP-LEVEL:tab3-R-EXACT-{}>
//  <TOP-LEVEL:tab3[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=62, 1<=PHI2,
//    PHI2<=62}>

void compute()
{
   int i, j;

//  <TOP-LEVEL:tab1[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=62, 1<=PHI2,
//    PHI2<=62}>
//  <TOP-LEVEL:tab2[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=62, 1<=PHI2,
//    PHI2<=62}>
//  <TOP-LEVEL:tab3-R-EXACT-{}>
//  <TOP-LEVEL:tab3[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=62, 1<=PHI2,
//    PHI2<=62}>


   for(i = 1; i <= 62; i += 1)

//  <TOP-LEVEL:tab1[PHI1][PHI2]-W-EXACT-{PHI1==i, 1<=PHI2, PHI2<=62,
//    1<=i, i<=62}>
//  <TOP-LEVEL:tab2[PHI1][PHI2]-W-EXACT-{PHI1==i, 1<=PHI2, PHI2<=62,
//    1<=i, i<=62}>
//  <TOP-LEVEL:tab3-R-EXACT-{}>
//  <TOP-LEVEL:tab3[PHI1][PHI2]-W-EXACT-{PHI1==i, 1<=PHI2, PHI2<=62,
//    1<=i, i<=62}>

      for(j = 1; j <= 62; j += 1) {

//  <TOP-LEVEL:tab1[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 1<=i,
//    i<=62, 1<=j, j<=62}>

         tab1[i][j] = i*j;

//  <TOP-LEVEL:tab2[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 1<=i,
//    i<=62, 1<=j, j<=62}>

         tab2[i][j] = i*j;

//  <TOP-LEVEL:tab3-R-EXACT-{}>
//  <TOP-LEVEL:tab3[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 1<=i,
//    i<=62, 1<=j, j<=62}>

         tab3[i][j] = i*j;
      }
}
