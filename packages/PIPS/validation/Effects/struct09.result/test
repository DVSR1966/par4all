
Proper pointer effects for "main"

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ a[.p]
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//               <must be written>: i
      for(i = 0; i <= 9; i += 1)
//               <must be read   >: a[.p] i
//               <must be written>: a[.p][i]
         (a.p)[i] = i;
//               <must be read   >: a[.p]
//               <must be written>: b[.p]
      
      // definition of b, also modifies a
      b = a;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <must be read   >: b[.p] i
//               <must be written>: b[.p][i]
         (b.p)[i] = i*10;
//               <must be read   >: __IO_EFFECTS:LUNS[1] a[.p] 
//                                  a[.p][i] b[.p] b[.p][i] i
//               <must be written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//               <must be written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//               <must be read   >: i
//               <must be written>: c[.array][i]
         (c.array)[i] = i;
//               <may be read    >: c[.array][*]
//               <may be written >: d[.array][*]
      
      // definition of d, does not modify c
      d = c;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <must be read   >: i
//               <must be written>: d[.array][i]
         (d.array)[i] = i*10;
//               <must be read   >: __IO_EFFECTS:LUNS[1] c[.array][i] 
//                                  d[.array][i] i
//               <must be written>: __IO_EFFECTS:LUNS[1]

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//               <must be written>: i
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_ i
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ 
//                                  e[.champ][i][.p]
         (e.champ)[i].p = malloc(10*sizeof(int));
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <must be read   >: e[.champ][i][.p] i j
//               <must be written>: e[.champ][i][.p][j]
            ((e.champ)[i].p)[j] = i+j;
      }
//               <may be read    >: e[.champ][*][.p]
//               <may be written >: f[.champ][*][.p]
      
      // definition of f, also modifies e
      f = e;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <must be read   >: f[.champ][i][.p] i j
//               <must be written>: f[.champ][i][.p][j]
            ((f.champ)[i].p)[j] = i*j;
//               <must be read   >: __IO_EFFECTS:LUNS[1] 
//                                  e[.champ][i][.p] 
//                                  e[.champ][i][.p][j] 
//                                  f[.champ][i][.p] 
//                                  f[.champ][i][.p][j] i j
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//               <must be written>: i
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <must be read   >: i j
//               <must be written>: g[.champ][i][.array][j]
            ((g.champ)[i].array)[j] = i+j;
//               <may be read    >: g[.champ][*][.array][*]
//               <may be written >: h[.champ][*][.array][*]
      
      // definition of h, does not modify g
      h = g;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <must be read   >: i j
//               <must be written>: h[.champ][i][.array][j]
            ((h.champ)[i].array)[j] = i*j;
//               <must be read   >: __IO_EFFECTS:LUNS[1] 
//                                  g[.champ][i][.array][j] 
//                                  h[.champ][i][.array][j] i j
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

Proper effects for "struct09"

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ a[.p]
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//               <must be written>: i
      for(i = 0; i <= 9; i += 1)
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: a[.p] i
         (a.p)[i] = i;
//               <must be read   >: a[.p]
//               <must be written>: b[.p]
      
      // definition of b, also modifies a
      b = a;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: b[.p] i
         (b.p)[i] = i*10;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//               <must be written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//               <must be read   >: i
//               <must be written>: c[.array][i]
         (c.array)[i] = i;
//               <may be read    >: c[.array][*]
//               <may be written >: d[.array][*]
      
      // definition of d, does not modify c
      d = c;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <must be read   >: i
//               <must be written>: d[.array][i]
         (d.array)[i] = i*10;
//               <must be read   >: __IO_EFFECTS:LUNS[1] c[.array][i] 
//                                  d[.array][i] i
//               <must be written>: __IO_EFFECTS:LUNS[1]

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//               <must be written>: i
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_ i
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
            ((e.champ)[i].p)[j] = i+j;
      }
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
      
      // definition of f, also modifies e
      f = e;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
            ((f.champ)[i].p)[j] = i*j;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//               <must be written>: i
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <must be read   >: i j
//               <must be written>: g[.champ][i][.array][j]
            ((g.champ)[i].array)[j] = i+j;
//               <may be read    >: g[.champ][*][.array][*]
//               <may be written >: h[.champ][*][.array][*]
      
      // definition of h, does not modify g
      h = g;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <must be read   >: i j
//               <must be written>: h[.champ][i][.array][j]
            ((h.champ)[i].array)[j] = i*j;
//               <must be read   >: __IO_EFFECTS:LUNS[1] 
//                                  g[.champ][i][.array][j] 
//                                  h[.champ][i][.array][j] i j
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

Cumulated effects for "struct09"

//               <may be read    >: *ANY_MODULE*:*ANYWHERE* 
//                                  _MALLOC_EFFECTS:_MALLOC_ 
//                                  __IO_EFFECTS:LUNS[1]
//               <may be written >: *ANY_MODULE*:*ANYWHERE* 
//                                  _MALLOC_EFFECTS:_MALLOC_ 
//                                  __IO_EFFECTS:LUNS[1]
int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE* 
//                                  _MALLOC_EFFECTS:_MALLOC_ 
//                                  __IO_EFFECTS:LUNS[1]
//               <may be written >: *ANY_MODULE*:*ANYWHERE* 
//                                  _MALLOC_EFFECTS:_MALLOC_ 
//                                  __IO_EFFECTS:LUNS[1]
   
   // just to create a block for prettyprinting
   if (1) {
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ a[.p]
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//               <may be read    >: a[.p] i
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
      for(i = 0; i <= 9; i += 1)
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: a[.p] i
         (a.p)[i] = i;
//               <must be read   >: a[.p]
//               <must be written>: b[.p]
      
      // definition of b, also modifies a
      b = a;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//               <may be read    >: *ANY_MODULE*:*ANYWHERE* 
//                                  __IO_EFFECTS:LUNS[1]
//               <may be written >: *ANY_MODULE*:*ANYWHERE* 
//                                  __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 9; i += 1) {
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: b[.p] i
         (b.p)[i] = i*10;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//               <may be read    >: i
//               <may be written >: c[.array][*]
//               <must be written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//               <may be written >: c[.array][*]
//               <must be read   >: i
         (c.array)[i] = i;
//               <may be read    >: c[.array][*]
//               <may be written >: d[.array][*]
      
      // definition of d, does not modify c
      d = c;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//               <may be read    >: __IO_EFFECTS:LUNS[1] c[.array][*] 
//                                  d[.array][*] i
//               <may be written >: __IO_EFFECTS:LUNS[1] d[.array][*]
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <may be written >: d[.array][*]
//               <must be read   >: i
         (d.array)[i] = i*10;
//               <may be read    >: c[.array][*] d[.array][*]
//               <must be read   >: __IO_EFFECTS:LUNS[1] i
//               <must be written>: __IO_EFFECTS:LUNS[1]

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//               <may be read    >: *ANY_MODULE*:*ANYWHERE* 
//                                  _MALLOC_EFFECTS:_MALLOC_
//               <may be written >: *ANY_MODULE*:*ANYWHERE* 
//                                  _MALLOC_EFFECTS:_MALLOC_
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_ i
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
         for(j = 0; j <= 9; j += 1)
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
            ((e.champ)[i].p)[j] = i+j;
      }
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
      
      // definition of f, also modifies e
      f = e;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//               <may be read    >: *ANY_MODULE*:*ANYWHERE* 
//                                  __IO_EFFECTS:LUNS[1]
//               <may be written >: *ANY_MODULE*:*ANYWHERE* 
//                                  __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 4; i += 1)
//               <may be read    >: *ANY_MODULE*:*ANYWHERE* 
//                                  __IO_EFFECTS:LUNS[1]
//               <may be written >: *ANY_MODULE*:*ANYWHERE* 
//                                  __IO_EFFECTS:LUNS[1]
         for(j = 0; j <= 9; j += 1) {
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
            ((f.champ)[i].p)[j] = i*j;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//               <may be read    >: i j
//               <may be written >: g[.champ][*][.array][*] j
//               <must be written>: i
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//               <may be read    >: i j
//               <may be written >: g[.champ][*][.array][*]
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <may be written >: g[.champ][*][.array][*]
//               <must be read   >: i j
            ((g.champ)[i].array)[j] = i+j;
//               <may be read    >: g[.champ][*][.array][*]
//               <may be written >: h[.champ][*][.array][*]
      
      // definition of h, does not modify g
      h = g;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//               <may be read    >: __IO_EFFECTS:LUNS[1] 
//                                  g[.champ][*][.array][*] 
//                                  h[.champ][*][.array][*] i j
//               <may be written >: __IO_EFFECTS:LUNS[1] 
//                                  h[.champ][*][.array][*] j
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <may be read    >: __IO_EFFECTS:LUNS[1] 
//                                  g[.champ][*][.array][*] 
//                                  h[.champ][*][.array][*] i j
//               <may be written >: __IO_EFFECTS:LUNS[1] 
//                                  h[.champ][*][.array][*]
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <may be written >: h[.champ][*][.array][*]
//               <must be read   >: i j
            ((h.champ)[i].array)[j] = i*j;
//               <may be read    >: g[.champ][*][.array][*] 
//                                  h[.champ][*][.array][*]
//               <must be read   >: __IO_EFFECTS:LUNS[1] i j
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

Printed files with regions


//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

   
   // just to create a block for prettyprinting
   if (1) {

//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <a[.p]-W-EXACT-{}>

      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));

//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <a[.p]-R-EXACT-{}>
//  <i-R-EXACT-{}>

      for(i = 0; i <= 9; i += 1)

//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <a[.p]-R-EXACT-{0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (a.p)[i] = i;

//  <a[.p]-R-EXACT-{i==10}>
//  <b[.p]-W-EXACT-{i==10}>

      
      // definition of b, also modifies a
      b = a;

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      printf("\nstruct with pointer copy : \n");

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= 9; i += 1) {

//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <b[.p]-R-EXACT-{0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (b.p)[i] = i*10;

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }

//  <c[.array][PHI2]-W-EXACT-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>

      
      // definition of c
      for(i = 0; i <= 9; i += 1)

//  <c[.array][PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (c.array)[i] = i;

//  <c[.array][PHI2]-R-MAY-{i==10}>
//  <d[.array][PHI2]-W-MAY-{i==10}>

      
      // definition of d, does not modify c
      d = c;

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      printf("\nstruct with array copy : \n");

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <c[.array][PHI2]-R-EXACT-{0<=PHI2, PHI2<=9}>
//  <d[.array][PHI2]-R-EXACT-{0<=PHI2, PHI2<=9}>
//  <d[.array][PHI2]-W-EXACT-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>

      for(i = 0; i <= 9; i += 1) {

//  <d[.array][PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (d.array)[i] = i*10;

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <c[.array][PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <d[.array][PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>


         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      
      // definition of e
      for(i = 0; i <= 4; i += 1) {

//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <i-R-EXACT-{}>

         (e.champ)[i].p = malloc(10*sizeof(int));

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

         for(j = 0; j <= 9; j += 1)

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

            ((e.champ)[i].p)[j] = i+j;
      }

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

      
      // definition of f, also modifies e
      f = e;

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      printf("\nstruct with array of structs with pointer copy : \n");

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= 4; i += 1)

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

         for(j = 0; j <= 9; j += 1) {

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

            ((f.champ)[i].p)[j] = i*j;

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }

//  <g[.champ][PHI2][.array][PHI4]-W-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>

      
      // definition of g
      for(i = 0; i <= 4; i += 1)

//  <g[.champ][PHI2][.array][PHI4]-W-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>

         for(j = 0; j <= 9; j += 1)

//  <g[.champ][PHI2][.array][PHI4]-W-EXACT-{PHI2==i, PHI4==j, 0<=i,
//    i<=4, 0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>

            ((g.champ)[i].array)[j] = i+j;

//  <g[.champ][PHI2][.array][PHI4]-R-MAY-{i==5, j==10}>
//  <h[.champ][PHI2][.array][PHI4]-W-MAY-{i==5, j==10}>

      
      // definition of h, does not modify g
      h = g;

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      printf("\nstruct with array of structs with array copy : \n");

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <g[.champ][PHI2][.array][PHI4]-R-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <h[.champ][PHI2][.array][PHI4]-R-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <h[.champ][PHI2][.array][PHI4]-W-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>

      for(i = 0; i <= 4; i += 1)

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <g[.champ][PHI2][.array][PHI4]-R-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <h[.champ][PHI2][.array][PHI4]-R-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <h[.champ][PHI2][.array][PHI4]-W-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>

         for(j = 0; j <= 9; j += 1) {

//  <h[.champ][PHI2][.array][PHI4]-W-EXACT-{PHI2==i, PHI4==j, 0<=i,
//    i<=4, 0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>

            ((h.champ)[i].array)[j] = i*j;

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <g[.champ][PHI2][.array][PHI4]-R-EXACT-{PHI2==i, PHI4==j, 0<=i,
//    i<=4, 0<=j, j<=9}>
//  <h[.champ][PHI2][.array][PHI4]-R-EXACT-{PHI2==i, PHI4==j, 0<=i,
//    i<=4, 0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>

            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}
