byte * * LoadPGM_bmatrix(char *filename, int *nrl, int *nrh, int *ncl, int *nch)
{
   int height, width, gris;
   byte **m;
   FILE *file;
   char *buffer;
   int i;

   buffer = (char *) calloc(80, sizeof(char));
   file = fopen(filename, "rb");
   if (file==(void *) 0) 
      nrerror("ouverture du fichier impossible\n");
   
   // The code synthesis fails because of type_supporting_entities() which explodes the stack
   //readitem(file, buffer);
   if (strcmp(buffer, "P5")!=0) 
      nrerror("entete du fichier %s invalide\n");
   
   //width  = atoi(readitem(file, buffer));
   //height = atoi(readitem(file, buffer));
   //gris   = atoi(readitem(file, buffer));
   
   *nrl = 0;
   *nrh = height-1;
   *ncl = 0;
   *nch = width-1;
   m = bmatrix(*nrl, *nrh, *ncl, *nch);

   for(i = 0; i <= height-1; i += 1)
      ReadPGMrow(file, width, m[i]);

   fclose(file);
   free(buffer);

   return m;
}
void ReadPGMrow(FILE *file, int width, byte *line)
{
   fread(&line[0], sizeof(byte), width, file);
}

Proper effects for "ReadPGMrow"

void ReadPGMrow(FILE *file, int width, byte *line)
{
//               <may be read    >: file[0] __IO_EFFECTS:LUNS[*]
//               <may be written >: file[0] line[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: file width
   fread(&line[0], sizeof(byte), width, file);
}

Cumulated effects for "ReadPGMrow"

//               <may be read    >: file[0] __IO_EFFECTS:LUNS[*]
//               <may be written >: file[0] line[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: file width
void ReadPGMrow(FILE *file, int width, byte *line)
{
//               <may be read    >: file[0] __IO_EFFECTS:LUNS[*]
//               <may be written >: file[0] line[*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: file width
   fread(&line[0], sizeof(byte), width, file);
}

Proper effects for "LoadPGM_bmatrix"

byte * * LoadPGM_bmatrix(char *filename, int *nrl, int *nrh, int *ncl, int *nch)
{
   int height, width, gris;
   byte **m;
   FILE *file;
   char *buffer;
   int i;
//               <must be written>: buffer

   buffer = (char *) calloc(80, sizeof(char));
//               <may be read    >: filename[*] __IO_EFFECTS:LUNS[*]
//               <may be written >: __IO_EFFECTS:LUNS[*]
//               <must be read   >: filename
//               <must be written>: file
   file = fopen(filename, "rb");
//               <must be read   >: file
   if (file==(void *) 0) 
      nrerror("ouverture du fichier impossible\n");
//               <must be read   >: buffer
   
   // The code synthesis fails because of type_supporting_entities() which explodes the stack
   //readitem(file, buffer);
   if (strcmp(buffer, "P5")!=0) 
      nrerror("entete du fichier %s invalide\n");
//               <must be read   >: nrl
//               <must be written>: nrl[0]
   
   //width  = atoi(readitem(file, buffer));
   //height = atoi(readitem(file, buffer));
   //gris   = atoi(readitem(file, buffer));
   
   *nrl = 0;
//               <must be read   >: height nrh
//               <must be written>: nrh[0]
   *nrh = height-1;
//               <must be read   >: ncl
//               <must be written>: ncl[0]
   *ncl = 0;
//               <must be read   >: nch width
//               <must be written>: nch[0]
   *nch = width-1;
//               <must be read   >: nch nch[0] ncl ncl[0] nrh nrh[0] 
//                                  nrl nrl[0]
//               <must be written>: m
   m = bmatrix(*nrl, *nrh, *ncl, *nch);
//               <must be read   >: height
//               <must be written>: i

   for(i = 0; i <= height-1; i += 1)
//               <may be read    >: __IO_EFFECTS:LUNS[*]
//               <may be written >: m[i][*] __IO_EFFECTS:LUNS[*]
//               <must be read   >: file file[0] height i m m[i] width
//               <must be written>: file[0]
      ReadPGMrow(file, width, m[i]);
//               <may be read    >: file[0] __IO_EFFECTS:LUNS[*]
//               <may be written >: file[0] __IO_EFFECTS:LUNS[*]
//               <must be read   >: file

   fclose(file);
//               <must be read   >: buffer _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
   free(buffer);
//               <must be read   >: m

   return m;
}

Cumulated effects for "LoadPGM_bmatrix"

//               <may be read    >: filename[*] __IO_EFFECTS:LUNS[*]
//               <may be written >: __IO_EFFECTS:LUNS[*]
//               <must be read   >: filename nch nch[0] ncl ncl[0] nrh
//                                  nrh[0] nrl nrl[0] 
//                                  _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: nch[0] ncl[0] nrh[0] nrl[0] 
//                                  _MALLOC_EFFECTS:_MALLOC_
byte * * LoadPGM_bmatrix(char *filename, int *nrl, int *nrh, int *ncl, int *nch)
{
   int height, width, gris;
   byte **m;
   FILE *file;
   char *buffer;
   int i;
//               <must be written>: buffer

   buffer = (char *) calloc(80, sizeof(char));
//               <may be read    >: filename[*] __IO_EFFECTS:LUNS[*]
//               <may be written >: __IO_EFFECTS:LUNS[*]
//               <must be read   >: filename
//               <must be written>: file
   file = fopen(filename, "rb");
//               <must be read   >: file
   if (file==(void *) 0) 
      nrerror("ouverture du fichier impossible\n");
//               <must be read   >: buffer
   
   // The code synthesis fails because of type_supporting_entities() which explodes the stack
   //readitem(file, buffer);
   if (strcmp(buffer, "P5")!=0) 
      nrerror("entete du fichier %s invalide\n");
//               <must be read   >: nrl
//               <must be written>: nrl[0]
   
   //width  = atoi(readitem(file, buffer));
   //height = atoi(readitem(file, buffer));
   //gris   = atoi(readitem(file, buffer));
   
   *nrl = 0;
//               <must be read   >: height nrh
//               <must be written>: nrh[0]
   *nrh = height-1;
//               <must be read   >: ncl
//               <must be written>: ncl[0]
   *ncl = 0;
//               <must be read   >: nch width
//               <must be written>: nch[0]
   *nch = width-1;
//               <must be read   >: nch nch[0] ncl ncl[0] nrh nrh[0] 
//                                  nrl nrl[0]
//               <must be written>: m
   m = bmatrix(*nrl, *nrh, *ncl, *nch);
//               <may be read    >: file file[0] i m m[*] width 
//                                  __IO_EFFECTS:LUNS[*]
//               <may be written >: file[0] m[*][*] 
//                                  __IO_EFFECTS:LUNS[*]
//               <must be read   >: height
//               <must be written>: i

   for(i = 0; i <= height-1; i += 1)
//               <may be read    >: m[*] __IO_EFFECTS:LUNS[*]
//               <may be written >: m[*][*] __IO_EFFECTS:LUNS[*]
//               <must be read   >: file file[0] height i m width
//               <must be written>: file[0]
      ReadPGMrow(file, width, m[i]);
//               <may be read    >: file[0] __IO_EFFECTS:LUNS[*]
//               <may be written >: file[0] __IO_EFFECTS:LUNS[*]
//               <must be read   >: file

   fclose(file);
//               <must be read   >: buffer _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
   free(buffer);
//               <must be read   >: m

   return m;
}
