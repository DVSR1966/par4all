
PROPER  EFFECTS

void list_free(list l)
{
//             <    is read   >: l
//             <    is written>: n p
   list n = l, p = l;
//             <    is read   >: n nil
   while (n!=nil) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: n
      n = n->next;
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      free(p);
//             <    is read   >: n
//             <    is written>: p
      p = n;
   }
   return;
}

POINTS-TO


// Points To IN:
// _l_1[0] -> _l_1_1[0] , EXACT
// _l_1_1[0] -> _l_1_1_1[0] , EXACT
// _l_1_1_1[0] -> _l_1_1_1_1[0] , EXACT
// _l_1_1_1_1[0] -> _l_1_1_1_1_1[0] , EXACT
// _l_1_1_1_1_1[0] -> _l_1_1_1_1_1_1[0] , EXACT
// _l_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1[0] , EXACT
// _l_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1[0] , EXACT
// _l_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1[0] , EXACT
// _l_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1[0] , EXACT
// _l_1_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , EXACT


// Points To OUT:
// _l_1[0] -> _l_1_1[0] , MAY
// _l_1_1[0] -> _l_1_1_1[0] , MAY
// _l_1_1_1[0] -> _l_1_1_1_1[0] , MAY
// _l_1_1_1_1[0] -> _l_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1[0] -> _l_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY

void list_free(list l)
{

// Points To:
// l -> _l_1[0] , EXACT

   list n = l, p = l;

// Points To:
// l -> _l_1[0] , EXACT
// n -> _l_1[0] , EXACT
// p -> _l_1[0] , EXACT

   while (n!=nil) {

// Points To:
// _l_1[0] -> _l_1_1[0] , MAY
// _l_1_1[0] -> _l_1_1_1[0] , MAY
// _l_1_1_1[0] -> _l_1_1_1_1[0] , MAY
// _l_1_1_1_1[0] -> _l_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1[0] -> _l_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// l -> _l_1[0] , EXACT
// n -> _l_1[0] , MAY
// n -> _l_1_1[0] , MAY
// n -> _l_1_1_1[0] , MAY
// n -> _l_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1[0] , MAY
// p -> _l_1_1[0] , MAY
// p -> _l_1_1_1[0] , MAY
// p -> _l_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY

      n = n->next;

// Points To:
// _l_1[0] -> _l_1_1[0] , MAY
// _l_1_1[0] -> _l_1_1_1[0] , MAY
// _l_1_1_1[0] -> _l_1_1_1_1[0] , MAY
// _l_1_1_1_1[0] -> _l_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1[0] -> _l_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY
// l -> _l_1[0] , EXACT
// n -> _l_1_1[0] , MAY
// n -> _l_1_1_1[0] , MAY
// n -> _l_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1[0] , MAY
// p -> _l_1_1[0] , MAY
// p -> _l_1_1_1[0] , MAY
// p -> _l_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY

      free(p);

// Points To:
// _l_1[0] -> _l_1_1[0] , MAY
// _l_1_1[0] -> _l_1_1_1[0] , MAY
// _l_1_1_1[0] -> _l_1_1_1_1[0] , MAY
// _l_1_1_1_1[0] -> _l_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1[0] -> _l_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY
// l -> _l_1[0] , EXACT
// n -> _l_1_1[0] , MAY
// n -> _l_1_1_1[0] , MAY
// n -> _l_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> *ANY_MODULE*:*NOWHERE* , EXACT

      p = n;
   }

// Points To:
// _l_1[0] -> _l_1_1[0] , MAY
// _l_1_1[0] -> _l_1_1_1[0] , MAY
// _l_1_1_1[0] -> _l_1_1_1_1[0] , MAY
// _l_1_1_1_1[0] -> _l_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1[0] -> _l_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// _l_1_1_1_1_1_1_1_1_1_1[0] -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY
// l -> _l_1[0] , EXACT
// n -> _l_1[0] , MAY
// n -> _l_1_1[0] , MAY
// n -> _l_1_1_1[0] , MAY
// n -> _l_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// n -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1[0] , MAY
// p -> _l_1_1[0] , MAY
// p -> _l_1_1_1[0] , MAY
// p -> _l_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1_1[0] , MAY
// p -> _l_1_1_1_1_1_1_1_1_1_1_1[0] , MAY

   return;
}
