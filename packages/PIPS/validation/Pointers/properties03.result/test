
Points-to for properties03


// Points To IN:
// p -> *NULL_POINTER* , MAY
// p -> _p_2 , MAY


// Points To OUT: none

void properties03(int n, int *p)
{

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_2 , MAY

   int i;

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_2 , MAY

   int *q = p+i;

// Points To:
// p -> *NULL_POINTER* , MAY
// p -> _p_2 , MAY
// q -> *NULL_POINTER* , MAY
// q -> _p_2[*] , MAY

   p!=0?(void) 0:__assert_fail("p!=0", "./properties03.c", 12, (const char *) 0);

// Points To:
// p -> _p_2 , EXACT
// q -> *NULL_POINTER* , MAY
// q -> _p_2[*] , MAY

   *(p+i) = 19;

// Points To:
// p -> _p_2 , EXACT
// q -> *NULL_POINTER* , MAY
// q -> _p_2[*] , MAY


   *q = 1;

// Points To:
// p -> _p_2 , EXACT
// q -> _p_2[*] , EXACT


   return;
}

Proper effects for properties03

void properties03(int n, int *p)
{
   int i;
//             <    is read   >: i p
//             <    is written>: q
   int *q = p+i;
//             <    is read   >: p
   p!=0?(void) 0:__assert_fail("p!=0", "./properties03.c", 12, (const char *) 0);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i p
   *(p+i) = 19;
//             <may be written>: _p_2[*][0]
//             <    is read   >: q

   *q = 1;

   return;
}
