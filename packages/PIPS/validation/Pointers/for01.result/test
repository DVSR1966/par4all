int main()
{
   int i, j, k;
   int a[500];
//             <    is written>: i

   i = 0;
//             <    is written>: j
   j = 1;
//             <    is written>: i
   for(i = 0; i <= 499; i += 1) {
//             <    is read   >: j
//             <    is written>: j
      j++;
//             <    is read   >: i
//             <    is written>: a[i]
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;
   }
//             <    is written>: k
   k = 2;
//             <    is read   >: k
   return k;
}
int main()
{
   int i, j, k;
   int a[500];
//             <    is written>: i

   i = 0;
//             <    is written>: j
   j = 1;
//             <may be read   >: i j
//             <may be written>: a[*] j
//             <    is written>: i
   for(i = 0; i <= 499; i += 1) {
//             <    is read   >: j
//             <    is written>: j
      j++;
//             <may be written>: a[*]
//             <    is read   >: i
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;
   }
//             <    is written>: k
   k = 2;
//             <    is read   >: k
   return k;
}

 ******** Whole Dependence Graph with Dependence Cones ******

	13 --> 14 with conflicts
		from <k-W-EXACT> to <k-R-EXACT>
	09 --> 09 with conflicts
		from <j-W-EXACT> to <j-W-EXACT> at levels  1

		from <j-W-EXACT> to <j-R-EXACT> at levels  1

		from <j-R-EXACT> to <j-W-EXACT> at levels  1

	07 --> 09 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
		from <j-W-EXACT> to <j-R-EXACT>
	06 --> -1 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>

****************** End of Dependence Graph ******************

//  T(main) {main==2}

int main()
{

//  T(i,j,k) {}

   int i, j, k;

//  T() {}

   int a[500];

//  T(i) {i==0}


   i = 0;

//  T(j) {j==1}

   j = 1;

//  T(i,j) {i+j#init==j, j#init<=j}

   for(i = 0; i <= 499; i += 1) {

//  T(j) {j==j#init+1}

      j++;

//  T() {}

      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;
   }

//  T(k) {k==2}

   k = 2;

//  T(main) {k==main}

   return k;
}

//  P() {}

int main()
{

//  P() {}

   int i, j, k;

//  P(i,j,k) {}

   int a[500];

//  P(i,j,k) {}


   i = 0;

//  P(i,j,k) {i==0}

   j = 1;

//  P(i,j,k) {i==0, j==1}

   for(i = 0; i <= 499; i += 1) {

//  P(i,j,k) {i==j-1, 0<=i, i<=499}

      j++;

//  P(i,j,k) {i==j-2, 0<=i, i<=499}

      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;
   }

//  P(i,j,k) {i==500, j==501}

   k = 2;

//  P(i,j,k) {i==500, j==501, k==2}

   return k;
}

POINTS TO

//  {}
int main()
{
//  points to = {}
   int i, j, k;
//  points to = {}
   int a[500];
//  points to = {}

   i = 0;
//  points to = {}
   j = 1;
//  points to = {}
   for(i = 0; i <= 499; i += 1) {
//  points to = {}
      j++;
//  points to = {}
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;
   }
//  points to = {}
   k = 2;
//  points to = {}
   return k;
}
