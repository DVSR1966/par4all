
Proper effects for "main"

void f3(int n_ptrs, int f4_after, ...)
{
   va_list ap, ap_save;
   char *array[31];
//               <must be written>: ptr_no
   int ptr_no = 0;
//               <must be read   >: n_ptrs
   if (n_ptrs>31) 
//               <must be written>: n_ptrs
      n_ptrs = 31;
//               <must be read   >: ap
//               <must be written>: ap
   va_start(ap, f4_after);
//               <must be read   >: n_ptrs
//               <must be written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1) {
//               <must be read   >: ap n_ptrs ptr_no
//               <must be written>: ap array[ptr_no]
      array[ptr_no] = va_arg(ap, char *);
//               <must be read   >: f4_after n_ptrs ptr_no
      if (ptr_no==f4_after) 
//               <must be read   >: ap ap_save n_ptrs
//               <must be written>: ap_save
         va_copy(ap_save, ap);
   }
//               <may be written >: ap
//               <must be read   >: ap
   va_end(ap);
//               <may be read    >: stderr stderr[0] 
//                                  __IO_EFFECTS:LUNS[2] array[*] 
//                                  array[*][*]
//               <may be written >: stderr[0] __IO_EFFECTS:LUNS[2]
//               <must be read   >: n_ptrs
   f2(n_ptrs, array);
//               <must be read   >: f4_after n_ptrs
//               <must be written>: n_ptrs
   // Now process the saved copy.
   n_ptrs -= f4_after;
//               <must be read   >: n_ptrs
//               <must be written>: ptr_no
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//               <must be read   >: ap_save n_ptrs ptr_no
//               <must be written>: ap_save array[ptr_no]
      array[ptr_no] = va_arg(ap_save, char *);
//               <may be written >: ap_save
//               <must be read   >: ap_save
   va_end(ap_save);
//               <may be read    >: stdout stdout[0] 
//                                  __IO_EFFECTS:LUNS[1] array[*] 
//                                  array[*][*]
//               <may be written >: stdout[0] __IO_EFFECTS:LUNS[1]
//               <must be read   >: n_ptrs
   f4(n_ptrs, array);
}

POINTS TO

//  {}
void f3(int n_ptrs, int f4_after, ...)
{
//  points to = {}
   va_list ap, ap_save;
//  points to = {}
   char *array[31];
//  points to = {}
   int ptr_no = 0;
//  points to = {}
   if (n_ptrs>31) 
//  points to = {}
      n_ptrs = 31;
//  points to = {}
   va_start(ap, f4_after);
//  points to = {}
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1) {
//  points to = {}
      array[ptr_no] = va_arg(ap, char *);
//  points to = {}
      if (ptr_no==f4_after) 
//  points to = {}
         va_copy(ap_save, ap);
   }
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
   va_end(ap);
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
   f2(n_ptrs, array);
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
   // Now process the saved copy.
   n_ptrs -= f4_after;
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
   for(ptr_no = 0; ptr_no <= n_ptrs-1; ptr_no += 1)
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      array[ptr_no] = va_arg(ap_save, char *);
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
   va_end(ap_save);
//  {(array[ptr_no],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
   f4(n_ptrs, array);
}
