int main()
{
   // BEGIN BLOCK
   int a, b, c, d;
   int *pa, *pb, *pc, *pd;
   int **ppa, **ppb, **ppc, **ppd;
//               <must be written>: a
   a = 1;
//               <must be written>: b
   b = 2;
//               <must be written>: c
   c = 3;
//               <must be written>: d
   d = 4;
//               <must be written>: pa

   pa = &a;
//               <must be written>: ppa
   ppa = &b;
//               <must be read   >: ppa
//               <must be written>: ppa[0]
   *ppa = &pa;
//               <must be written>: pb

   pb = &b;
//               <must be written>: ppb
   ppb = &a;
//               <must be read   >: ppb
//               <must be written>: ppb[0]
   *ppb = &pb;
//               <must be written>: pc

   pc = &c;
//               <must be written>: ppc
   ppc = &d;
//               <must be read   >: ppc
//               <must be written>: ppc[0]
   *ppc = &pc;
//               <must be written>: pd

   pd = &d;
//               <must be written>: ppd
   ppd = &c;
//               <must be read   >: ppd
//               <must be written>: ppd[0]
   *ppd = &pd;
//               <must be read   >: pd
//               <must be written>: pc

   pc = pd;
//               <must be read   >: ppc
//               <must be written>: ppc[0]

   *ppc = &a;
//               <must be read   >: pc ppa
//               <must be written>: ppa[0]

   *ppa = pc;
//               <must be read   >: ppd ppd[0]
//               <must be written>: pa

   pa = *ppd;
//               <must be read   >: ppa ppd ppd[0]
//               <must be written>: ppa[0]

   *ppa = *ppd;

   return 0;
   // END BLOCK
}
POINTS TO
int main()
{
   // BEGIN BLOCK
   int a, b, c, d;
   int *pa, *pb, *pc, *pd;
   int **ppa, **ppb, **ppc, **ppd;
   a = 1;
   b = 2;
   c = 3;
   d = 4;

   pa = &a;
//  points to = {(pa,a,-Exact-)}
   ppa = &b;
//  points to = {(pa,a,-Exact-);(ppa,b,-Exact-)}
   *ppa = &pa;
//  points to = {(pa,a,-Exact-);(ppa,b,-Exact-)}

   pb = &b;
//  points to = {(pb,b,-Exact-);(pa,a,-Exact-);(ppa,b,-Exact-)}
   ppb = &a;
//  points to = {(pb,b,-Exact-);(pa,a,-Exact-);(ppa,b,-Exact-);(ppb,a,
//   -Exact-)}
   *ppb = &pb;
//  points to = {(pb,b,-Exact-);(pa,a,-Exact-);(ppb,a,-Exact-);(ppa,b,
//   -Exact-)}

   pc = &c;
//  points to = {(pc,c,-Exact-);(pb,b,-Exact-);(pa,a,-Exact-);(ppb,a,
//   -Exact-);(ppa,b,-Exact-)}
   ppc = &d;
//  points to = {(pc,c,-Exact-);(pb,b,-Exact-);(pa,a,-Exact-);(ppb,a,
//   -Exact-);(ppa,b,-Exact-);(ppc,d,-Exact-)}
   *ppc = &pc;
//  points to = {(pc,c,-Exact-);(pb,b,-Exact-);(pa,a,-Exact-);(ppc,d,
//   -Exact-);(ppa,b,-Exact-);(ppb,a,-Exact-)}

   pd = &d;
//  points to = {(pd,d,-Exact-);(pc,c,-Exact-);(pb,b,-Exact-);(pa,a,
//   -Exact-);(ppc,d,-Exact-);(ppa,b,-Exact-);(ppb,a,-Exact-)}
   ppd = &c;
//  points to = {(pa,a,-Exact-);(ppb,a,-Exact-);(ppa,b,-Exact-);(pd,d,
//   -Exact-);(pc,c,-Exact-);(ppc,d,-Exact-);(ppd,c,-Exact-);(pb,b,
//   -Exact-)}
   *ppd = &pd;
//  points to = {(pd,d,-Exact-);(ppa,b,-Exact-);(ppb,a,-Exact-);(pc,c,
//   -Exact-);(pb,b,-Exact-);(ppd,c,-Exact-);(ppc,d,-Exact-);(pa,a,
//   -Exact-)}

   pc = pd;
//  points to = {(pd,d,-Exact-);(ppa,b,-Exact-);(ppb,a,-Exact-);(pc,d,
//   -Exact-);(pb,b,-Exact-);(ppc,d,-Exact-);(ppd,c,-Exact-);(pa,a,
//   -Exact-)}

   *ppc = &a;
//  points to = {(pc,d,-Exact-);(ppb,a,-Exact-);(ppa,b,-Exact-);(pb,b,
//   -Exact-);(pa,a,-Exact-);(ppd,c,-Exact-);(ppc,d,-Exact-);(pd,d,
//   -Exact-)}

   *ppa = pc;
//  points to = {(pa,a,-Exact-);(b,d,-Exact-);(ppa,b,-Exact-);(ppb,a,
//   -Exact-);(pd,d,-Exact-);(pc,d,-Exact-);(ppc,d,-Exact-);(ppd,c,
//   -Exact-);(pb,b,-Exact-)}

   pa = *ppd;
//  points to = {(b,d,-Exact-);(ppa,b,-Exact-);(ppb,a,-Exact-);(pd,d,
//   -Exact-);(pc,d,-Exact-);(ppd,c,-Exact-);(ppc,d,-Exact-);(pb,b,
//   -Exact-)}

   *ppa = *ppd;
//  points to = {(b,d,-Exact-);(ppa,b,-Exact-);(ppb,a,-Exact-);(pd,d,
//   -Exact-);(pc,d,-Exact-);(ppc,d,-Exact-);(ppd,c,-Exact-);(pb,b,
//   -Exact-)}

   return 0;
   // END BLOCK
}
