int main()
{
   // BEGIN BLOCK
   int a, b, c, d;
   int *pa, *pb, *pc, *pd;
   int **ppa, **ppb, **ppc, **ppd;
//             <    is written>: a
   a = 1;
//             <    is written>: b
   b = 2;
//             <    is written>: c
   c = 3;
//             <    is written>: d
   d = 4;
//             <    is written>: pa

   pa = &a;
//             <    is written>: ppa
   ppa = &pa;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ppa
   *ppa = &b;
//             <    is written>: pb

   pb = &b;
//             <    is written>: ppb
   ppb = &pb;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ppb
   *ppb = &a;
//             <    is written>: pc

   pc = &c;
//             <    is written>: ppc
   ppc = &pc;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ppc
   *ppc = &a;
//             <    is written>: pd

   pd = &d;
//             <    is written>: ppd
   ppd = &pd;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ppd
   *ppd = &c;
//             <    is read   >: pd
//             <    is written>: pc

   pc = pd;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: ppc

   *ppc = &b;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: pc ppa

   *ppa = pc;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: pa

   pa = *ppd;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*

   *ppa = *ppd;

   return 0;
   // END BLOCK
}
POINTS TO
//  {}
int main()
{
//  points to = {}
   // BEGIN BLOCK
//  points to = {}
   int a, b, c, d;
//  points to = {}
   int *pa, *pb, *pc, *pd;
//  {(pa,*ANY_MODULE*:*NOWHERE*,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pc,*ANY_MODULE*:*NOWHERE*,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-)}
   int **ppa, **ppb, **ppc, **ppd;
//  {(pa,*ANY_MODULE*:*NOWHERE*,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pc,*ANY_MODULE*:*NOWHERE*,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-)}
   a = 1;
//  {(pa,*ANY_MODULE*:*NOWHERE*,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pc,*ANY_MODULE*:*NOWHERE*,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-)}
   b = 2;
//  {(pa,*ANY_MODULE*:*NOWHERE*,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pc,*ANY_MODULE*:*NOWHERE*,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-)}
   c = 3;
//  {(pa,*ANY_MODULE*:*NOWHERE*,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pc,*ANY_MODULE*:*NOWHERE*,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-)}
   d = 4;
//  {(pa,*ANY_MODULE*:*NOWHERE*,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pc,*ANY_MODULE*:*NOWHERE*,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-)}

   pa = &a;
//  {(pa,a,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,-Exact-);(pc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(pd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppa,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppb,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,-Exact-)}
   ppa = &pa;
//  {(pa,a,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,-Exact-);(pc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(pd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppa,pa,-Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppc,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-)}
   *ppa = &b;
//  {(pa,b,-Exact-);(pb,*ANY_MODULE*:*NOWHERE*,-Exact-);(pc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(pd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppa,pa,-Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppc,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-)}

   pb = &b;
//  {(pa,b,-Exact-);(pb,b,-Exact-);(pc,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pd,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,pa,
//   -Exact-);(ppb,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppc,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,
//   -Exact-)}
   ppb = &pb;
//  {(pa,b,-Exact-);(pb,b,-Exact-);(pc,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pd,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,pa,
//   -Exact-);(ppb,pb,-Exact-);(ppc,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,-Exact-)}
   *ppb = &a;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(pd,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,pa,
//   -Exact-);(ppb,pb,-Exact-);(ppc,*ANY_MODULE*:*NOWHERE*,
//   -Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,-Exact-)}

   pc = &c;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,c,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,pa,-Exact-);(ppb,pb,
//   -Exact-);(ppc,*ANY_MODULE*:*NOWHERE*,-Exact-);(ppd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-)}
   ppc = &pc;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,c,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,pa,-Exact-);(ppb,pb,
//   -Exact-);(ppc,pc,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,-Exact-)}
   *ppc = &a;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,a,-Exact-);(pd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-);(ppa,pa,-Exact-);(ppb,pb,
//   -Exact-);(ppc,pc,-Exact-);(ppd,*ANY_MODULE*:*NOWHERE*,-Exact-)}

   pd = &d;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,a,-Exact-);(pd,d,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,
//   *ANY_MODULE*:*NOWHERE*,-Exact-)}
   ppd = &pd;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,a,-Exact-);(pd,d,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}
   *ppd = &c;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,a,-Exact-);(pd,c,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}

   pc = pd;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,c,-Exact-);(pd,c,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}

   *ppc = &b;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,b,-Exact-);(pd,c,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}

   *ppa = pc;
//  {(pa,b,-Exact-);(pb,a,-Exact-);(pc,b,-Exact-);(pd,c,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}

   pa = *ppd;
//  {(pa,c,-Exact-);(pb,a,-Exact-);(pc,b,-Exact-);(pd,c,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}

   *ppa = *ppd;
//  {(pa,c,-Exact-);(pb,a,-Exact-);(pc,b,-Exact-);(pd,c,-Exact-);(ppa,
//   pa,-Exact-);(ppb,pb,-Exact-);(ppc,pc,-Exact-);(ppd,pd,-Exact-)}

   return 0;
   // END BLOCK
}
