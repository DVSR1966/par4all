
Proper effetcs for "struct05"

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//             <    is written>: a.n
      a.n = 2;
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: a.p i
         (a.p)[i] = i;
//             <    is read   >: a.n a.p
//             <    is written>: b.n b.p
      
      // definition of b, also modifies the elments of a.p
      b = a;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: b.p i
         (b.p)[i] = i*10;
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//             <    is written>: c.n
      
      // definition of c
      c.n = 3;
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <    is read   >: i
//             <    is written>: c.array[i]
         (c.array)[i] = i;
//             <may be read   >: c.array[*]
//             <may be written>: d.array[*]
//             <    is read   >: c.n
//             <    is written>: d.n
      
      // definition of d, does not modify c
      d = c;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i
//             <    is written>: d.array[i]
         (d.array)[i] = i*10;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: c.array[i] d.array[i] i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//             <    is written>: e.m
      
      // definition of e
      e.m = 4;
//             <    is written>: i
      for(i = 0; i <= 4; i += 1) {
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
            ((e.champ)[i].p)[j] = i+j;
      }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
      
      // definition of f, also modifies e.champ[*].p[*]
      f = e;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
            ((f.champ)[i].p)[j] = i*j;
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//             <    is written>: g.m
      
      // definition of g
      g.m = 5;
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <    is read   >: i j
//             <    is written>: g.champ[i].array[j]
            ((g.champ)[i].array)[j] = i+j;
//             <may be read   >: g.champ[*].array[*] g.champ[*].n
//             <may be written>: h.champ[*].array[*] h.champ[*].n
//             <    is read   >: g.m
//             <    is written>: h.m
      
      // definition of h, does not modify g
      h = g;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1) {
//             <    is read   >: i j
//             <    is written>: h.champ[i].array[j]
            ((h.champ)[i].array)[j] = i*j;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: g.champ[i].array[j] 
//                               h.champ[i].array[j] i j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

POINTS TO

//  {}
int main()
{
//  points to = {}
   s_with_pointer a, b;
//  points to = {}
   s_with_array c, d;
//  points to = {}
   s_with_array_of_struct_with_pointer e, f;
//  points to = {}
   s_with_array_of_struct_with_array g, h;

//  points to = {}
   int i, j;
//  points to = {}
   
   // just to create a block for prettyprinting
   if (1) {
//  points to = {}
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      a.n = 2;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 9; i += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         (a.p)[i] = i;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of b, also modifies the elments of a.p
      b = a;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      printf("\nstruct with pointer copy : \n");
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 9; i += 1) {
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         (b.p)[i] = i*10;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of c
      c.n = 3;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 9; i += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         (c.array)[i] = i;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of d, does not modify c
      d = c;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      printf("\nstruct with array copy : \n");
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 9; i += 1) {
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         (d.array)[i] = i*10;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of e
      e.m = 4;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 4; i += 1) {
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         (e.champ)[i].p = malloc(10*sizeof(int));
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         for(j = 0; j <= 9; j += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
            ((e.champ)[i].p)[j] = i+j;
      }
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of f, also modifies e.champ[*].p[*]
      f = e;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      printf("\nstruct with array of structs with pointer copy : \n");
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 4; i += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         for(j = 0; j <= 9; j += 1) {
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
            ((f.champ)[i].p)[j] = i*j;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of g
      g.m = 5;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 4; i += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         for(j = 0; j <= 9; j += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
            ((g.champ)[i].array)[j] = i+j;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      
      // definition of h, does not modify g
      h = g;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      printf("\nstruct with array of structs with array copy : \n");
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
      for(i = 0; i <= 4; i += 1)
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
         for(j = 0; j <= 9; j += 1) {
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
            ((h.champ)[i].array)[j] = i*j;
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-Exact-)}
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
//  {(*ANY_MODULE*:*NOWHERE*_b0,*ANY_MODULE*:*HEAP*,-MAY-)}
   return 0;
}
