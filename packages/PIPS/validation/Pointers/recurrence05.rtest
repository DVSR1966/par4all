
Proper effects for "recurrence05"

void recurrence05(void)
{
//             <    is written>: i
   int i = 0;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: l _MALLOC_EFFECTS:_MALLOC_
   list l = (list) malloc(sizeof(list *));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l
   l->content = &i;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l
   l->next = (void *) 0;
   return;
}

POINTS TO for "recurrence05"


// Points To: none

void recurrence05(void)
{

// Points To: none

   int i = 0;

// Points To: none

   list l = (list) malloc(sizeof(list *));

// Points To:
// l -> &*ANY_MODULE*:*HEAP* , EXACT

   l->content = &i;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b0 -> &i , EXACT
// l -> &*ANY_MODULE*:*HEAP* , EXACT

   l->next = (void *) 0;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b0 -> &i , EXACT
// *ANY_MODULE*:*ANYWHERE*_b1 -> &*NULL_POINTER* , EXACT
// l -> &*ANY_MODULE*:*HEAP* , EXACT

   return;
}

Proper effects using points_to

void recurrence05(void)
{
//             <    is written>: i
   int i = 0;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: l _MALLOC_EFFECTS:_MALLOC_
   list l = (list) malloc(sizeof(list *));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l
   l->content = &i;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l
   l->next = (void *) 0;
   return;
}

