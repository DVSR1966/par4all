int ptr_to_field()
{
   // BEGIN BLOCK
   typedef struct {
      int *q;
      int *p;
   } my_str;

   my_str *m, *n;
//               <must be written>: i j
   int i = 0, j = 1;
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ m
   m = (my_str *) malloc(sizeof(my_str));
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ n
   n = (my_str *) malloc(sizeof(my_str));
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: m
   m->q = &i;
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: m
   m->p = &j;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
   n->q = m->p;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
   n->p = m->q;

   return 0;
   // END BLOCK
}
POINTS TO
//  {}
int ptr_to_field()
{
//  points to = {}
   // BEGIN BLOCK
//  points to = {}
   typedef struct {
      int *q;
      int *p;
   } my_str;

//  points to = {}
   my_str *m, *n;
//  points to = {}
   int i = 0, j = 1;
//  points to = {}
   m = (my_str *) malloc(sizeof(my_str));
//  {(m,*ANYWHERE*,-MAY-)}
   n = (my_str *) malloc(sizeof(my_str));
//  {(n,*ANYWHERE*,-MAY-);(m,*ANYWHERE*,-MAY-)}
   m->q = &i;
//  {(n,*ANYWHERE*,-MAY-);(m[0][1],i,-Exact-)}
   m->p = &j;
//  {(n,*ANYWHERE*,-MAY-);(m[0][2],j,-Exact-)}
   n->q = m->p;
//  {(n[0][1],j,-Exact-);(m[0][2],j,-Exact-)}
   n->p = m->q;
//  {(n[0][2],j,-Exact-);(m[0][2],j,-Exact-)}

   return 0;
   // END BLOCK
}
