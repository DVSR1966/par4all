
PROPER EFFECTS

void flgr1d_arith_add_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *data1, FLGR_Data1D *data2)
{
   int j;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: psrc1
   fgINT32 *psrc1 = (fgINT32 *) data1->array;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: psrc2
   fgINT32 *psrc2 = (fgINT32 *) data2->array;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: pdest
   fgINT32 *pdest = (fgINT32 *) datdest->array;
   fgINT32 v1;
   fgINT32 v2;
   fgINT32 result;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: spp
   int spp = datdest->spp;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: length
   int length = datdest->length*spp;
//             <    is read   >: length
//             <    is written>: j
   for(j = 0; j <= length-1; j += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: v1
      v1 = flgr1d_get_data_array_fgINT32(psrc1, j);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: v2
      v2 = flgr1d_get_data_array_fgINT32(psrc2, j);
//             <    is read   >: length v1 v2
//             <    is written>: result
      result = flgr_defop_add_fgINT32(v1, v2);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: j length pdest result
      flgr1d_set_data_array_fgINT32(pdest, j, result);
   }
   return;
}
FLGR_Ret flgr2d_arith_add(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
   FLGR_Ret ret;
//             <    is read   >: data1 data2 datdest
   if (datdest==(void *) 0||data1==(void *) 0||data2==(void *) 0) {
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5102);
      return FLGR_RET_NULL_OBJECT;
   }
//             <    is read   >: data1 datdest
//             <    is written>: ret
   if ((ret = flgr2d_is_data_same_attributes(datdest, data1))!=FLGR_RET_OK)
//             <    is read   >: ret
      return ret;
//             <    is read   >: data1 data2
//             <    is written>: ret
   if ((ret = flgr2d_is_data_same_attributes(data2, data1))!=FLGR_RET_OK)
//             <    is read   >: ret
      return ret;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*

   if (datdest->type==FLGR_BIT) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgBIT(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_UINT8) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT8(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_UINT16) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT16(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_UINT32) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgUINT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_INT8) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgINT8(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_INT16) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgINT16(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_INT32) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
      flgr2d_arith_add_fgINT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_FLOAT32) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgFLOAT32(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   if (datdest->type==FLGR_FLOAT64) {
//             <    is read   >: data1 data2 datdest
      flgr2d_arith_add_fgFLOAT64(datdest, data1, data2);
      return FLGR_RET_OK;
   }
//             <may be read   >: stderr[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
   fprintf(stderr, "type <%s> unknown!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5109, flgr_get_type_string(datdest->type));
   return FLGR_RET_TYPE_UNKNOWN;
}
void flgr2d_arith_add_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: pdest
   FLGR_Data1D **pdest = datdest->row;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: p1
   FLGR_Data1D **p1 = data1->row;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: p2
   FLGR_Data1D **p2 = data2->row;
   int i;
//             <    is written>: i
   i = 0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   while (i<data1->size_y) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
      flgr1d_arith_add_fgINT32(*pdest, *p1, *p2);
//             <    is read   >: i p1 p2 pdest
//             <    is written>: i p1 p2 pdest
      i++, pdest++, p1++, p2++;
   }
   return;
}
static fgINT32 flgr1d_get_data_array_fgINT32(fgINT32 *array, int pos)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   return flgr_get_array_fgINT32(array, pos);
}
static void flgr1d_set_data_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: array pos value
   flgr_set_array_fgINT32(array, pos, value);
}
static fgINT32 flgr_defop_add_fgINT32(fgINT32 a, fgINT32 b)
{
//             <    is read   >: a b
   return a+b;
}
static fgINT32 flgr_get_array_fgINT32(fgINT32 *array, int pos)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
   return array[pos];
}
static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: array pos value
   array[pos] = value;
}

PROPER POINTER EFFECTS

static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//             <    is read   >: array pos value
//             <    is written>: array[pos]
   array[pos] = value;
}

POINTS TO

//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-)}
void flgr1d_arith_add_fgINT32(FLGR_Data1D *datdest, FLGR_Data1D *data1, FLGR_Data1D *data2)
{
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-)}
   int j;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-)}
   fgINT32 *psrc1 = (fgINT32 *) data1->array;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-)}
   fgINT32 *psrc2 = (fgINT32 *) data2->array;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc2,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   fgINT32 *pdest = (fgINT32 *) datdest->array;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   fgINT32 v1;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   fgINT32 v2;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   fgINT32 result;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   int spp = datdest->spp;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   int length = datdest->length*spp;
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   for(j = 0; j <= length-1; j += 1) {
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
      v1 = flgr1d_get_data_array_fgINT32(psrc1, j);
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
      v2 = flgr1d_get_data_array_fgINT32(psrc2, j);
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
      result = flgr_defop_add_fgINT32(v1, v2);
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
      flgr1d_set_data_array_fgINT32(pdest, j, result);
   }
//  {(data1,_data1_2[0],-Exact-);(data2,_data2_3[0],-Exact-);(datdest,
//   _datdest_1[0],-Exact-);(pdest,*ANY_MODULE*:*ANYWHERE*_b0,
//   -Exact-);(psrc1,*ANY_MODULE*:*ANYWHERE*_b0,-Exact-);(psrc2,
//   *ANY_MODULE*:*ANYWHERE*_b0,-Exact-)}
   return;
}
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
FLGR_Ret flgr2d_arith_add(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   FLGR_Ret ret;
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest==(void *) 0||data1==(void *) 0||data2==(void *) 0) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      fprintf(stderr, "Null objects!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5102);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_NULL_OBJECT;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if ((ret = flgr2d_is_data_same_attributes(datdest, data1))!=FLGR_RET_OK)
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return ret;
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if ((ret = flgr2d_is_data_same_attributes(data2, data1))!=FLGR_RET_OK)
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return ret;
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}

   if (datdest->type==FLGR_BIT) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgBIT(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_UINT8) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgUINT8(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_UINT16) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgUINT16(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_UINT32) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgUINT32(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_INT8) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgINT8(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_INT16) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgINT16(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_INT32) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgINT32(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_FLOAT32) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgFLOAT32(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   if (datdest->type==FLGR_FLOAT64) {
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      flgr2d_arith_add_fgFLOAT64(datdest, data1, data2);
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
      return FLGR_RET_OK;
   }
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   fprintf(stderr, "type <%s> unknown!\n""ERROR: File %s, Line %d, Function : ", "fulguro-2-1-1.src/arith/flgrArith.c", 5109, flgr_get_type_string(datdest->type));
//  {(data1,_data1_5[0],-Exact-);(data2,_data2_6[0],-Exact-);(datdest,
//   _datdest_4[0],-Exact-)}
   return FLGR_RET_TYPE_UNKNOWN;
}
//  {(f1,_f1_7[0],-Exact-);(f2,_f2_8[0],-Exact-);(f3,_f3_9[0],
//   -Exact-)}
int flgr2d_arith_add_fgBIT(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_10[0],-Exact-);(f2,_f2_11[0],-Exact-);(f3,_f3_12[0],
//   -Exact-)}
int flgr2d_arith_add_fgFLOAT32(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_13[0],-Exact-);(f2,_f2_14[0],-Exact-);(f3,_f3_15[0],
//   -Exact-)}
int flgr2d_arith_add_fgFLOAT64(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_16[0],-Exact-);(f2,_f2_17[0],-Exact-);(f3,_f3_18[0],
//   -Exact-)}
int flgr2d_arith_add_fgINT16(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-)}
void flgr2d_arith_add_fgINT32(FLGR_Data2D *datdest, FLGR_Data2D *data1, FLGR_Data2D *data2)
{
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-)}
   FLGR_Data1D **pdest = datdest->row;
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
   FLGR_Data1D **p1 = data1->row;
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
   FLGR_Data1D **p2 = data2->row;
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(p2,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
   int i;
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(p2,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
   i = 0;
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(p2,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
   while (i<data1->size_y) {
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(p2,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
      flgr1d_arith_add_fgINT32(*pdest, *p1, *p2);
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(p2,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
      i++, pdest++, p1++, p2++;
   }
//  {(data1,_data1_20[0],-Exact-);(data2,_data2_21[0],
//   -Exact-);(datdest,_datdest_19[0],-Exact-);(p1,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(p2,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-);(pdest,
//   *ANY_MODULE*:*ANYWHERE*_b1,-Exact-)}
   return;
}
//  {(f1,_f1_22[0],-Exact-);(f2,_f2_23[0],-Exact-);(f3,_f3_24[0],
//   -Exact-)}
int flgr2d_arith_add_fgINT8(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_25[0],-Exact-);(f2,_f2_26[0],-Exact-);(f3,_f3_27[0],
//   -Exact-)}
int flgr2d_arith_add_fgUINT16(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_28[0],-Exact-);(f2,_f2_29[0],-Exact-);(f3,_f3_30[0],
//   -Exact-)}
int flgr2d_arith_add_fgUINT32(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_31[0],-Exact-);(f2,_f2_32[0],-Exact-);(f3,_f3_33[0],
//   -Exact-)}
int flgr2d_arith_add_fgUINT8(FLGR_Data2D *f1, FLGR_Data2D *f2, FLGR_Data2D *f3)
{
}
//  {(f1,_f1_34[0],-Exact-);(f2,_f2_35[0],-Exact-)}
int flgr2d_is_data_same_attributes(FLGR_Data2D *f1, FLGR_Data2D *f2)
{
}
//  {}
int flgr_get_type_string(enum FLGR_TYPE f1)
{
}
//  {(array,_array_36[0],-Exact-)}
static fgINT32 flgr1d_get_data_array_fgINT32(fgINT32 *array, int pos)
{
//  {(array,_array_36[0],-Exact-)}
   return flgr_get_array_fgINT32(array, pos);
}
//  {(array,_array_37[0],-Exact-)}
static void flgr1d_set_data_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//  {(array,_array_37[0],-Exact-)}
   flgr_set_array_fgINT32(array, pos, value);
}
//  {}
static fgINT32 flgr_defop_add_fgINT32(fgINT32 a, fgINT32 b)
{
//  {}
   return a+b;
}
//  {(array,_array_38[0],-Exact-)}
static fgINT32 flgr_get_array_fgINT32(fgINT32 *array, int pos)
{
//  {(array,_array_38[0],-Exact-)}
   return array[pos];
}
//  {(array,_array_39[0],-Exact-)}
static void flgr_set_array_fgINT32(fgINT32 *array, int pos, fgINT32 value)
{
//  {(array,_array_39[0],-Exact-)}
   array[pos] = value;
}
