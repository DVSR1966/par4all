
Proper effects for "count"

int count(list *p)
{
//             <    is read   >: p
//             <    is written>: q
   list *q = p;
//             <    is written>: i
   int i = 0;
//             <    is read   >: p
   while (p!=(void *) 0) {
//             <    is read   >: i
//             <    is written>: i
      i++;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: p
      p = p->next;
   }
//             <    is read   >: i

   return i;
}

POINTS TO for "count"


// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT:
// _p_1.next -> _p_1_1 , MAY
// _p_1_1.next -> _p_1_1_1 , MAY
// _p_1_1_1.next -> _p_1_1_1_1 , MAY
// _p_1_1_1_1.next -> _p_1_1_1_1_1 , MAY
// _p_1_1_1_1_1.next -> _p_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY

int count(list *p)
{

// Points To:
// p -> _p_1 , EXACT

   list *q = p;

// Points To:
// p -> _p_1 , EXACT
// q -> _p_1 , EXACT

   int i = 0;

// Points To:
// p -> _p_1 , EXACT
// q -> _p_1 , EXACT

   while (p!=(void *) 0) {

// Points To:
// _p_1.next -> _p_1_1 , MAY
// _p_1_1.next -> _p_1_1_1 , MAY
// _p_1_1_1.next -> _p_1_1_1_1 , MAY
// _p_1_1_1_1.next -> _p_1_1_1_1_1 , MAY
// _p_1_1_1_1_1.next -> _p_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1 , MAY
// p -> _p_1_1 , MAY
// p -> _p_1_1_1 , MAY
// p -> _p_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY
// q -> _p_1 , EXACT

      i++;

// Points To:
// _p_1.next -> _p_1_1 , MAY
// _p_1_1.next -> _p_1_1_1 , MAY
// _p_1_1_1.next -> _p_1_1_1_1 , MAY
// _p_1_1_1_1.next -> _p_1_1_1_1_1 , MAY
// _p_1_1_1_1_1.next -> _p_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1 , MAY
// p -> _p_1_1 , MAY
// p -> _p_1_1_1 , MAY
// p -> _p_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY
// q -> _p_1 , EXACT

      p = p->next;
   }

// Points To:
// _p_1.next -> _p_1_1 , MAY
// _p_1_1.next -> _p_1_1_1 , MAY
// _p_1_1_1.next -> _p_1_1_1_1 , MAY
// _p_1_1_1_1.next -> _p_1_1_1_1_1 , MAY
// _p_1_1_1_1_1.next -> _p_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// _p_1_1_1_1_1_1_1_1_1_1.next -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1 , MAY
// p -> _p_1_1 , MAY
// p -> _p_1_1_1 , MAY
// p -> _p_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1_1 , MAY
// p -> _p_1_1_1_1_1_1_1_1_1_1_1 , MAY
// q -> _p_1 , EXACT


   return i;
}

