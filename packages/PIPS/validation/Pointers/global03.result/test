
PROPER EFFECTS

void call03()
{
   // To avoid a problem with the semantics of the empty points-to set
   // The solution might be to add always an arc ANYWHERE->ANYWHERE
   // when entering a module statement
//             <    is written>: p
   int *p = i;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: pi
   *pi = 1;
//             <    is read   >: pi
//             <    is written>: pi
   pi++;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: q
   q->one = 1;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: q
   (q->two)[4] = 2;
}

PROPER POINTER EFFECTS

void call03()
{
   // To avoid a problem with the semantics of the empty points-to set
   // The solution might be to add always an arc ANYWHERE->ANYWHERE
   // when entering a module statement
//             <    is written>: p
   int *p = i;
//             <    is read   >: pi
//             <    is written>: pi[0]
   *pi = 1;
//             <    is read   >: pi
//             <    is written>: pi
   pi++;
//             <    is read   >: q
//             <    is written>: q[0].one
   q->one = 1;
//             <    is read   >: q
//             <    is written>: q[0].two[4]
   (q->two)[4] = 2;
}

POINTS TO


// Points To IN:
// pi -> *NULL_POINTER* , MAY
// pi -> _pi_84[0] , MAY


// Points To OUT:
// pi -> _pi_84[1] , EXACT

void call03()
{
   // To avoid a problem with the semantics of the empty points-to set
   // The solution might be to add always an arc ANYWHERE->ANYWHERE
   // when entering a module statement

// Points To: none

   int *p = i;

// Points To:
// p -> i[0] , EXACT

   *pi = 1;

// Points To:
// p -> i[0] , EXACT

   pi++;

// Points To:
// p -> i[0] , EXACT
// pi -> _pi_84[1] , EXACT

   q->one = 1;

// Points To:
// p -> i[0] , EXACT
// pi -> _pi_84[1] , EXACT

   (q->two)[4] = 2;
}
