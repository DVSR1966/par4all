
Proper effects for "recurrence01"

void recurrence01(list l)
{
//             <    is written>: i
   int i = 0;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l
   l->content = &i;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   l->next->content = &i;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   l->next->next->content = &i;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   l->next->next->next->content = &i;
   return;
}

POINTS TO for "recurrence01"


// Points To IN:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_1 , MAY
// _l_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1.next -> _l_1_1_1 , MAY
// _l_1_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1_1.next -> _l_1_1_1_1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY


// Points To OUT:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_1 , MAY
// _l_1.content -> i , MAY
// _l_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1.next -> _l_1_1_1 , MAY
// _l_1_1.content -> i , MAY
// _l_1_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1_1.next -> _l_1_1_1_1 , MAY
// _l_1_1_1.content -> i , MAY
// _l_1_1_1_1.content -> i , MAY

void recurrence01(list l)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   int i = 0;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   l->content = &i;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b0 -> i , MAY
// _l_1.content -> i , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   l->next->content = &i;

// Points To:
// *ANY_MODULE*:*ANYWHERE* -> i , MAY
// *ANY_MODULE*:*ANYWHERE*_b0 -> i , MAY
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_1 , MAY
// _l_1.content -> i , MAY
// _l_1_1.content -> i , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   l->next->next->content = &i;

// Points To:
// *ANY_MODULE*:*ANYWHERE* -> i , MAY
// *ANY_MODULE*:*ANYWHERE*_b0 -> i , MAY
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_1 , MAY
// _l_1.content -> i , MAY
// _l_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1.next -> _l_1_1_1 , MAY
// _l_1_1.content -> i , MAY
// _l_1_1_1.content -> i , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   l->next->next->next->content = &i;

// Points To:
// *ANY_MODULE*:*ANYWHERE* -> i , MAY
// *ANY_MODULE*:*ANYWHERE*_b0 -> i , MAY
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_1 , MAY
// _l_1.content -> i , MAY
// _l_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1.next -> _l_1_1_1 , MAY
// _l_1_1.content -> i , MAY
// _l_1_1_1.next -> *NULL_POINTER* , MAY
// _l_1_1_1.next -> _l_1_1_1_1 , MAY
// _l_1_1_1.content -> i , MAY
// _l_1_1_1_1.content -> i , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   return;
}

Proper effects using points_to

void recurrence01(list l)
{
//             <    is written>: i
   int i = 0;
//             <may be written>: _l_1.content *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l
   l->content = &i;
//             <may be read   >: _l_1.next *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   l->next->content = &i;
//             <may be read   >: _l_1_1.next *ANY_MODULE*:*ANYWHERE* 
//                               *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               *ANY_MODULE*:*ANYWHERE*
   l->next->next->content = &i;
//             <may be read   >: _l_1_1_1.next *ANY_MODULE*:*ANYWHERE*
//                               *ANY_MODULE*:*ANYWHERE* 
//                               *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               *ANY_MODULE*:*ANYWHERE*
   l->next->next->next->content = &i;
   return;
}

