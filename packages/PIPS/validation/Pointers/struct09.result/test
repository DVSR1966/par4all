
Proper effetcs for "struct09"

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_ a[1]
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//               <must be written>: i
      for(i = 0; i <= 9; i += 1)
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: a[1] i
         (a.p)[i] = i;
//               <must be read   >: a[1]
//               <must be written>: b[1]
      
      // definition of b, also modifies a
      b = a;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: b[1] i
         (b.p)[i] = i*10;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//               <must be written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//               <must be read   >: i
//               <must be written>: c[1][i]
         (c.array)[i] = i;
//               <may be read    >: c[1][*]
//               <may be written >: d[1][*]
      
      // definition of d, does not modify c
      d = c;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//               <must be written>: i
      for(i = 0; i <= 9; i += 1) {
//               <must be read   >: i
//               <must be written>: d[1][i]
         (d.array)[i] = i*10;
//               <must be read   >: __IO_EFFECTS:LUNS[1] c[1][i] 
//                                  d[1][i] i
//               <must be written>: __IO_EFFECTS:LUNS[1]

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//               <must be written>: i
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: _MALLOC_EFFECTS:_MALLOC_ i
//               <must be written>: _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
            ((e.champ)[i].p)[j] = i+j;
      }
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
      
      // definition of f, also modifies e
      f = e;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
            ((f.champ)[i].p)[j] = i*j;
//               <may be read    >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//               <must be written>: i
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1)
//               <must be read   >: i j
//               <must be written>: g[1][i][1][j]
            ((g.champ)[i].array)[j] = i+j;
//               <may be read    >: g[1][*][1][*]
//               <may be written >: h[1][*][1][*]
      
      // definition of h, does not modify g
      h = g;
//               <must be read   >: __IO_EFFECTS:LUNS[1]
//               <must be written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//               <must be written>: i
      for(i = 0; i <= 4; i += 1)
//               <must be written>: j
         for(j = 0; j <= 9; j += 1) {
//               <must be read   >: i j
//               <must be written>: h[1][i][1][j]
            ((h.champ)[i].array)[j] = i*j;
//               <must be read   >: __IO_EFFECTS:LUNS[1] g[1][i][1][j]
//                                  h[1][i][1][j] i j
//               <must be written>: __IO_EFFECTS:LUNS[1]
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

POINTS TO

//  {}
int main()
{
//  points to = {}
   s_with_pointer a, b;
//  points to = {}
   s_with_array c, d;
//  points to = {}
   s_with_array_of_struct_with_pointer e, f;
//  points to = {}
   s_with_array_of_struct_with_array g, h;

//  points to = {}
   int i, j;
//  points to = {}
   
   // just to create a block for prettyprinting
   if (1) {
//  points to = {}
      
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      for(i = 0; i <= 9; i += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
         (a.p)[i] = i;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of b, also modifies a
      b = a;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      printf("\nstruct with pointer copy : \n");
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      for(i = 0; i <= 9; i += 1) {
//  points to = {}
         (b.p)[i] = i*10;
//  points to = {}
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
         (c.array)[i] = i;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of d, does not modify c
      d = c;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      printf("\nstruct with array copy : \n");
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      for(i = 0; i <= 9; i += 1) {
//  points to = {}
         (d.array)[i] = i*10;
//  points to = {}

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//  points to = {}
         (e.champ)[i].p = malloc(10*sizeof(int));
//  points to = {}
         for(j = 0; j <= 9; j += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
            ((e.champ)[i].p)[j] = i+j;
      }
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of f, also modifies e
      f = e;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      printf("\nstruct with array of structs with pointer copy : \n");
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      for(i = 0; i <= 4; i += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
         for(j = 0; j <= 9; j += 1) {
//  points to = {}
            ((f.champ)[i].p)[j] = i*j;
//  points to = {}
            
            
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
         for(j = 0; j <= 9; j += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
            ((g.champ)[i].array)[j] = i+j;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      
      // definition of h, does not modify g
      h = g;
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      printf("\nstruct with array of structs with array copy : \n");
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
      for(i = 0; i <= 4; i += 1)
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
         for(j = 0; j <= 9; j += 1) {
//  points to = {}
            ((h.champ)[i].array)[j] = i*j;
//  points to = {}
            
            
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
//  {(a[1],*ANY_MODULE*:*ANYWHERE*,-MAY-);(e[1][i][1],
//   *ANY_MODULE*:*ANYWHERE*,-MAY-)}
   return 0;
}
