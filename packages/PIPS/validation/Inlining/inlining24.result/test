
Initial code

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret = 0;
   }
   else {
      if (connexity==4) goto switch_1_case_4;
      if (connexity==6) goto switch_1_case_6;
      if (connexity==8) goto switch_1_case_8;
switch_1_default:      ;
      ret = 2;
      goto break_1;
switch_1_case_8:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
      goto break_1;
switch_1_case_6:      ;
      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      ret = 0;
      goto break_1;
switch_1_case_4:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      ret = 0;
break_1:      ;
   }

   return ret;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, connexity, size);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Because %ALL is modified by code synthesis, let's get ready

 freia_cipo_outer_gradient
     freia_cipo_dilate
         freia_common_check_image_bpp_compat
         freia_common_print_backtrace
         freia_aipo_copy
         freia_aipo_dilate_8c
         freia_aipo_dilate_6c
     freia_aipo_sub
freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret = 0;
   }
   else {
      if (connexity==4) goto switch_1_case_4;
      if (connexity==6) goto switch_1_case_6;
      if (connexity==8) goto switch_1_case_8;
switch_1_default:      ;
      ret = 2;
      goto break_1;
switch_1_case_8:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
      goto break_1;
switch_1_case_6:      ;
      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      ret = 0;
      goto break_1;
switch_1_case_4:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      ret = 0;
break_1:      ;
   }

   return ret;
}

Code after inlining of "freia_cipo_dilate"

freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;
   //PIPS generated variable
   freia_error _return0;
   {
      
      
      int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
      
      
      
      int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
      
      
      
      int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

      int i;
      freia_error ret;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

         fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
         freia_common_print_backtrace();
         ret = 1;
      }
      else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
         
         
         fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
         freia_common_print_backtrace();
         ret = 1;
      }
      else if (size==0) {
         freia_aipo_copy(imout, imin);
         ret = 0;
      }
      else {
         if (connexity==4) goto l99998;
         if (connexity==6) goto l99997;
         if (connexity==8) goto l99996;
         ret = 2;
         goto l99995;
l99996:         ;
         freia_aipo_dilate_8c(imout, imin, kernel_8c);
         for(i = 1; i <= size-1; i += 1)
            freia_aipo_dilate_8c(imout, imout, kernel_8c);
         goto l99995;
l99997:         ;
         freia_aipo_dilate_6c(imout, imin, kernel_6c);
         for(i = 1; i <= size-1; i += 1)
            freia_aipo_dilate_6c(imout, imout, kernel_6c);
         ret = 0;
         goto l99995;
l99998:         ;
         freia_aipo_dilate_8c(imout, imin, kernel_4c);
         for(i = 1; i <= size-1; i += 1)
            freia_aipo_dilate_8c(imout, imout, kernel_4c);
         ret = 0;
l99995:         ;

      }
      
      
      _return0 = ret;
   }
   ret = _return0;
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Code after inlining of "freia_cipo_outer_gradient"

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1;
   {
      
      
      
      freia_error ret;
      //PIPS generated variable
      freia_error _return0;
      {
         
         
         int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
         
         
         
         int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
         
         
         
         int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

         int i;
         freia_error ret;
         if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
            
            
            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (size==0) {
            freia_aipo_copy(imout, imin);
            ret = 0;
         }
         else {
            if (connexity==4) goto l99989;
            if (connexity==6) goto l99988;
            if (connexity==8) goto l99987;
            ret = 2;
            goto l99986;
l99987:            ;
            freia_aipo_dilate_8c(imout, imin, kernel_8c);
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_8c);
            goto l99986;
l99988:            ;
            freia_aipo_dilate_6c(imout, imin, kernel_6c);
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_6c(imout, imout, kernel_6c);
            ret = 0;
            goto l99986;
l99989:            ;
            freia_aipo_dilate_8c(imout, imin, kernel_4c);
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_4c);
            ret = 0;
l99986:            ;

         }
         
         
         _return0 = ret;
      }
      ret = _return0;
      ret |= freia_aipo_sub(imout, imout, imin);
      
      
      _return0 = ret;
   }
   (void) _return0;
   {
      
      
      
      freia_error ret;
      //PIPS generated variable
      freia_error _return0;
      {
         
         
         int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
         
         
         
         int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
         
         
         
         int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

         int i;
         freia_error ret;
         if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
            
            
            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (size==0) {
            freia_aipo_copy(imout, imin);
            ret = 0;
         }
         else {
            if (connexity==4) goto l99985;
            if (connexity==6) goto l99984;
            if (connexity==8) goto l99983;
            ret = 2;
            goto l99982;
l99983:            ;
            freia_aipo_dilate_8c(imout, imin, kernel_8c);
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_8c);
            goto l99982;
l99984:            ;
            freia_aipo_dilate_6c(imout, imin, kernel_6c);
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_6c(imout, imout, kernel_6c);
            ret = 0;
            goto l99982;
l99985:            ;
            freia_aipo_dilate_8c(imout, imin, kernel_4c);
            for(i = 1; i <= size-1; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_4c);
            ret = 0;
l99982:            ;

         }
         
         
         _return0 = ret;
      }
      ret = _return0;
      ret |= freia_aipo_sub(imout, imout, imin);
      
      
      _return1 = ret;
   }
   (void) _return1;
}

Code after flattening of "freia_cipo_outer_gradient"

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1, ret_0, _return0_0, ret_1;
   //PIPS generated variable
   int i_0, kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   //PIPS generated variable
   freia_error ret_2, _return0_1, ret_3;
   //PIPS generated variable
   int i_1, kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret_1 = 0;
   }
   else {
      if (connexity==4) goto l99989;
      if (connexity==6) goto l99988;
      if (connexity==8) goto l99987;
      ret_1 = 2;
      goto l99986;
l99987:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_8c_0);
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      goto l99986;
l99988:      ;
      freia_aipo_dilate_6c(imout, imin, kernel_6c_0);
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c_0);
      ret_1 = 0;
      goto l99986;
l99989:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c_0);
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c_0);
      ret_1 = 0;
l99986:      ;

   }
   
   
   _return0_0 = ret_1;
   ret_0 = _return0_0;
   ret_0 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return0_0 = ret_0;
   (void) _return0;
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret_3 = 0;
   }
   else {
      if (connexity==4) goto l99985;
      if (connexity==6) goto l99984;
      if (connexity==8) goto l99983;
      ret_3 = 2;
      goto l99982;
l99983:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      goto l99982;
l99984:      ;
      freia_aipo_dilate_6c(imout, imin, kernel_6c_1);
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c_1);
      ret_3 = 0;
      goto l99982;
l99985:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c_1);
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c_1);
      ret_3 = 0;
l99982:      ;

   }
   
   
   _return0_1 = ret_3;
   ret_2 = _return0_1;
   ret_2 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return1 = ret_2;
   (void) _return1;
}

Preconditions after inlining and before partial eval


//  P() {}

int main()
{

//  P() {}

   freia_data2d *imout;

//  P() {}

   freia_data2d *imin;

//  P() {}

   int32_t connexity = 8;

//  P(connexity) {connexity==8}

   uint32_t size = 4;
   //PIPS generated variable

//  P(connexity,size) {connexity==8, size==4}

   freia_error _return0, _return1, ret_0, _return0_0, ret_1;
   //PIPS generated variable

//  P(_return0,_return0_0,_return1,connexity,ret_0,ret_1,size)
//    {connexity==8, size==4}

   int i_0, kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   //PIPS generated variable

//  P(_return0,_return0_0,_return1,connexity,i_0,ret_0,ret_1,size)
//    {connexity==8, size==4}

   freia_error ret_2, _return0_1, ret_3;
   //PIPS generated variable

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

   int i_1, kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}


      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      freia_common_print_backtrace();

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      ret_1 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      freia_common_print_backtrace();

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      ret_1 = 1;
   }
   else if (size==0) {

//  P() {0==-1}

      freia_aipo_copy(imout, imin);

//  P() {0==-1}

      ret_1 = 0;
   }
   else {

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      if (connexity==4) goto l99989;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      if (connexity==6) goto l99988;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      if (connexity==8) goto l99987;

//  P() {0==-1}

      ret_1 = 2;
      goto l99986;
l99987:      ;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      freia_aipo_dilate_8c(imout, imin, kernel_8c_0);

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

      for(i_0 = 1; i_0 <= size-1; i_0 += 1)

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4, 1<=i_0, i_0<=3}

         freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      goto l99986;
l99988:      ;

//  P() {0==-1}

      freia_aipo_dilate_6c(imout, imin, kernel_6c_0);

//  P() {0==-1}

      for(i_0 = 1; i_0 <= size-1; i_0 += 1)

//  P() {0==-1}

         freia_aipo_dilate_6c(imout, imout, kernel_6c_0);

//  P() {0==-1}

      ret_1 = 0;
      goto l99986;
l99989:      ;

//  P() {0==-1}

      freia_aipo_dilate_8c(imout, imin, kernel_4c_0);

//  P() {0==-1}

      for(i_0 = 1; i_0 <= size-1; i_0 += 1)

//  P() {0==-1}

         freia_aipo_dilate_8c(imout, imout, kernel_4c_0);

//  P() {0==-1}

      ret_1 = 0;
l99986:      ;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4, 4<=i_0}


   }

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {connexity==8, size==4}

   
   
   _return0_0 = ret_1;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_1, connexity==8,
//    size==4}

   ret_0 = _return0_0;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, _return0_0==ret_1,
//    connexity==8, size==4}

   ret_0 |= freia_aipo_sub(imout, imout, imin);

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_1, connexity==8,
//    size==4}

   
   
   _return0_0 = ret_0;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

   (void) _return0;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}


      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      freia_common_print_backtrace();

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      ret_3 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      freia_common_print_backtrace();

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      ret_3 = 1;
   }
   else if (size==0) {

//  P() {0==-1}

      freia_aipo_copy(imout, imin);

//  P() {0==-1}

      ret_3 = 0;
   }
   else {

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      if (connexity==4) goto l99985;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      if (connexity==6) goto l99984;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      if (connexity==8) goto l99983;

//  P() {0==-1}

      ret_3 = 2;
      goto l99982;
l99983:      ;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

      for(i_1 = 1; i_1 <= size-1; i_1 += 1)

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4, 1<=i_1, i_1<=3}

         freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      goto l99982;
l99984:      ;

//  P() {0==-1}

      freia_aipo_dilate_6c(imout, imin, kernel_6c_1);

//  P() {0==-1}

      for(i_1 = 1; i_1 <= size-1; i_1 += 1)

//  P() {0==-1}

         freia_aipo_dilate_6c(imout, imout, kernel_6c_1);

//  P() {0==-1}

      ret_3 = 0;
      goto l99982;
l99985:      ;

//  P() {0==-1}

      freia_aipo_dilate_8c(imout, imin, kernel_4c_1);

//  P() {0==-1}

      for(i_1 = 1; i_1 <= size-1; i_1 += 1)

//  P() {0==-1}

         freia_aipo_dilate_8c(imout, imout, kernel_4c_1);

//  P() {0==-1}

      ret_3 = 0;
l99982:      ;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4, 4<=i_1}


   }

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, connexity==8,
//    size==4}

   
   
   _return0_1 = ret_3;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, _return0_1==ret_3,
//    connexity==8, size==4}

   ret_2 = _return0_1;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, _return0_1==ret_2,
//    _return0_1==ret_3, connexity==8, size==4}

   ret_2 |= freia_aipo_sub(imout, imout, imin);

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, _return0_1==ret_3,
//    connexity==8, size==4}

   
   
   _return1 = ret_2;

//  P(_return0,_return0_0,_return0_1,_return1,connexity,i_0,i_1,ret_0,
//    ret_1,ret_2,ret_3,size) {_return0_0==ret_0, _return0_1==ret_3,
//    _return1==ret_2, connexity==8, size==4}

   (void) _return1;
}

Code after partial eval of inlined "main"

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1, ret_0, _return0_0, ret_1;
   //PIPS generated variable
   int i_0, kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   //PIPS generated variable
   freia_error ret_2, _return0_1, ret_3;
   //PIPS generated variable
   int i_1, kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (4==0) {
      freia_aipo_copy(imout, imin);
      ret_1 = 0;
   }
   else {
      if (8==4) goto l99989;
      if (8==6) goto l99988;
      if (8==8) goto l99987;
      ret_1 = 2;
      goto l99986;
l99987:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_8c_0);
      for(i_0 = 1; i_0 <= 3; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      goto l99986;
l99988:      ;
      freia_aipo_dilate_6c(imout, imin, kernel_6c_0);
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c_0);
      ret_1 = 0;
      goto l99986;
l99989:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c_0);
      for(i_0 = 1; i_0 <= size-1; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c_0);
      ret_1 = 0;
l99986:      ;

   }
   
   
   _return0_0 = ret_1;
   ret_0 = _return0_0;
   ret_0 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return0_0 = ret_0;
   (void) _return0;
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (4==0) {
      freia_aipo_copy(imout, imin);
      ret_3 = 0;
   }
   else {
      if (8==4) goto l99985;
      if (8==6) goto l99984;
      if (8==8) goto l99983;
      ret_3 = 2;
      goto l99982;
l99983:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);
      for(i_1 = 1; i_1 <= 3; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      goto l99982;
l99984:      ;
      freia_aipo_dilate_6c(imout, imin, kernel_6c_1);
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c_1);
      ret_3 = 0;
      goto l99982;
l99985:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c_1);
      for(i_1 = 1; i_1 <= size-1; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c_1);
      ret_3 = 0;
l99982:      ;

   }
   
   
   _return0_1 = ret_3;
   ret_2 = _return0_1;
   ret_2 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return1 = ret_2;
   (void) _return1;
}

Code after dead code elimination of inlined "main"

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1, ret_0, _return0_0, ret_1;
   //PIPS generated variable
   int i_0, kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   //PIPS generated variable
   freia_error ret_2, _return0_1, ret_3;
   //PIPS generated variable
   int i_1, kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_0);
      for(i_0 = 1; i_0 <= 3; i_0 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
   }
   
   
   _return0_0 = ret_1;
   ret_0 = _return0_0;
   ret_0 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return0_0 = ret_0;
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);
      for(i_1 = 1; i_1 <= 3; i_1 += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
   }
   
   
   _return0_1 = ret_3;
   ret_2 = _return0_1;
   ret_2 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return1 = ret_2;
   ;
}

Code after second flattening of "freia_cipo_outer_gradient" (unrolling should be performed this time)

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1, ret_0, _return0_0, ret_1;
   //PIPS generated variable
   int i_0, kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   //PIPS generated variable
   freia_error ret_2, _return0_1, ret_3;
   //PIPS generated variable
   int i_1, kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_1 = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_0);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_0);
      i_0 = 4;
   }
   
   
   _return0_0 = ret_1;
   ret_0 = _return0_0;
   ret_0 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return0_0 = ret_0;
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_3 = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      i_1 = 4;
   }
   
   
   _return0_1 = ret_3;
   ret_2 = _return0_1;
   ret_2 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return1 = ret_2;
   ;
}

Unsplit and compile resulting code

