
Initial code

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (size==0) {
      freia_aipo_copy(imout, imin);
      ret = 0;
   }
   else if (connexity==4) {
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      ret = 0;
   }
   else if (connexity==6) {
      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      ret = 0;
   }
   else if (connexity==8) {
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
   }
   else
      ret = 2;

   return ret;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, connexity, size);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Because %ALL is modified by code synthesis, let's get ready

 freia_cipo_outer_gradient
     freia_cipo_dilate
         freia_common_check_image_bpp_compat
         freia_common_print_backtrace
         freia_aipo_copy
         freia_aipo_dilate_8c
         freia_aipo_dilate_6c
     freia_aipo_sub

Preconditions before inlining and before partial eval


//  P() {}

int main()
{

//  P() {}

   freia_data2d *imout;

//  P() {}

   freia_data2d *imin;

//  P() {}

   int32_t connexity = 8;

//  P(connexity) {connexity==8}

   uint32_t size = 4;

//  P(connexity,size) {connexity==8, size==4}

   
   
   
   (void) freia_cipo_outer_gradient(imout, imin, connexity, size);

//  P(connexity,size) {connexity==8, size==4}

   
   
   
   (void) freia_cipo_outer_gradient(imout, imin, connexity, size);
}

//  P() {connexity==8, size==4}

freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{

//  P() {connexity==8, size==4}

   freia_error ret;

//  P(ret) {connexity==8, size==4}


   ret = freia_cipo_dilate(imout, imin, connexity, size);

//  P(ret) {connexity==8, size==4, 0<=ret, ret<=2}

   ret |= freia_aipo_sub(imout, imout, imin);

//  P(ret) {connexity==8, size==4}


   return ret;
}

//  P() {connexity==8, size==4}

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   

//  P() {connexity==8, size==4}

   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   

//  P() {connexity==8, size==4}

   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   

//  P() {connexity==8, size==4}

   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};


//  P() {connexity==8, size==4}

   int i;

//  P(i) {connexity==8, size==4}

   freia_error ret;

//  P(i,ret) {connexity==8, size==4}

   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

//  P(i,ret) {connexity==8, size==4}


      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");

//  P(i,ret) {connexity==8, size==4}

      freia_common_print_backtrace();

//  P(i,ret) {connexity==8, size==4}

      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

//  P(i,ret) {connexity==8, size==4}

      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");

//  P(i,ret) {connexity==8, size==4}

      freia_common_print_backtrace();

//  P(i,ret) {connexity==8, size==4}

      ret = 1;
   }
   else if (size==0) {

//  P() {0==-1}

      freia_aipo_copy(imout, imin);

//  P() {0==-1}

      ret = 0;
   }
   else if (connexity==4) {

//  P() {0==-1}

      freia_aipo_dilate_8c(imout, imin, kernel_4c);

//  P() {0==-1}

      for(i = 1; i <= size-1; i += 1)

//  P() {0==-1}

         freia_aipo_dilate_8c(imout, imout, kernel_4c);

//  P() {0==-1}

      ret = 0;
   }
   else if (connexity==6) {

//  P() {0==-1}

      freia_aipo_dilate_6c(imout, imin, kernel_6c);

//  P() {0==-1}

      for(i = 1; i <= size-1; i += 1)

//  P() {0==-1}

         freia_aipo_dilate_6c(imout, imout, kernel_6c);

//  P() {0==-1}

      ret = 0;
   }
   else if (connexity==8) {

//  P(i,ret) {connexity==8, size==4}

      freia_aipo_dilate_8c(imout, imin, kernel_8c);

//  P(i,ret) {connexity==8, size==4}

      for(i = 1; i <= size-1; i += 1)

//  P(i,ret) {connexity==8, size==4, 1<=i, i<=3}

         freia_aipo_dilate_8c(imout, imout, kernel_8c);

//  P(i,ret) {connexity==8, i==4, size==4}

      ret = 0;
   }
   else

//  P() {0==-1}

      ret = 2;

//  P(i,ret) {connexity==8, size==4, 0<=ret, ret<=1}


   return ret;
}

Code after partial eval

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (4==0) {
      freia_aipo_copy(imout, imin);
      ret = 0;
   }
   else if (8==4) {
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      ret = 0;
   }
   else if (8==6) {
      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for(i = 1; i <= size-1; i += 1)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      ret = 0;
   }
   else if (8==8) {
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for(i = 1; i <= 3; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
   }
   else
      ret = 2;

   return ret;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, 8, 4);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Code after dead code elimination

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for(i = 1; i <= 3; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
   }

   return ret;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, 8, 4);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}
freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   
   
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
   
   
   
   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
   
   
   
   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;
   freia_error ret;
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for(i = 1; i <= 3; i += 1)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
      ret = 0;
   }

   return ret;
}

Code after inlining of "freia_cipo_dilate"

freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;
   //PIPS generated variable
   freia_error _return0;
   {
      
      
      int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
      
      
      
      int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
      
      
      
      int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

      int i;
      freia_error ret;
      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

         fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
         freia_common_print_backtrace();
         ret = 1;
      }
      else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
         
         
         fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
         freia_common_print_backtrace();
         ret = 1;
      }
      else {
         freia_aipo_dilate_8c(imout, imin, kernel_8c);
         for(i = 1; i <= 3; i += 1)
            freia_aipo_dilate_8c(imout, imout, kernel_8c);
         ret = 0;
      }
      
      
      _return0 = ret;
   }
   ret = _return0;
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Code after inlining of "freia_cipo_outer_gradient"

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1;
   {
      
      
      
      freia_error ret;
      //PIPS generated variable
      freia_error _return0;
      {
         
         
         int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
         
         
         
         int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
         
         
         
         int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

         int i;
         freia_error ret;
         if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
            
            
            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else {
            freia_aipo_dilate_8c(imout, imin, kernel_8c);
            for(i = 1; i <= 3; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_8c);
            ret = 0;
         }
         
         
         _return0 = ret;
      }
      ret = _return0;
      ret |= freia_aipo_sub(imout, imout, imin);
      
      
      _return0 = ret;
   }
   (void) _return0;
   {
      
      
      
      freia_error ret;
      //PIPS generated variable
      freia_error _return0;
      {
         
         
         int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
         
         
         
         int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};
         
         
         
         int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

         int i;
         freia_error ret;
         if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
            
            
            fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
            freia_common_print_backtrace();
            ret = 1;
         }
         else {
            freia_aipo_dilate_8c(imout, imin, kernel_8c);
            for(i = 1; i <= 3; i += 1)
               freia_aipo_dilate_8c(imout, imout, kernel_8c);
            ret = 0;
         }
         
         
         _return0 = ret;
      }
      ret = _return0;
      ret |= freia_aipo_sub(imout, imout, imin);
      
      
      _return1 = ret;
   }
   (void) _return1;
}

Code after flattening of "freia_cipo_outer_gradient"

int main()
{
   freia_data2d *imout;
   freia_data2d *imin;
   int32_t connexity = 8;
   uint32_t size = 4;
   //PIPS generated variable
   freia_error _return0, _return1, ret_0, _return0_0, ret_1;
   //PIPS generated variable
   int i_0, kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_0[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1}, kernel_8c_1[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1}, kernel_6c_0[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_4c_0[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, i_1;
   //PIPS generated variable
   freia_error ret_2, ret_3, _return0_1, ret_4;
   //PIPS generated variable
   int i_2, kernel_4c_1[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, kernel_6c_1[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_8c_2[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1}, kernel_8c_3[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1}, kernel_6c_2[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1}, kernel_4c_2[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0}, i_3;
   //PIPS generated variable
   freia_error ret_5;
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_2 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_2 = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_1);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_1);
      i_1 = 4;
      ret_2 = 0;
   }
   
   
   _return0_0 = ret_2;
   ret_0 = _return0_0;
   ret_0 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return0_0 = ret_0;
   (void) _return0;
   
   
   
   //PIPS generated variable
   
   
   
   
   
   
   
   
   
   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {

      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_5 = 1;
   }
   else if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      
      
      fprintf(stderr, "bpp of images are not compatibles\n""ERROR: file %s, line %d, function %s: ", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, "freia_cipo_dilate");
      freia_common_print_backtrace();
      ret_5 = 1;
   }
   else {
      freia_aipo_dilate_8c(imout, imin, kernel_8c_3);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_3);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_3);
      freia_aipo_dilate_8c(imout, imout, kernel_8c_3);
      i_3 = 4;
      ret_5 = 0;
   }
   
   
   _return0_1 = ret_5;
   ret_3 = _return0_1;
   ret_3 |= freia_aipo_sub(imout, imout, imin);
   
   
   _return1 = ret_3;
   (void) _return1;
}

Unsplit and compile resulting code

