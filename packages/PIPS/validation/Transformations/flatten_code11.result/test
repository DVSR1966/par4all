
Execute initial code

foo=1
foo=2
foo=3
foo=4

Initial code

void flatten_code11(void)
{
   // BEGIN BLOCK
   int i;                                                               /*0007*/
   
   /* Let's execute this loop four times! */
   for(i = 0; i <= 3; i += 1) {                                         /*0010*/
      // BEGIN BLOCK
      static int foo = 0;                                               /*0011*/
      
      /* Let's update a static variable! */
      foo++;                                                            /*0014*/

      fprintf(stdout, "foo=%d\n", foo);                                 /*0016*/
      // END BLOCK
   }
   // END BLOCK
}

Code with preconditions


//  P() {}

void flatten_code11(void)
{

//  P() {}

   // BEGIN BLOCK

//  P() {}

   int i;                                                               /*0007*/

//  P(i) {}

   
   /* Let's execute this loop four times! */
   for(i = 0; i <= 3; i += 1) {                                         /*0010*/

//  P(foo,i) {0<=i, i<=3}

      // BEGIN BLOCK

//  P(foo,i) {0<=i, i<=3}

      static int foo = 0;                                               /*0011*/

//  P(foo,i) {0<=i, i<=3}

      
      /* Let's update a static variable! */
      foo++;                                                            /*0014*/

//  P(foo,i) {0<=i, i<=3}


      fprintf(stdout, "foo=%d\n", foo);                                 /*0016*/
      // END BLOCK
   }
   // END BLOCK
}

Code after code flattening

void flatten_code11(void)
{
   // BEGIN BLOCK
   int i;                                                               /*0007*/
   //PIPS generated variable
   static int foo = 0;
   
   /* Let's execute this loop four times! */
   foo++;
   fprintf(stdout, "foo=%d\n", foo);
   foo++;
   fprintf(stdout, "foo=%d\n", foo);
   foo++;
   fprintf(stdout, "foo=%d\n", foo);
   foo++;
   fprintf(stdout, "foo=%d\n", foo);
   i = 4;
   // END BLOCK
}

Unsplit and compile resulting code


Execute resulting code

foo=1
foo=2
foo=3
foo=4
