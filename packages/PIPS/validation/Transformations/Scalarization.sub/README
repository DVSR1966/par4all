conditional01.c: bug according to Mehdi Amini

constant_array_reference01.c: make sure that scalarization is performed at any statement level, not only within loops (ticket 531)

constant_array_reference02.c

constant_array_reference03.c

constant_array_reference04.c

contant_reference_in_loop.c

missing_copy_out.c

perfect_loop01.c: check property 

scalarization01.f
scalarization02.f
scalarization03.f
scalarization04.f

scalarization05.c
scalarization06.c
scalarization07.c
scalarization08.c
scalarization09.c
scalarization10.c
scalarization11.c
scalarization12.c
scalarization13.f
scalarization14.c
scalarization15.c
scalarization16.c
scalarization17.c
scalarization18.c
scalarization19.c
scalarization20.c
scalarization21.c
scalarization22.c
scalarization23.c
scalarization24.c
scalarization25.c
scalarization26.c
scalarization27.c
scalarization28.c
scalarization29.c
scalarization31.c: mistake?

scalarization30.f: first example by Carr and Kennedy (SPE)
scalarization31.f: second example by Carr and Kennedy (SPE)
scalarization32.f: third example by Carr and Kennedy (SPE)
scalarization33.f: fourth example by Carr and Kennedy (SPE)
scalarization34.f: fifth example by Carr and Kennedy (SPE) [partial failure]
scalarization35.f: sixth example by Carr and Kennedy (SPE) [failed]
scalarization36.f: sixth (?) example by Carr and Kennedy (SPE) [region analysis]

scalarization37.f: same as scalarization01, but different tpips to check property SCALARIZATION_PREFIX

scalarization38.f: same as scalarization37, but with a name conflict

scalarization39.f: same as scalarization38, but with a name conflict linked to Fortran uppercase normalization

scalarization40.f: same as scalarization01, but different name for the enw variable (FI: ?)

scalarization41.c: ?
scalarization42.c
scalarization43.c

sequence01.c: x is always scalarized because it is neither copied in nor out

sequence02.c: x is copied in and thresholding blocks the scalarization

sequence03.c: x and y could be scalarized, but thresholding is used to scalarize x only

sequence04.c: no scalarization because the index variables are not constant over the block; they are declared insid the block

sequence05.c: same as sequence04, but the index variables are declared outside of the block

sequence06.c: check memory access strictness, but because the inner loop bound is the same as the outer loop bound, the scalarization is safe

sequence07.c: check memory access strictness; since m and n are unknown, the sclarization should not occur

sequence08.c: check memory access strictness; since m and n are unknown, the sclarization of out-of-bound reference a[100] occurs at different level, depending on the strictness required for memory accesses.
