
Initial code for "suppress_dead_code01"

void suppress_dead_code01(int *x)
{
   char *p;
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe. */
   p = malloc(10);
   free(p);
   
   /* Not dead code because of control effect */
   while (1)
      ;
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe, but dead
        because the previous loop never terminates. */
   p = malloc(10);
   free(p);
}

Initial code for "suppress_dead_code01" with proper effects

void suppress_dead_code01(int *x)
{
   char *p;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe. */
   p = malloc(10);
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
   
   /* Not dead code because of control effect */
   while (1)
      ;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe, but dead
        because the previous loop never terminates. */
   p = malloc(10);
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}

Initial code for "suppress_dead_code01" with cumulated effects

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void suppress_dead_code01(int *x)
{
   char *p;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe. */
   p = malloc(10);
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
   
   /* Not dead code because of control effect */
   while (1)
      ;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe, but dead
        because the previous loop never terminates. */
   p = malloc(10);
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}

Code for "suppress_dead_code01" after dead code elimination

void suppress_dead_code01(int *x)
{
   char *p;
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe. */
   p = malloc(10);
   free(p);
   
   /* Not dead code because of control effect */
   while (1)
      ;
   
   /* Not dead code because of memory read-write effects, even if
        masked because the implementation is thread-safe, but dead
        because the previous loop never terminates. */
   ;
}
