original code
void alphablending(short src0[40][40], short src1[40][40], short result[40][40])
{
   unsigned int i, j;
   for(i = 0; i <= 39; i += 1)
      for(j = 0; j <= 39; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
int caller()
{
   short a[40][40], b[40][40], c[40][40];
   alphablending(a, b, c);
}

extern void alphablending(short src0[40][40], short src1[40][40], short result[40][40]);

extern int caller();
tiled code
void alphablending(short src0[40][40], short src1[40][40], short result[40][40])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 3; j_t += 1)
l99996:
         for(i = 10*i_t; i <= 9+10*i_t; i += 1)
l99997:
            for(j = 10*j_t; j <= 9+10*j_t; j += 1)
               result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
with r-w regions

//  <result[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=39, 0<=PHI2, PHI2<=39}>
//  <src0[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=39, 0<=PHI2, PHI2<=39}>
//  <src1[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=39, 0<=PHI2, PHI2<=39}>

void alphablending(short src0[40][40], short src1[40][40], short result[40][40])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;

//  <result[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=39, 0<=PHI2, PHI2<=39}>
//  <src0[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=39, 0<=PHI2, PHI2<=39}>
//  <src1[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=39, 0<=PHI2, PHI2<=39}>

l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)

//  <result[PHI1][PHI2]-W-MAY-{10i_t<=PHI1, PHI1<=9+10i_t, 0<=PHI2,
//    PHI2<=39, 0<=i_t, i_t<=3}>
//  <src0[PHI1][PHI2]-R-MAY-{10i_t<=PHI1, PHI1<=9+10i_t, 0<=PHI2,
//    PHI2<=39, 0<=i_t, i_t<=3}>
//  <src1[PHI1][PHI2]-R-MAY-{10i_t<=PHI1, PHI1<=9+10i_t, 0<=PHI2,
//    PHI2<=39, 0<=i_t, i_t<=3}>

l99995:
      for(j_t = 0; j_t <= 3; j_t += 1)

//  <result[PHI1][PHI2]-W-MAY-{10i_t<=PHI1, PHI1<=9+10i_t,
//    10j_t<=PHI2, PHI2<=9+10j_t, 0<=i_t, i_t<=3, 0<=j_t, j_t<=3}>
//  <src0[PHI1][PHI2]-R-MAY-{10i_t<=PHI1, PHI1<=9+10i_t, 10j_t<=PHI2,
//    PHI2<=9+10j_t, 0<=i_t, i_t<=3, 0<=j_t, j_t<=3}>
//  <src1[PHI1][PHI2]-R-MAY-{10i_t<=PHI1, PHI1<=9+10i_t, 10j_t<=PHI2,
//    PHI2<=9+10j_t, 0<=i_t, i_t<=3, 0<=j_t, j_t<=3}>

l99996:
         for(i = 10*i_t; i <= 9+10*i_t; i += 1)

//  <result[PHI1][PHI2]-W-MAY-{PHI1==i, 10j_t<=PHI2, PHI2<=9+10j_t,
//    10i_t<=i, i<=9+10i_t, 0<=i_t, i_t<=3, 0<=j_t, j_t<=3}>
//  <src0[PHI1][PHI2]-R-MAY-{PHI1==i, 10j_t<=PHI2, PHI2<=9+10j_t,
//    10i_t<=i, i<=9+10i_t, 0<=i_t, i_t<=3, 0<=j_t, j_t<=3}>
//  <src1[PHI1][PHI2]-R-MAY-{PHI1==i, 10j_t<=PHI2, PHI2<=9+10j_t,
//    10i_t<=i, i<=9+10i_t, 0<=i_t, i_t<=3, 0<=j_t, j_t<=3}>

l99997:
            for(j = 10*j_t; j <= 9+10*j_t; j += 1)

//  <result[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 10i_t<=i,
//    i<=9+10i_t, 0<=i_t, i_t<=3, 10j_t<=j, j<=9+10j_t, 0<=j_t,
//    j_t<=3}>
//  <src0[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 10i_t<=i, i<=9+10i_t,
//    0<=i_t, i_t<=3, 10j_t<=j, j<=9+10j_t, 0<=j_t, j_t<=3}>
//  <src1[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 10i_t<=i, i<=9+10i_t,
//    0<=i_t, i_t<=3, 10j_t<=j, j<=9+10j_t, 0<=j_t, j_t<=3}>

               result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
isolated code
void alphablending(short src0[40][40], short src1[40][40], short result[40][40])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 3; j_t += 1) {
         //PIPS generated variable
         short result0[9+1][9+1], src00[9+1][9+1], src10[9+1][9+1];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i4 = 0; i4 <= 9; i4 += 1)
            for(i5 = 0; i5 <= 9; i5 += 1)
               src10[i5][i4] = src1[10*i_t+i5][10*j_t+i4];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i2 = 0; i2 <= 9; i2 += 1)
            for(i3 = 0; i3 <= 9; i3 += 1)
               src00[i3][i2] = src0[10*i_t+i3][10*j_t+i2];

l99996:
         for(i = 10*i_t; i <= 9+10*i_t; i += 1)
l99997:
            for(j = 10*j_t; j <= 9+10*j_t; j += 1)
               result0[i-10*i_t][j-10*j_t] = (40*src00[i-10*i_t][j-10*j_t]+60*src10[i-10*i_t][j-10*j_t])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 9; i0 += 1)
            for(i1 = 0; i1 <= 9; i1 += 1)
               result[10*i_t+i1][10*j_t+i0] = result0[i1][i0];
      }
}

