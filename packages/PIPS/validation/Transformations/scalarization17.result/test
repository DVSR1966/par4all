
IN regions


//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE, 0<=PHI2,
//    PHI2+1<=TOP-LEVEL:SIZE}>

void scalarization17(double A[SIZE], double B[SIZE][SIZE])
{

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE, 0<=PHI2,
//    PHI2+1<=TOP-LEVEL:SIZE}>

   // BEGIN BLOCK
   int i, j;

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE, 0<=PHI2,
//    PHI2+1<=TOP-LEVEL:SIZE}>

   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-IN-EXACT-{i==PHI1, 1+i<=TOP-LEVEL:SIZE,
//    1<=TOP-LEVEL:SIZE, 0<=i}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI2==i, 0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE,
//    1+i<=TOP-LEVEL:SIZE, 0<=i}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, 1+i<=TOP-LEVEL:SIZE,
//    1+j<=TOP-LEVEL:SIZE, 0<=i, 0<=j}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==j, PHI2==i, 1+i<=TOP-LEVEL:SIZE,
//    1+j<=TOP-LEVEL:SIZE, 0<=i, 0<=j}>

         A[i] = B[j][i]+A[i];
   // END BLOCK
}

OUT regions


//  <A[PHI1]-OUT-EXACT-{PHI1==0, PHI1+1<=TOP-LEVEL:SIZE}>

void scalarization17(double A[SIZE], double B[SIZE][SIZE])
{

//  <A[PHI1]-OUT-EXACT-{PHI1==0, PHI1+1<=TOP-LEVEL:SIZE}>

   // BEGIN BLOCK
   int i, j;

//  <A[PHI1]-OUT-EXACT-{PHI1==0, PHI1+1<=TOP-LEVEL:SIZE}>

   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-OUT-EXACT-{PHI1==i, PHI1==0, 1+i<=TOP-LEVEL:SIZE}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-OUT-MAY-{PHI1==i, 0<=PHI1, PHI1+1<=TOP-LEVEL:SIZE,
//    1+j<=TOP-LEVEL:SIZE, 0<=j}>

         A[i] = B[j][i]+A[i];
   // END BLOCK
}

Code after scalarization

void scalarization17(double A[SIZE], double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i, j;
   //PIPS generated variable
   double __scalar__0;
   for(i = 0; i <= SIZE-1; i += 1) {
      // BEGIN BLOCK
      __scalar__0 = A[i];
      for(j = 0; j <= SIZE-1; j += 1)
         __scalar__0 = B[j][i]+__scalar__0;
      A[i] = __scalar__0;
      // END BLOCK
   }
   // END BLOCK
}
