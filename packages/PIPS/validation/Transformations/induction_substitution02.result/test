
Initial code for "induction02"

void induction02(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = -1;
   for(i = 0; i <= SIZE-1; i += 1) {
      k = i;
      for(j = 0; j <= SIZE-1; j += 1) {
         k++;
         A[k] = B[j-k][k]+A[k];
      }
   }
}

Preconditions for "induction02"


//  P() {SIZE==10}

void induction02(double A[SIZE], double B[SIZE][SIZE])
{

//  P() {SIZE==10}

   int i, j;

//  P(i,j) {SIZE==10}

   int k = -1;

//  P(i,j,k) {SIZE==10, k==-1}

   for(i = 0; i <= SIZE-1; i += 1) {

//  P(i,j,k) {SIZE==10, 0<=i, i<=9}

      k = i;

//  P(i,j,k) {SIZE==10, i==k, 0<=i, i<=9}

      for(j = 0; j <= SIZE-1; j += 1) {

//  P(i,j,k) {SIZE==10, i+j==k, 0<=j, j<=9, k<=j+9, j<=k}

         k++;

//  P(i,j,k) {SIZE==10, i+j==k-1, 0<=j, j<=9, k<=j+10, j+1<=k}

         A[k] = B[j-k][k]+A[k];
      }
   }
}

Code for "induction02" after induction substitution

void induction02(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = -1;
   for(i = 0; i <= SIZE-1; i += 1) {
      k = i;
      for(j = 0; j <= SIZE-1; j += 1) {
         k = -((-i)+(-j))+1;
         A[-((-j)+(-i)+-1)] = B[j-(-((-j)+(-i)+-1))][-((-j)+(-i)+-1)]+A[-((-j)+(-i)+-1)];
      }
   }
}
