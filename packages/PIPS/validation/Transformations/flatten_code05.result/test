
Initial code

int flatten_code05()
{
   // BEGIN BLOCK
   int i = 1;                                                           /*0016*/
   int j;                                                               /*0017*/
   j++;                                                                 /*0018*/
   {
      // BEGIN BLOCK
      int i = j+1;                                                      /*0020*/
      int k = 2;                                                        /*0021*/
      i++;                                                              /*0022*/
      j = 1;                                                            /*0023*/
      {
         // BEGIN BLOCK
         int k = 2;                                                     /*0025*/
         i++;                                                           /*0026*/
         j = 1;                                                         /*0027*/
         // END BLOCK
      }
      // END BLOCK
   }
   i = j;                                                               /*0030*/

   printf("%d %d\n", i, j);                                             /*0032*/
   // END BLOCK
}

Code after flatten_code

int flatten_code05()
{
   // BEGIN BLOCK
   int i = 1;                                                           /*0016*/
   int j;                                                               /*0017*/
   //PIPS generated variable
   int i_0, k = 2, k_0 = 2, k_1 = 2;
   j++;                                                                 /*0018*/
   i_0 = j+1;
   i_0++;                                                               /*0022*/
   j = 1;                                                               /*0023*/
   i_0++;                                                               /*0026*/
   j = 1;                                                               /*0027*/
   i = j;                                                               /*0030*/

   printf("%d %d\n", i, j);                                             /*0032*/
   // END BLOCK
}
