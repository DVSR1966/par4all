tidy the code just in case of
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int x, y;
   for(y = 2; y <= n-3; y += 1)
      for(x = 0; x <= n-1; x += 1)
         img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   for(y = 2; y <= n-3; y += 1)
      for(x = 0; x <= n-1; x += 1)
         img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
}
tiling
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
   for(I_0 = 2; I_0 <= (n-3)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-3, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
            for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
               img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
      }
   }
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
   for(I_0 = 2; I_0 <= (n-3)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-3, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-3>I_6+__TERAPYPS_WIDTH-1)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
               for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
            else
               for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
            for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
         else
            for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
      }
   }
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
   for(I_0 = 2; I_0 <= (n-3)/__TERAPYPS_WIDTH; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = I_0*__TERAPYPS_WIDTH;
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-3, I_6+__TERAPYPS_WIDTH-1)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-3>I_6+__TERAPYPS_WIDTH-1)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
               for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
            else
               for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
                  for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
            for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
         else
            for(y = I_6; y <= MIN(n-3, I_6+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_11; x <= MIN(n-1, I_11+__TERAPYPS_HEIGHT-1); x += 1)
                  img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
      }
   }
}
group constants and isolate
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int __TERAPYPS_WIDTH = 124, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
l99998:   ;
l99988:
   for(I_0 = 2; I_0 <= (n-3)/124; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = 124*I_0;
l99989:
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-3, I_6+123)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-3>I_6+123)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99996:
               for(y = I_6; y <= I_6+123; y += 1)
l99997:
                  for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
            else
l99994:
               for(y = I_6; y <= I_6+123; y += 1)
l99995:
                  for(x = I_11; x <= n-1; x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
         else if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99992:
            for(y = I_6; y <= n-3; y += 1)
l99993:
               for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                  img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
         else
l99990:
            for(y = I_6; y <= n-3; y += 1)
l99991:
               for(x = I_11; x <= n-1; x += 1)
                  img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
      }
   }
}
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int __TERAPYPS_WIDTH = 124, __TERAPYPS_HEIGHT;
   int x, y;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28;
   __TERAPYPS_HEIGHT = 260;
l99998:   ;
l99988:
   for(I_0 = 2; I_0 <= (n-3)/124; I_0 += 1) {
      I_1 = MAX(INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
      I_6 = 124*I_0;
l99989:
      for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
         y = I_6+MAX(INT(MIN(n-3, I_6+123)-I_6+1), 0);
         I_11 = I_1*__TERAPYPS_HEIGHT;
         if (n-3>I_6+123)
            if (n-1>I_11+__TERAPYPS_HEIGHT-1)
l99996:
               for(y = I_6; y <= I_6+123; y += 1)
l99997:
                  for(x = I_11; x <= I_11+__TERAPYPS_HEIGHT-1; x += 1)
                     img_out[y-2][x] = MIN(MIN(MIN(MIN(img[y-2][x], img[y-1][x]), img[y][x]), img[y+1][x]), img[y+2][x]);
            else
l99994:
               for(y = I_6; y <= I_6+123; y += 1)
l99995