tidy the code just in case of
I have to do this early
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
}
tiling
group constants and isolate
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         int caillou[6];
         caillou[0] = 0;
         caillou[1] = 4;
         caillou[2] = 40;
         caillou[3] = 60;
         caillou[4] = i_t;
         caillou[5] = j_t;

l99996:
         for(i = 128*i_t; i <= 128*i_t+127; i += 1)
l99997:
            for(j = 8*j_t; j <= 8*j_t+7; j += 1)
               result[i][j] = (caillou[2]*src0[i][j]+caillou[3]*src1[i][j])*(caillou[0]<<caillou[1])>>caillou[1];
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5, i6;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         int caillou[6];
         caillou[0] = 0;
         caillou[1] = 4;
         caillou[2] = 40;
         caillou[3] = 60;
         caillou[4] = i_t;
         caillou[5] = j_t;

         {
            //PIPS generated variable
            short result0[128][8];
            //PIPS generated variable
            int caillou0[4];
            //PIPS generated variable
            short src10[128][8], src00[128][8];
            /* transfer loop generated by PIPS from src0 to src00 */
            for(i5 = 0; i5 <= 7; i5 += 1)
               for(i6 = 0; i6 <= 127; i6 += 1)
                  src00[i6][i5] = src0[128*i_t+i6][8*j_t+i5];
            /* transfer loop generated by PIPS from src1 to src10 */
            for(i3 = 0; i3 <= 7; i3 += 1)
               for(i4 = 0; i4 <= 127; i4 += 1)
                  src10[i4][i3] = src1[128*i_t+i4][8*j_t+i3];
            /* transfer loop generated by PIPS from caillou to caillou0 */
            for(i2 = 0; i2 <= 3; i2 += 1)
               caillou0[i2] = caillou[i2];

l99996:
            for(i = 128*i_t; i <= 128*i_t+127; i += 1)
l99997:
               for(j = 8*j_t; j <= 8*j_t+7; j += 1)
                  result0[i-128*i_t][j-8*j_t] = (caillou0[2-0]*src00[i-128*i_t][j-8*j_t]+caillou0[3-0]*src10[i-128*i_t][j-8*j_t])*(caillou0[0-0]<<caillou0[1-0])>>caillou0[1-0];
            /* transfer loop generated by PIPS from result0 to result */
            for(i0 = 0; i0 <= 7; i0 += 1)
               for(i1 = 0; i1 <= 127; i1 += 1)
                  result[128*i_t+i1][8*j_t+i0] = result0[i1][i0];
         }
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5, i6;
l99998:
   for(i_t = 1; i_t <= 4; i_t += 1)
l99995:
      for(j_t = 1; j_t <= 64; j_t += 1) {
         //PIPS generated variable
         int caillou[6];
         caillou[0] = 0;
         caillou[1] = 4;
         caillou[2] = 40;
         caillou[3] = 60;
         caillou[4] = -1+i_t;
         caillou[5] = -1+j_t;

         {
            //PIPS generated variable
            short result0[128][8];
            //PIPS generated variable
            int caillou0[4];
            //PIPS generated variable
            short src10[128][8], src00[128][8];
            /* transfer loop generated by PIPS from src0 to src00 */
            for(i5 = 1; i5 <= 8; i5 += 1)
               for(i6 = 1; i6 <= 128; i6 += 1)
                  src00[-1+i6][-1+i5] = src0[128*(-1+i_t)+-1+i6][8*(-1+j_t)+-1+i5];
            /* transfer loop generated by PIPS from src1 to src10 */
            for(i3 = 1; i3 <= 8; i3 += 1)
               for(i4 = 1; i4 <= 128; i4 += 1)
                  src10[-1+i4][-1+i3] = src1[128*(-1+i_t)+-1+i4][8*(-1+j_t)+-1+i3];
            /* transfer loop generated by PIPS from caillou to caillou0 */
            for(i2 = 1; i2 <= 4; i2 += 1)
               caillou0[-1+i2] = caillou[-1+i2];

l99996:
            for(i = 1; i <= 128; i += 1)
l99997:
               for(j = 1; j <= 8; j += 1)
                  result0[-1+i+128*(-1+i_t)-128*(-1+i_t)][-1+j+8*(-1+j_t)-8*(-1+j_t)] = (caillou0[2-0]*src00[-1+i+128*(-1+i_t)-128*(-1+i_t)][-1+j+8*(-1+j_t)-8*(-1+j_t)]+caillou0[3-0]*src10[-1+i+128*(-1+i_t)-128*(-1+i_t)][-1+j+8*(-1+j_t)-8*(-1+j_t)])*(caillou0[0-0]<<caillou0[1-0])>>caillou0[1-0];
            /* transfer loop generated by PIPS from result0 to result */
            for(i0 = 1; i0 <= 8; i0 += 1)
               for(i1 = 1; i1 <= 128; i1 += 1)
                  result[128*(-1+i_t)+-1+i1][8*(-1+j_t)+-1+i0] = result0[-1+i1][-1+i0];
         }
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5, i6;
l99998:
   for(i_t = 1; i_t <= 4; i_t += 1)
l99995:
      for(j_t = 1; j_t <= 64; j_t += 1) {
         //PIPS generated variable
         int caillou[6];
         caillou[0] = 0;
         caillou[1] = 4;
         caillou[2] = 40;
         caillou[3] = 60;
         caillou[4] = i_t-1;
         caillou[5] = j_t-1;

         {
            //PIPS generated variable
            short result0[128][8];
            //PIPS generated variable
            int caillou0[4];
            //PIPS generated variable
            short src10[128][8], src00[128][8];
            /* transfer loop generated by PIPS from src0 to src00 */
            for(i5 = 1; i5 <= 8; i5 += 1)
               for(i6 = 1; i6 <= 128; i6 += 1)
                  src00[i6-1][i5-1] = src0[i6+128*i_t-129][i5+8*j_t-9];
            /* transfer loop generated by PIPS from src1 to src10 */
            for(i3 = 1; i3 <= 8; i3 += 1)
               for(i4 = 1; i4 <= 128; i4 += 1)
                  src10[i4-1][i3-1] = src1[i4+128*i_t-129][i3+8*j_t-9];
            /* transfer loop generated by PIPS from caillou to caillou0 */
            for(i2 = 1; i2 <= 4; i2 += 1)
               caillou0[i2-1] = caillou[i2-1];

l99996:
            for(i = 1; i <= 128; i += 1)
l99997:
               for(j = 1; j <= 8; j += 1)
                  result0[i-1][j-1] = (caillou0[2]*src00[i-1][j-1]+caillou0[3]*src10[i-1][j-1])*(caillou0[0]<<caillou0[1])>>caillou0[1];
            /* transfer loop generated by PIPS from result0 to result */
            for(i0 = 1; i0 <= 8; i0 += 1)
               for(i1 = 1; i1 <= 128; i1 += 1)
                  result[i1+128*i_t-129][i0+8*j_t-9] = result0[i1-1][i0-1];
         }
      }
}
outlining to launcher
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5, i6;
l99998:
   for(i_t = 1; i_t <= 4; i_t += 1)
l99995:
      for(j_t = 1; j_t <= 64; j_t += 1) {
         //PIPS generated variable
         int caillou[6];
         caillou[0] = 0;
         caillou[1] = 4;
         caillou[2] = 40;
         caillou[3] = 60;
         caillou[4] = i_t-1;
         caillou[5] = j_t-1;

         {
            //PIPS generated variable
            short result0[128][8];
            //PIPS generated variable
            int caillou0[4];
            //PIPS generated variable
            short src10[128][8], src00[128][8];
            /* transfer loop generated by PIPS from src0 to src00 */
l99993:
            for(i5 = 1; i5 <= 8; i5 += 1)
l99994:
               for(i6 = 1; i6 <= 128; i6 += 1)
                  src00[i6-1][i5-1] = src0[i6+128*i_t-129][i5+8*j_t-9];
            /* transfer loop generated by PIPS from src1 to src10 */
l99991:
            for(i3 = 1; i3 <= 8; i3 += 1)
l99992:
               for(i4 = 1; i4 <= 128; i4 += 1)
                  src10[i4-1][i3-1] = src1[i4+128*i_t-129][i3+8*j_t-9];
            /* transfer loop generated by PIPS from caillou to caillou0 */
l99990:
            for(i2 = 1; i2 <= 4; i2 += 1)
               caillou0[i2-1] = caillou[i2-1];

l99996:            launcher_0(8, caillou0, result0, src00, src10);
            /* transfer loop generated by PIPS from result0 to result */
l99988:
            for(i0 = 1; i0 <= 8; i0 += 1)
l99989:
               for(i1 = 1; i1 <= 128; i1 += 1)
                  result[i1+128*i_t-129][i0+8*j_t-9] = result0[i1-1][i0-1];
         }
      }
}

//  <caillou0[PHI1]-R-MAY-{0<=PHI1, PHI1<=3, I_0==8}>
//  <result0[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7,
//    I_0==8}>
//  <src00[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7,
//    I_0==8}>
//  <src10[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7,
//    I_0==8}>

void launcher_0(int I_0, int caillou0[4], short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int i, j;

//  <caillou0[PHI1]-R-MAY-{0<=PHI1, PHI1<=3, I_0==8}>
//  <result0[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7,
//    I_0==8}>
//  <src00[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7,
//    I_0==8}>
//  <src10[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=7,
//    I_0==8}>

l99996:
   for(i = 1; i <= 128; i += 1)

//  <caillou0[PHI1]-R-MAY-{0<=PHI1, PHI1<=3, I_0==8, 1<=i, i<=128}>
//  <result0[PHI1][PHI2]-W-MAY-{PHI1==i-1, 0<=PHI2, PHI2<=7, I_0==8,
//    1<=i, i<=128}>
//  <src00[PHI1][PHI2]-R-MAY-{PHI1==i-1, 0<=PHI2, PHI2<=7, I_0==8,
//    1<=i, i<=128}>
//  <src10[PHI1][PHI2]-R-MAY-{PHI1==i-1, 0<=PHI2, PHI2<=7, I_0==8,
//    1<=i, i<=128}>

l99997:
      for(j = 1; j <= I_0; j += 1)

//  <caillou0[PHI1]-R-MAY-{0<=PHI1, PHI1<=3, I_0==8, 1<=i, i<=128,
//    1<=j, j<=8}>
//  <result0[PHI1][PHI2]-W-EXACT-{PHI1==i-1, PHI2==j-1, I_0==8, 1<=i,
//    i<=128, 1<=j, j<=8}>
//  <src00[PHI1][PHI2]-R-EXACT-{PHI1==i-1, PHI2==j-1, I_0==8, 1<=i,
//    i<=128, 1<=j, j<=8}>
//  <src10[PHI1][PHI2]-R-EXACT-{PHI1==i-1, PHI2==j-1, I_0==8, 1<=i,
//    i<=128, 1<=j, j<=8}>

         result0[i-1][j-1] = (caillou0[2]*src00[i-1][j-1]+caillou0[3]*src10[i-1][j-1])*(caillou0[0]<<caillou0[1])>>caillou0[1];
}
outlining to microcode
label: l99997
void launcher_0(int I_0, int caillou0[4], short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int i, j;
l99996:
   for(i = 1; i <= 128; i += 1)
l99997:      launcher_0_microcode(I_0, caillou0, &result0[-1+i], &src00[-1+i], &src10[-1+i]);
}
void launcher_0_microcode(int I_0, int caillou0[4], short (*result00)[8], short (*src000)[8], short (*src100)[8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 1; j <= I_0; j += 1)
      (*result00)[j-1] = (caillou0[2]*(*src000)[j-1]+caillou0[3]*(*src100)[j-1])*(caillou0[0]<<caillou0[1])>>caillou0[1];
}
normalize microcode launcher_0_microcode
void launcher_0_microcode(int I_0, int caillou0[4], short (*result00)[8], short (*src000)[8], short (*src100)[8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= -1+I_0; j += 1)
      (*result00)[j+1-1] = (caillou0[2]*(*src000)[j+1-1]+caillou0[3]*(*src100)[j+1-1])*(caillou0[0]<<caillou0[1])>>caillou0[1];
}
void launcher_0_microcode(int I_0, int caillou0[4], short (*result00)[8], short (*src000)[8], short (*src100)[8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= -1+I_0; j += 1)
      (*result00)[j+1-1] = (caillou0[2]*(*src000)[j+1-1]+caillou0[3]*(*src100)[j+1-1])*(caillou0[0]<<caillou0[1])>>caillou0[1];
}
void launcher_0_microcode(int I_0, int *caillou0, short *result00, short *src000, short *src100)
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= -1+I_0; j += 1)
      *(result00+j+1-1) = (caillou0[2]**(src000+j+1-1)+caillou0[3]**(src100+j+1-1))*(caillou0[0]<<caillou0[1])>>caillou0[1];
}
I_0 belongs to a loop bound
caillou0 seems a mask
result00 seems a mask
src000 seems a mask
src100 seems a mask
void launcher_0_microcode(int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result00, *ma1, *src000, *ma2, *src100, *ma3;
   //PIPS generated variable
   unsigned int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   ma3 = FIFO3;
   ma2 = FIFO2;
   ma1 = FIFO1;
   ma0 = FIFO0;
l99997:   ;
   re2 = 1;
   while (re2<=N0) {
      *(ma1+re2+1-1) = (ma0[2]**(ma2+re2+1-1)+ma0[3]**(ma3+re2+1-1))*(ma0[0]<<ma0[1])>>ma0[1];
      re2 = 1+re2;
   }
}
void launcher_0_microcode(int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result00, *ma1, *src000, *ma2, *src100, *ma3;
   //PIPS generated variable
   unsigned int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int I_1, I_2;
   //PIPS generated variable
   short *P_0;
   //PIPS generated variable
   int I_3, I_4, I_5;
   //PIPS generated variable
   short *P_1;
   //PIPS generated variable
   int I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   short *P_2;
   ma3 = FIFO3;
   ma2 = FIFO2;
   ma1 = FIFO1;
   ma0 = FIFO0;
l99997:   ;
   re2 = 1;
   while (re2<=N0) {
      I_1 = re2+1;
      I_2 = I_1-1;
      P_0 = ma2+I_2;
      I_3 = ma0[2]**P_0;
      I_4 = re2+1;
      I_5 = I_4-1;
      P_1 = ma3+I_5;
      I_6 = ma0[3]**P_1;
      I_7 = I_3+I_6;
      I_8 = ma0[0]<<ma0[1];
      I_9 = I_7*I_8;
      I_10 = re2+1;
      I_11 = I_10-1;
      P_2 = ma1+I_11;
      *P_2 = I_9>>ma0[1];
      re2 = 1+re2;
   }
}
void launcher_0_microcode(int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result00, *ma1, *src000, *ma2, *src100, *ma3;
   //PIPS generated variable
   unsigned int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int I_1, I_2;
   //PIPS generated variable
   short *P_0;
   //PIPS generated variable
   int I_3, I_4, I_5;
   //PIPS generated variable
   short *P_1;
   //PIPS generated variable
   int I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   short *P_2;
   ma3 = FIFO3;
   ma2 = FIFO2;
   ma1 = FIFO1;
   ma0 = FIFO0;
l99997:   ;
   re2 = 1;
   while (re2<=N0) {
      I_1 = re2;
      I_1 = I_1+1;
      I_2 = I_1;
      I_2 = I_2-1;
      P_0 = ma2;
      P_0 = P_0+I_2;
      I_3 = ma0[2];
      I_3 = I_3**P_0;
      I_4 = re2;
      I_4 = I_4+1;
      I_5 = I_4;
      I_5 = I_5-1;
      P_1 = ma3;
      P_1 = P_1+I_5;
      I_6 = ma0[3];
      I_6 = I_6**P_1;
      I_7 = I_3;
      I_7 = I_7+I_6;
      I_8 = ma0[0];
      I_8 = I_8<<ma0[1];
      I_9 = I_7;
      I_9 = I_9*I_8;
      I_10 = re2;
      I_10 = I_10+1;
      I_11 = I_10;
      I_11 = I_11-1;
      P_2 = ma1;
      P_2 = P_2+I_11;
      *P_2 = I_9;
      *P_2 = *P_2>>ma0[1];
      re2 = 1;
      re2 = re2+re2;
   }
}
void launcher_0_microcode(int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   int *ma0;
   //PIPS generated variable
   short *ma1, *ma2, *ma3;
   //PIPS generated variable
   unsigned int re2;
   //PIPS generated variable
   int I_1, I_2;
   //PIPS generated variable
   short *P_0;
   //PIPS generated variable
   int I_3, I_4, I_5;
   //PIPS generated variable
   short *P_1;
   //PIPS generated variable
   int I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   short *P_2;
   seti(ma3, FIFO3);
   seti(ma2, FIFO2);
   seti(ma1, FIFO1);
   seti(ma0, FIFO0);
l99997:   ;
   seti(re2, 1);
   while (re2<=N0) {
      seti(I_1, re2);
      addi(I_1, 1);
      seti(I_2, I_1);
      subi(I_2, 1);
      seti(P_0, ma2);
      paddi(P_0, I_2);
      seti(I_3, ma0[2]);
      mulri(I_3, P_0);
      seti(I_4, re2);
      addi(I_4, 1);
      seti(I_5, I_4);
      subi(I_5, 1);
      seti(P_1, ma3);
      paddi(P_1, I_5);
      seti(I_6, ma0[3]);
      mulri(I_6, P_1);
      seti(I_7, I_3);
      paddi(I_7, I_6);
      seti(I_8, ma0[0]);
      lshifti(I_8, ma0[1]);
      seti(I_9, I_7);
      muli(I_9, I_8);
      seti(I_10, re2);
      addi(I_10, 1);
      seti(I_11, I_10);
      subi(I_11, 1);
      seti(P_2, ma1);
      paddi(P_2, I_11);
      pseti(P_2, I_9);
      prshifti(P_2, ma0[1]);
      seti(re2, 1);
      addi(re2, re2);
   }
}
