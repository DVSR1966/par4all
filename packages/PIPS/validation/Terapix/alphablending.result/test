tidy the code just in case of
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
tiling
isolation
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[128*i_t+i5][8*j_t+i4];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[128*i_t+i3][8*j_t+i2];

l99996:
         for(i = 128*i_t; i <= 128*i_t+127; i += 1)
l99997:
            for(j = 8*j_t; j <= 8*j_t+7; j += 1)
               result0[i-128*i_t][j-8*j_t] = (40*src00[i-128*i_t][j-8*j_t]+60*src10[i-128*i_t][j-8*j_t])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[128*i_t+i1][8*j_t+i0] = result0[i1][i0];
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[128*i_t+i5][8*j_t+i4];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[128*i_t+i3][8*j_t+i2];

l99996:
         for(i = 0; i <= 127; i += 1)
l99997:
            for(j = 0; j <= 7; j += 1)
               result0[i+128*i_t-128*i_t][j+8*j_t-8*j_t] = (40*src00[i+128*i_t-128*i_t][j+8*j_t-8*j_t]+60*src10[i+128*i_t-128*i_t][j+8*j_t-8*j_t])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[128*i_t+i1][8*j_t+i0] = result0[i1][i0];
      }
}
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[i5+128*i_t][i4+8*j_t];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[i3+128*i_t][i2+8*j_t];

l99996:
         for(i = 0; i <= 127; i += 1)
l99997:
            for(j = 0; j <= 7; j += 1)
               result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[i1+128*i_t][i0+8*j_t] = result0[i1][i0];
      }
}
outlining to launcher
void alphablending(short src0[512][512], short src1[512][512], short result[512][512])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
   //PIPS generated variable
   int i0, i1, i2, i3, i4, i5;
l99998:
   for(i_t = 0; i_t <= 3; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 63; j_t += 1) {
         //PIPS generated variable
         short result0[128][8], src10[128][8], src00[128][8];
         /* transfer loop generated by PIPS from src0 to src00 */
         for(i4 = 0; i4 <= 7; i4 += 1)
            for(i5 = 0; i5 <= 127; i5 += 1)
               src00[i5][i4] = src0[i5+128*i_t][i4+8*j_t];
         /* transfer loop generated by PIPS from src1 to src10 */
         for(i2 = 0; i2 <= 7; i2 += 1)
            for(i3 = 0; i3 <= 127; i3 += 1)
               src10[i3][i2] = src1[i3+128*i_t][i2+8*j_t];

l99996:         launcher_0(result0, src00, src10);
         /* transfer loop generated by PIPS from result0 to result */
         for(i0 = 0; i0 <= 7; i0 += 1)
            for(i1 = 0; i1 <= 127; i1 += 1)
               result[i1+128*i_t][i0+8*j_t] = result0[i1][i0];
      }
}
void launcher_0(short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:
      for(j = 0; j <= 7; j += 1)
         result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
}
outlining to microcode
void launcher_0(short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:      launcher_0_microcode(i, result0, src00, src10);
}
void launcher_0_microcode(unsigned int i, short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
}
normalize microcode launcher_0_microcode
void launcher_0_microcode(unsigned int i, short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
   j = 8;
}
void launcher_0_microcode(unsigned int i, short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int j;
l99997:
   for(j = 0; j <= 7; j += 1)
      result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
   j = 8;
}
void launcher_0_microcode(unsigned int i, short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short I_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   short I_2;
   //PIPS generated variable
   int I_3, I_4, I_5;
l99997:
   for(j = 0; j <= 7; j += 1)
      result0[i][j] = (40*src00[i][j]+60*src10[i][j])/100;
   j = 8;
}
void launcher_0_microcode(unsigned int i, short result0[1024], short src00[1024], short src10[1024])
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short I_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   short I_2;
   //PIPS generated variable
   int I_3, I_4, I_5;
l99997:
   for(j = 0; j <= 7; j += 1)
      result0[8*i+j] = (40*src00[8*i+j]+60*src10[8*i+j])/100;
   j = 8;
}
void launcher_0_microcode(unsigned int i, short result0[1024], short src00[1024], short src10[1024])
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short I_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   short I_2;
   //PIPS generated variable
   int I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14;
l99997:
   for(j = 0; j <= 7; j += 1) {
      I_6 = 8*i;
      I_7 = I_6+j;
      I_8 = 40*src00[I_7];
      I_9 = 8*i;
      I_10 = I_9+j;
      I_11 = 60*src10[I_10];
      I_12 = I_8+I_11;
      I_13 = 8*i;
      I_14 = I_13+j;
      result0[I_14] = I_12/100;
   }
   j = 8;
}
void launcher_0_microcode(unsigned int i, short result0[1024], short src00[1024], short src10[1024])
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short I_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   short I_2;
   //PIPS generated variable
   int I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14;
l99997:
   for(j = 0; j <= 7; j += 1) {
      I_6 = 8;
      I_6 = I_6*i;
      I_7 = I_6;
      I_7 = I_7+j;
      I_8 = 40;
      I_8 = I_8*src00[I_7];
      I_9 = 8;
      I_9 = I_9*i;
      I_10 = I_9;
      I_10 = I_10+j;
      I_11 = 60;
      I_11 = I_11*src10[I_10];
      I_12 = I_8;
      I_12 = I_12+I_11;
      I_13 = 8;
      I_13 = I_13*i;
      I_14 = I_13;
      I_14 = I_14+j;
      result0[I_14] = I_12;
      result0[I_14] = result0[I_14]/100;
   }
   j = 8;
}
parameter i is not valid
parameter result0 is not valid
parameter src00 is not valid
parameter src10 is not valid
void launcher_0_microcode(unsigned int i, short result0[1024], short src00[1024], short src10[1024])
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   short I_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   short I_2;
   //PIPS generated variable
   int I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, re0, re1, re2, re3, re4, re5, re6, re7, re8, re9, re10, re11;
   //PIPS generated variable
   short re12;
   //PIPS generated variable
   int re13;
   //PIPS generated variable
   short re14;
   //PIPS generated variable
   char * re15, re16;
   //PIPS generated variable
   unsigned int re17, re18;
   //PIPS generated variable
   short re19;
   //PIPS generated variable
   int re20;
   //PIPS generated variable
   short re21;
   //PIPS generated variable
   int re22, re23, re24, re25, re26, re27, re28, re29, re30, re31, re32, re33, N0 = 8;
l99997:   ;
   re17 = 1;
   while (re17<=N0) {
      re8 = 8;
      re8 = re8*i;
      re7 = re8;
      re7 = re7+re17;
      re6 = 40;
      re6 = re6*src00[re7];
      re5 = 8;
      re5 = re5*i;
      re4 = re5;
      re4 = re4+re17;
      re3 = 60;
      re3 = re3*src10[re4];
      re2 = re6;
      re2 = re2+re3;
      re1 = 8;
      re1 = re1*i;
      re0 = re1;
      re0 = re0+re17;
      result0[re0] = re2;
      result0[re0] = result0[re0]/100;
      re17 = 1+re17;
   }
   re17 = 8;
}
void launcher_0_microcode(unsigned int i, short result0[1024], short src00[1024], short src10[1024])
{
   //PIPS generated variable
   int re0, re1, re2, re3, re4, re5, re6, re7, re8;
   //PIPS generated variable
   unsigned int re17;
   //PIPS generated variable
   int N0 = 8;
l99997:   ;
   seti(re17, 1);
   while (re17<=N0) {
      seti(re8, 8);
      muli(re8, i);
      seti(re7, re8);
      addi(re7, re17);
      seti(re6, 40);
      muli(re6, src00[re7]);
      seti(re5, 8);
      muli(re5, i);
      seti(re4, re5);
      addi(re4, re17);
      seti(re3, 60);
      muli(re3, src10[re4]);
      seti(re2, re6);
      addi(re2, re3);
      seti(re1, 8);
      muli(re1, i);
      seti(re0, re1);
      addi(re0, re17);
      seti(result0[re0], re2);
      divi(result0[re0], 100);
      addi(re17, 1);
   }
   seti(re17, 8);
}
