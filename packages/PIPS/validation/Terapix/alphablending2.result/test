tidy the code just in case of
I have to do this early
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
}
tiling
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= n-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement to check
   for(i = n; i <= 128*((127+n)/128)-1; i += 1)
l99997:
      for(j0 = 0; j0 <= n-1; j0 += 1)
         result[i][j0] = (40*src0[i][j0]+60*src1[i][j0])*(1/100<<4)>>4;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= n-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement
   for(i = n; i <= 128*((127+n)/128)-1; i += 1)
l99997:
      for(j0 = 0; j0 <= n-1; j0 += 1)
         result[i][j0] = (40*src0[i][j0]+60*src1[i][j0])*(1/100<<4)>>4;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= 128*((127+n)/128)-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= 128*((127+n)/128)-1; i += 1) {
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement to check
      for(j = n; j <= 8*((7+n)/8)-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
   }

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= 128*((127+n)/128)-1; i += 1) {
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement
      for(j = n; j <= 8*((7+n)/8)-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
   }

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= 128*((127+n)/128)-1; i += 1) {
l99999:
      for(j = 0; j <= 8*((7+n)/8)-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;

   }

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0, it, jt;
#pragma omp parallel for private(i,j)
l99998:
   for(it = 0; it <= 128*((127+n)/128)-1; it += 128)
#pragma omp parallel for private(j)
l99999:
      for(jt = 0; jt <= 8*((7+n)/8)-1; jt += 8)
#pragma omp parallel for 
         for(i = it; i <= MIN(it+128, 128*((127+n)/128)-1); i += 1)
#pragma omp parallel for 
            for(j = jt; j <= MIN(jt+8, 8*((7+n)/8)-1); j += 1)
               result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
}
group constants and isolate
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0, it, jt;
#pragma omp parallel for private(i,j)
l99998:
   for(it = 0; it <= 128*((127+n)/128)-1; it += 128)
#pragma omp parallel for private(j)
l99999:
      for(jt = 0; jt <= 8*((7+n)/8)-1; jt += 8) {
         //PIPS generated variable
         int caillou[8];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;
         caillou[5] = it;
         caillou[6] = jt;
         caillou[7] = n;

#pragma omp parallel for 
l99995:
         for(i = it; i <= MIN(it+128, 128*((127+n)/128)-1); i += 1)
#pragma omp parallel for 
l99996:
            for(j = jt; j <= MIN(jt+8, 8*((7+n)/8)-1); j += 1)
               result[i][j] = (caillou[3]*src0[i][j]+caillou[4]*src1[i][j])*(caillou[0]/caillou[1]<<caillou[2])>>caillou[2];
      }
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0, it, jt;
#pragma omp parallel for private(i,j)
l99998:
   for(it = 0; it <= 128*((127+n)/128)-1; it += 128)
#pragma omp parallel for private(j)
l99999:
      for(jt = 0; jt <= 8*((7+n)/8)-1; jt += 8) {
         //PIPS generated variable
         int caillou[8];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;
         caillou[5] = it;
         caillou[6] = jt;
         caillou[7] = n;

         {
            //PIPS generated variable
            short (*src00)[MIN(n+126, it+128)-it+1][MIN(n+6, jt+8)-jt+1] = (short (*)[MIN(n+126, it+128)-it+1][MIN(n+6, jt+8)-jt+1]) 0, (*src10)[MIN(n+126, it+128)-it+1][MIN(n+6, jt+8)-jt+1] = (short (*)[MIN(n+126, it+128)-it+1][MIN(n+6, jt+8)-jt+1]) 0;
            //PIPS generated variable
            int (*caillou0)[5] = (int (*)[5]) 0;
            //PIPS generated variable
            short (*result0)[MIN(n+126, it+128)-it+1][MIN(n+6, jt+8)-jt+1] = (short (*)[MIN(n+126, it+128)-it+1][MIN(n+6, jt+8)-jt+1]) 0;
            if (MIN(n+126, it+128)-it>0&&MIN(n+6, jt+8)-jt>0&&MIN(n+126, it+128)-it>0&&MIN(n+6, jt+8)-jt>0&&MIN(n+126, it+128)-it>0&&MIN(n+6, jt+8)-jt>0) {
               P4A_accel_malloc((void **) &result0, sizeof(short)*(MIN(n+126, it+128)-it+1)*(MIN(n+6, jt+8)-jt+1));
               P4A_accel_malloc((void **) &caillou0, sizeof(int)*5);
               P4A_accel_malloc((void **) &src10, sizeof(short)*(MIN(n+126, it+128)-it+1)*(MIN(n+6, jt+8)-jt+1));
               P4A_accel_malloc((void **) &src00, sizeof(short)*(MIN(n+126, it+128)-it+1)*(MIN(n+6, jt+8)-jt+1));
               P4A_copy_to_accel(*caillou0, &caillou[0], sizeof(int), 8, 0, 5);
               P4A_copy_to_accel2d(*src10, &src1[0][0], sizeof(short), n, n, it, jt, MIN(n+126, it+128)-it+1, MIN(n+6, jt+8)-jt+1);
               P4A_copy_to_accel2d(*src00, &src0[0][0], sizeof(short), n, n, it, jt, MIN(n+126, it+128)-it+1, MIN(n+6, jt+8)-jt+1);

#pragma omp parallel for 
l99995:
               for(i = it; i <= MIN(it+128, 128*((127+n)/128)-1); i += 1)
#pragma omp parallel for 
l99996:
                  for(j = jt; j <= MIN(jt+8, 8*((7+n)/8)-1); j += 1)
                     (*result0)[i-it][j-jt] = ((*caillou0)[3-0]*(*src00)[i-it][j-jt]+(*caillou0)[4-0]*(*src10)[i-it][j-jt])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
               P4A_copy_from_accel2d(&result[0][0], *result0, sizeof(short), n, n, it, jt, MIN(n+126, it+128)-it+1, MIN(n+6, jt+8)-jt+1);
               P4A_accel_free((void **) &result0);
               P4A_accel_free((void **) &caillou0);
               P4A_accel_free((void **) &src10);
               P4A_accel_free((void **) &src00);
            }
         }
      }
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0, it, jt;
#pragma omp parallel for private(i,j)
l99998:
   for(it = 1; it <= (128*((127+n)/128)-1+128)/128; it += 1)
#pragma omp parallel for private(j)
l99999:
      for(jt = 1; jt <= (8*((7+n)/8)-1+8)/8; jt += 1) {
         //PIPS generated variable
         int caillou[8];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;
         caillou[5] = -128+128*it;
         caillou[6] = -8+8*jt;
         caillou[7] = n;

         {
            //PIPS generated variable
            short (*src00)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0, (*src10)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0;
            //PIPS generated variable
            int (*caillou0)[5] = (int (*)[5]) 0;
            //PIPS generated variable
            short (*result0)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0;
            if (MIN(n+126, -128+128*it+128)-(-128+128*it)>0&&MIN(n+6, -8+8*jt+8)-(-8+8*jt)>0&&MIN(n+126, -128+128*it+128)-(-128+128*it)>0&&MIN(n+6, -8+8*jt+8)-(-8+8*jt)>0&&MIN(n+126, -128+128*it+128)-(-128+128*it)>0&&MIN(n+6, -8+8*jt+8)-(-8+8*jt)>0) {
               P4A_accel_malloc((void **) &result0, sizeof(short)*(MIN(n+126, -128+128*it+128)-(-128+128*it)+1)*(MIN(n+6, -8+8*jt+8)-(-8+8*jt)+1));
               P4A_accel_malloc((void **) &caillou0, sizeof(int)*5);
               P4A_accel_malloc((void **) &src10, sizeof(short)*(MIN(n+126, -128+128*it+128)-(-128+128*it)+1)*(MIN(n+6, -8+8*jt+8)-(-8+8*jt)+1));
               P4A_accel_malloc((void **) &src00, sizeof(short)*(MIN(n+126, -128+128*it+128)-(-128+128*it)+1)*(MIN(n+6, -8+8*jt+8)-(-8+8*jt)+1));
               P4A_copy_to_accel(*caillou0, &caillou[0], sizeof(int), 8, 0, 5);
               P4A_copy_to_accel2d(*src10, &src1[0][0], sizeof(short), n, n, -128+128*it, -8+8*jt, MIN(n+126, -128+128*it+128)-(-128+128*it)+1, MIN(n+6, -8+8*jt+8)-(-8+8*jt)+1);
               P4A_copy_to_accel2d(*src00, &src0[0][0], sizeof(short), n, n, -128+128*it, -8+8*jt, MIN(n+126, -128+128*it+128)-(-128+128*it)+1, MIN(n+6, -8+8*jt+8)-(-8+8*jt)+1);

#pragma omp parallel for 
l99995:
               for(i = 1; i <= MIN(-128+128*it+128, 128*((127+n)/128)-1)-(-128+128*it)+1; i += 1)
#pragma omp parallel for 
l99996:
                  for(j = 1; j <= MIN(-8+8*jt+8, 8*((7+n)/8)-1)-(-8+8*jt)+1; j += 1)
                     (*result0)[-1+i+-128+128*it-(-128+128*it)][-1+j+-8+8*jt-(-8+8*jt)] = ((*caillou0)[3-0]*(*src00)[-1+i+-128+128*it-(-128+128*it)][-1+j+-8+8*jt-(-8+8*jt)]+(*caillou0)[4-0]*(*src10)[-1+i+-128+128*it-(-128+128*it)][-1+j+-8+8*jt-(-8+8*jt)])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
               P4A_copy_from_accel2d(&result[0][0], *result0, sizeof(short), n, n, -128+128*it, -8+8*jt, MIN(n+126, -128+128*it+128)-(-128+128*it)+1, MIN(n+6, -8+8*jt+8)-(-8+8*jt)+1);
               P4A_accel_free((void **) &result0);
               P4A_accel_free((void **) &caillou0);
               P4A_accel_free((void **) &src10);
               P4A_accel_free((void **) &src00);
            }
         }
      }
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0, it, jt;
#pragma omp parallel for private(i,j)
l99998:
   for(it = 1; it <= (128*((n+127)/128)+127)/128; it += 1)
#pragma omp parallel for private(j)
l99999:
      for(jt = 1; jt <= (8*((n+7)/8)+7)/8; jt += 1) {
         //PIPS generated variable
         int caillou[8];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;
         caillou[5] = 128*it-128;
         caillou[6] = 8*jt-8;
         caillou[7] = n;

         {
            //PIPS generated variable
            short (*src00)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0, (*src10)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0;
            //PIPS generated variable
            int (*caillou0)[5] = (int (*)[5]) 0;
            //PIPS generated variable
            short (*result0)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0;
            if (MIN(n+126, 128*it)-128*it+128>0&&MIN(n+6, 8*jt)-8*jt+8>0&&MIN(n+126, 128*it)-128*it+128>0&&MIN(n+6, 8*jt)-8*jt+8>0&&MIN(n+126, 128*it)-128*it+128>0&&MIN(n+6, 8*jt)-8*jt+8>0) {
               P4A_accel_malloc((void **) &result0, sizeof(short)*(MIN(n+126, 128*it)-128*it+129)*(MIN(n+6, 8*jt)-8*jt+9));
               P4A_accel_malloc((void **) &caillou0, 5*sizeof(int));
               P4A_accel_malloc((void **) &src10, sizeof(short)*(MIN(n+126, 128*it)-128*it+129)*(MIN(n+6, 8*jt)-8*jt+9));
               P4A_accel_malloc((void **) &src00, sizeof(short)*(MIN(n+126, 128*it)-128*it+129)*(MIN(n+6, 8*jt)-8*jt+9));
               P4A_copy_to_accel(*caillou0, &caillou[0], sizeof(int), 8, 0, 5);
               P4A_copy_to_accel2d(*src10, &src1[0][0], sizeof(short), n, n, 128*it-128, 8*jt-8, MIN(n+126, 128*it)-128*it+129, MIN(n+6, 8*jt)-8*jt+9);
               P4A_copy_to_accel2d(*src00, &src0[0][0], sizeof(short), n, n, 128*it-128, 8*jt-8, MIN(n+126, 128*it)-128*it+129, MIN(n+6, 8*jt)-8*jt+9);

#pragma omp parallel for 
l99995:
               for(i = 1; i <= MIN(128*it, 128*((n+127)/128)-1)-128*it+129; i += 1)
#pragma omp parallel for 
l99996:
                  for(j = 1; j <= MIN(8*jt, 8*((n+7)/8)-1)-8*jt+9; j += 1)
                     (*result0)[-1+i+-128+128*it-(-128+128*it)][-1+j+-8+8*jt-(-8+8*jt)] = ((*caillou0)[3-0]*(*src00)[-1+i+-128+128*it-(-128+128*it)][-1+j+-8+8*jt-(-8+8*jt)]+(*caillou0)[4-0]*(*src10)[-1+i+-128+128*it-(-128+128*it)][-1+j+-8+8*jt-(-8+8*jt)])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
               P4A_copy_from_accel2d(&result[0][0], *result0, sizeof(short), n, n, 128*it-128, 8*jt-8, MIN(n+126, 128*it)-128*it+129, MIN(n+6, 8*jt)-8*jt+9);
               P4A_accel_free((void **) &result0);
               P4A_accel_free((void **) &caillou0);
               P4A_accel_free((void **) &src10);
               P4A_accel_free((void **) &src00);
            }
         }
      }
}
outlining to launcher
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0, it, jt;
#pragma omp parallel for 
l99998:
   for(it = 1; it <= (128*((n+127)/128)+127)/128; it += 1)
#pragma omp parallel for 
l99999:
      for(jt = 1; jt <= (8*((n+7)/8)+7)/8; jt += 1) {
         //PIPS generated variable
         int caillou[8];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;
         caillou[5] = 128*it-128;
         caillou[6] = 8*jt-8;
         caillou[7] = n;

         {
            //PIPS generated variable
            short (*src00)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0, (*src10)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0;
            //PIPS generated variable
            int (*caillou0)[5] = (int (*)[5]) 0;
            //PIPS generated variable
            short (*result0)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1] = (short (*)[MIN(n+126, -128+128*(-128+128*it)+128)-(-128+128*(-128+128*it))+1][MIN(n+6, -8+8*(-8+8*jt)+8)-(-8+8*(-8+8*jt))+1]) 0;
            if (MIN(n+126, 128*it)-128*it+128>0&&MIN(n+6, 8*jt)-8*jt+8>0&&MIN(n+126, 128*it)-128*it+128>0&&MIN(n+6, 8*jt)-8*jt+8>0&&MIN(n+126, 128*it)-128*it+128>0&&MIN(n+6, 8*jt)-8*jt+8>0) {
               P4A_accel_malloc((void **) &result0, sizeof(short)*(MIN(n+126, 128*it)-128*it+129)*(MIN(n+6, 8*jt)-8*jt+9));
               P4A_accel_malloc((void **) &caillou0, 5*sizeof(int));
               P4A_accel_malloc((void **) &src10, sizeof(short)*(MIN(n+126, 128*it)-128*it+129)*(MIN(n+6, 8*jt)-8*jt+9));
               P4A_accel_malloc((void **) &src00, sizeof(short)*(MIN(n+126, 128*it)-128*it+129)*(MIN(n+6, 8*jt)-8*jt+9));
               P4A_copy_to_accel(*caillou0, &caillou[0], sizeof(int), 8, 0, 5);
               P4A_copy_to_accel2d(*src10, &src1[0][0], sizeof(short), n, n, 128*it-128, 8*jt-8, MIN(n+126, 128*it)-128*it+129, MIN(n+6, 8*jt)-8*jt+9);
               P4A_copy_to_accel2d(*src00, &src0[0][0], sizeof(short), n, n, 128*it-128, 8*jt-8, MIN(n+126, 128*it)-128*it+129, MIN(n+6, 8*jt)-8*jt+9);

l99995:               launcher_0(it, jt, n, MIN(8*jt, 8*((n+7)/8)-1)-8*jt+9, caillou0, result0, src00, src10);
               P4A_copy_from_accel2d(&result[0][0], *result0, sizeof(short), n, n, 128*it-128, 8*jt-8, MIN(n+126, 128*it)-128*it+129, MIN(n+6, 8*jt)-8*jt+9);
               P4A_accel_free((void **) &result0);
               P4A_accel_free((void **) &caillou0);
               P4A_accel_free((void **) &src10);
               P4A_accel_free((void **) &src00);
            }
         }
      }
}

//  <caillou0[PHI1][PHI2]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=4, 1<=I_0,
//    I_0<=9, I_0+8jt<=n+15, 128it<=n+253, 8jt<=n+13}>
//  <caillou0-R-EXACT-{}>
//  <result0-R-EXACT-{}>
//  <result0[PHI1][PHI2][PHI3]-W-MAY-{PHI1==0, 0<=PHI2, PHI2<=128,
//    PHI2+128it<=n+254, 0<=PHI3, PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15,
//    128it<=n+253, 8jt<=n+13}>
//  <src00[PHI1][PHI2][PHI3]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=128,
//    PHI2+128it<=n+254, 0<=PHI3, PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15,
//    128it<=n+253, 8jt<=n+13}>
//  <src00-R-EXACT-{}>
//  <src10[PHI1][PHI2][PHI3]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=128,
//    PHI2+128it<=n+254, 0<=PHI3, PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15,
//    128it<=n+253, 8jt<=n+13}>
//  <src10-R-EXACT-{}>

void launcher_0(unsigned int it, unsigned int jt, int n, int I_0, int (*caillou0)[5], short (*result0)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src00)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src10)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1])
{
   //PIPS generated variable
   unsigned int i, j;

//  <caillou0[PHI1][PHI2]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=4, 1<=I_0,
//    I_0<=9, I_0+8jt<=n+15, 128it<=n+253, 8jt<=n+13}>
//  <caillou0-R-EXACT-{}>
//  <result0-R-EXACT-{}>
//  <result0[PHI1][PHI2][PHI3]-W-MAY-{PHI1==0, 0<=PHI2, PHI2<=128,
//    PHI2+128it<=n+254, 0<=PHI3, PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15,
//    128it<=n+253, 8jt<=n+13}>
//  <src00[PHI1][PHI2][PHI3]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=128,
//    PHI2+128it<=n+254, 0<=PHI3, PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15,
//    128it<=n+253, 8jt<=n+13}>
//  <src00-R-EXACT-{}>
//  <src10[PHI1][PHI2][PHI3]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=128,
//    PHI2+128it<=n+254, 0<=PHI3, PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15,
//    128it<=n+253, 8jt<=n+13}>
//  <src10-R-EXACT-{}>

l99995:
   for(i = 1; i <= MIN(128*it, 128*((n+127)/128)-1)-128*it+129; i += 1)

//  <caillou0[PHI1][PHI2]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=4, 1<=I_0,
//    I_0<=9, I_0+8jt<=n+15, 1<=i, i<=129, i+128it<=n+255,
//    128it<=n+253, 8jt<=n+13}>
//  <caillou0-R-EXACT-{}>
//  <result0-R-EXACT-{}>
//  <result0[PHI1][PHI2][PHI3]-W-EXACT-{PHI1==0, PHI2==i-1, 0<=PHI3,
//    PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15, 1<=i, i<=129,
//    i+128it<=n+255, 128it<=n+253, 8jt<=n+13}>
//  <src00[PHI1][PHI2][PHI3]-R-EXACT-{PHI1==0, PHI2==i-1, 0<=PHI3,
//    PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15, 1<=i, i<=129,
//    i+128it<=n+255, 128it<=n+253, 8jt<=n+13}>
//  <src00-R-EXACT-{}>
//  <src10[PHI1][PHI2][PHI3]-R-EXACT-{PHI1==0, PHI2==i-1, 0<=PHI3,
//    PHI3+1<=I_0, I_0<=9, I_0+8jt<=n+15, 1<=i, i<=129,
//    i+128it<=n+255, 128it<=n+253, 8jt<=n+13}>
//  <src10-R-EXACT-{}>

l99996:
      for(j = 1; j <= I_0; j += 1)

//  <caillou0[PHI1][PHI2]-R-MAY-{PHI1==0, 0<=PHI2, PHI2<=4, I_0<=9,
//    j<=I_0, I_0+8jt<=n+15, 1<=i, i<=129, i+128it<=n+255,
//    128it<=n+253, 1<=j, 8jt<=n+13}>
//  <caillou0-R-EXACT-{}>
//  <result0-R-EXACT-{}>
//  <result0[PHI1][PHI2][PHI3]-W-EXACT-{PHI1==0, PHI2==i-1, PHI3==j-1,
//    I_0<=9, j<=I_0, I_0+8jt<=n+15, 1<=i, i<=129, i+128it<=n+255,
//    128it<=n+253, 1<=j, 8jt<=n+13}>
//  <src00[PHI1][PHI2][PHI3]-R-EXACT-{PHI1==0, PHI2==i-1, PHI3==j-1,
//    I_0<=9, j<=I_0, I_0+8jt<=n+15, 1<=i, i<=129, i+128it<=n+255,
//    128it<=n+253, 1<=j, 8jt<=n+13}>
//  <src00-R-EXACT-{}>
//  <src10[PHI1][PHI2][PHI3]-R-EXACT-{PHI1==0, PHI2==i-1, PHI3==j-1,
//    I_0<=9, j<=I_0, I_0+8jt<=n+15, 1<=i, i<=129, i+128it<=n+255,
//    128it<=n+253, 1<=j, 8jt<=n+13}>
//  <src10-R-EXACT-{}>

         ((*result0)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+(-8)+8*jt-((-8)+8*jt)] = ((*caillou0)[3-0]*((*src00)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+(-8)+8*jt-((-8)+8*jt)]+(*caillou0)[4-0]*((*src10)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+(-8)+8*jt-((-8)+8*jt)])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
}
outlining to microcode
label: l99996
void launcher_0(unsigned int it, unsigned int jt, int n, int I_0, int (*caillou0)[5], short (*result0)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src00)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src10)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1])
{
   //PIPS generated variable
   unsigned int i, j;
l99995:
   for(i = 1; i <= MIN(128*it, 128*((n+127)/128)-1)-128*it+129; i += 1)
l99996:      launcher_0_microcode(it, jt, n, i, I_0, caillou0, result0, src00, src10);
}
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int I_0, int (*caillou0)[5], short (*result0)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src00)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src10)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1])
{
   //PIPS generated variable
   unsigned int j;
l99996:
   for(j = 1; j <= I_0; j += 1)
      ((*result0)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+(-8)+8*jt-((-8)+8*jt)] = ((*caillou0)[3-0]*((*src00)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+(-8)+8*jt-((-8)+8*jt)]+(*caillou0)[4-0]*((*src10)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+(-8)+8*jt-((-8)+8*jt)])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
}
normalize microcode launcher_0_microcode
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int I_0, int (*caillou0)[5], short (*result0)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src00)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src10)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1])
{
   //PIPS generated variable
   unsigned int j;
l99996:
   for(j = 0; j <= -1+I_0; j += 1)
      ((*result0)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+1+(-8)+8*jt-((-8)+8*jt)] = ((*caillou0)[3-0]*((*src00)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+1+(-8)+8*jt-((-8)+8*jt)]+(*caillou0)[4-0]*((*src10)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+1+(-8)+8*jt-((-8)+8*jt)])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
}
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int I_0, int (*caillou0)[5], short (*result0)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src00)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1], short (*src10)[MIN(n+126, -128+128*((-128)+128*it)+128)-((-128)+128*((-128)+128*it))+1][MIN(n+6, -8+8*((-8)+8*jt)+8)-((-8)+8*((-8)+8*jt))+1])
{
   //PIPS generated variable
   unsigned int j;
l99996:
   for(j = 0; j <= -1+I_0; j += 1)
      ((*result0)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+1+(-8)+8*jt-((-8)+8*jt)] = ((*caillou0)[3-0]*((*src00)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+1+(-8)+8*jt-((-8)+8*jt)]+(*caillou0)[4-0]*((*src10)[-1+i+(-128)+128*it-((-128)+128*it)])[-1+j+1+(-8)+8*jt-((-8)+8*jt)])*((*caillou0)[0-0]/(*caillou0)[1-0]<<(*caillou0)[2-0])>>(*caillou0)[2-0];
}
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int I_0, int *caillou0, short *result0, short *src00, short *src10)
{
   //PIPS generated variable
   unsigned int j;
l99996:
   for(j = 0; j <= -1+I_0; j += 1)
      *(result0+0+(-1)+i+(-128)+128*it-((-128)+128*it)+(-1)+j+1+(-8)+8*jt-((-8)+8*jt)) = (*(caillou0+0+3-0)**(src00+0+(-1)+i+(-128)+128*it-((-128)+128*it)+(-1)+j+1+(-8)+8*jt-((-8)+8*jt))+*(caillou0+0+4-0)**(src10+0+(-1)+i+(-128)+128*it-((-128)+128*it)+(-1)+j+1+(-8)+8*jt-((-8)+8*jt)))*(*(caillou0+0+0-0)/(*(caillou0+0+1-0))<<*(caillou0+0+2-0))>>*(caillou0+0+2-0);
}
parameter it is not valid
parameter jt is not valid
parameter n is not valid
parameter i is not valid
I_0 belongs to a loop bound
caillou0 seems a mask
result0 seems a mask
src00 seems a mask
src10 seems a mask
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result0, *ma1, *src00, *ma2, *src10, *ma3;
   //PIPS generated variable
   unsigned int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   ma3 = FIFO3;
   ma2 = FIFO2;
   ma1 = FIFO1;
   ma0 = FIFO0;
l99996:   ;
   re2 = 1;
   while (re2<=N0) {
      *(ma1+0+(-1)+i+(-128)+128*it-((-128)+128*it)+(-1)+re2+1+(-8)+8*jt-((-8)+8*jt)) = (*(ma0+0+3-0)**(ma2+0+(-1)+i+(-128)+128*it-((-128)+128*it)+(-1)+re2+1+(-8)+8*jt-((-8)+8*jt))+*(ma0+0+4-0)**(ma3+0+(-1)+i+(-128)+128*it-((-128)+128*it)+(-1)+re2+1+(-8)+8*jt-((-8)+8*jt)))*(*(ma0+0+0-0)/(*(ma0+0+1-0))<<*(ma0+0+2-0))>>*(ma0+0+2-0);
      re2 = 1+re2;
   }
}
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result0, *ma1, *src00, *ma2, *src10, *ma3;
   //PIPS generated variable
   unsigned int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   int *P_1;
   //PIPS generated variable
   short *P_2;
   //PIPS generated variable
   int I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   short *P_3;
   //PIPS generated variable
   int I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22;
   //PIPS generated variable
   short *P_4;
   //PIPS generated variable
   int I_23;
   //PIPS generated variable
   int *P_5;
   //PIPS generated variable
   int I_24;
   //PIPS generated variable
   int *P_6;
   //PIPS generated variable
   short *P_7;
   //PIPS generated variable
   int I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34;
   //PIPS generated variable
   short *P_8;
   //PIPS generated variable
   int I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45;
   //PIPS generated variable
   short *P_9;
   //PIPS generated variable
   int I_46, I_47;
   //PIPS generated variable
   int *P_10;
   //PIPS generated variable
   int I_48;
   //PIPS generated variable
   int *P_11, *P_12;
   //PIPS generated variable
   int I_49;
   //PIPS generated variable
   int *P_13;
   //PIPS generated variable
   int I_50;
   //PIPS generated variable
   int *P_14;
   //PIPS generated variable
   int I_51;
   //PIPS generated variable
   int *P_15;
   //PIPS generated variable
   int I_52, I_53;
   //PIPS generated variable
   int *P_16;
   //PIPS generated variable
   int I_54;
   //PIPS generated variable
   int *P_17;
   //PIPS generated variable
   short *P_18;
   //PIPS generated variable
   int I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64;
   //PIPS generated variable
   short *P_19;
   //PIPS generated variable
   int I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75;
   //PIPS generated variable
   short *P_20;
   ma3 = FIFO3;
   ma2 = FIFO2;
   ma1 = FIFO1;
   ma0 = FIFO0;
l99996:   ;
   re2 = 1;
   while (re2<=N0) {
      P_0 = ma0+0;
      I_1 = 3-0;
      P_1 = P_0+I_1;
      P_2 = ma2+0;
      I_2 = -1;
      I_3 = I_2+i;
      I_4 = -128;
      I_5 = I_3+I_4;
      I_6 = 128*it;
      I_7 = I_5+I_6;
      I_8 = -128;
      I_9 = 128*it;
      I_10 = I_8+I_9;
      I_11 = I_7-I_10;
      P_3 = P_2+I_11;
      I_12 = -1;
      I_13 = re2+1;
      I_14 = I_12+I_13;
      I_15 = -8;
      I_16 = I_14+I_15;
      I_17 = 8*jt;
      I_18 = I_16+I_17;
      I_19 = -8;
      I_20 = 8*jt;
      I_21 = I_19+I_20;
      I_22 = I_18-I_21;
      P_4 = P_3+I_22;
      I_23 = *P_1**P_4;
      P_5 = ma0+0;
      I_24 = 4-0;
      P_6 = P_5+I_24;
      P_7 = ma3+0;
      I_25 = -1;
      I_26 = I_25+i;
      I_27 = -128;
      I_28 = I_26+I_27;
      I_29 = 128*it;
      I_30 = I_28+I_29;
      I_31 = -128;
      I_32 = 128*it;
      I_33 = I_31+I_32;
      I_34 = I_30-I_33;
      P_8 = P_7+I_34;
      I_35 = -1;
      I_36 = re2+1;
      I_37 = I_35+I_36;
      I_38 = -8;
      I_39 = I_37+I_38;
      I_40 = 8*jt;
      I_41 = I_39+I_40;
      I_42 = -8;
      I_43 = 8*jt;
      I_44 = I_42+I_43;
      I_45 = I_41-I_44;
      P_9 = P_8+I_45;
      I_46 = *P_6**P_9;
      I_47 = I_23+I_46;
      P_10 = ma0+0;
      I_48 = 0-0;
      P_11 = P_10+I_48;
      P_12 = ma0+0;
      I_49 = 1-0;
      P_13 = P_12+I_49;
      I_50 = *P_11/(*P_13);
      P_14 = ma0+0;
      I_51 = 2-0;
      P_15 = P_14+I_51;
      I_52 = I_50<<*P_15;
      I_53 = I_47*I_52;
      P_16 = ma0+0;
      I_54 = 2-0;
      P_17 = P_16+I_54;
      P_18 = ma1+0;
      I_55 = -1;
      I_56 = I_55+i;
      I_57 = -128;
      I_58 = I_56+I_57;
      I_59 = 128*it;
      I_60 = I_58+I_59;
      I_61 = -128;
      I_62 = 128*it;
      I_63 = I_61+I_62;
      I_64 = I_60-I_63;
      P_19 = P_18+I_64;
      I_65 = -1;
      I_66 = re2+1;
      I_67 = I_65+I_66;
      I_68 = -8;
      I_69 = I_67+I_68;
      I_70 = 8*jt;
      I_71 = I_69+I_70;
      I_72 = -8;
      I_73 = 8*jt;
      I_74 = I_72+I_73;
      I_75 = I_71-I_74;
      P_20 = P_19+I_75;
      *P_20 = I_53>>*P_17;
      re2 = 1+re2;
   }
}
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   unsigned int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result0, *ma1, *src00, *ma2, *src10, *ma3;
   //PIPS generated variable
   unsigned int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   int *P_1;
   //PIPS generated variable
   short *P_2;
   //PIPS generated variable
   int I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   short *P_3;
   //PIPS generated variable
   int I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22;
   //PIPS generated variable
   short *P_4;
   //PIPS generated variable
   int I_23;
   //PIPS generated variable
   int *P_5;
   //PIPS generated variable
   int I_24;
   //PIPS generated variable
   int *P_6;
   //PIPS generated variable
   short *P_7;
   //PIPS generated variable
   int I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34;
   //PIPS generated variable
   short *P_8;
   //PIPS generated variable
   int I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45;
   //PIPS generated variable
   short *P_9;
   //PIPS generated variable
   int I_46, I_47;
   //PIPS generated variable
   int *P_10;
   //PIPS generated variable
   int I_48;
   //PIPS generated variable
   int *P_11, *P_12;
   //PIPS generated variable
   int I_49;
   //PIPS generated variable
   int *P_13;
   //PIPS generated variable
   int I_50;
   //PIPS generated variable
   int *P_14;
   //PIPS generated variable
   int I_51;
   //PIPS generated variable
   int *P_15;
   //PIPS generated variable
   int I_52, I_53;
   //PIPS generated variable
   int *P_16;
   //PIPS generated variable
   int I_54;
   //PIPS generated variable
   int *P_17;
   //PIPS generated variable
   short *P_18;
   //PIPS generated variable
   int I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64;
   //PIPS generated variable
   short *P_19;
   //PIPS generated variable
   int I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75;
   //PIPS generated variable
   short *P_20;
   ma3 = FIFO3;
   ma2 = FIFO2;
   ma1 = FIFO1;
   ma0 = FIFO0;
l99996:   ;
   re2 = 1;
   while (re2<=N0) {
      P_0 = ma0;
      P_0 = P_0+0;
      I_1 = 3;
      I_1 = I_1-0;
      P_1 = P_0;
      P_1 = P_1+I_1;
      P_2 = ma2;
      P_2 = P_2+0;
      I_2 = 1;
      I_2 = -I_2;
      I_3 = I_2;
      I_3 = I_3+i;
      I_4 = 128;
      I_4 = -I_4;
      I_5 = I_3;
      I_5 = I_5+I_4;
      I_6 = 128;
      I_6 = I_6*it;
      I_7 = I_5;
      I_7 = I_7+I_6;
      I_8 = 128;
      I_8 = -I_8;
      I_9 = 128;
      I_9 = I_9*it;
      I_10 = I_8;
      I_10 = I_10+I_9;
      I_11 = I_7;
      I_11 = I_11-I_10;
      P_3 = P_2;
      P_3 = P_3+I_11;
      I_12 = 1;
      I_12 = -I_12;
      I_13 = re2;
      I_13 = I_13+1;
      I_14 = I_12;
      I_14 = I_14+I_13;
      I_15 = 8;
      I_15 = -I_15;
      I_16 = I_14;
      I_16 = I_16+I_15;
      I_17 = 8;
      I_17 = I_17*jt;
      I_18 = I_16;
      I_18 = I_18+I_17;
      I_19 = 8;
      I_19 = -I_19;
      I_20 = 8;
      I_20 = I_20*jt;
      I_21 = I_19;
      I_21 = I_21+I_20;
      I_22 = I_18;
      I_22 = I_22-I_21;
      P_4 = P_3;
      P_4 = P_4+I_22;
      I_23 = *P_1;
      I_23 = I_23**P_4;
      P_5 = ma0;
      P_5 = P_5+0;
      I_24 = 4;
      I_24 = I_24-0;
      P_6 = P_5;
      P_6 = P_6+I_24;
      P_7 = ma3;
      P_7 = P_7+0;
      I_25 = 1;
      I_25 = -I_25;
      I_26 = I_25;
      I_26 = I_26+i;
      I_27 = 128;
      I_27 = -I_27;
      I_28 = I_26;
      I_28 = I_28+I_27;
      I_29 = 128;
      I_29 = I_29*it;
      I_30 = I_28;
      I_30 = I_30+I_29;
      I_31 = 128;
      I_31 = -I_31;
      I_32 = 128;
      I_32 = I_32*it;
      I_33 = I_31;
      I_33 = I_33+I_32;
      I_34 = I_30;
      I_34 = I_34-I_33;
      P_8 = P_7;
      P_8 = P_8+I_34;
      I_35 = 1;
      I_35 = -I_35;
      I_36 = re2;
      I_36 = I_36+1;
      I_37 = I_35;
      I_37 = I_37+I_36;
      I_38 = 8;
      I_38 = -I_38;
      I_39 = I_37;
      I_39 = I_39+I_38;
      I_40 = 8;
      I_40 = I_40*jt;
      I_41 = I_39;
      I_41 = I_41+I_40;
      I_42 = 8;
      I_42 = -I_42;
      I_43 = 8;
      I_43 = I_43*jt;
      I_44 = I_42;
      I_44 = I_44+I_43;
      I_45 = I_41;
      I_45 = I_45-I_44;
      P_9 = P_8;
      P_9 = P_9+I_45;
      I_46 = *P_6;
      I_46 = I_46**P_9;
      I_47 = I_23;
      I_47 = I_47+I_46;
      P_10 = ma0;
      P_10 = P_10+0;
      I_48 = 0;
      I_48 = I_48-0;
      P_11 = P_10;
      P_11 = P_11+I_48;
      P_12 = ma0;
      P_12 = P_12+0;
      I_49 = 1;
      I_49 = I_49-0;
      P_13 = P_12;
      P_13 = P_13+I_49;
      I_50 = *P_11;
      I_50 = I_50/(*P_13);
      P_14 = ma0;
      P_14 = P_14+0;
      I_51 = 2;
      I_51 = I_51-0;
      P_15 = P_14;
      P_15 = P_15+I_51;
      I_52 = I_50;
      I_52 = I_52<<*P_15;
      I_53 = I_47;
      I_53 = I_53*I_52;
      P_16 = ma0;
      P_16 = P_16+0;
      I_54 = 2;
      I_54 = I_54-0;
      P_17 = P_16;
      P_17 = P_17+I_54;
      P_18 = ma1;
      P_18 = P_18+0;
      I_55 = 1;
      I_55 = -I_55;
      I_56 = I_55;
      I_56 = I_56+i;
      I_57 = 128;
      I_57 = -I_57;
      I_58 = I_56;
      I_58 = I_58+I_57;
      I_59 = 128;
      I_59 = I_59*it;
      I_60 = I_58;
      I_60 = I_60+I_59;
      I_61 = 128;
      I_61 = -I_61;
      I_62 = 128;
      I_62 = I_62*it;
      I_63 = I_61;
      I_63 = I_63+I_62;
      I_64 = I_60;
      I_64 = I_64-I_63;
      P_19 = P_18;
      P_19 = P_19+I_64;
      I_65 = 1;
      I_65 = -I_65;
      I_66 = re2;
      I_66 = I_66+1;
      I_67 = I_65;
      I_67 = I_67+I_66;
      I_68 = 8;
      I_68 = -I_68;
      I_69 = I_67;
      I_69 = I_69+I_68;
      I_70 = 8;
      I_70 = I_70*jt;
      I_71 = I_69;
      I_71 = I_71+I_70;
      I_72 = 8;
      I_72 = -I_72;
      I_73 = 8;
      I_73 = I_73*jt;
      I_74 = I_72;
      I_74 = I_74+I_73;
      I_75 = I_71;
      I_75 = I_75-I_74;
      P_20 = P_19;
      P_20 = P_20+I_75;
      *P_20 = I_53;
      *P_20 = *P_20>>*P_17;
      re2 = 1;
      re2 = re2+re2;
   }
}
void launcher_0_microcode(unsigned int it, unsigned int jt, int n, unsigned int i, int N0, int *FIFO0, short *FIFO1, short *FIFO2, short *FIFO3)
{
   //PIPS generated variable
   int *ma0;
   //PIPS generated variable
   short *ma1, *ma2, *ma3;
   //PIPS generated variable
   unsigned int re2;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_1;
   //PIPS generated variable
   int *P_1;
   //PIPS generated variable
   short *P_2;
   //PIPS generated variable
   int I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   short *P_3;
   //PIPS generated variable
   int I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22;
   //PIPS generated variable
   short *P_4;
   //PIPS generated variable
   int I_23;
   //PIPS generated variable
   int *P_5;
   //PIPS generated variable
   int I_24;
   //PIPS generated variable
   int *P_6;
   //PIPS generated variable
   short *P_7;
   //PIPS generated variable
   int I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34;
   //PIPS generated variable
   short *P_8;
   //PIPS generated variable
   int I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45;
   //PIPS generated variable
   short *P_9;
   //PIPS generated variable
   int I_46, I_47;
   //PIPS generated variable
   int *P_10;
   //PIPS generated variable
   int I_48;
   //PIPS generated variable
   int *P_11, *P_12;
   //PIPS generated variable
   int I_49;
   //PIPS generated variable
   int *P_13;
   //PIPS generated variable
   int I_50;
   //PIPS generated variable
   int *P_14;
   //PIPS generated variable
   int I_51;
   //PIPS generated variable
   int *P_15;
   //PIPS generated variable
   int I_52, I_53;
   //PIPS generated variable
   int *P_16;
   //PIPS generated variable
   int I_54;
   //PIPS generated variable
   int *P_17;
   //PIPS generated variable
   short *P_18;
   //PIPS generated variable
   int I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64;
   //PIPS generated variable
   short *P_19;
   //PIPS generated variable
   int I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75;
   //PIPS generated variable
   short *P_20;
   seti(ma3, FIFO3);
   seti(ma2, FIFO2);
   seti(ma1, FIFO1);
   seti(ma0, FIFO0);
l99996:   ;
   seti(re2, 1);
   while (re2<=N0) {
      seti(P_0, ma0);
      seti(P_0, P_0+0);
      seti(I_1, 3);
      subi(I_1, 0);
      seti(P_1, P_0);
      seti(P_1, P_1+I_1);
      seti(P_2, ma2);
      seti(P_2, P_2+0);
      seti(I_2, 1);
      seti(I_2, -I_2);
      seti(I_3, I_2);
      seti(I_3, I_3+i);
      seti(I_4, 128);
      seti(I_4, -I_4);
      seti(I_5, I_3);
      seti(I_5, I_5+I_4);
      seti(I_6, 128);
      muli(I_6, it);
      seti(I_7, I_5);
      seti(I_7, I_7+I_6);
      seti(I_8, 128);
      seti(I_8, -I_8);
      seti(I_9, 128);
      muli(I_9, it);
      seti(I_10, I_8);
      seti(I_10, I_10+I_9);
      seti(I_11, I_7);
      seti(I_11, I_11-I_10);
      seti(P_3, P_2);
      seti(P_3, P_3+I_11);
      seti(I_12, 1);
      seti(I_12, -I_12);
      seti(I_13, re2);
      addi(I_13, 1);
      seti(I_14, I_12);
      seti(I_14, I_14+I_13);
      seti(I_15, 8);
      seti(I_15, -I_15);
      seti(I_16, I_14);
      seti(I_16, I_16+I_15);
      seti(I_17, 8);
      muli(I_17, jt);
      seti(I_18, I_16);
      seti(I_18, I_18+I_17);
      seti(I_19, 8);
      seti(I_19, -I_19);
      seti(I_20, 8);
      muli(I_20, jt);
      seti(I_21, I_19);
      seti(I_21, I_21+I_20);
      seti(I_22, I_18);
      seti(I_22, I_22-I_21);
      seti(P_4, P_3);
      seti(P_4, P_4+I_22);
      seti(I_23, *P_1);
      muli(I_23, *P_4);
      seti(P_5, ma0);
      seti(P_5, P_5+0);
      seti(I_24, 4);
      subi(I_24, 0);
      seti(P_6, P_5);
      seti(P_6, P_6+I_24);
      seti(P_7, ma3);
      seti(P_7, P_7+0);
      seti(I_25, 1);
      seti(I_25, -I_25);
      seti(I_26, I_25);
      seti(I_26, I_26+i);
      seti(I_27, 128);
      seti(I_27, -I_27);
      seti(I_28, I_26);
      seti(I_28, I_28+I_27);
      seti(I_29, 128);
      muli(I_29, it);
      seti(I_30, I_28);
      seti(I_30, I_30+I_29);
      seti(I_31, 128);
      seti(I_31, -I_31);
      seti(I_32, 128);
      muli(I_32, it);
      seti(I_33, I_31);
      seti(I_33, I_33+I_32);
      seti(I_34, I_30);
      seti(I_34, I_34-I_33);
      seti(P_8, P_7);
      seti(P_8, P_8+I_34);
      seti(I_35, 1);
      seti(I_35, -I_35);
      seti(I_36, re2);
      addi(I_36, 1);
      seti(I_37, I_35);
      seti(I_37, I_37+I_36);
      seti(I_38, 8);
      seti(I_38, -I_38);
      seti(I_39, I_37);
      seti(I_39, I_39+I_38);
      seti(I_40, 8);
      muli(I_40, jt);
      seti(I_41, I_39);
      seti(I_41, I_41+I_40);
      seti(I_42, 8);
      seti(I_42, -I_42);
      seti(I_43, 8);
      muli(I_43, jt);
      seti(I_44, I_42);
      seti(I_44, I_44+I_43);
      seti(I_45, I_41);
      seti(I_45, I_45-I_44);
      seti(P_9, P_8);
      seti(P_9, P_9+I_45);
      seti(I_46, *P_6);
      muli(I_46, *P_9);
      seti(I_47, I_23);
      seti(I_47, I_47+I_46);
      seti(P_10, ma0);
      seti(P_10, P_10+0);
      seti(I_48, 0);
      subi(I_48, 0);
      seti(P_11, P_10);
      seti(P_11, P_11+I_48);
      seti(P_12, ma0);
      seti(P_12, P_12+0);
      seti(I_49, 1);
      subi(I_49, 0);
      seti(P_13, P_12);
      seti(P_13, P_13+I_49);
      seti(I_50, *P_11);
      seti(I_50, I_50/(*P_13));
      seti(P_14, ma0);
      seti(P_14, P_14+0);
      seti(I_51, 2);
      subi(I_51, 0);
      seti(P_15, P_14);
      seti(P_15, P_15+I_51);
      seti(I_52, I_50);
      seti(I_52, I_52<<*P_15);
      seti(I_53, I_47);
      muli(I_53, I_52);
      seti(P_16, ma0);
      seti(P_16, P_16+0);
      seti(I_54, 2);
      subi(I_54, 0);
      seti(P_17, P_16);
      seti(P_17, P_17+I_54);
      seti(P_18, ma1);
      seti(P_18, P_18+0);
      seti(I_55, 1);
      seti(I_55, -I_55);
      seti(I_56, I_55);
      seti(I_56, I_56+i);
      seti(I_57, 128);
      seti(I_57, -I_57);
      seti(I_58, I_56);
      seti(I_58, I_58+I_57);
      seti(I_59, 128);
      muli(I_59, it);
      seti(I_60, I_58);
      seti(I_60, I_60+I_59);
      seti(I_61, 128);
      seti(I_61, -I_61);
      seti(I_62, 128);
      muli(I_62, it);
      seti(I_63, I_61);
      seti(I_63, I_63+I_62);
      seti(I_64, I_60);
      seti(I_64, I_64-I_63);
      seti(P_19, P_18);
      seti(P_19, P_19+I_64);
      seti(I_65, 1);
      seti(I_65, -I_65);
      seti(I_66, re2);
      addi(I_66, 1);
      seti(I_67, I_65);
      seti(I_67, I_67+I_66);
      seti(I_68, 8);
      seti(I_68, -I_68);
      seti(I_69, I_67);
      seti(I_69, I_69+I_68);
      seti(I_70, 8);
      muli(I_70, jt);
      seti(I_71, I_69);
      seti(I_71, I_71+I_70);
      seti(I_72, 8);
      seti(I_72, -I_72);
      seti(I_73, 8);
      muli(I_73, jt);
      seti(I_74, I_72);
      seti(I_74, I_74+I_73);
      seti(I_75, I_71);
      seti(I_75, I_75-I_74);
      seti(P_20, P_19);
      seti(P_20, P_20+I_75);
      seti(*P_20, I_53);
      seti(*P_20, *P_20>>*P_17);
      seti(re2, 1);
      addi(re2, re2);
   }
}
