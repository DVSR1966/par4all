
Initial code

float dotprod(float b[200], float c[200])
{
   int i;
   float a = 0;
   for(i = 0; i <= 199; i += 1)
      a += b[i]*c[i];
   return a;
}
float dotprod(float b[200], float c[200])
{
   int i;
   float a = 0;
   for(i = 0; i <= 199; i += 1)
      a = a+b[i]*c[i];
   return a;
}
float dotprod(float b[200], float c[200])
{
   int i;
   float a = 0;
   for(i = 0; i <= 199; i += 1)
      a = a+b[i]*c[i];
   return a;
}
float dotprod(float b[200], float c[200])
{
   int i;
   float a = 0;
   for(i = 0; i <= 199; i += 1)
      a = a+b[i]*c[i];
   return a;
}
float dotprod(float b[200], float c[200])
{
   int i;
   float a = 0;
   //PIPS generated variable
   float F_0;
   for(i = 0; i <= 199; i += 1) {
      F_0 = b[i]*c[i];
      a = a+F_0;
   }
   return a;
}
float dotprod(float b[200], float c[200])
{
   float a = 0;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_IND0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0]*c[LU_IND0];
      //c SIMD_COMMENT_1
      a = a+F_0;
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0+1]*c[LU_IND0+1];
      //c SIMD_COMMENT_1
      a = a+F_0;
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0+2]*c[LU_IND0+2];
      //c SIMD_COMMENT_1
      a = a+F_0;
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0+3]*c[LU_IND0+3];
      //c SIMD_COMMENT_1
      a = a+F_0;
   }
   return a;
}
float dotprod(float b[200], float c[200])
{
   float a = 0;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[4];
   LU_IND0 = 0;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0]*c[LU_IND0];
      //c SIMD_COMMENT_1
      RED0[0] = RED0[0]+F_0;
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0+1]*c[LU_IND0+1];
      //c SIMD_COMMENT_1
      RED0[1] = RED0[1]+F_0;
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0+2]*c[LU_IND0+2];
      //c SIMD_COMMENT_1
      RED0[2] = RED0[2]+F_0;
      //c SIMD_COMMENT_0
      F_0 = b[LU_IND0+3]*c[LU_IND0+3];
      //c SIMD_COMMENT_1
      RED0[3] = RED0[3]+F_0;
   }
   a = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a;
   return a;
}
float dotprod(float b[200], float c[200])
{
   float a;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[4], a0, F_00, F_01, F_02, F_03, a1;
   a1 = 0;
   LU_IND0 = 0;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      F_03 = b[LU_IND0]*c[LU_IND0];
      //c SIMD_COMMENT_1
      RED0[0] = RED0[0]+F_03;
      //c SIMD_COMMENT_0
      F_02 = b[LU_IND0+1]*c[LU_IND0+1];
      //c SIMD_COMMENT_1
      RED0[1] = RED0[1]+F_02;
      //c SIMD_COMMENT_0
      F_01 = b[LU_IND0+2]*c[LU_IND0+2];
      //c SIMD_COMMENT_1
      RED0[2] = RED0[2]+F_01;
      //c SIMD_COMMENT_0
      F_00 = b[LU_IND0+3]*c[LU_IND0+3];
      //c SIMD_COMMENT_1
      RED0[3] = RED0[3]+F_00;
   }
   a0 = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a1;
   return a0;
}
float dotprod(float b[200], float c[200])
{
   float a;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[4], a0, F_00, F_01, F_02, F_03, a1;
   //SAC generated temporary array
   float aligned[4] = {0, 0, 0, 0};
   a1 = 0;
   LU_IND0 = 0;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec1[4], v4sf_vec2[4], v4sf_vec3[4], v4sf_vec4[4];
      SIMD_LOAD_V4SF(v4sf_vec2, &c[LU_IND0]);
      SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_STORE_V4SF(v4sf_vec0, &aligned[0]);
      SIMD_LOAD_V4SF(v4sf_vec3, &RED0[0]);
      SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      SIMD_STORE_V4SF(v4sf_vec3, &RED0[0]);
   }
   a0 = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a1;
   return a0;
}
float dotprod(float b[200], float c[200])
{
   float a;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[4], a0, F_00, F_01, F_02, F_03, a1;
   //SAC generated temporary array
   float aligned[4] = {0, 0, 0, 0};
   a1 = 0;
   LU_IND0 = 0;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   {
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec3[4];
      SIMD_LOAD_V4SF(v4sf_vec3, &RED0[0]);
      for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
         //PIPS:SAC generated float vector(s)
         float v4sf_vec1[4], v4sf_vec2[4], v4sf_vec4[4];
         SIMD_LOAD_V4SF(v4sf_vec2, &c[LU_IND0]);
         SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
         SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      }
      SIMD_STORE_V4SF(v4sf_vec0, &aligned[0]);
      SIMD_STORE_V4SF(v4sf_vec3, &RED0[0]);
   }
   a0 = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a1;
   return a0;
}
float dotprod(float b[200], float c[200])
{
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[4], a0, a1;
   a1 = 0;
   LU_IND0 = 0;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   {
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec3[4];
      SIMD_LOAD_V4SF(v4sf_vec3, &RED0[0]);
      for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
         //PIPS:SAC generated float vector(s)
         float v4sf_vec1[4], v4sf_vec2[4], v4sf_vec4[4];
         SIMD_LOAD_V4SF(v4sf_vec2, &c[LU_IND0]);
         SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
         SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      }
      SIMD_STORE_V4SF(v4sf_vec3, &RED0[0]);
   }
   a0 = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a1;
   return a0;
}

simdized code

float dotprod(float b[200], float c[200])
{
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[4], a0, a1;
   a1 = 0;
   LU_IND0 = 0;
   RED0[0] = 0.000000;
   RED0[1] = 0.000000;
   RED0[2] = 0.000000;
   RED0[3] = 0.000000;
   {
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec3[4];
      SIMD_LOAD_V4SF(v4sf_vec3, &RED0[0]);
      for(LU_IND0 = 0; LU_IND0 <= 199; LU_IND0 += 4) {
         //PIPS:SAC generated float vector(s)
         float v4sf_vec1[4], v4sf_vec2[4], v4sf_vec4[4];
         SIMD_LOAD_V4SF(v4sf_vec2, &c[LU_IND0]);
         SIMD_LOAD_V4SF(v4sf_vec1, &b[LU_IND0]);
         SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_ADDPS(v4sf_vec3, v4sf_vec3, v4sf_vec0);
      }
      SIMD_STORE_V4SF(v4sf_vec3, &RED0[0]);
   }
   a0 = RED0[3]+RED0[2]+RED0[1]+RED0[0]+a1;
   return a0;
}
seq-ok
sse-ok
