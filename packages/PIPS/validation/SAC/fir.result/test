
Initial code

void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i <= n-ksize+1-1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j <= ksize-1; j += 1)
         out[i] += in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i <= n-ksize+1-1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j <= ksize-1; j += 1)
         out[i] = out[i]+in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i <= n-ksize+1-1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j <= ksize-1; j += 1)
         out[i] = out[i]+in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i <= n-ksize+1-1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j <= ksize-1; j += 1)
         out[i] = out[i]+in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   //PIPS generated variable
   float F_0;
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      for(j = 0; j <= ksize-1; j += 1) {
         F_0 = in[i+j]*kernel[j];
         out[i] = out[i]+F_0;
      }
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB0 = ksize;
      LU_IB0 = MOD(LU_NUB0, 4);
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
         F_0 = in[LU_IND0+i]*kernel[LU_IND0];
         out[i] = out[i]+F_0;
      }
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i]*kernel[LU_IND0];
         //c SIMD_COMMENT_1
         out[i] = out[i]+F_0;
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i+1]*kernel[LU_IND0+1];
         //c SIMD_COMMENT_1
         out[i] = out[i]+F_0;
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i+2]*kernel[LU_IND0+2];
         //c SIMD_COMMENT_1
         out[i] = out[i]+F_0;
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i+3]*kernel[LU_IND0+3];
         //c SIMD_COMMENT_1
         out[i] = out[i]+F_0;
      }
   }
   ;
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4];
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB0 = ksize;
      LU_IB0 = MOD(LU_NUB0, 4);
      RED0[0] = 0.000000;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
         F_0 = in[LU_IND0+i]*kernel[LU_IND0];
         RED0[0] = RED0[0]+F_0;
      }
      out[i] = RED0[0]+out[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i]*kernel[LU_IND0];
         //c SIMD_COMMENT_1
         RED1[0] = RED1[0]+F_0;
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i+1]*kernel[LU_IND0+1];
         //c SIMD_COMMENT_1
         RED1[1] = RED1[1]+F_0;
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i+2]*kernel[LU_IND0+2];
         //c SIMD_COMMENT_1
         RED1[2] = RED1[2]+F_0;
         //c SIMD_COMMENT_0
         F_0 = in[LU_IND0+i+3]*kernel[LU_IND0+3];
         //c SIMD_COMMENT_1
         RED1[3] = RED1[3]+F_0;
      }
      out[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+out[i];
   }
   ;
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03, F_04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB00 = ksize;
      LU_IB00 = MOD(LU_NUB00, 4);
      RED0[0] = 0.000000;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
         F_04 = in[LU_IND0+i]*kernel[LU_IND0];
         RED0[0] = RED0[0]+F_04;
      }
      out[i] = RED0[0]+out[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_03 = in[LU_IND0+i]*kernel[LU_IND0];
         //c SIMD_COMMENT_1
         RED1[0] = RED1[0]+F_03;
         //c SIMD_COMMENT_0
         F_02 = in[LU_IND0+i+1]*kernel[LU_IND0+1];
         //c SIMD_COMMENT_1
         RED1[1] = RED1[1]+F_02;
         //c SIMD_COMMENT_0
         F_01 = in[LU_IND0+i+2]*kernel[LU_IND0+2];
         //c SIMD_COMMENT_1
         RED1[2] = RED1[2]+F_01;
         //c SIMD_COMMENT_0
         F_00 = in[LU_IND0+i+3]*kernel[LU_IND0+3];
         //c SIMD_COMMENT_1
         RED1[3] = RED1[3]+F_00;
      }
      out[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+out[i];
   }
   ;
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03, F_04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB00 = ksize;
      RED0[0] = 0.000000;
      LU_IB00 = MOD(LU_NUB00, 4);
      for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
         F_04 = in[LU_IND0+i]*kernel[LU_IND0];
         RED0[0] = RED0[0]+F_04;
      }
      out[i] = RED0[0]+out[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec10, vec20, vec30, vec40;
         SIMD_LOAD_V4SF(vec20, &kernel[LU_IND0]);
         SIMD_LOAD_V4SF(vec10, &in[LU_IND0+i]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_STORE_V4SF(vec00, &pdata0[0]);
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         SIMD_ADDPS(vec30, vec30, vec00);
         SIMD_STORE_V4SF(vec30, &RED1[0]);
      }
      out[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+out[i];
   }
   ;
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03, F_04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB00 = ksize;
      RED0[0] = 0.000000;
      LU_IB00 = MOD(LU_NUB00, 4);
      for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
         F_04 = in[LU_IND0+i]*kernel[LU_IND0];
         RED0[0] = RED0[0]+F_04;
      }
      out[i] = RED0[0]+out[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec30;
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec20, vec40;
            SIMD_LOAD_V4SF(vec20, &kernel[LU_IND0]);
            SIMD_LOAD_V4SF(vec10, &in[LU_IND0+i]);
            SIMD_MULPS(vec00, vec10, vec20);
            SIMD_ADDPS(vec30, vec30, vec00);
         }
         SIMD_STORE_V4SF(vec00, &pdata0[0]);
         SIMD_STORE_V4SF(vec30, &RED1[0]);
      }
      out[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+out[i];
   }
   ;
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB00 = ksize;
      RED0[0] = 0.000000;
      LU_IB00 = MOD(LU_NUB00, 4);
      for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
         F_04 = in[LU_IND0+i]*kernel[LU_IND0];
         RED0[0] = RED0[0]+F_04;
      }
      out[i] = RED0[0]+out[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec30;
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec20, vec40;
            SIMD_LOAD_V4SF(vec20, &kernel[LU_IND0]);
            SIMD_LOAD_V4SF(vec10, &in[LU_IND0+i]);
            SIMD_MULPS(vec00, vec10, vec20);
            SIMD_ADDPS(vec30, vec30, vec00);
         }
         SIMD_STORE_V4SF(vec30, &RED1[0]);
      }
      out[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+out[i];
   }
   ;
}

simdized code

void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   for(i = 0; i <= n-ksize; i += 1) {
      out[i] = 0.0;
      LU_NUB00 = ksize;
      RED0[0] = 0.000000;
      LU_IB00 = MOD(LU_NUB00, 4);
      for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
         F_04 = in[LU_IND0+i]*kernel[LU_IND0];
         RED0[0] = RED0[0]+F_04;
      }
      out[i] = RED0[0]+out[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec30;
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec20, vec40;
            SIMD_LOAD_V4SF(vec20, &kernel[LU_IND0]);
            SIMD_LOAD_V4SF(vec10, &in[LU_IND0+i]);
            SIMD_MULPS(vec00, vec10, vec20);
            SIMD_ADDPS(vec30, vec30, vec00);
         }
         SIMD_STORE_V4SF(vec30, &RED1[0]);
      }
      out[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+out[i];
   }
   ;
}
