
Initial code

void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1)
loop1:
      for(j = 0; j <= 3; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 3; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1)
loop1:
      for(j = 0; j <= 3; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 3; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1)
loop1:
      for(j = 0; j <= 3; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 3; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      c[i][0] = c[i][0]+a[i][3]*b[3][0];
      k = 4;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      c[i][1] = c[i][1]+a[i][3]*b[3][1];
      k = 4;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      c[i][2] = c[i][2]+a[i][3]*b[3][2];
      k = 4;
      c[i][3] = 0;
      c[i][3] = c[i][3]+a[i][0]*b[0][3];
      c[i][3] = c[i][3]+a[i][1]*b[1][3];
      c[i][3] = c[i][3]+a[i][2]*b[2][3];
      c[i][3] = c[i][3]+a[i][3]*b[3][3];
      k = 4;
      j = 4;
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      c[i][0] = c[i][0]+a[i][3]*b[3][0];
      k = 4;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      c[i][1] = c[i][1]+a[i][3]*b[3][1];
      k = 4;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      c[i][2] = c[i][2]+a[i][3]*b[3][2];
      k = 4;
      c[i][3] = 0;
      c[i][3] = c[i][3]+a[i][0]*b[0][3];
      c[i][3] = c[i][3]+a[i][1]*b[1][3];
      c[i][3] = c[i][3]+a[i][2]*b[2][3];
      c[i][3] = c[i][3]+a[i][3]*b[3][3];
      k = 4;
      j = 4;
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      F_0 = a[i][0]*b[0][0];
      c[i][0] = c[i][0]+F_0;
      F_1 = a[i][1]*b[1][0];
      c[i][0] = c[i][0]+F_1;
      F_2 = a[i][2]*b[2][0];
      c[i][0] = c[i][0]+F_2;
      F_3 = a[i][3]*b[3][0];
      c[i][0] = c[i][0]+F_3;
      k = 4;
      c[i][1] = 0;
      F_4 = a[i][0]*b[0][1];
      c[i][1] = c[i][1]+F_4;
      F_5 = a[i][1]*b[1][1];
      c[i][1] = c[i][1]+F_5;
      F_6 = a[i][2]*b[2][1];
      c[i][1] = c[i][1]+F_6;
      F_7 = a[i][3]*b[3][1];
      c[i][1] = c[i][1]+F_7;
      k = 4;
      c[i][2] = 0;
      F_8 = a[i][0]*b[0][2];
      c[i][2] = c[i][2]+F_8;
      F_9 = a[i][1]*b[1][2];
      c[i][2] = c[i][2]+F_9;
      F_10 = a[i][2]*b[2][2];
      c[i][2] = c[i][2]+F_10;
      F_11 = a[i][3]*b[3][2];
      c[i][2] = c[i][2]+F_11;
      k = 4;
      c[i][3] = 0;
      F_12 = a[i][0]*b[0][3];
      c[i][3] = c[i][3]+F_12;
      F_13 = a[i][1]*b[1][3];
      c[i][3] = c[i][3]+F_13;
      F_14 = a[i][2]*b[2][3];
      c[i][3] = c[i][3]+F_14;
      F_15 = a[i][3]*b[3][3];
      c[i][3] = c[i][3]+F_15;
      k = 4;
      j = 4;
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15, F_150, F_140, F_130, F_120, F_110, F_100, F_90, F_80, F_70, F_60, F_50, F_40, F_30, F_20, F_16, F_00;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      F_00 = a[i][0]*b[0][0];
      c[i][0] = c[i][0]+F_00;
      F_16 = a[i][1]*b[1][0];
      c[i][0] = c[i][0]+F_16;
      F_20 = a[i][2]*b[2][0];
      c[i][0] = c[i][0]+F_20;
      F_30 = a[i][3]*b[3][0];
      c[i][0] = c[i][0]+F_30;
      k = 4;
      c[i][1] = 0;
      F_40 = a[i][0]*b[0][1];
      c[i][1] = c[i][1]+F_40;
      F_50 = a[i][1]*b[1][1];
      c[i][1] = c[i][1]+F_50;
      F_60 = a[i][2]*b[2][1];
      c[i][1] = c[i][1]+F_60;
      F_70 = a[i][3]*b[3][1];
      c[i][1] = c[i][1]+F_70;
      k = 4;
      c[i][2] = 0;
      F_80 = a[i][0]*b[0][2];
      c[i][2] = c[i][2]+F_80;
      F_90 = a[i][1]*b[1][2];
      c[i][2] = c[i][2]+F_90;
      F_100 = a[i][2]*b[2][2];
      c[i][2] = c[i][2]+F_100;
      F_110 = a[i][3]*b[3][2];
      c[i][2] = c[i][2]+F_110;
      k = 4;
      c[i][3] = 0;
      F_120 = a[i][0]*b[0][3];
      c[i][3] = c[i][3]+F_120;
      F_130 = a[i][1]*b[1][3];
      c[i][3] = c[i][3]+F_130;
      F_140 = a[i][2]*b[2][3];
      c[i][3] = c[i][3]+F_140;
      F_150 = a[i][3]*b[3][3];
      c[i][3] = c[i][3]+F_150;
      k = 4;
      j = 4;
   }
}

simdized code

void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15, F_150, F_140, F_130, F_120, F_110, F_100, F_90, F_80, F_70, F_60, F_50, F_40, F_30, F_20, F_16, F_00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0}, pdata2 = {0, 0, 0, 0}, pdata3 = {0, 0, 0, 0};
loop0:
   for(i = 0; i <= 3; i += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70, vec80, vec90, vec100, vec110, vec120, vec130, vec140, vec150, vec160, vec170, vec180, vec190;
loop1:      ;
      c[i][0] = 0;
      SIMD_LOAD_V4SF(vec20, &b[0][0]);
      SIMD_LOAD_GENERIC_V4SF(vec10, a[i][0], a[i][0], a[i][0], a[i][0]);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec50, &b[1][0]);
      SIMD_LOAD_GENERIC_V4SF(vec40, a[i][1], a[i][1], a[i][1], a[i][1]);
      SIMD_MULPS(vec30, vec40, vec50);
      SIMD_STORE_V4SF(vec30, &pdata1[0]);
      SIMD_LOAD_V4SF(vec80, &b[2][0]);
      SIMD_LOAD_GENERIC_V4SF(vec70, a[i][2], a[i][2], a[i][2], a[i][2]);
      SIMD_MULPS(vec60, vec70, vec80);
      SIMD_STORE_V4SF(vec60, &pdata2[0]);
      SIMD_LOAD_V4SF(vec110, &b[3][0]);
      SIMD_LOAD_GENERIC_V4SF(vec100, a[i][3], a[i][3], a[i][3], a[i][3]);
      SIMD_MULPS(vec90, vec100, vec110);
      SIMD_STORE_V4SF(vec90, &pdata3[0]);
      k = 4;
      c[i][1] = 0;
      c[i][2] = 0;
      c[i][3] = 0;
      j = 4;
      SIMD_LOAD_V4SF(vec120, &c[i][0]);
      SIMD_ADDPS(vec120, vec120, vec00);
      SIMD_STORE_V4SF(vec120, &c[i][0]);
      k = 4;
      SIMD_ADDPS(vec140, vec120, vec30);
      SIMD_STORE_V4SF(vec140, &c[i][0]);
      k = 4;
      SIMD_ADDPS(vec160, vec140, vec60);
      SIMD_STORE_V4SF(vec160, &c[i][0]);
      k = 4;
      SIMD_ADDPS(vec180, vec160, vec90);
      SIMD_STORE_V4SF(vec180, &c[i][0]);
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15, F_150, F_140, F_130, F_120, F_110, F_100, F_90, F_80, F_70, F_60, F_50, F_40, F_30, F_20, F_16, F_00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0}, pdata2 = {0, 0, 0, 0}, pdata3 = {0, 0, 0, 0};
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec20, vec30, vec50, vec60, vec80, vec90, vec110;
loop0:      ;
      SIMD_LOAD_V4SF(vec20, &b[0][0]);
      SIMD_LOAD_V4SF(vec50, &b[1][0]);
      SIMD_LOAD_V4SF(vec80, &b[2][0]);
      SIMD_LOAD_V4SF(vec110, &b[3][0]);
      for(i = 0; i <= 3; i += 1) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec40, vec70, vec100, vec120, vec130, vec140, vec150, vec160, vec170, vec180, vec190;
loop1:         ;
         c[i][0] = 0;
         SIMD_LOAD_GENERIC_V4SF(vec10, a[i][0], a[i][0], a[i][0], a[i][0]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_LOAD_GENERIC_V4SF(vec40, a[i][1], a[i][1], a[i][1], a[i][1]);
         SIMD_MULPS(vec30, vec40, vec50);
         SIMD_LOAD_GENERIC_V4SF(vec70, a[i][2], a[i][2], a[i][2], a[i][2]);
         SIMD_MULPS(vec60, vec70, vec80);
         SIMD_LOAD_GENERIC_V4SF(vec100, a[i][3], a[i][3], a[i][3], a[i][3]);
         SIMD_MULPS(vec90, vec100, vec110);

         c[i][1] = 0;
         c[i][2] = 0;
         c[i][3] = 0;

         SIMD_LOAD_V4SF(vec120, &c[i][0]);
         SIMD_ADDPS(vec120, vec120, vec00);
         SIMD_STORE_V4SF(vec120, &c[i][0]);

         SIMD_ADDPS(vec140, vec120, vec30);
         SIMD_STORE_V4SF(vec140, &c[i][0]);

         SIMD_ADDPS(vec160, vec140, vec60);
         SIMD_STORE_V4SF(vec160, &c[i][0]);

         SIMD_ADDPS(vec180, vec160, vec90);
         SIMD_STORE_V4SF(vec180, &c[i][0]);
      }




   }
}
seq-ok
sse-ok
