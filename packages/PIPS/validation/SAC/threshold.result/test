
Initial code

void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   for(i = 0; i <= 127; i += 1)
      if (data[i]>val)                                                  /*0005*/
         data[i] = val;                                                 /*0006*/
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0[127+1];
   for(i = 0; i <= 127; i += 1) {
      I_0[i] = data[i]>val;
      data[i] = I_0[i]?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+2] = data[LU_IND0+2]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+3] = data[LU_IND0+3]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+2] = data[LU_IND0+2]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+3] = data[LU_IND0+3]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+2] = data[LU_IND0+2]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+3] = data[LU_IND0+3]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   int i;                                                               /*0003*/
   //PIPS generated variable
   int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = 128;
   LU_IB0 = 0;
   LU_IND0 = 0;
   for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      I_0[LU_IND0] = data[LU_IND0]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+1] = data[LU_IND0+1]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+2] = data[LU_IND0+2]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
      //c SIMD_COMMENT_0
      I_0[LU_IND0+3] = data[LU_IND0+3]>val;
      //c SIMD_COMMENT_1
      data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
   }
   i = 128;
   ;
}
void threshold(float data[128], float val)
{
   //PIPS:SAC generated int vector(s)
   int v4si_vec0[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec1[3+1], v4sf_vec2[3+1], v4sf_vec3[3+1];
   //PIPS:SAC generated int vector(s)
   int v4si_vec4[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec5[3+1];
   //PIPS:SAC generated variable
   float aligned[3+1] = {val, val, val, val};
   //PIPS:SAC generated int vector(s)
   int v4si_vec6[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec7[3+1], v4sf_vec8[3+1], v4sf_vec9[3+1];
   //PIPS:SAC generated int vector(s)
   int v4si_vec10[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec11[3+1];
   {
      int i;                                                            /*0003*/
      //PIPS generated variable
      int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         SIMD_LOAD_V4SF(v4sf_vec2, &aligned[0]);
         SIMD_LOAD_V4SF(v4sf_vec1, &data[LU_IND0]);
         SIMD_GTPS(v4si_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_SAVE_V4SI(v4si_vec0, &I_0[LU_IND0]);
         SIMD_PHIPS(v4sf_vec3, v4si_vec0, v4sf_vec2, v4sf_vec1);
         SIMD_SAVE_V4SF(v4sf_vec3, &data[LU_IND0]);
      }
      i = 128;
      ;
   }
}
void threshold(float data[128], float val)
{
   //PIPS:SAC generated int vector(s)
   int v4si_vec0[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec1[3+1], v4sf_vec2[3+1], v4sf_vec3[3+1];
   //PIPS:SAC generated int vector(s)
   int v4si_vec4[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec5[3+1];
   //PIPS:SAC generated variable
   float aligned[3+1] = {val, val, val, val};
   //PIPS:SAC generated int vector(s)
   int v4si_vec6[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec7[3+1], v4sf_vec8[3+1], v4sf_vec9[3+1];
   //PIPS:SAC generated int vector(s)
   int v4si_vec10[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec11[3+1];
   {
      int i;                                                            /*0003*/
      //PIPS generated variable
      int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &aligned[0]);
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         SIMD_LOAD_V4SF(v4sf_vec1, &data[LU_IND0]);
         SIMD_GTPS(v4si_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_SAVE_V4SI(v4si_vec0, &I_0[LU_IND0]);
         SIMD_PHIPS(v4sf_vec3, v4si_vec0, v4sf_vec2, v4sf_vec1);
         SIMD_SAVE_V4SF(v4sf_vec3, &data[LU_IND0]);
      }
      i = 128;
      ;
   }
}
void threshold(float data[128], float val)
{
   //PIPS:SAC generated int vector(s)
   int v4si_vec0[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec1[3+1], v4sf_vec2[3+1], v4sf_vec3[3+1];
   //PIPS:SAC generated variable
   float aligned[3+1] = {val, val, val, val};
   {
      int i;                                                            /*0003*/
      //PIPS generated variable
      int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &aligned[0]);
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         SIMD_LOAD_V4SF(v4sf_vec1, &data[LU_IND0]);
         SIMD_GTPS(v4si_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_SAVE_V4SI(v4si_vec0, &I_0[LU_IND0]);
         SIMD_PHIPS(v4sf_vec3, v4si_vec0, v4sf_vec2, v4sf_vec1);
         SIMD_SAVE_V4SF(v4sf_vec3, &data[LU_IND0]);
      }
      i = 128;
      ;
   }
}

simdized code

void threshold(float data[128], float val)
{
   //PIPS:SAC generated int vector(s)
   int v4si_vec0[3+1];
   //PIPS:SAC generated float vector(s)
   float v4sf_vec1[3+1], v4sf_vec2[3+1], v4sf_vec3[3+1];
   //PIPS:SAC generated variable
   float aligned[3+1] = {val, val, val, val};
   {
      int i;                                                            /*0003*/
      //PIPS generated variable
      int I_0[127+1], LU_NUB0, LU_IB0, LU_IND0;
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(v4sf_vec2, &aligned[0]);
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         SIMD_LOAD_V4SF(v4sf_vec1, &data[LU_IND0]);
         SIMD_GTPS(v4si_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_SAVE_V4SI(v4si_vec0, &I_0[LU_IND0]);
         SIMD_PHIPS(v4sf_vec3, v4si_vec0, v4sf_vec2, v4sf_vec1);
         SIMD_SAVE_V4SF(v4sf_vec3, &data[LU_IND0]);
      }
      i = 128;
      ;
   }
}
seq-ok
