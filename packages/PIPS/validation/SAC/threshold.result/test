
Initial code

void threshold(float data[128], float val)
{
   int i;
   for(i = 0; i <= 127; i += 1)
      if (data[i]>val) 
         data[i] = val;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];

      for(i = 0; i <= 127; i += 1) {
         I_0[i] = data[i]>val;
         data[i] = I_0[i]?val:data[i];
         ;
      }
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, LU_NUB0, LU_IB0, LU_IND0;
   {
      //PIPS generated variable
      int I_0[128];
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         I_0[LU_IND0] = data[LU_IND0]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+1] = data[LU_IND0+1]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+2] = data[LU_IND0+2]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+3] = data[LU_IND0+3]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
      }
      i = 128;
   }
   ;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, LU_NUB0, LU_IB0, LU_IND0;
   {
      //PIPS generated variable
      int I_0[128];
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         I_0[LU_IND0] = data[LU_IND0]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+1] = data[LU_IND0+1]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+2] = data[LU_IND0+2]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+3] = data[LU_IND0+3]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
      }
      i = 128;
   }
   ;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, LU_NUB0, LU_IB0, LU_IND0;
   {
      //PIPS generated variable
      int I_0[128];
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         I_0[LU_IND0] = data[LU_IND0]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+1] = data[LU_IND0+1]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+2] = data[LU_IND0+2]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+3] = data[LU_IND0+3]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
      }
      i = 128;
   }
   ;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, LU_NUB0, LU_IB0, LU_IND0;
   {
      //PIPS generated variable
      int I_0[128];
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         I_0[LU_IND0] = data[LU_IND0]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0] = I_0[LU_IND0]?val:data[LU_IND0];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+1] = data[LU_IND0+1]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+1] = I_0[LU_IND0+1]?val:data[LU_IND0+1];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+2] = data[LU_IND0+2]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+2] = I_0[LU_IND0+2]?val:data[LU_IND0+2];
         //c SIMD_COMMENT_0
         I_0[LU_IND0+3] = data[LU_IND0+3]>val;
         //c SIMD_COMMENT_1
         data[LU_IND0+3] = I_0[LU_IND0+3]?val:data[LU_IND0+3];
      }
      i = 128;
   }
   ;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, LU_NUB0, LU_IB0, LU_IND0;
   //SAC generated temporary array
   a4sf pdata0 = {val, val, val, val};
   {
      //PIPS generated variable
      int I_0[128];
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
         //PIPS:SAC generated v4si vector(s)
         v4si vec00;
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec30;
         //PIPS:SAC generated v4si vector(s)
         v4si vec40;
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec50;
         SIMD_LOAD_V4SF(vec20, &pdata0[0]);
         SIMD_LOAD_V4SF(vec10, &data[LU_IND0]);
         SIMD_GTPS(vec00, vec10, vec20);
         SIMD_STORE_V4SI(vec00, &I_0[LU_IND0]);
         SIMD_PHIPS(vec30, vec00, vec20, vec10);
         SIMD_STORE_V4SF(vec30, &data[LU_IND0]);
      }
      i = 128;
   }
   ;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, LU_NUB0, LU_IB0, LU_IND0;
   //SAC generated temporary array
   a4sf pdata0 = {val, val, val, val};
   {
      //PIPS generated variable
      int I_0[128];
      LU_NUB0 = 128;
      LU_IB0 = 0;
      LU_IND0 = 0;
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec20;
         SIMD_LOAD_V4SF(vec20, &pdata0[0]);
         for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
            //PIPS:SAC generated v4si vector(s)
            v4si vec00;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec30;
            //PIPS:SAC generated v4si vector(s)
            v4si vec40;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec50;
            SIMD_LOAD_V4SF(vec10, &data[LU_IND0]);
            SIMD_GTPS(vec00, vec10, vec20);
            SIMD_STORE_V4SI(vec00, &I_0[LU_IND0]);
            SIMD_PHIPS(vec30, vec00, vec20, vec10);
            SIMD_STORE_V4SF(vec30, &data[LU_IND0]);
         }
      }
      i = 128;
   }
   ;
}
void threshold(float data[128], float val)
{
   //PIPS generated variable
   int LU_IND0;
   //SAC generated temporary array
   a4sf pdata0 = {val, val, val, val};
   {
      //PIPS generated variable
      int I_0[128];
      128;
      0;
      LU_IND0 = 0;
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec20;
         SIMD_LOAD_V4SF(vec20, &pdata0[0]);
         for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
            //PIPS:SAC generated v4si vector(s)
            v4si vec00;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec30;
            //PIPS:SAC generated v4si vector(s)
            v4si vec40;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec50;
            SIMD_LOAD_V4SF(vec10, &data[LU_IND0]);
            SIMD_GTPS(vec00, vec10, vec20);
            SIMD_STORE_V4SI(vec00, &I_0[LU_IND0]);
            SIMD_PHIPS(vec30, vec00, vec20, vec10);
            SIMD_STORE_V4SF(vec30, &data[LU_IND0]);
         }
      }
      128;
   }
   ;
}

simdized code

void threshold(float data[128], float val)
{
   //PIPS generated variable
   int LU_IND0;
   //SAC generated temporary array
   a4sf pdata0 = {val, val, val, val};
   {
      //PIPS generated variable
      int I_0[128];
      128;
      0;
      LU_IND0 = 0;
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec20;
         SIMD_LOAD_V4SF(vec20, &pdata0[0]);
         for(LU_IND0 = 0; LU_IND0 <= 127; LU_IND0 += 4) {
            //PIPS:SAC generated v4si vector(s)
            v4si vec00;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec30;
            //PIPS:SAC generated v4si vector(s)
            v4si vec40;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec50;
            SIMD_LOAD_V4SF(vec10, &data[LU_IND0]);
            SIMD_GTPS(vec00, vec10, vec20);
            SIMD_STORE_V4SI(vec00, &I_0[LU_IND0]);
            SIMD_PHIPS(vec30, vec00, vec20, vec10);
            SIMD_STORE_V4SF(vec30, &data[LU_IND0]);
         }
      }
      128;
   }
   ;
}
seq-ok
