
Initial code

short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   //PIPS generated variable
   size_t LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+1];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+2];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+3];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+4];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+5];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+6];
      //c SIMD_COMMENT_0
      seed = seed+a[LU_IND0+7];
   }
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   //PIPS generated variable
   size_t LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   short RED0[0+1], RED1[7+1];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 8);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed = RED0[0]+seed;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   RED1[4] = 0;
   RED1[5] = 0;
   RED1[6] = 0;
   RED1[7] = 0;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
      //c SIMD_COMMENT_0
      RED1[0] = RED1[0]+a[LU_IND0];
      //c SIMD_COMMENT_0
      RED1[1] = RED1[1]+a[LU_IND0+1];
      //c SIMD_COMMENT_0
      RED1[2] = RED1[2]+a[LU_IND0+2];
      //c SIMD_COMMENT_0
      RED1[3] = RED1[3]+a[LU_IND0+3];
      //c SIMD_COMMENT_0
      RED1[4] = RED1[4]+a[LU_IND0+4];
      //c SIMD_COMMENT_0
      RED1[5] = RED1[5]+a[LU_IND0+5];
      //c SIMD_COMMENT_0
      RED1[6] = RED1[6]+a[LU_IND0+6];
      //c SIMD_COMMENT_0
      RED1[7] = RED1[7]+a[LU_IND0+7];
   }
   seed = RED1[7]+RED1[6]+RED1[5]+RED1[4]+RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   size_t i;
   //PIPS generated variable
   size_t LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   short RED0[0+1], RED1[7+1], seed0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 8);
   RED0[0] = 0;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      RED0[0] = RED0[0]+a[LU_IND0];
   seed0 = RED0[0]+seed0;
   RED1[0] = 0;
   RED1[1] = 0;
   RED1[2] = 0;
   RED1[3] = 0;
   RED1[4] = 0;
   RED1[5] = 0;
   RED1[6] = 0;
   RED1[7] = 0;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
      //c SIMD_COMMENT_0
      RED1[0] = RED1[0]+a[LU_IND0];
      //c SIMD_COMMENT_0
      RED1[1] = RED1[1]+a[LU_IND0+1];
      //c SIMD_COMMENT_0
      RED1[2] = RED1[2]+a[LU_IND0+2];
      //c SIMD_COMMENT_0
      RED1[3] = RED1[3]+a[LU_IND0+3];
      //c SIMD_COMMENT_0
      RED1[4] = RED1[4]+a[LU_IND0+4];
      //c SIMD_COMMENT_0
      RED1[5] = RED1[5]+a[LU_IND0+5];
      //c SIMD_COMMENT_0
      RED1[6] = RED1[6]+a[LU_IND0+6];
      //c SIMD_COMMENT_0
      RED1[7] = RED1[7]+a[LU_IND0+7];
   }
   seed = RED1[7]+RED1[6]+RED1[5]+RED1[4]+RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
   i = MAX0(LU_NUB0, 0);
   return seed;
}
short accumulate(size_t n, short a[n], short seed)
{
   //PIPS:SAC generated short vector(s)
   short v8hi_vec0[7+1], v8hi_vec1[7+1], v8hi_vec2[7+1], v8hi_vec3[7+1];
   {
      size_t i;
      //PIPS generated variable
      size_t LU_NUB0, LU_IB0, LU_IND0;
      //PIPS generated variable
      short RED0[0+1], RED1[7+1], seed0;
      LU_NUB0 = n;
      LU_IB0 = MOD(LU_NUB0, 8);
      RED0[0] = 0;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
         RED0[0] = RED0[0]+a[LU_IND0];
      seed0 = RED0[0]+seed0;
      RED1[0] = 0;
      RED1[1] = 0;
      RED1[2] = 0;
      RED1[3] = 0;
      RED1[4] = 0;
      RED1[5] = 0;
      RED1[6] = 0;
      RED1[7] = 0;
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
         SIMD_LOAD_V8HI(v8hi_vec1, &a[LU_IND0]);
         SIMD_LOAD_V8HI(v8hi_vec0, &RED1[0]);
         SIMD_ADDW(v8hi_vec0, v8hi_vec0, v8hi_vec1);
         SIMD_SAVE_V8HI(v8hi_vec0, &RED1[0]);
      }
      seed = RED1[7]+RED1[6]+RED1[5]+RED1[4]+RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
      i = MAX0(LU_NUB0, 0);
      return seed;
   }
}
short accumulate(size_t n, short a[n], short seed)
{
   //PIPS:SAC generated short vector(s)
   short v8hi_vec0[7+1], v8hi_vec1[7+1], v8hi_vec2[7+1], v8hi_vec3[7+1];
   {
      size_t i;
      //PIPS generated variable
      size_t LU_NUB0, LU_IB0, LU_IND0;
      //PIPS generated variable
      short RED0[0+1], RED1[7+1], seed0;
      LU_NUB0 = n;
      LU_IB0 = MOD(LU_NUB0, 8);
      RED0[0] = 0;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
         RED0[0] = RED0[0]+a[LU_IND0];
      seed0 = RED0[0]+seed0;
      RED1[0] = 0;
      RED1[1] = 0;
      RED1[2] = 0;
      RED1[3] = 0;
      RED1[4] = 0;
      RED1[5] = 0;
      RED1[6] = 0;
      RED1[7] = 0;
      SIMD_LOAD_V8HI(v8hi_vec0, &RED1[0]);
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
         SIMD_LOAD_V8HI(v8hi_vec1, &a[LU_IND0]);
         SIMD_ADDW(v8hi_vec0, v8hi_vec0, v8hi_vec1);
      }
      SIMD_SAVE_V8HI(v8hi_vec0, &RED1[0]);
      seed = RED1[7]+RED1[6]+RED1[5]+RED1[4]+RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
      i = MAX0(LU_NUB0, 0);
      return seed;
   }
}
short accumulate(size_t n, short a[n], short seed)
{
   //PIPS:SAC generated short vector(s)
   short v8hi_vec0[7+1], v8hi_vec1[7+1];
   {
      size_t i;
      //PIPS generated variable
      size_t LU_NUB0, LU_IB0, LU_IND0;
      //PIPS generated variable
      short RED0[0+1], RED1[7+1], seed0;
      LU_NUB0 = n;
      LU_IB0 = MOD(LU_NUB0, 8);
      RED0[0] = 0;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
         RED0[0] = RED0[0]+a[LU_IND0];
      seed0 = RED0[0]+seed0;
      RED1[0] = 0;
      RED1[1] = 0;
      RED1[2] = 0;
      RED1[3] = 0;
      RED1[4] = 0;
      RED1[5] = 0;
      RED1[6] = 0;
      RED1[7] = 0;
      SIMD_LOAD_V8HI(v8hi_vec0, &RED1[0]);
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
         SIMD_LOAD_V8HI(v8hi_vec1, &a[LU_IND0]);
         SIMD_ADDW(v8hi_vec0, v8hi_vec0, v8hi_vec1);
      }
      SIMD_SAVE_V8HI(v8hi_vec0, &RED1[0]);
      seed = RED1[7]+RED1[6]+RED1[5]+RED1[4]+RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
      i = MAX0(LU_NUB0, 0);
      return seed;
   }
}

simdized code

short accumulate(size_t n, short a[n], short seed)
{
   //PIPS:SAC generated short vector(s)
   short v8hi_vec0[7+1], v8hi_vec1[7+1];
   {
      size_t i;
      //PIPS generated variable
      size_t LU_NUB0, LU_IB0, LU_IND0;
      //PIPS generated variable
      short RED0[0+1], RED1[7+1], seed0;
      LU_NUB0 = n;
      LU_IB0 = MOD(LU_NUB0, 8);
      RED0[0] = 0;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
         RED0[0] = RED0[0]+a[LU_IND0];
      seed0 = RED0[0]+seed0;
      RED1[0] = 0;
      RED1[1] = 0;
      RED1[2] = 0;
      RED1[3] = 0;
      RED1[4] = 0;
      RED1[5] = 0;
      RED1[6] = 0;
      RED1[7] = 0;
      SIMD_LOAD_V8HI(v8hi_vec0, &RED1[0]);
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
         SIMD_LOAD_V8HI(v8hi_vec1, &a[LU_IND0]);
         SIMD_ADDW(v8hi_vec0, v8hi_vec0, v8hi_vec1);
      }
      SIMD_SAVE_V8HI(v8hi_vec0, &RED1[0]);
      seed = RED1[7]+RED1[6]+RED1[5]+RED1[4]+RED1[3]+RED1[2]+RED1[1]+RED1[0]+seed0;
      i = MAX0(LU_NUB0, 0);
      return seed;
   }
}
