
Initial code

short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
      seed = seed+a[LU_IND0];
      seed = seed+a[LU_IND0+1];
      seed = seed+a[LU_IND0+2];
      seed = seed+a[LU_IND0+3];
      seed = seed+a[LU_IND0+4];
      seed = seed+a[LU_IND0+5];
      seed = seed+a[LU_IND0+6];
      seed = seed+a[LU_IND0+7];
   }
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   short RED0[8];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 8) {
      RED0[0] = RED0[0]+a[LU_IND0];
      RED0[1] = RED0[1]+a[LU_IND0+1];
      RED0[2] = RED0[2]+a[LU_IND0+2];
      RED0[3] = RED0[3]+a[LU_IND0+3];
      RED0[4] = RED0[4]+a[LU_IND0+4];
      RED0[5] = RED0[5]+a[LU_IND0+5];
      RED0[6] = RED0[6]+a[LU_IND0+6];
      RED0[7] = RED0[7]+a[LU_IND0+7];
   }
   seed = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+RED0[0]+seed;
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 8) {
      RED0[0] = RED0[0]+a[LU_IND0];
      RED0[1] = RED0[1]+a[LU_IND0+1];
      RED0[2] = RED0[2]+a[LU_IND0+2];
      RED0[3] = RED0[3]+a[LU_IND0+3];
      RED0[4] = RED0[4]+a[LU_IND0+4];
      RED0[5] = RED0[5]+a[LU_IND0+5];
      RED0[6] = RED0[6]+a[LU_IND0+6];
      RED0[7] = RED0[7]+a[LU_IND0+7];
   }
   seed = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+RED0[0]+seed;
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 8) {
      //PIPS:SAC generated v8hi vector(s)
      v8hi vec00, vec10;
      SIMD_LOAD_V8HI(vec10, &a[LU_IND0]);
      SIMD_LOAD_V8HI(vec00, &RED0[0]);
      SIMD_ADDW(vec00, vec00, vec10);
      SIMD_STORE_V8HI(vec00, &RED0[0]);
   }
   seed = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+seed+RED0[0];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   {
      //PIPS:SAC generated v8hi vector(s)
      v8hi vec00;
      SIMD_LOAD_V8HI(vec00, &RED0[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         v8hi vec10;
         SIMD_LOAD_V8HI(vec10, &a[LU_IND0]);
         SIMD_ADDW(vec00, vec00, vec10);
      }
      SIMD_STORE_V8HI(vec00, &RED0[0]);
   }
   seed = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+seed+RED0[0];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   {
      //PIPS:SAC generated v8hi vector(s)
      v8hi vec00;
      SIMD_LOAD_V8HI(vec00, &RED0[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         v8hi vec10;
         SIMD_LOAD_V8HI(vec10, &a[LU_IND0]);
         SIMD_ADDW(vec00, vec00, vec10);
      }
      SIMD_STORE_V8HI(vec00, &RED0[0]);
   }
   seed = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+seed+RED0[0];
   return seed;
}

simdized code

short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 8);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1)
      seed = seed+a[LU_IND0];
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   {
      //PIPS:SAC generated v8hi vector(s)
      v8hi vec00;
      SIMD_LOAD_V8HI(vec00, &RED0[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         v8hi vec10;
         SIMD_LOAD_V8HI(vec10, &a[LU_IND0]);
         SIMD_ADDW(vec00, vec00, vec10);
      }
      SIMD_STORE_V8HI(vec00, &RED0[0]);
   }
   seed = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+seed+RED0[0];
   return seed;
}
ok

