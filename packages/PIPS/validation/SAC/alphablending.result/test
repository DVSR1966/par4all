      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 RESULT(1:SIZE), SRC(1:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, SIZE                                                 0015
         RESULT(I) = ALPHA*SRC(I)+(1-ALPHA)*DEST(I)                     0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER I
      REAL*4 F_3, F_2, F_1, F_0, RESULT(1:SIZE), SRC(1:SIZE), DEST(1:
     &SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      DO 10 I = 1, 50000                                                0015
         F_0 = ALPHA*SRC(I)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(I)
         RESULT(I) = F_0+F_3                                            0016
10       CONTINUE                                                       0017

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER LU_IND0, LU_IB0, LU_NUB0, I
      REAL*4 F_3, F_2, F_1, F_0, RESULT(1:SIZE), SRC(1:SIZE), DEST(1:
     &SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      LU_NUB0 = 50000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      DO 99998 LU_IND0 = 0, 49999, 4
         F_0 = ALPHA*SRC(LU_IND0+1)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+1)
         RESULT(LU_IND0+1) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+2)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+2)
         RESULT(LU_IND0+2) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+3)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+3)
         RESULT(LU_IND0+3) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+4)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+4)
         RESULT(LU_IND0+4) = F_0+F_3
99998    CONTINUE
      I = 50001

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER LU_IND0, LU_IB0, LU_NUB0, I
      REAL*4 F_3, F_2, F_1, F_0, RESULT(1:SIZE), SRC(1:SIZE), DEST(1:
     &SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

      LU_NUB0 = 50000
      LU_IB0 = 0
      LU_IND0 = 0
99999 CONTINUE
      DO 99998 LU_IND0 = 0, 49999, 4
         F_0 = ALPHA*SRC(LU_IND0+1)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+1)
         RESULT(LU_IND0+1) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+2)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+2)
         RESULT(LU_IND0+2) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+3)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+3)
         RESULT(LU_IND0+3) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+4)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+4)
         RESULT(LU_IND0+4) = F_0+F_3
99998    CONTINUE
      I = 50001

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER LU_IND0, LU_IB0, LU_NUB0, I
      REAL*4 F_3, F_2, F_1, F_0, RESULT(1:SIZE), SRC(1:SIZE), DEST(1:
     &SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

99999 CONTINUE
      DO 99998 LU_IND0 = 0, 49999, 4
         F_0 = ALPHA*SRC(LU_IND0+1)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+1)
         RESULT(LU_IND0+1) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+2)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+2)
         RESULT(LU_IND0+2) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+3)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+3)
         RESULT(LU_IND0+3) = F_0+F_3
         F_0 = ALPHA*SRC(LU_IND0+4)
         F_1 = -ALPHA
         F_2 = F_1+1
         F_3 = F_2*DEST(LU_IND0+4)
         RESULT(LU_IND0+4) = F_0+F_3
99998    CONTINUE

      END
      SUBROUTINE ALPHABLENDING(RESULT, SRC, DEST, ALPHA)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 50000)
      INTEGER LU_IND00
      REAL*4 F_03, F_02, F_01, F_00, F_13, F_12, F_11, F_10, F_23, 
     &F_22, F_21, F_20, F_33, F_32, F_31, F_30, RESULT(1:SIZE), SRC(1
     &:SIZE), DEST(1:SIZE), ALPHA

c      INCLUDE 'ALPHABLENDING_INC2.f'

99999 CONTINUE
      DO 99998 LU_IND00 = 0, 49999, 4
         F_00 = ALPHA*SRC(LU_IND00+1)
         F_10 = -ALPHA
         F_20 = F_10+1
         F_30 = F_20*DEST(LU_IND00+1)
         RESULT(LU_IND00+1) = F_00+F_30
         F_01 = ALPHA*SRC(LU_IND00+2)
         F_11 = -ALPHA
         F_21 = F_11+1
         F_31 = F_21*DEST(LU_IND00+2)
         RESULT(LU_IND00+2) = F_01+F_31
         F_02 = ALPHA*SRC(LU_IND00+3)
         F_12 = -ALPHA
         F_22 = F_12+1
         F_32 = F_22*DEST(LU_IND00+3)
         RESULT(LU_IND00+3) = F_02+F_32
         F_03 = ALPHA*SRC(LU_IND00+4)
         F_13 = -ALPHA
         F_23 = F_13+1
         F_33 = F_23*DEST(LU_IND00+4)
         RESULT(LU_IND00+4) = F_03+F_33
99998    CONTINUE

      END
/* C pretty print for module ALPHABLENDING. */
void
alphablending (float result[50000], float src[50000], float dest[50000],
	       float *alpha_p4a_copy)
{
  static const int size = 50000;
  v4sf vec110;
  v4sf vec100;
  v4sf vec80;
  a4si pdata3;
  v4sf vec70;
  v4sf vec50;
  v4sf vec30;
  a4sf pdata0;
  v4sf vec20;
  v4sf vec10;
  v4sf vec00;
  int lu_ind00;
  float alpha = *alpha_p4a_copy;

  pdata3[3] = 1;
  pdata3[2] = 1;
  pdata3[1] = 1;
  pdata3[0] = 1;
  simd_load_v4si_to_v4sf (vec70, pdata3[0]);
  pdata0[3] = alpha;
  pdata0[2] = alpha;
  pdata0[1] = alpha;
  pdata0[0] = alpha;
  simd_load_v4sf (vec10, pdata0[0]);
  ;
  for (lu_ind00 = 0; lu_ind00 <= 49999; lu_ind00 += 4)
    {
      simd_load_v4sf (vec100, dest[(1 + lu_ind00) - 1]);
      simd_load_v4sf (vec20, src[(1 + lu_ind00) - 1]);
      simd_mulps (vec00, vec10, vec20);
      simd_uminps (vec30, vec10);
      simd_addps (vec50, vec30, vec70);
      simd_mulps (vec80, vec50, vec100);
      simd_addps (vec110, vec00, vec80);
      continue;
      simd_store_v4sf (vec110, result[(1 + lu_ind00) - 1]);
    }
  return;
}

