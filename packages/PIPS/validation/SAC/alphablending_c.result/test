
Initial code

void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i <= n-1; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   for(i = 0; i <= n-1; i += 1) {
      F_0 = alpha*src1[i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i];
      result[i] = F_0+F_3;
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //PIPS generated variable
   unsigned int LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
      F_0 = alpha*src1[LU_IND0];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[LU_IND0];
      result[LU_IND0] = F_0+F_3;
   }
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0];
      //c SIMD_COMMENT_4
      result[LU_IND0] = F_0+F_3;
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0+1];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0+1];
      //c SIMD_COMMENT_4
      result[LU_IND0+1] = F_0+F_3;
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0+2];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0+2];
      //c SIMD_COMMENT_4
      result[LU_IND0+2] = F_0+F_3;
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0+3];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0+3];
      //c SIMD_COMMENT_4
      result[LU_IND0+3] = F_0+F_3;
   }
   ;
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //PIPS generated variable
   unsigned int LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
      F_0 = alpha*src1[LU_IND0];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[LU_IND0];
      result[LU_IND0] = F_0+F_3;
   }
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0];
      //c SIMD_COMMENT_4
      result[LU_IND0] = F_0+F_3;
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0+1];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0+1];
      //c SIMD_COMMENT_4
      result[LU_IND0+1] = F_0+F_3;
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0+2];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0+2];
      //c SIMD_COMMENT_4
      result[LU_IND0+2] = F_0+F_3;
      //c SIMD_COMMENT_0
      F_0 = alpha*src1[LU_IND0+3];
      //c SIMD_COMMENT_1
      F_1 = -alpha;
      //c SIMD_COMMENT_2
      F_2 = F_1+1;
      //c SIMD_COMMENT_3
      F_3 = F_2*src2[LU_IND0+3];
      //c SIMD_COMMENT_4
      result[LU_IND0+3] = F_0+F_3;
   }
   ;
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //PIPS generated variable
   unsigned int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float F_30, F_20, F_10, F_00, F_31, F_21, F_11, F_01, F_32, F_22, F_12, F_02, F_33, F_23, F_13, F_03, F_34, F_24, F_14, F_04;
   //PIPS generated variable
   unsigned int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      F_04 = alpha*src1[LU_IND0];
      F_14 = -alpha;
      F_24 = F_14+1;
      F_34 = F_24*src2[LU_IND0];
      result[LU_IND0] = F_04+F_34;
   }
   for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
      //c SIMD_COMMENT_0
      F_03 = alpha*src1[LU_IND0];
      //c SIMD_COMMENT_1
      F_13 = -alpha;
      //c SIMD_COMMENT_2
      F_23 = F_13+1;
      //c SIMD_COMMENT_3
      F_33 = F_23*src2[LU_IND0];
      //c SIMD_COMMENT_4
      result[LU_IND0] = F_03+F_33;
      //c SIMD_COMMENT_0
      F_02 = alpha*src1[LU_IND0+1];
      //c SIMD_COMMENT_1
      F_12 = -alpha;
      //c SIMD_COMMENT_2
      F_22 = F_12+1;
      //c SIMD_COMMENT_3
      F_32 = F_22*src2[LU_IND0+1];
      //c SIMD_COMMENT_4
      result[LU_IND0+1] = F_02+F_32;
      //c SIMD_COMMENT_0
      F_01 = alpha*src1[LU_IND0+2];
      //c SIMD_COMMENT_1
      F_11 = -alpha;
      //c SIMD_COMMENT_2
      F_21 = F_11+1;
      //c SIMD_COMMENT_3
      F_31 = F_21*src2[LU_IND0+2];
      //c SIMD_COMMENT_4
      result[LU_IND0+2] = F_01+F_31;
      //c SIMD_COMMENT_0
      F_00 = alpha*src1[LU_IND0+3];
      //c SIMD_COMMENT_1
      F_10 = -alpha;
      //c SIMD_COMMENT_2
      F_20 = F_10+1;
      //c SIMD_COMMENT_3
      F_30 = F_20*src2[LU_IND0+3];
      //c SIMD_COMMENT_4
      result[LU_IND0+3] = F_00+F_30;
   }
   ;
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //PIPS generated variable
   unsigned int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float F_30, F_20, F_10, F_00, F_31, F_21, F_11, F_01, F_32, F_22, F_12, F_02, F_33, F_23, F_13, F_03, F_34, F_24, F_14, F_04;
   //PIPS generated variable
   unsigned int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      F_04 = alpha*src1[LU_IND0];
      F_14 = -alpha;
      F_24 = F_14+1;
      F_34 = F_24*src2[LU_IND0];
      result[LU_IND0] = F_04+F_34;
   }
   for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec1[4], v4sf_vec2[4];
      //SAC generated temporary array
      float aligned[4] = {alpha, alpha, alpha, alpha}, aligned0[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec3[4], v4sf_vec4[4];
      //SAC generated temporary array
      float aligned1[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec5[4], v4sf_vec6[4], v4sf_vec7[4];
      //SAC generated temporary array
      int aligned2[4] = {1, 1, 1, 1};
      //SAC generated temporary array
      float aligned3[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec8[4], v4sf_vec9[4], v4sf_vec10[4];
      //SAC generated temporary array
      float aligned4[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec11[4], v4sf_vec12[4], v4sf_vec13[4];
      SIMD_LOAD_V4SF(v4sf_vec2, &src1[LU_IND0]);
      SIMD_LOAD_V4SF(v4sf_vec1, &aligned[0]);
      SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
      SIMD_SAVE_V4SF(v4sf_vec0, &aligned0[0]);
      SIMD_UMINPS(v4sf_vec3, v4sf_vec1);
      SIMD_SAVE_V4SF(v4sf_vec3, &aligned1[0]);
      SIMD_LOAD_V4SI_TO_V4SF(v4sf_vec7, &aligned2[0]);
      SIMD_ADDPS(v4sf_vec5, v4sf_vec3, v4sf_vec7);
      SIMD_SAVE_V4SF(v4sf_vec5, &aligned3[0]);
      SIMD_LOAD_V4SF(v4sf_vec10, &src2[LU_IND0]);
      SIMD_MULPS(v4sf_vec8, v4sf_vec5, v4sf_vec10);
      SIMD_SAVE_V4SF(v4sf_vec8, &aligned4[0]);
      SIMD_ADDPS(v4sf_vec11, v4sf_vec0, v4sf_vec8);
      SIMD_SAVE_V4SF(v4sf_vec11, &result[LU_IND0]);
   }
   ;
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //PIPS generated variable
   unsigned int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float F_30, F_20, F_10, F_00, F_31, F_21, F_11, F_01, F_32, F_22, F_12, F_02, F_33, F_23, F_13, F_03, F_34, F_24, F_14, F_04;
   //PIPS generated variable
   unsigned int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      F_04 = alpha*src1[LU_IND0];
      F_14 = -alpha;
      F_24 = F_14+1;
      F_34 = F_24*src2[LU_IND0];
      result[LU_IND0] = F_04+F_34;
   }
   {
      //SAC generated temporary array
      float aligned4[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec8[4];
      //SAC generated temporary array
      float aligned3[4] = {0, 0, 0, 0};
      //SAC generated temporary array
      int aligned2[4] = {1, 1, 1, 1};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec5[4], v4sf_vec7[4];
      //SAC generated temporary array
      float aligned1[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec3[4];
      //SAC generated temporary array
      float aligned[4] = {alpha, alpha, alpha, alpha}, aligned0[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec1[4];
      SIMD_LOAD_V4SF(v4sf_vec1, &aligned[0]);
      SIMD_LOAD_V4SI_TO_V4SF(v4sf_vec7, &aligned2[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated float vector(s)
         float v4sf_vec2[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec4[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec6[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec9[4], v4sf_vec10[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec11[4], v4sf_vec12[4], v4sf_vec13[4];
         SIMD_LOAD_V4SF(v4sf_vec2, &src1[LU_IND0]);
         SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_UMINPS(v4sf_vec3, v4sf_vec1);
         SIMD_ADDPS(v4sf_vec5, v4sf_vec3, v4sf_vec7);
         SIMD_LOAD_V4SF(v4sf_vec10, &src2[LU_IND0]);
         SIMD_MULPS(v4sf_vec8, v4sf_vec5, v4sf_vec10);
         SIMD_ADDPS(v4sf_vec11, v4sf_vec0, v4sf_vec8);
         SIMD_SAVE_V4SF(v4sf_vec11, &result[LU_IND0]);
      }
      SIMD_SAVE_V4SF(v4sf_vec0, &aligned0[0]);
      SIMD_SAVE_V4SF(v4sf_vec3, &aligned1[0]);
      SIMD_SAVE_V4SF(v4sf_vec5, &aligned3[0]);
      SIMD_SAVE_V4SF(v4sf_vec8, &aligned4[0]);
   }
   ;
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   unsigned int LU_IND0;
   //PIPS generated variable
   float F_34, F_24, F_14, F_04;
   //PIPS generated variable
   unsigned int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      F_04 = alpha*src1[LU_IND0];
      F_14 = -alpha;
      F_24 = F_14+1;
      F_34 = F_24*src2[LU_IND0];
      result[LU_IND0] = F_04+F_34;
   }
   {
      //SAC generated temporary array
      float aligned4[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec8[4];
      //SAC generated temporary array
      float aligned3[4] = {0, 0, 0, 0};
      //SAC generated temporary array
      int aligned2[4] = {1, 1, 1, 1};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec5[4], v4sf_vec7[4];
      //SAC generated temporary array
      float aligned1[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec3[4];
      //SAC generated temporary array
      float aligned[4] = {alpha, alpha, alpha, alpha}, aligned0[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec1[4];
      SIMD_LOAD_V4SF(v4sf_vec1, &aligned[0]);
      SIMD_LOAD_V4SI_TO_V4SF(v4sf_vec7, &aligned2[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated float vector(s)
         float v4sf_vec2[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec4[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec6[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec9[4], v4sf_vec10[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec11[4], v4sf_vec12[4], v4sf_vec13[4];
         SIMD_LOAD_V4SF(v4sf_vec2, &src1[LU_IND0]);
         SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_UMINPS(v4sf_vec3, v4sf_vec1);
         SIMD_ADDPS(v4sf_vec5, v4sf_vec3, v4sf_vec7);
         SIMD_LOAD_V4SF(v4sf_vec10, &src2[LU_IND0]);
         SIMD_MULPS(v4sf_vec8, v4sf_vec5, v4sf_vec10);
         SIMD_ADDPS(v4sf_vec11, v4sf_vec0, v4sf_vec8);
         SIMD_SAVE_V4SF(v4sf_vec11, &result[LU_IND0]);
      }
      SIMD_SAVE_V4SF(v4sf_vec0, &aligned0[0]);
      SIMD_SAVE_V4SF(v4sf_vec3, &aligned1[0]);
      SIMD_SAVE_V4SF(v4sf_vec5, &aligned3[0]);
      SIMD_SAVE_V4SF(v4sf_vec8, &aligned4[0]);
   }
   ;
}

simdized code

void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   unsigned int LU_IND0;
   //PIPS generated variable
   float F_34, F_24, F_14, F_04;
   //PIPS generated variable
   unsigned int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      F_04 = alpha*src1[LU_IND0];
      F_14 = -alpha;
      F_24 = F_14+1;
      F_34 = F_24*src2[LU_IND0];
      result[LU_IND0] = F_04+F_34;
   }
   {
      //SAC generated temporary array
      float aligned4[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec8[4];
      //SAC generated temporary array
      float aligned3[4] = {0, 0, 0, 0};
      //SAC generated temporary array
      int aligned2[4] = {1, 1, 1, 1};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec5[4], v4sf_vec7[4];
      //SAC generated temporary array
      float aligned1[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec3[4];
      //SAC generated temporary array
      float aligned[4] = {alpha, alpha, alpha, alpha}, aligned0[4] = {0, 0, 0, 0};
      //PIPS:SAC generated float vector(s)
      float v4sf_vec0[4], v4sf_vec1[4];
      SIMD_LOAD_V4SF(v4sf_vec1, &aligned[0]);
      SIMD_LOAD_V4SI_TO_V4SF(v4sf_vec7, &aligned2[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated float vector(s)
         float v4sf_vec2[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec4[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec6[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec9[4], v4sf_vec10[4];
         //PIPS:SAC generated float vector(s)
         float v4sf_vec11[4], v4sf_vec12[4], v4sf_vec13[4];
         SIMD_LOAD_V4SF(v4sf_vec2, &src1[LU_IND0]);
         SIMD_MULPS(v4sf_vec0, v4sf_vec1, v4sf_vec2);
         SIMD_UMINPS(v4sf_vec3, v4sf_vec1);
         SIMD_ADDPS(v4sf_vec5, v4sf_vec3, v4sf_vec7);
         SIMD_LOAD_V4SF(v4sf_vec10, &src2[LU_IND0]);
         SIMD_MULPS(v4sf_vec8, v4sf_vec5, v4sf_vec10);
         SIMD_ADDPS(v4sf_vec11, v4sf_vec0, v4sf_vec8);
         SIMD_SAVE_V4SF(v4sf_vec11, &result[LU_IND0]);
      }
      SIMD_SAVE_V4SF(v4sf_vec0, &aligned0[0]);
      SIMD_SAVE_V4SF(v4sf_vec3, &aligned1[0]);
      SIMD_SAVE_V4SF(v4sf_vec5, &aligned3[0]);
      SIMD_SAVE_V4SF(v4sf_vec8, &aligned4[0]);
   }
   ;
}
