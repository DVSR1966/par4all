
Initial code

void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1)
loop1:
      for(j = 0; j <= 2; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 2; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1)
loop1:
      for(j = 0; j <= 2; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 2; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1)
loop1:
      for(j = 0; j <= 2; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 2; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      k = 3;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      k = 3;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      k = 3;
      j = 3;
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      k = 3;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      k = 3;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      k = 3;
      j = 3;
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      F_0 = a[i][0]*b[0][0];
      c[i][0] = c[i][0]+F_0;
      F_1 = a[i][1]*b[1][0];
      c[i][0] = c[i][0]+F_1;
      F_2 = a[i][2]*b[2][0];
      c[i][0] = c[i][0]+F_2;
      k = 3;
      c[i][1] = 0;
      F_3 = a[i][0]*b[0][1];
      c[i][1] = c[i][1]+F_3;
      F_4 = a[i][1]*b[1][1];
      c[i][1] = c[i][1]+F_4;
      F_5 = a[i][2]*b[2][1];
      c[i][1] = c[i][1]+F_5;
      k = 3;
      c[i][2] = 0;
      F_6 = a[i][0]*b[0][2];
      c[i][2] = c[i][2]+F_6;
      F_7 = a[i][1]*b[1][2];
      c[i][2] = c[i][2]+F_7;
      F_8 = a[i][2]*b[2][2];
      c[i][2] = c[i][2]+F_8;
      k = 3;
      j = 3;
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
   //PIPS generated variable
   int i0, k0, k1, k2;
loop0:
   for(i0 = 0; i0 <= 2; i0 += 1) {
loop1:      ;
      c[i0][0] = 0;
      F_0 = a[i0][0]*b[0][0];
      c[i0][0] = c[i0][0]+F_0;
      F_1 = a[i0][1]*b[1][0];
      c[i0][0] = c[i0][0]+F_1;
      F_2 = a[i0][2]*b[2][0];
      c[i0][0] = c[i0][0]+F_2;
      k0 = 3;
      c[i0][1] = 0;
      F_3 = a[i0][0]*b[0][1];
      c[i0][1] = c[i0][1]+F_3;
      F_4 = a[i0][1]*b[1][1];
      c[i0][1] = c[i0][1]+F_4;
      F_5 = a[i0][2]*b[2][1];
      c[i0][1] = c[i0][1]+F_5;
      k1 = 3;
      c[i0][2] = 0;
      F_6 = a[i0][0]*b[0][2];
      c[i0][2] = c[i0][2]+F_6;
      F_7 = a[i0][1]*b[1][2];
      c[i0][2] = c[i0][2]+F_7;
      F_8 = a[i0][2]*b[2][2];
      c[i0][2] = c[i0][2]+F_8;
      k2 = 3;
      j = 3;
   }
}

simdized code

void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0, k0, k1, k2;
loop0:
   for(i0 = 0; i0 <= 2; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40, vec50;
loop1:      ;
      c[i0][0] = 0;
      SIMD_LOAD_V4SF(vec20, &b[0][0]);
      SIMD_LOAD_GENERIC_V4SF(vec10, a[i0][0], a[i0][0], a[i0][0], a[i0][1]);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_GENERIC_V4SF(vec50, b[2][0], b[2][1], b[1][2], b[2][2]);
      SIMD_LOAD_GENERIC_V4SF(vec40, a[i0][2], a[i0][2], a[i0][1], a[i0][2]);
      SIMD_MULPS(vec30, vec40, vec50);
      SIMD_STORE_V4SF(vec30, &pdata1[0]);
      pdata0[0] = a[i0][0]*b[0][0];
      k0 = 3;
      c[i0][1] = 0;
      F_4 = a[i0][1]*b[1][1];
      k1 = 3;
      c[i0][2] = 0;
      k2 = 3;
      j = 3;
      c[i0][0] = c[i0][0]+pdata0[0];
      c[i0][1] = c[i0][1]+pdata0[1];
      c[i0][2] = c[i0][2]+pdata0[2];
      c[i0][0] = c[i0][0]+pdata0[3];
      c[i0][1] = c[i0][1]+F_4;
      c[i0][2] = c[i0][2]+pdata1[2];
      c[i0][0] = c[i0][0]+pdata1[0];
      c[i0][1] = c[i0][1]+pdata1[1];
      c[i0][2] = c[i0][2]+pdata1[3];
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0, k0, k1, k2;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0, vec50_0;
   SIMD_LOAD_GENERIC_V4SF(vec50_0, b[2][0], b[2][1], b[1][2], b[2][2]);
   SIMD_LOAD_V4SF(vec20_0, &b[0][0]);
loop0:
   for(i0 = 0; i0 <= 2; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_GENERIC_V4SF(vec40_0, a[i0][2], a[i0][2], a[i0][1], a[i0][2]);
      SIMD_LOAD_GENERIC_V4SF(vec10_0, a[i0][0], a[i0][0], a[i0][0], a[i0][1]);
loop1:      ;
      c[i0][0] = 0;
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);
      SIMD_STORE_V4SF(vec00_0, &pdata0[0]);
      SIMD_MULPS(vec30_0, vec40_0, vec50_0);
      pdata0[0] = a[i0][0]*b[0][0];

      c[i0][1] = 0;
      F_4 = a[i0][1]*b[1][1];

      c[i0][2] = 0;


      c[i0][0] = c[i0][0]+pdata0[0];
      c[i0][1] = c[i0][1]+pdata0[1];
      c[i0][2] = c[i0][2]+pdata0[2];
      c[i0][0] = c[i0][0]+pdata0[3];
      c[i0][1] = c[i0][1]+F_4;
      SIMD_STORE_V4SF(vec30_0, &pdata1[0]);
      c[i0][2] = c[i0][2]+pdata1[2];
      c[i0][0] = c[i0][0]+pdata1[0];
      c[i0][1] = c[i0][1]+pdata1[1];
      c[i0][2] = c[i0][2]+pdata1[3];
   }
}
seq-ok
sse-ok
