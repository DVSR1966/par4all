
Initial code

void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1)
loop1:
      for(j = 0; j <= 2; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 2; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1)
loop1:
      for(j = 0; j <= 2; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 2; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1)
loop1:
      for(j = 0; j <= 2; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 2; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      k = 3;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      k = 3;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      k = 3;
      j = 3;
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      k = 3;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      k = 3;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      k = 3;
      j = 3;
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      F_0 = a[i][0]*b[0][0];
      c[i][0] = c[i][0]+F_0;
      F_1 = a[i][1]*b[1][0];
      c[i][0] = c[i][0]+F_1;
      F_2 = a[i][2]*b[2][0];
      c[i][0] = c[i][0]+F_2;
      k = 3;
      c[i][1] = 0;
      F_3 = a[i][0]*b[0][1];
      c[i][1] = c[i][1]+F_3;
      F_4 = a[i][1]*b[1][1];
      c[i][1] = c[i][1]+F_4;
      F_5 = a[i][2]*b[2][1];
      c[i][1] = c[i][1]+F_5;
      k = 3;
      c[i][2] = 0;
      F_6 = a[i][0]*b[0][2];
      c[i][2] = c[i][2]+F_6;
      F_7 = a[i][1]*b[1][2];
      c[i][2] = c[i][2]+F_7;
      F_8 = a[i][2]*b[2][2];
      c[i][2] = c[i][2]+F_8;
      k = 3;
      j = 3;
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_80, F_70, F_60, F_50, F_40, F_30, F_20, F_10, F_00;
loop0:
   for(i = 0; i <= 2; i += 1) {
loop1:      ;
      c[i][0] = 0;
      F_00 = a[i][0]*b[0][0];
      c[i][0] = c[i][0]+F_00;
      F_10 = a[i][1]*b[1][0];
      c[i][0] = c[i][0]+F_10;
      F_20 = a[i][2]*b[2][0];
      c[i][0] = c[i][0]+F_20;
      k = 3;
      c[i][1] = 0;
      F_30 = a[i][0]*b[0][1];
      c[i][1] = c[i][1]+F_30;
      F_40 = a[i][1]*b[1][1];
      c[i][1] = c[i][1]+F_40;
      F_50 = a[i][2]*b[2][1];
      c[i][1] = c[i][1]+F_50;
      k = 3;
      c[i][2] = 0;
      F_60 = a[i][0]*b[0][2];
      c[i][2] = c[i][2]+F_60;
      F_70 = a[i][1]*b[1][2];
      c[i][2] = c[i][2]+F_70;
      F_80 = a[i][2]*b[2][2];
      c[i][2] = c[i][2]+F_80;
      k = 3;
      j = 3;
   }
}

simdized code

void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_80, F_70, F_60, F_50, F_40, F_30, F_20, F_10, F_00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //PIPS:SAC generated variable
   overloaded PADDING_VALUE;
loop0:
   for(i = 0; i <= 2; i += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70, vec80, vec90, vec100, vec110;
loop1:      ;
      c[i][0] = 0;
      SIMD_LOAD_V4SF(vec20, &b[0][0]);
      SIMD_LOAD_GENERIC_V4SF(vec10, a[i][0], a[i][0], a[i][0], a[i][1]);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec50, &b[1][1]);
      SIMD_LOAD_GENERIC_V4SF(vec40, a[i][1], a[i][1], a[i][2], a[i][2]);
      SIMD_MULPS(vec30, vec40, vec50);
      SIMD_STORE_V4SF(vec30, &pdata1[0]);
      pdata0[0] = a[i][0]*b[0][0];
      k = 3;
      c[i][1] = 0;
      c[i][2] = 0;
      F_80 = a[i][2]*b[2][2];
      j = 3;
      SIMD_LOAD_V4SF(vec70, &pdata0[0]);
      SIMD_LOAD_V4SF(vec60, &c[i][0]);
      SIMD_ADDPS(vec60, vec60, vec70);
      SIMD_STORE_MASKED_V4SF(vec60, &c[i][0]);
      k = 3;
      SIMD_LOAD_GENERIC_V4SF(vec90, pdata0[3], pdata1[0], pdata1[1], PADDING_VALUE);
      SIMD_LOAD_V4SF(vec80, &c[i][0]);
      SIMD_ADDPS(vec80, vec80, vec90);
      SIMD_STORE_MASKED_V4SF(vec80, &c[i][0]);
      k = 3;
      SIMD_LOAD_GENERIC_V4SF(vec110, pdata1[2], pdata1[3], F_80, PADDING_VALUE);
      SIMD_LOAD_V4SF(vec100, &c[i][0]);
      SIMD_ADDPS(vec100, vec100, vec110);
      SIMD_STORE_MASKED_V4SF(vec100, &c[i][0]);
   }
}
void Matrix_Mult(float a[3][3], float b[3][3], float c[3][3])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_80, F_70, F_60, F_50, F_40, F_30, F_20, F_10, F_00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //PIPS:SAC generated variable
   overloaded PADDING_VALUE;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec20, vec30, vec50, vec90;
loop0:      ;
      SIMD_LOAD_V4SF(vec20, &b[0][0]);

      SIMD_LOAD_GENERIC_V4SF(vec90, pdata0[3], pdata1[0], pdata1[1], PADDING_VALUE);
      for(i = 0; i <= 2; i += 1) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec10, vec40, vec60, vec70, vec80, vec100, vec110;
loop1:         ;
         c[i][0] = 0;
         SIMD_LOAD_GENERIC_V4SF(vec10, a[i][0], a[i][0], a[i][0], a[i][1]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_STORE_V4SF(vec00, &pdata0[0]);


         pdata0[0] = a[i][0]*b[0][0];

         c[i][1] = 0;
         c[i][2] = 0;
         F_80 = a[i][2]*b[2][2];

         SIMD_LOAD_V4SF(vec70, &pdata0[0]);
         SIMD_LOAD_V4SF(vec60, &c[i][0]);
         SIMD_ADDPS(vec60, vec60, vec70);
         SIMD_STORE_MASKED_V4SF(vec60, &c[i][0]);

         SIMD_LOAD_V4SF(vec80, &c[i][0]);
         SIMD_ADDPS(vec80, vec80, vec90);
         SIMD_STORE_MASKED_V4SF(vec80, &c[i][0]);

         SIMD_LOAD_GENERIC_V4SF(vec110, pdata1[2], pdata1[3], F_80, PADDING_VALUE);
         SIMD_LOAD_V4SF(vec100, &c[i][0]);
         SIMD_ADDPS(vec100, vec100, vec110);
         SIMD_STORE_MASKED_V4SF(vec100, &c[i][0]);
      }

   }
}
seq-ko
sse-ko
