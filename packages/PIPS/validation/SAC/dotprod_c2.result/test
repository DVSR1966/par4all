
Initial code

float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   for(i = 0; i <= n-1; i += 1)
      a += inner_loop(i, b, c);
   
   
   return a;
}

After Unfolding

float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a += _return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   int i;
   //PIPS generated variable
   float _return0;
   for(i = 0; i <= n-1; i += 1) {
      _return0 = b[i]+c[i];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
      _return0 = b[LU_IND0]+c[LU_IND0];
      a = a+_return0;
   }
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      _return0 = b[LU_IND0]+c[LU_IND0];
      a = a+_return0;
      _return0 = b[LU_IND0+1]+c[LU_IND0+1];
      a = a+_return0;
      _return0 = b[LU_IND0+2]+c[LU_IND0+2];
      a = a+_return0;
      _return0 = b[LU_IND0+3]+c[LU_IND0+3];
      a = a+_return0;
   }
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4];
   LU_NUB0 = n;
   LU_IB0 = MOD(LU_NUB0, 4);
   RED0[0] = 0.000000;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
      _return0 = b[LU_IND0]+c[LU_IND0];
      RED0[0] = RED0[0]+_return0;
   }
   a = RED0[0]+a;
   RED1[0] = 0.000000;
   RED1[1] = 0.000000;
   RED1[2] = 0.000000;
   RED1[3] = 0.000000;
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      _return0 = b[LU_IND0]+c[LU_IND0];
      RED1[0] = RED1[0]+_return0;
      _return0 = b[LU_IND0+1]+c[LU_IND0+1];
      RED1[1] = RED1[1]+_return0;
      _return0 = b[LU_IND0+2]+c[LU_IND0+2];
      RED1[2] = RED1[2]+_return0;
      _return0 = b[LU_IND0+3]+c[LU_IND0+3];
      RED1[3] = RED1[3]+_return0;
   }
   a = RED1[3]+RED1[2]+RED1[1]+RED1[0]+a;
   
   
   return a;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], a0, _return00, _return01, _return02, _return03, a1, _return04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   LU_IB00 = MOD(LU_NUB00, 4);
   RED0[0] = 0.000000;
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      _return04 = b[LU_IND0]+c[LU_IND0];
      RED0[0] = RED0[0]+_return04;
   }
   a1 = RED0[0]+a;
   RED1[0] = 0.000000;
   RED1[1] = 0.000000;
   RED1[2] = 0.000000;
   RED1[3] = 0.000000;
   for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
      _return03 = b[LU_IND0]+c[LU_IND0];
      RED1[0] = RED1[0]+_return03;
      _return02 = b[LU_IND0+1]+c[LU_IND0+1];
      RED1[1] = RED1[1]+_return02;
      _return01 = b[LU_IND0+2]+c[LU_IND0+2];
      RED1[2] = RED1[2]+_return01;
      _return00 = b[LU_IND0+3]+c[LU_IND0+3];
      RED1[3] = RED1[3]+_return00;
   }
   a0 = RED1[3]+RED1[2]+RED1[1]+RED1[0]+a1;
   
   
   return a0;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], a0, _return00, _return01, _return02, _return03, a1, _return04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   LU_NUB00 = n;
   RED0[0] = 0.000000;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      _return04 = b[LU_IND0]+c[LU_IND0];
      RED0[0] = RED0[0]+_return04;
   }
   a1 = RED0[0]+a;
   RED1[0] = 0.000000;
   RED1[1] = 0.000000;
   RED1[2] = 0.000000;
   RED1[3] = 0.000000;
   for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40;
      SIMD_LOAD_V4SF(vec20, &c[LU_IND0]);
      SIMD_LOAD_V4SF(vec10, &b[LU_IND0]);
      SIMD_ADDPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec30, &RED1[0]);
      SIMD_ADDPS(vec30, vec30, vec00);
      SIMD_STORE_V4SF(vec30, &RED1[0]);
   }
   a0 = RED1[3]+RED1[2]+RED1[1]+RED1[0]+a1;
   
   
   return a0;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   float _return0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], a0, _return00, _return01, _return02, _return03, a1, _return04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   LU_NUB00 = n;
   RED0[0] = 0.000000;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      _return04 = b[LU_IND0]+c[LU_IND0];
      RED0[0] = RED0[0]+_return04;
   }
   a1 = RED0[0]+a;
   RED1[0] = 0.000000;
   RED1[1] = 0.000000;
   RED1[2] = 0.000000;
   RED1[3] = 0.000000;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec30;
      SIMD_LOAD_V4SF(vec30, &RED1[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec40;
         SIMD_LOAD_V4SF(vec20, &c[LU_IND0]);
         SIMD_LOAD_V4SF(vec10, &b[LU_IND0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_ADDPS(vec30, vec30, vec00);
      }
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_STORE_V4SF(vec30, &RED1[0]);
   }
   a0 = RED1[3]+RED1[2]+RED1[1]+RED1[0]+a1;
   
   
   return a0;
}
float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], a0, a1, _return04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   RED0[0] = 0.000000;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      _return04 = b[LU_IND0]+c[LU_IND0];
      RED0[0] = RED0[0]+_return04;
   }
   a1 = RED0[0]+a;
   RED1[0] = 0.000000;
   RED1[1] = 0.000000;
   RED1[2] = 0.000000;
   RED1[3] = 0.000000;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec30;
      SIMD_LOAD_V4SF(vec30, &RED1[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec40;
         SIMD_LOAD_V4SF(vec20, &c[LU_IND0]);
         SIMD_LOAD_V4SF(vec10, &b[LU_IND0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_ADDPS(vec30, vec30, vec00);
      }
      SIMD_STORE_V4SF(vec30, &RED1[0]);
   }
   a0 = RED1[3]+RED1[2]+RED1[1]+RED1[0]+a1;
   
   
   return a0;
}

simdized code

float dotprod(int n, float b[n], float c[n])
{
   float a;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], a0, a1, _return04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   LU_NUB00 = n;
   RED0[0] = 0.000000;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
      _return04 = b[LU_IND0]+c[LU_IND0];
      RED0[0] = RED0[0]+_return04;
   }
   a1 = RED0[0]+a;
   RED1[0] = 0.000000;
   RED1[1] = 0.000000;
   RED1[2] = 0.000000;
   RED1[3] = 0.000000;
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec30;
      SIMD_LOAD_V4SF(vec30, &RED1[0]);
      for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec40;
         SIMD_LOAD_V4SF(vec20, &c[LU_IND0]);
         SIMD_LOAD_V4SF(vec10, &b[LU_IND0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_ADDPS(vec30, vec30, vec00);
      }
      SIMD_STORE_V4SF(vec30, &RED1[0]);
   }
   a0 = RED1[3]+RED1[2]+RED1[1]+RED1[0]+a1;
   
   
   return a0;
}
