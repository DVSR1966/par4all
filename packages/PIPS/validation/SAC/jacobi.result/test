void compute()
{
   int i, j;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)

         save[i][j] = 0.25*(space[i-1][j]+space[i+1][j]+space[i][j-1]+space[i][j+1]);
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)

         space[i][j] = 0.25*(save[i-1][j]+save[i+1][j]+save[i][j-1]+save[i][j+1]);
}
void compute()
{
   int i, j;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)

         save[i][j] = 0.25*(space[i-1][j]+space[i+1][j]+space[i][j-1]+space[i][j+1]);
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)

         space[i][j] = 0.25*(save[i-1][j]+save[i+1][j]+save[i][j-1]+save[i][j+1]);
}
void compute()
{
   int i, j;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)

         save[i][j] = 0.25*(space[i-1][j]+space[i+1][j]+space[i][j-1]+space[i][j+1]);
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)

         space[i][j] = 0.25*(save[i-1][j]+save[i+1][j]+save[i][j-1]+save[i][j+1]);
}
void compute()
{
   int i, j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1) {
         F_0 = space[i-1][j]+space[i+1][j];
         F_1 = F_0+space[i][j-1];
         F_2 = F_1+space[i][j+1];

         save[i][j] = 0.25*F_2;
      }
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1) {
         F_3 = save[i-1][j]+save[i+1][j];
         F_4 = F_3+save[i][j-1];
         F_5 = F_4+save[i][j+1];

         space[i][j] = 0.25*F_5;
      }
}
void compute()
{
   int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5;
   //PIPS generated variable
   int LU_IND0, LU_IND1;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND0 = 0; LU_IND0 <= 1; LU_IND0 += 1) {
         F_0 = space[i-1][LU_IND0+1]+space[i+1][LU_IND0+1];
         F_1 = F_0+space[i][LU_IND0];
         F_2 = F_1+space[i][LU_IND0+2];
         save[i][LU_IND0+1] = 0.25*F_2;
      }
      for(LU_IND0 = 2; LU_IND0 <= 61; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+1]+space[i+1][LU_IND0+1];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+2];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+1] = 0.25*F_2;
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+2]+space[i+1][LU_IND0+2];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0+1];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+3];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+2] = 0.25*F_2;
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+3]+space[i+1][LU_IND0+3];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0+2];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+4];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+3] = 0.25*F_2;
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+4]+space[i+1][LU_IND0+4];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0+3];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+5];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+4] = 0.25*F_2;
      }
   }
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND1 = 0; LU_IND1 <= 1; LU_IND1 += 1) {
         F_3 = save[i-1][LU_IND1+1]+save[i+1][LU_IND1+1];
         F_4 = F_3+save[i][LU_IND1];
         F_5 = F_4+save[i][LU_IND1+2];
         space[i][LU_IND1+1] = 0.25*F_5;
      }
      for(LU_IND1 = 2; LU_IND1 <= 61; LU_IND1 += 4) {
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+1]+save[i+1][LU_IND1+1];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+2];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+1] = 0.25*F_5;
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+2]+save[i+1][LU_IND1+2];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1+1];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+3];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+2] = 0.25*F_5;
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+3]+save[i+1][LU_IND1+3];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1+2];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+4];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+3] = 0.25*F_5;
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+4]+save[i+1][LU_IND1+4];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1+3];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+5];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+4] = 0.25*F_5;
      }
   }
   ;
}
void compute()
{
   int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5;
   //PIPS generated variable
   int LU_IND0, LU_IND1;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   ;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND0 = 0; LU_IND0 <= 1; LU_IND0 += 1) {
         F_0 = space[i-1][LU_IND0+1]+space[i+1][LU_IND0+1];
         F_1 = F_0+space[i][LU_IND0];
         F_2 = F_1+space[i][LU_IND0+2];
         save[i][LU_IND0+1] = 0.25*F_2;
      }
      for(LU_IND0 = 2; LU_IND0 <= 61; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+1]+space[i+1][LU_IND0+1];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+2];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+1] = 0.25*F_2;
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+2]+space[i+1][LU_IND0+2];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0+1];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+3];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+2] = 0.25*F_2;
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+3]+space[i+1][LU_IND0+3];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0+2];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+4];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+3] = 0.25*F_2;
         //c SIMD_COMMENT_0
         F_0 = space[i-1][LU_IND0+4]+space[i+1][LU_IND0+4];
         //c SIMD_COMMENT_1
         F_1 = F_0+space[i][LU_IND0+3];
         //c SIMD_COMMENT_2
         F_2 = F_1+space[i][LU_IND0+5];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+4] = 0.25*F_2;
      }
   }
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND1 = 0; LU_IND1 <= 1; LU_IND1 += 1) {
         F_3 = save[i-1][LU_IND1+1]+save[i+1][LU_IND1+1];
         F_4 = F_3+save[i][LU_IND1];
         F_5 = F_4+save[i][LU_IND1+2];
         space[i][LU_IND1+1] = 0.25*F_5;
      }
      for(LU_IND1 = 2; LU_IND1 <= 61; LU_IND1 += 4) {
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+1]+save[i+1][LU_IND1+1];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+2];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+1] = 0.25*F_5;
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+2]+save[i+1][LU_IND1+2];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1+1];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+3];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+2] = 0.25*F_5;
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+3]+save[i+1][LU_IND1+3];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1+2];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+4];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+3] = 0.25*F_5;
         //c SIMD_COMMENT_0
         F_3 = save[i-1][LU_IND1+4]+save[i+1][LU_IND1+4];
         //c SIMD_COMMENT_1
         F_4 = F_3+save[i][LU_IND1+3];
         //c SIMD_COMMENT_2
         F_5 = F_4+save[i][LU_IND1+5];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+4] = 0.25*F_5;
      }
   }
   ;
}
void compute()
{
   int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5;
   //PIPS generated variable
   int LU_IND0, LU_IND1;
   //PIPS generated variable
   float F_50, F_40, F_30, F_51, F_41, F_31, F_52, F_42, F_32, F_53, F_43, F_33, F_54, F_44, F_34, F_20, F_10, F_00, F_21, F_11, F_01, F_22, F_12, F_02, F_23, F_13, F_03, F_24, F_14, F_04;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND0 = 0; LU_IND0 <= 1; LU_IND0 += 1) {
         F_04 = space[i-1][LU_IND0+1]+space[i+1][LU_IND0+1];
         F_14 = F_04+space[i][LU_IND0];
         F_24 = F_14+space[i][LU_IND0+2];
         save[i][LU_IND0+1] = 0.25*F_24;
      }
      for(LU_IND0 = 2; LU_IND0 <= 61; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_03 = space[i-1][LU_IND0+1]+space[i+1][LU_IND0+1];
         //c SIMD_COMMENT_1
         F_13 = F_03+space[i][LU_IND0];
         //c SIMD_COMMENT_2
         F_23 = F_13+space[i][LU_IND0+2];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+1] = 0.25*F_23;
         //c SIMD_COMMENT_0
         F_02 = space[i-1][LU_IND0+2]+space[i+1][LU_IND0+2];
         //c SIMD_COMMENT_1
         F_12 = F_02+space[i][LU_IND0+1];
         //c SIMD_COMMENT_2
         F_22 = F_12+space[i][LU_IND0+3];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+2] = 0.25*F_22;
         //c SIMD_COMMENT_0
         F_01 = space[i-1][LU_IND0+3]+space[i+1][LU_IND0+3];
         //c SIMD_COMMENT_1
         F_11 = F_01+space[i][LU_IND0+2];
         //c SIMD_COMMENT_2
         F_21 = F_11+space[i][LU_IND0+4];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+3] = 0.25*F_21;
         //c SIMD_COMMENT_0
         F_00 = space[i-1][LU_IND0+4]+space[i+1][LU_IND0+4];
         //c SIMD_COMMENT_1
         F_10 = F_00+space[i][LU_IND0+3];
         //c SIMD_COMMENT_2
         F_20 = F_10+space[i][LU_IND0+5];
         //c SIMD_COMMENT_3
         save[i][LU_IND0+4] = 0.25*F_20;
      }
   }
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND1 = 0; LU_IND1 <= 1; LU_IND1 += 1) {
         F_34 = save[i-1][LU_IND1+1]+save[i+1][LU_IND1+1];
         F_44 = F_34+save[i][LU_IND1];
         F_54 = F_44+save[i][LU_IND1+2];
         space[i][LU_IND1+1] = 0.25*F_54;
      }
      for(LU_IND1 = 2; LU_IND1 <= 61; LU_IND1 += 4) {
         //c SIMD_COMMENT_0
         F_33 = save[i-1][LU_IND1+1]+save[i+1][LU_IND1+1];
         //c SIMD_COMMENT_1
         F_43 = F_33+save[i][LU_IND1];
         //c SIMD_COMMENT_2
         F_53 = F_43+save[i][LU_IND1+2];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+1] = 0.25*F_53;
         //c SIMD_COMMENT_0
         F_32 = save[i-1][LU_IND1+2]+save[i+1][LU_IND1+2];
         //c SIMD_COMMENT_1
         F_42 = F_32+save[i][LU_IND1+1];
         //c SIMD_COMMENT_2
         F_52 = F_42+save[i][LU_IND1+3];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+2] = 0.25*F_52;
         //c SIMD_COMMENT_0
         F_31 = save[i-1][LU_IND1+3]+save[i+1][LU_IND1+3];
         //c SIMD_COMMENT_1
         F_41 = F_31+save[i][LU_IND1+2];
         //c SIMD_COMMENT_2
         F_51 = F_41+save[i][LU_IND1+4];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+3] = 0.25*F_51;
         //c SIMD_COMMENT_0
         F_30 = save[i-1][LU_IND1+4]+save[i+1][LU_IND1+4];
         //c SIMD_COMMENT_1
         F_40 = F_30+save[i][LU_IND1+3];
         //c SIMD_COMMENT_2
         F_50 = F_40+save[i][LU_IND1+5];
         //c SIMD_COMMENT_3
         space[i][LU_IND1+4] = 0.25*F_50;
      }
   }
   ;
}
void compute()
{
   int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5;
   //PIPS generated variable
   int LU_IND0, LU_IND1;
   //PIPS generated variable
   float F_50, F_40, F_30, F_51, F_41, F_31, F_52, F_42, F_32, F_53, F_43, F_33, F_54, F_44, F_34, F_20, F_10, F_00, F_21, F_11, F_01, F_22, F_12, F_02, F_23, F_13, F_03, F_24, F_14, F_04;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0}, pdata2 = {0, 0, 0, 0}, pdata3 = {0.25, 0.25, 0.25, 0.25}, pdata4 = {0, 0, 0, 0}, pdata5 = {0, 0, 0, 0}, pdata6 = {0, 0, 0, 0}, pdata7 = {0.25, 0.25, 0.25, 0.25};
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND0 = 0; LU_IND0 <= 1; LU_IND0 += 1) {
         F_04 = space[i-1][1+LU_IND0]+space[1+i][1+LU_IND0];
         F_14 = F_04+space[i][LU_IND0];
         F_24 = F_14+space[i][2+LU_IND0];
         save[i][1+LU_IND0] = 0.25*F_24;
      }
      for(LU_IND0 = 2; LU_IND0 <= 61; LU_IND0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70, vec80, vec90, vec100, vec110;
         SIMD_LOAD_V4SF(vec20, &space[1+i][1+LU_IND0]);
         SIMD_LOAD_V4SF(vec10, &space[i-1][1+LU_IND0]);
         SIMD_ADDPS(vec00, vec10, vec20);
         SIMD_STORE_V4SF(vec00, &pdata0[0]);
         SIMD_LOAD_V4SF(vec50, &space[i][LU_IND0]);
         SIMD_ADDPS(vec30, vec00, vec50);
         SIMD_STORE_V4SF(vec30, &pdata1[0]);
         SIMD_LOAD_V4SF(vec80, &space[i][2+LU_IND0]);
         SIMD_ADDPS(vec60, vec30, vec80);
         SIMD_STORE_V4SF(vec60, &pdata2[0]);
         SIMD_LOAD_V4SF(vec100, &pdata3[0]);
         SIMD_MULPS(vec90, vec100, vec60);
         SIMD_STORE_V4SF(vec90, &save[i][1+LU_IND0]);
      }
   }
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND1 = 0; LU_IND1 <= 1; LU_IND1 += 1) {
         F_34 = save[i-1][1+LU_IND1]+save[1+i][1+LU_IND1];
         F_44 = F_34+save[i][LU_IND1];
         F_54 = F_44+save[i][2+LU_IND1];
         space[i][1+LU_IND1] = 0.25*F_54;
      }
      for(LU_IND1 = 2; LU_IND1 <= 61; LU_IND1 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec120, vec130, vec140, vec150, vec160, vec170, vec180, vec190, vec200, vec210, vec220, vec230;
         SIMD_LOAD_V4SF(vec140, &save[1+i][1+LU_IND1]);
         SIMD_LOAD_V4SF(vec130, &save[i-1][1+LU_IND1]);
         SIMD_ADDPS(vec120, vec130, vec140);
         SIMD_STORE_V4SF(vec120, &pdata4[0]);
         SIMD_LOAD_V4SF(vec170, &save[i][LU_IND1]);
         SIMD_ADDPS(vec150, vec120, vec170);
         SIMD_STORE_V4SF(vec150, &pdata5[0]);
         SIMD_LOAD_V4SF(vec200, &save[i][2+LU_IND1]);
         SIMD_ADDPS(vec180, vec150, vec200);
         SIMD_STORE_V4SF(vec180, &pdata6[0]);
         SIMD_LOAD_V4SF(vec220, &pdata7[0]);
         SIMD_MULPS(vec210, vec220, vec180);
         SIMD_STORE_V4SF(vec210, &space[i][1+LU_IND1]);
      }
   }
   ;
}
void compute()
{
   int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5;
   //PIPS generated variable
   int LU_IND0, LU_IND1;
   //PIPS generated variable
   float F_50, F_40, F_30, F_51, F_41, F_31, F_52, F_42, F_32, F_53, F_43, F_33, F_54, F_44, F_34, F_20, F_10, F_00, F_21, F_11, F_01, F_22, F_12, F_02, F_23, F_13, F_03, F_24, F_14, F_04;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0}, pdata2 = {0, 0, 0, 0}, pdata3 = {0.25, 0.25, 0.25, 0.25}, pdata4 = {0, 0, 0, 0}, pdata5 = {0, 0, 0, 0}, pdata6 = {0, 0, 0, 0}, pdata7 = {0.25, 0.25, 0.25, 0.25};
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:   ;
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND0 = 0; LU_IND0 <= 1; LU_IND0 += 1) {
         F_04 = space[i-1][1+LU_IND0]+space[1+i][1+LU_IND0];
         F_14 = F_04+space[i][LU_IND0];
         F_24 = F_14+space[i][2+LU_IND0];
         save[i][1+LU_IND0] = 0.25*F_24;
      }
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec30, vec60, vec100;
         SIMD_LOAD_V4SF(vec100, &pdata3[0]);
         for(LU_IND0 = 2; LU_IND0 <= 61; LU_IND0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec20, vec40, vec50, vec70, vec80, vec90, vec110;
            SIMD_LOAD_V4SF(vec20, &space[1+i][1+LU_IND0]);
            SIMD_LOAD_V4SF(vec10, &space[i-1][1+LU_IND0]);
            SIMD_ADDPS(vec00, vec10, vec20);
            SIMD_LOAD_V4SF(vec50, &space[i][LU_IND0]);
            SIMD_ADDPS(vec30, vec00, vec50);
            SIMD_LOAD_V4SF(vec80, &space[i][2+LU_IND0]);
            SIMD_ADDPS(vec60, vec30, vec80);
            SIMD_MULPS(vec90, vec100, vec60);
            SIMD_STORE_V4SF(vec90, &save[i][1+LU_IND0]);
         }
         SIMD_STORE_V4SF(vec00, &pdata0[0]);
         SIMD_STORE_V4SF(vec30, &pdata1[0]);
         SIMD_STORE_V4SF(vec60, &pdata2[0]);
      }
   }
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND1 = 0; LU_IND1 <= 1; LU_IND1 += 1) {
         F_34 = save[i-1][1+LU_IND1]+save[1+i][1+LU_IND1];
         F_44 = F_34+save[i][LU_IND1];
         F_54 = F_44+save[i][2+LU_IND1];
         space[i][1+LU_IND1] = 0.25*F_54;
      }
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec120, vec150, vec180, vec220;
         SIMD_LOAD_V4SF(vec220, &pdata7[0]);
         for(LU_IND1 = 2; LU_IND1 <= 61; LU_IND1 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec130, vec140, vec160, vec170, vec190, vec200, vec210, vec230;
            SIMD_LOAD_V4SF(vec140, &save[1+i][1+LU_IND1]);
            SIMD_LOAD_V4SF(vec130, &save[i-1][1+LU_IND1]);
            SIMD_ADDPS(vec120, vec130, vec140);
            SIMD_LOAD_V4SF(vec170, &save[i][LU_IND1]);
            SIMD_ADDPS(vec150, vec120, vec170);
            SIMD_LOAD_V4SF(vec200, &save[i][2+LU_IND1]);
            SIMD_ADDPS(vec180, vec150, vec200);
            SIMD_MULPS(vec210, vec220, vec180);
            SIMD_STORE_V4SF(vec210, &space[i][1+LU_IND1]);
         }
         SIMD_STORE_V4SF(vec120, &pdata4[0]);
         SIMD_STORE_V4SF(vec150, &pdata5[0]);
         SIMD_STORE_V4SF(vec180, &pdata6[0]);
      }
   }
   ;
}
void compute()
{
   int i;
   //PIPS generated variable
   int LU_IND0, LU_IND1;
   //PIPS generated variable
   float F_54, F_44, F_34, F_24, F_14, F_04;
   //SAC generated temporary array
   a4sf pdata3 = {0.25, 0.25, 0.25, 0.25}, pdata7 = {0.25, 0.25, 0.25, 0.25};
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND0 = 0; LU_IND0 <= 1; LU_IND0 += 1) {
         F_04 = space[i-1][1+LU_IND0]+space[1+i][1+LU_IND0];
         F_14 = F_04+space[i][LU_IND0];
         F_24 = F_14+space[i][2+LU_IND0];
         save[i][1+LU_IND0] = 0.25*F_24;
      }
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec30, vec60, vec100;
         SIMD_LOAD_V4SF(vec100, &pdata3[0]);
         for(LU_IND0 = 2; LU_IND0 <= 61; LU_IND0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec10, vec20, vec40, vec50, vec70, vec80, vec90, vec110;
            SIMD_LOAD_V4SF(vec20, &space[1+i][1+LU_IND0]);
            SIMD_LOAD_V4SF(vec10, &space[i-1][1+LU_IND0]);
            SIMD_ADDPS(vec00, vec10, vec20);
            SIMD_LOAD_V4SF(vec50, &space[i][LU_IND0]);
            SIMD_ADDPS(vec30, vec00, vec50);
            SIMD_LOAD_V4SF(vec80, &space[i][2+LU_IND0]);
            SIMD_ADDPS(vec60, vec30, vec80);
            SIMD_MULPS(vec90, vec100, vec60);
            SIMD_STORE_V4SF(vec90, &save[i][1+LU_IND0]);
         }
      }
   }
   for(i = 1; i <= 62; i += 1) {
      for(LU_IND1 = 0; LU_IND1 <= 1; LU_IND1 += 1) {
         F_34 = save[i-1][1+LU_IND1]+save[1+i][1+LU_IND1];
         F_44 = F_34+save[i][LU_IND1];
         F_54 = F_44+save[i][2+LU_IND1];
         space[i][1+LU_IND1] = 0.25*F_54;
      }
      {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec120, vec150, vec180, vec220;
         SIMD_LOAD_V4SF(vec220, &pdata7[0]);
         for(LU_IND1 = 2; LU_IND1 <= 61; LU_IND1 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec130, vec140, vec160, vec170, vec190, vec200, vec210, vec230;
            SIMD_LOAD_V4SF(vec140, &save[1+i][1+LU_IND1]);
            SIMD_LOAD_V4SF(vec130, &save[i-1][1+LU_IND1]);
            SIMD_ADDPS(vec120, vec130, vec140);
            SIMD_LOAD_V4SF(vec170, &save[i][LU_IND1]);
            SIMD_ADDPS(vec150, vec120, vec170);
            SIMD_LOAD_V4SF(vec200, &save[i][2+LU_IND1]);
            SIMD_ADDPS(vec180, vec150, vec200);
            SIMD_MULPS(vec210, vec220, vec180);
            SIMD_STORE_V4SF(vec210, &space[i][1+LU_IND1]);
         }
      }
   }
   ;
}
