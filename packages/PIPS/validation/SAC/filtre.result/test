
Initial code

void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   for(i = 4-1; i <= 99; i += 1)
loop:
      for(k = 0; k <= 3; k += 1)
         y[i] = y[i]+x[i-k]*h[k];
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   for(i = 4-1; i <= 99; i += 1)
loop:
      for(k = 0; k <= 3; k += 1) {
         F_0 = x[i-k]*h[k];
         y[i] = y[i]+F_0;
      }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4];
   for(i = 4-1; i <= 99; i += 1) {
loop:      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
         F_0 = x[i-(LU_IND0*1+0)]*h[LU_IND0*1+0];
         RED0[0] = RED0[0]+F_0;
l99999:         ;
      }
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+0)*1+0)]*h[(LU_IND0+0)*1+0];
         //c SIMD_COMMENT_1
         RED1[0] = RED1[0]+F_0;
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+1)*1+0)]*h[(LU_IND0+1)*1+0];
         //c SIMD_COMMENT_1
         RED1[1] = RED1[1]+F_0;
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+2)*1+0)]*h[(LU_IND0+2)*1+0];
         //c SIMD_COMMENT_1
         RED1[2] = RED1[2]+F_0;
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+3)*1+0)]*h[(LU_IND0+3)*1+0];
         //c SIMD_COMMENT_1
         RED1[3] = RED1[3]+F_0;
l99998:         ;
      }
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 0+MAX0(LU_NUB0, 0)*1;
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4];
   for(i = 4-1; i <= 99; i += 1) {
loop:      LU_NUB0 = 4;
      LU_IB0 = 0;
      RED0[0] = 0.000000;
      for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
         F_0 = x[i-(LU_IND0*1+0)]*h[LU_IND0*1+0];
         RED0[0] = RED0[0]+F_0;
l99999:         ;
      }
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+0)*1+0)]*h[(LU_IND0+0)*1+0];
         //c SIMD_COMMENT_1
         RED1[0] = RED1[0]+F_0;
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+1)*1+0)]*h[(LU_IND0+1)*1+0];
         //c SIMD_COMMENT_1
         RED1[1] = RED1[1]+F_0;
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+2)*1+0)]*h[(LU_IND0+2)*1+0];
         //c SIMD_COMMENT_1
         RED1[2] = RED1[2]+F_0;
         //c SIMD_COMMENT_0
         F_0 = x[i-((LU_IND0+3)*1+0)]*h[(LU_IND0+3)*1+0];
         //c SIMD_COMMENT_1
         RED1[3] = RED1[3]+F_0;
l99998:         ;
      }
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 0+MAX0(LU_NUB0, 0)*1;
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   for(i = 3; i <= 99; i += 1) {
      LU_NUB00 = 4;
      LU_IB00 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      //c SIMD_COMMENT_0
      F_03 = x[i-LU_IND0]*h[LU_IND0];
      //c SIMD_COMMENT_1
      RED1[0] = RED1[0]+F_03;
      //c SIMD_COMMENT_0
      F_02 = x[i-LU_IND0-1]*h[LU_IND0+1];
      //c SIMD_COMMENT_1
      RED1[1] = RED1[1]+F_02;
      //c SIMD_COMMENT_0
      F_01 = x[i-LU_IND0-2]*h[LU_IND0+2];
      //c SIMD_COMMENT_1
      RED1[2] = RED1[2]+F_01;
      //c SIMD_COMMENT_0
      F_00 = x[i-LU_IND0-3]*h[LU_IND0+3];
      //c SIMD_COMMENT_1
      RED1[3] = RED1[3]+F_00;
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   for(i = 3; i <= 99; i += 1) {
      LU_NUB00 = 4;
      LU_IB00 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      y[i] = RED0[0]+y[i];
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      LU_IND0 = 0;
      //c SIMD_COMMENT_0
      F_03 = x[i-LU_IND0]*h[LU_IND0];
      //c SIMD_COMMENT_1
      RED1[0] = RED1[0]+F_03;
      //c SIMD_COMMENT_0
      F_02 = x[i-LU_IND0-1]*h[LU_IND0+1];
      //c SIMD_COMMENT_1
      RED1[1] = RED1[1]+F_02;
      //c SIMD_COMMENT_0
      F_01 = x[i-LU_IND0-2]*h[LU_IND0+2];
      //c SIMD_COMMENT_1
      RED1[2] = RED1[2]+F_01;
      //c SIMD_COMMENT_0
      F_00 = x[i-LU_IND0-3]*h[LU_IND0+3];
      //c SIMD_COMMENT_1
      RED1[3] = RED1[3]+F_00;
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      k = 4;
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   for(i = 3; i <= 99; i += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40;
      LU_NUB00 = 4;
      LU_IB00 = 0;
      RED0[0] = 0.000000;
      LU_IND0 = 0;
      RED1[0] = 0.000000;
      RED1[1] = 0.000000;
      RED1[2] = 0.000000;
      RED1[3] = 0.000000;
      k = 4;
      y[i] = RED0[0]+y[i];
      LU_IND0 = 0;
      SIMD_LOAD_V4SF(vec20, &h[LU_IND0]);
      SIMD_LOAD_GENERIC_V4SF(vec10, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec30, &RED1[0]);
      SIMD_ADDPS(vec30, vec30, vec00);
      SIMD_STORE_V4SF(vec30, &RED1[0]);
      y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   int LU_NUB0, LU_IB0, LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_00, F_01, F_02, F_03;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00;
      for(i = 3; i <= 99; i += 1) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec30, vec40;
         LU_NUB00 = 4;
         LU_IB00 = 0;
         RED0[0] = 0.000000;
         LU_IND0 = 0;
         RED1[0] = 0.000000;
         RED1[1] = 0.000000;
         RED1[2] = 0.000000;
         RED1[3] = 0.000000;
         k = 4;
         y[i] = RED0[0]+y[i];
         LU_IND0 = 0;
         SIMD_LOAD_V4SF(vec20, &h[LU_IND0]);
         SIMD_LOAD_GENERIC_V4SF(vec10, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         SIMD_ADDPS(vec30, vec30, vec00);
         SIMD_STORE_V4SF(vec30, &RED1[0]);
         y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      }
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
   }
   ;
}
void filtre(float x[100], float y[100], float h[4])
{
   int i;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4];
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00;
      for(i = 3; i <= 99; i += 1) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec30, vec40;
         4;
         0;
         RED0[0] = 0.000000;
         LU_IND0 = 0;
         RED1[0] = 0.000000;
         RED1[1] = 0.000000;
         RED1[2] = 0.000000;
         RED1[3] = 0.000000;
         4;
         y[i] = RED0[0]+y[i];
         LU_IND0 = 0;
         SIMD_LOAD_V4SF(vec20, &h[LU_IND0]);
         SIMD_LOAD_GENERIC_V4SF(vec10, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         SIMD_ADDPS(vec30, vec30, vec00);
         SIMD_STORE_V4SF(vec30, &RED1[0]);
         y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      }
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
   }
   ;
}

simdized code

void filtre(float x[100], float y[100], float h[4])
{
   int i;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4];
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00;
      for(i = 3; i <= 99; i += 1) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec30, vec40;
         4;
         0;
         RED0[0] = 0.000000;
         LU_IND0 = 0;
         RED1[0] = 0.000000;
         RED1[1] = 0.000000;
         RED1[2] = 0.000000;
         RED1[3] = 0.000000;
         4;
         y[i] = RED0[0]+y[i];
         LU_IND0 = 0;
         SIMD_LOAD_V4SF(vec20, &h[LU_IND0]);
         SIMD_LOAD_GENERIC_V4SF(vec10, x[i-LU_IND0], x[i-LU_IND0-1], x[i-LU_IND0-2], x[i-LU_IND0-3]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_LOAD_V4SF(vec30, &RED1[0]);
         SIMD_ADDPS(vec30, vec30, vec00);
         SIMD_STORE_V4SF(vec30, &RED1[0]);
         y[i] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+y[i];
      }
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
   }
   ;
}
seq-ok
