void give()
{
   int k;
   double array[N];

   p4a_launcher_give(N, array, &k);

   exit(k);
}
void p4a_kernel_give(int N, double array[N], int k)
{
   array[k] = 0;
}
void p4a_launcher_give(int N, double array[N], int *k_0)
{
   //PIPS generated variable
   int k;
   k = *k_0;

   for(k = 0; k <= 99; k += 1)
      // To be assigned to a call to P4A_vp_0: k
      p4a_wrapper_give(N, array, k);
   *k_0 = k;
}
void p4a_wrapper_give(int N, double array[N], int k)
{
   // To be assigned to a call to P4A_vp_0: k
   p4a_kernel_give(N, array, k);
}
[after unsplit and recovering]
/*
 * file for kernel_load_store02.tmp.c
 */
/* Test kernel_load_store on a scalar modification.
*/

#include <stdlib.h>
enum {N=100};

void give();
//PIPS generated variable
void p4a_kernel_give(int N, double array[N], int k), p4a_wrapper_give(int N, double array[N], int k), p4a_launcher_give(int N, double array[N], int *k_0);
void p4a_launcher_give(int N, double array[N], int *k_0)
{
   //PIPS generated variable
   int k;
   k = *k_0;

   for(k = 0; k <= 99; k += 1)
      // To be assigned to a call to P4A_vp_0: k
      p4a_wrapper_give(N, array, k);
   *k_0 = k;
}
void p4a_wrapper_give(int N, double array[N], int k)
{
   // To be assigned to a call to P4A_vp_0: k
   p4a_kernel_give(N, array, k);
}
void p4a_kernel_give(int N, double array[N], int k)
{
   array[k] = 0;
}
void give()
{
   int k;
   double array[N];

   p4a_launcher_give(N, array, &k);

   exit(k);
}
