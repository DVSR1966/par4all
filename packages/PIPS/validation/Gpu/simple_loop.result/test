int main()
{
   int i;

#pragma omp parallel for 
   for(i = 0; i <= 9999; i += 1)
      a[i] = b[i]+c[i];

   return 0;
}
void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void * P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(l = 0; l <= -1+size; l += 1)
         cdest[(i+d1_offset)*size+l] = csrc[i*size+l];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(j = 0; j <= -1+d2_block_length; j += 1)
         for(l = 0; l <= -1+size; l += 1)
            cdest[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l] = csrc[i*size*d2_block_length+j*size+l];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(l = 0; l <= -1+size; l += 1)
         cdest[i*size+l] = csrc[(i+d1_offset)*size+l];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(j = 0; j <= -1+d2_block_length; j += 1)
         for(l = 0; l <= -1+size; l += 1)
            cdest[i*size*d2_block_length+j*size+l] = csrc[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l];
   return dest;
}
int main()
{
   int i;

   p4a_kernel_launcher_0(N, a, b, c);

   return 0;
}
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
void p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N])
{
   //PIPS generated variable
   int i;

   for(i = 0; i <= 9999; i += 1)
      // To be assigned to a call to P4A_vp_0: i
      p4a_kernel_wrapper_0(N, a, b, c, i);
}
void p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_0(N, a, b, c, i);
}
void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void * P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(l = 0; l <= -1+size; l += 1)
         cdest[(i+d1_offset)*size+l] = csrc[i*size+l];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(j = 0; j <= -1+d2_block_length; j += 1)
         for(l = 0; l <= -1+size; l += 1)
            cdest[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l] = csrc[i*size*d2_block_length+j*size+l];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(l = 0; l <= -1+size; l += 1)
         cdest[i*size+l] = csrc[(i+d1_offset)*size+l];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(j = 0; j <= -1+d2_block_length; j += 1)
         for(l = 0; l <= -1+size; l += 1)
            cdest[i*size*d2_block_length+j*size+l] = csrc[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l];
   return dest;
}
int main()
{
   int i;

   p4a_kernel_launcher_0(N, a, b, c);

   return 0;
}
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
void p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N])
{
   //PIPS generated variable
   int i;

   for(i = 0; i <= 9999; i += 1)
      // To be assigned to a call to P4A_vp_0: i
      p4a_kernel_wrapper_0(N, a, b, c, i);
}
void p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_0(N, a, b, c, i);
}
[after unsplit and recovering]
/*
 * file for p4a_stubs.c
 */
#include <stdlib.h>
void *P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length);
void *P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length);
void *P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length);
void *P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length);

void P4A_accel_malloc(void **ptr, size_t n);

void P4A_accel_free(void **ptr);
void * P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(l = 0; l <= -1+size; l += 1)
         cdest[(i+d1_offset)*size+l] = csrc[i*size+l];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(l = 0; l <= -1+size; l += 1)
         cdest[i*size+l] = csrc[(i+d1_offset)*size+l];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(j = 0; j <= -1+d2_block_length; j += 1)
         for(l = 0; l <= -1+size; l += 1)
            cdest[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l] = csrc[i*size*d2_block_length+j*size+l];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= -1+d1_block_length; i += 1)
      for(j = 0; j <= -1+d2_block_length; j += 1)
         for(l = 0; l <= -1+size; l += 1)
            cdest[i*size*d2_block_length+j*size+l] = csrc[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l];
   return dest;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
/*
 * file for simple_loop.c
 */
enum {N=10000};

double a[N], b[N], c[N];

int main();
//PIPS generated variable
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i), p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i), p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N]);
void p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N])
{
   //PIPS generated variable
   int i;

   for(i = 0; i <= 9999; i += 1)
      // To be assigned to a call to P4A_vp_0: i
      p4a_kernel_wrapper_0(N, a, b, c, i);
}
void p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_0(N, a, b, c, i);
}
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
int main()
{
   int i;

   p4a_kernel_launcher_0(N, a, b, c);

   return 0;
}
