
Initial source code

void invariant01(int n, int ni, int nj)
{
   // BEGIN BLOCK
   float x[n][n], y[n];                                                 /*0006*/
   int i, j;                                                            /*0007*/
   float s;                                                             /*0008*/

   for(i = 0; i <= ni-1; i += 1)
      for(j = 0; j <= nj-1; j += 1) {
         // BEGIN BLOCK
         s = y[i];                                                      /*0012*/
         x[i][j] = s;                                                   /*0013*/
         // END BLOCK
      }
   // END BLOCK
}

Parallelized code

void invariant01(int n, int ni, int nj)
{
   // BEGIN BLOCK
   float x[n][n], y[n];                                                 /*0006*/
   int i, j;                                                            /*0007*/
   float s;                                                             /*0008*/

   for(i = 0; i <= ni-1; i += 1)
      for(j = 0; j <= nj-1; j += 1) {
         // BEGIN BLOCK
         s = y[i];                                                      /*0012*/
         x[i][j] = s;                                                   /*0013*/
         // END BLOCK
      }
   // END BLOCK
}

Source code after invariant code motion

void invariant01(int n, int ni, int nj)
{
   // BEGIN BLOCK
   float x[n][n], y[n];                                                 /*0006*/
   int i, j;                                                            /*0007*/
   float s;                                                             /*0008*/

   for(i = 0; i <= ni-1; i += 1) {
      // BEGIN BLOCK
      j = MAX(INT(nj), 0);
      s = y[i];                                                         /*0012*/
#pragma omp parallel for 
      for(j = 0; j <= nj-1; j += 1)
         x[i][j] = s;                                                   /*0013*/
      // END BLOCK
   }
   // END BLOCK
}

Warnings

