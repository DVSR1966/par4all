
POINTS TO


// Points To IN:
// a -> *NULL_POINTER* , MAY
// a -> _a_1[0] , MAY
// b -> *NULL_POINTER* , MAY
// b -> _b_2[0] , MAY
// c -> *NULL_POINTER* , MAY
// c -> _c_3[0] , MAY


// Points To OUT: none

void pointer07(double *a, double *b, double *c, int cnt)
{

// Points To:
// a -> *NULL_POINTER* , MAY
// a -> _a_1[0] , MAY
// b -> *NULL_POINTER* , MAY
// b -> _b_2[0] , MAY
// c -> *NULL_POINTER* , MAY
// c -> _c_3[0] , MAY

   double *w = (void *) 0;

// Points To:
// a -> *NULL_POINTER* , MAY
// a -> _a_1[0] , MAY
// b -> *NULL_POINTER* , MAY
// b -> _b_2[0] , MAY
// c -> *NULL_POINTER* , MAY
// c -> _c_3[0] , MAY
// w -> *NULL_POINTER* , EXACT

   int i;

// Points To:
// a -> *NULL_POINTER* , MAY
// a -> _a_1[0] , MAY
// b -> *NULL_POINTER* , MAY
// b -> _b_2[0] , MAY
// c -> *NULL_POINTER* , MAY
// c -> _c_3[0] , MAY
// w -> *NULL_POINTER* , EXACT

   a!=(void *) 0&&b!=(void *) 0&&c!=(void *) 0?(void) 0:__assert_fail("a!=((void *)0) && b!=((void *)0) && c!=((void *)0)", "./pointer07.c", 11, (const char *) 0);

// Points To:
// a -> _a_1[0] , EXACT
// b -> _b_2[0] , EXACT
// c -> _c_3[0] , EXACT
// w -> *NULL_POINTER* , EXACT


   w = (double *) malloc(cnt*sizeof(double));

// Points To:
// a -> _a_1[0] , EXACT
// b -> _b_2[0] , EXACT
// c -> _c_3[0] , EXACT
// w -> *HEAP*_l_13[0] , EXACT

   for(i = 0; i <= cnt-1; i += 1)

// Points To:
// a -> _a_1[0] , EXACT
// b -> _b_2[0] , EXACT
// c -> _c_3[0] , EXACT
// w -> *HEAP*_l_13[0] , EXACT

      w[i] = c[i]+a[i]*b[i];
}

Proper effects with points-to

void pointer07(double *a, double *b, double *c, int cnt)
{
//             <    is written>: w
//             <    is referenced>: w
//             <    is declared>: w
   double *w = (void *) 0;
//             <    is declared>: i
   int i;
//             <    is read   >: a b c
//             <    is referenced>: a b c
   a!=(void *) 0&&b!=(void *) 0&&c!=(void *) 0?(void) 0:__assert_fail("a!=((void *)0) && b!=((void *)0) && c!=((void *)0)", "./pointer07.c", 11, (const char *) 0);
//             <    is read   >: cnt _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: w _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: cnt w

   w = (double *) malloc(cnt*sizeof(double));
//             <    is read   >: cnt
//             <    is written>: i
//             <    is referenced>: cnt i
   for(i = 0; i <= cnt-1; i += 1)
//             <    is read   >: _a_1[i] _b_2[i] _c_3[i] a b c cnt i w
//             <    is written>: *HEAP*_l_13[i]
//             <    is referenced>: a b c cnt i w
      w[i] = c[i]+a[i]*b[i];
}

Parallel code

void pointer07(double *a, double *b, double *c, int cnt)
{
   double *w = (void *) 0;
   int i;
   a!=(void *) 0&&b!=(void *) 0&&c!=(void *) 0?(void) 0:__assert_fail("a!=((void *)0) && b!=((void *)0) && c!=((void *)0)", "./pointer07.c", 11, (const char *) 0);

   w = (double *) malloc(cnt*sizeof(double));
   forall(i = 0; i <= cnt-1; i += 1)
      w[i] = c[i]+a[i]*b[i];
}
