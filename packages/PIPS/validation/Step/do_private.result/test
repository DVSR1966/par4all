

Source files copied in : do_private/Source/
Generated source files : do_private/src
###################### do_private/src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc

OpenMP_FLAG = -fopenmp

FLAGS = -g -O2
LDFLAGS = 


CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.a
RUNTIME=c
DIR_STEP=step_rt


$(BIN) : $(DIR_STEP)/$(LIB_STEP) $(OBJFILES)
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -o $@; fi

$(OBJFILES):
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(FLAGS) -c $(CSOURCES); fi
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FLAGS) -fno-underscoring -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP)

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f *.o *~


.IGNORE: clean###################### do_private/src/PARALLEL_DO_PARDO10_HYBRID.f ######################
!!
!! file for PARALLEL_DO_PARDO10_HYBRID.f
!!
      SUBROUTINE PARALLEL_DO_PARDO10_HYBRID(I_DUMMY, I_L, I_U, N, A, 
     &B, F)
      implicit none
      include "STEP.h"
      INTEGER*4 MAX_NB_REQUEST
      PARAMETER (MAX_NB_REQUEST = 64)
      INTEGER I_DUMMY, I, I_L, I_U, N, IDX, I_LOW, I_UP, STEP_I_LOW, 
     &STEP_I_UP
      INTEGER A(1:N), B(1:N), STEP_I_LOOPSLICES(IDX_SLICE_LOW:
     &IDX_SLICE_UP, 1:MAX_NB_LOOPSLICES), STEP_SR_A(IDX_SLICE_LOW:
     &IDX_SLICE_UP, 1:1, 0:MAX_NB_LOOPSLICES), STEP_REQUESTS(1:
     &MAX_NB_REQUEST)
      REAL*4 F
      CALL STEP_GET_SIZE(STEP_COMM_SIZE)                                0128
      CALL STEP_GET_RANK(STEP_COMM_RANK)                                0129

      CALL STEP_COMPUTELOOPSLICES(I_L, I_U, 1, STEP_COMM_SIZE,          0131
     &MAX_NB_LOOPSLICES, STEP_I_LOOPSLICES)                             0131

C     Put array boundaries into region arrays (SR: Send region)
C     First dimension: lower and upper bounds of each slice
C     Second dimension: for each dimension of the original array
C     Third dimension: store the boundaries of the local chunk.

C     The first element stores initial boundaries,
C     then one element for each process
      STEP_SR_A(IDX_SLICE_LOW,1,0) = 1                                  0141
      STEP_SR_A(IDX_SLICE_UP,1,0) = N                                   0142

C     Region computation
      DO IDX = 1, STEP_COMM_SIZE                                        0145
         I_LOW = STEP_I_LOOPSLICES(IDX_SLICE_LOW,IDX)                   0146
         I_UP = STEP_I_LOOPSLICES(IDX_SLICE_UP,IDX)                     0147
C  <A(PHI1)-write-EXACT-{I_LOW<=PHI1, 1<=PHI1, PHI1<=I_UP, PHI1<=10}>
         STEP_SR_A(IDX_SLICE_LOW,1,IDX) = MAX(I_LOW, 1)                 0149
         STEP_SR_A(IDX_SLICE_UP,1,IDX) = MIN(I_UP, 10)                  0150
      ENDDO

C     Where work is done...
      STEP_I_LOW = STEP_I_LOOPSLICES(IDX_SLICE_LOW,STEP_COMM_RANK+1)    0154
      STEP_I_UP = STEP_I_LOOPSLICES(IDX_SLICE_UP,STEP_COMM_RANK+1)      0155
!$OMP parallel do private(I, B)
      DO 10 I = STEP_I_LOW, STEP_I_UP                                   0157
         A(I) = I                                                       0158
         B(I) = I                                                       0159
         F = 0                                                          0160
10       CONTINUE                                                       0161
!$OMP end parallel do

!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
C     A nonblocking algo increment STEP_Nb_Request.
      STEP_NBREQUEST = 0                                                0170
      CALL STEP_ALLTOALLREGION(1, STEP_COMM_SIZE, STEP_SR_A,            0171
     &STEP_SIZEREGION(1, STEP_SR_A(IDX_SLICE_LOW,1,0)), A,              0171
     &STEP_TAG_DEFAULT, MAX_NB_REQUEST, STEP_REQUESTS, STEP_NBREQUEST   0171
     &, STEP_NBLOCKING_ALG, STEP_INTEGER4)                              0171
C     If STEP_Nb_Request equals 0, STEP_WAITALL does nothing
      CALL STEP_WAITALL(STEP_NBREQUEST, STEP_REQUESTS)                  0176

!$omp end master
!$omp barrier

      END
###################### do_private/src/STEP.h ######################
      INCLUDE 'steprt_f.h'

      INTEGER STEP_MAX_NBNODE
      PARAMETER (STEP_MAX_NBNODE = 16)

      INTEGER max_nb_loopslices
      INTEGER step_nbrequest

      INTEGER STEP_COMM_SIZE, STEP_COMM_RANK

      PARAMETER (MAX_NB_LOOPSLICES = STEP_MAX_NBNODE)
      
      ! Globals
       INTEGER STEP_SizeRegion
       INTEGER IDX_SLICE_LOW,IDX_SLICE_UP,STEP_IDX
       PARAMETER (IDX_SLICE_LOW = 1,IDX_SLICE_UP=2)

###################### do_private/src/do_private.f ######################
!!
!! file for do_private.f
!!
!
! program_do
!
! Example of a parallel do directive with private clause
!
! 2008
! Creation: A. Muller, 2008

      PROGRAM PARALLEL_DO
      implicit none
      INTEGER N
      PARAMETER (N=10)
      INTEGER I,A(N),B(N)
      REAL F
      CALL STEP_INIT_FORTRAN_ORDER
C$STEP !$omp parallel do private(i) private(b)
      CALL PARALLEL_DO_PARDO10_HYBRID(I, 1, N, N, A, B, F)

      PRINT *, 'A=', A                                                  0024
      PRINT *, 'B=', B                                                  0025
      CALL STEP_FINALIZE

      END
###################### do_private/src/step_rt ######################
###################### do_private/src/steprt_f.h ######################
!*******************************************************************************
!*                                                                             *
!*   Authors 	        :       Abdellah. Kouadri                              *
!*				Daniel Millot                          	       *
!*                              Frederique Silber-Chaussumier                  *
!*				                                               *
!*   Date		:       25/06/2009                                     *
!*						                               *
!*   File		:	steprt_f.h                                     *
!*							                       *
!*   Version		:       1.1				               *
!*   Description	:	Fortran runtime interface                      *
! ******************************************************************************



! Datatype
      INTEGER STEP_INTEGER1
      INTEGER STEP_INTEGER2
      INTEGER STEP_INTEGER4
      INTEGER STEP_INTEGER8
      INTEGER STEP_REAL4
      INTEGER STEP_REAL8
      INTEGER STEP_REAL16
      INTEGER STEP_COMPLEX8
      INTEGER STEP_COMPLEX16
      INTEGER STEP_COMPLEX32
      INTEGER STEP_INTEGER
      INTEGER STEP_REAL
      INTEGER STEP_COMPLEX
      INTEGER STEP_DOUBLE_PRECISION
!
      PARAMETER (STEP_INTEGER1 = 1)
      PARAMETER (STEP_INTEGER2 = 2)
      PARAMETER (STEP_INTEGER4 = 3)
      PARAMETER (STEP_INTEGER8 = 4)
      PARAMETER (STEP_REAL4 = 5)
      PARAMETER (STEP_REAL8 = 6)
      PARAMETER (STEP_REAL16 = 7)
      PARAMETER (STEP_COMPLEX8 = 8)
      PARAMETER (STEP_COMPLEX16 = 9)
      PARAMETER (STEP_COMPLEX32 = 10)
      PARAMETER (STEP_INTEGER = 11)
      PARAMETER (STEP_REAL = 12)
      PARAMETER (STEP_COMPLEX = 13)
      PARAMETER (STEP_DOUBLE_PRECISION = 14)

! Communication tag
      INTEGER   STEP_TAG_DEFAULT
!
      PARAMETER (STEP_TAG_DEFAULT = 0)

! Communication algorithms
      INTEGER 	STEP_NBLOCKING_ALG 
      INTEGER	STEP_BLOCKING_ALG_1
      INTEGER	STEP_BLOCKING_ALG_2
      INTEGER	STEP_BLOCKING_ALG_3
      INTEGER	STEP_BLOCKING_ALG_4
! reduction operators 
      INTEGER STEP_SUM	
      INTEGER STEP_MAX_
      INTEGER STEP_MIN_
      INTEGER STEP_PROD
      INTEGER STEP_LAND	
      INTEGER STEP_BAND
      INTEGER STEP_LOR	
      INTEGER STEP_BOR	
      INTEGER STEP_LXOR	
      INTEGER STEP_BXOR	
      INTEGER STEP_MINLOC
      INTEGER STEP_MAXLOC
!
      PARAMETER (STEP_NBLOCKING_ALG  = 0)
      PARAMETER (STEP_BLOCKING_ALG_1 = 1)
      PARAMETER (STEP_BLOCKING_ALG_2 = 2)
      PARAMETER (STEP_BLOCKING_ALG_3 = 3)
      PARAMETER (STEP_BLOCKING_ALG_4 = 4)
!
      PARAMETER (STEP_SUM  =	3)
      PARAMETER (STEP_MAX_ =	1)
      PARAMETER (STEP_MIN_ =	2)
      PARAMETER (STEP_PROD =	0)
      PARAMETER (STEP_LAND =	4)
      PARAMETER (STEP_BAND =	5)
      PARAMETER (STEP_LOR  =	6)
      PARAMETER (STEP_BOR  =	7)
      PARAMETER (STEP_LXOR =	8)
      PARAMETER (STEP_BXOR =	9)
      PARAMETER (STEP_MINLOC =	10)
      PARAMETER (STEP_MAXLOC =	11)

