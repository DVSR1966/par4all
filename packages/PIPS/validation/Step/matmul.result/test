###################### matmul/matmul.database/Src/MATMUL_PAR_HYBRID.f ######################
      SUBROUTINE MATMUL_PAR_HYBRID(N, A, B, C, I, J, K)
      implicit none
      include "STEP.h"
      INTEGER N, I, J, K
      REAL*8 A(1:N, 1:N), B(1:N, 1:N), C(1:N, 1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_PARALLEL)
      CALL STEP_INIT_ARRAYREGIONS(A, STEP_REAL8, 2, 1, N, 1, N)
      CALL STEP_INIT_ARRAYREGIONS(B, STEP_REAL8, 2, 1, N, 1, N)
      CALL STEP_INIT_ARRAYREGIONS(C, STEP_REAL8, 2, 1, N, 1, N)
!$omp end master
!$omp barrier

C BEGIN WORK
!$omp parallel
      CALL MATMUL_PAR_HYBRID_DO_HYBRID(N, A, B, C, I, J)
      CALL MATMUL_PAR_HYBRID_MASTER_HYBRID
      CALL MATMUL_PAR_HYBRID_DO_HYBRID_1(N, A, B, C, I, J, K)
      CALL MATMUL_PAR_HYBRID_MASTER_HYBRID_1(N, C, I, J)
!$omp end parallel
C END WORK
!$omp master

C     Communicating data to other nodes
C     3 communication shemes for all-to-all personalized broadcast :
C     STEP_NONBLOCKING, STEP_BLOCKING1 and STEP_BLOCKING2.
      CALL STEP_ALLTOALL_FULL(A, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_ALLTOALL_FULL(B, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_ALLTOALL_FULL(C, STEP_NBLOCKING_ALG, STEP_TAG_DEFAULT
     &)
      CALL STEP_FLUSH
      CALL STEP_CONSTRUCT_END(STEP_PARALLEL)
!$omp end master
!$omp barrier
      END
###################### matmul/matmul.database/Src/MATMUL_PAR_HYBRID_DO_HYBRID.f ######################
      SUBROUTINE MATMUL_PAR_HYBRID_DO_HYBRID(N, A, B, C, I, J)
      implicit none
      include "STEP.h"
      INTEGER IDX, STEP_COMM_RANK, STEP_J_UP, STEP_J_LOW, 
     &STEP_COMM_SIZE, N, I, J
      INTEGER STEP_SR_A(STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:2
     &, 1:STEP_MAX_NB_LOOPSLICES), STEP_SR_B(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:2, 1:STEP_MAX_NB_LOOPSLICES), STEP_SR_C(
     &STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:2, 1:
     &STEP_MAX_NB_LOOPSLICES)
      REAL*8 A(1:N, 1:N), B(1:N, 1:N), C(1:N, 1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_DO)
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)
      CALL STEP_COMPUTE_LOOPSLICES(1, N, 1, STEP_COMM_SIZE)

C SEND REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_J_LOW, STEP_J_UP)

C  <C(PHI1,PHI2)-W-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=PHI2, PHI2<=STEP_J_UP}>

         STEP_SR_C(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_SR_C(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_SR_C(STEP_INDEX_SLICE_LOW,2,IDX) = MAX(STEP_J_LOW, 1)
         STEP_SR_C(STEP_INDEX_SLICE_UP,2,IDX) = MIN(STEP_J_UP, 10)

C  <B(PHI1,PHI2)-W-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=PHI2, PHI2<=STEP_J_UP}>

         STEP_SR_B(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_SR_B(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_SR_B(STEP_INDEX_SLICE_LOW,2,IDX) = MAX(STEP_J_LOW, 1)
         STEP_SR_B(STEP_INDEX_SLICE_UP,2,IDX) = MIN(STEP_J_UP, 10)

C  <A(PHI1,PHI2)-W-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=PHI2, PHI2<=STEP_J_UP}>

         STEP_SR_A(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_SR_A(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_SR_A(STEP_INDEX_SLICE_LOW,2,IDX) = MAX(STEP_J_LOW, 1)
         STEP_SR_A(STEP_INDEX_SLICE_UP,2,IDX) = MIN(STEP_J_UP, 10)
      ENDDO
      CALL STEP_SET_SENDREGIONS(C, STEP_COMM_SIZE, STEP_SR_C)
      CALL STEP_SET_SENDREGIONS(B, STEP_COMM_SIZE, STEP_SR_B)
      CALL STEP_SET_SENDREGIONS(A, STEP_COMM_SIZE, STEP_SR_A)
!$omp end master
!$omp barrier

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_J_LOW, STEP_J_UP)
!$omp do


C     Initialize A, B and C matrices
      DO 10 J = STEP_J_LOW, STEP_J_UP
         DO 10 I = 1, N
            A(I,J) = 2.0
            B(I,J) = 3.0
            C(I,J) = 0
10          CONTINUE
!$omp end do
C END WORK
!$omp master
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(C, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(B, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(A, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH
      CALL STEP_CONSTRUCT_END(STEP_DO)
!$omp end master
!$omp barrier
      END
###################### matmul/matmul.database/Src/MATMUL_PAR_HYBRID_DO_HYBRID_1.f ######################
      SUBROUTINE MATMUL_PAR_HYBRID_DO_HYBRID_1(N, A, B, C, I, J, K)
      implicit none
      include "STEP.h"
      INTEGER IDX, STEP_COMM_RANK, STEP_J_UP, STEP_J_LOW, 
     &STEP_COMM_SIZE, N, I, J, K
      INTEGER STEP_SR_C(STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:2
     &, 1:STEP_MAX_NB_LOOPSLICES), STEP_RR_A(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:2, 1:STEP_MAX_NB_LOOPSLICES), STEP_RR_B(
     &STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:2, 1:
     &STEP_MAX_NB_LOOPSLICES), STEP_RR_C(STEP_INDEX_SLICE_LOW:
     &STEP_INDEX_SLICE_UP, 1:2, 1:STEP_MAX_NB_LOOPSLICES)
      REAL*8 A(1:N, 1:N), B(1:N, 1:N), C(1:N, 1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_DO)
      CALL STEP_GET_COMMSIZE(STEP_COMM_SIZE)
      CALL STEP_COMPUTE_LOOPSLICES(1, N, 1, STEP_COMM_SIZE)

C RECV REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_J_LOW, STEP_J_UP)

C  <C(PHI1,PHI2)-R-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=PHI2, PHI2<=STEP_J_UP}>

         STEP_RR_C(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_RR_C(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_RR_C(STEP_INDEX_SLICE_LOW,2,IDX) = MAX(STEP_J_LOW, 1)
         STEP_RR_C(STEP_INDEX_SLICE_UP,2,IDX) = MIN(STEP_J_UP, 10)

C  <B(PHI1,PHI2)-R-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=PHI2, PHI2<=STEP_J_UP}>

         STEP_RR_B(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_RR_B(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_RR_B(STEP_INDEX_SLICE_LOW,2,IDX) = MAX(STEP_J_LOW, 1)
         STEP_RR_B(STEP_INDEX_SLICE_UP,2,IDX) = MIN(STEP_J_UP, 10)

C  <A(PHI1,PHI2)-R-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=10, STEP_J_LOW<=STEP_J_UP, 1<=STEP_J_UP}>

         STEP_RR_A(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_RR_A(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_RR_A(STEP_INDEX_SLICE_LOW,2,IDX) = 1
         STEP_RR_A(STEP_INDEX_SLICE_UP,2,IDX) = 10
      ENDDO
      CALL STEP_SET_RECVREGIONS(C, STEP_COMM_SIZE, STEP_RR_C)
      CALL STEP_SET_RECVREGIONS(B, STEP_COMM_SIZE, STEP_RR_B)
      CALL STEP_SET_RECVREGIONS(A, STEP_COMM_SIZE, STEP_RR_A)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(C, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(B, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(A, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH

C SEND REGIONS
      DO IDX = 1, STEP_COMM_SIZE
         CALL STEP_GET_LOOPBOUNDS(IDX-1, STEP_J_LOW, STEP_J_UP)

C  <C(PHI1,PHI2)-W-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    STEP_J_LOW<=PHI2, PHI2<=STEP_J_UP}>

         STEP_SR_C(STEP_INDEX_SLICE_LOW,1,IDX) = 1
         STEP_SR_C(STEP_INDEX_SLICE_UP,1,IDX) = 10
         STEP_SR_C(STEP_INDEX_SLICE_LOW,2,IDX) = MAX(STEP_J_LOW, 1)
         STEP_SR_C(STEP_INDEX_SLICE_UP,2,IDX) = MIN(STEP_J_UP, 10)
      ENDDO
      CALL STEP_SET_SENDREGIONS(C, STEP_COMM_SIZE, STEP_SR_C)
!$omp end master
!$omp barrier

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      CALL STEP_GET_LOOPBOUNDS(STEP_COMM_RANK, STEP_J_LOW, STEP_J_UP)
!$omp do

C     Compute matrix-matrix product
      DO 20 J = STEP_J_LOW, STEP_J_UP
         DO 20 I = 1, N
            DO 20 K = 1, N
               C(I,J) = C(I,J)+A(I,K)*B(K,J)
20             CONTINUE
!$omp end do
C END WORK
!$omp master
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(C, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH
      CALL STEP_CONSTRUCT_END(STEP_DO)
!$omp end master
!$omp barrier
      END
###################### matmul/matmul.database/Src/MATMUL_PAR_HYBRID_MASTER_HYBRID.f ######################
      SUBROUTINE MATMUL_PAR_HYBRID_MASTER_HYBRID
      implicit none
      include "STEP.h"
      INTEGER STEP_COMM_RANK
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_MASTER)

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      IF (STEP_COMM_RANK.EQ.0) THEN

         PRINT *, 
     &   '******************************************************'
         PRINT *, 'Matrices initialized'
         PRINT *, 
     &   '******************************************************'
      ENDIF
C END WORK
      CALL STEP_CONSTRUCT_END(STEP_MASTER)
!$omp end master
!$omp barrier
      END
###################### matmul/matmul.database/Src/MATMUL_PAR_HYBRID_MASTER_HYBRID_1.f ######################
      SUBROUTINE MATMUL_PAR_HYBRID_MASTER_HYBRID_1(N, C, I, J)
      implicit none
      include "STEP.h"
      INTEGER STEP_COMM_RANK, N, I, J
      INTEGER STEP_RR_C(STEP_INDEX_SLICE_LOW:STEP_INDEX_SLICE_UP, 1:2
     &)
      REAL*8 C(1:N, 1:N)
!$omp master
      CALL STEP_CONSTRUCT_BEGIN(STEP_MASTER)

C RECV REGIONS

C  <C(PHI1,PHI2)-R-EXACT-{1<=PHI1, PHI1<=10, 1<=PHI2, PHI2<=10,
C    K==11}>

      STEP_RR_C(STEP_INDEX_SLICE_LOW,1) = 1
      STEP_RR_C(STEP_INDEX_SLICE_UP,1) = 10
      STEP_RR_C(STEP_INDEX_SLICE_LOW,2) = 1
      STEP_RR_C(STEP_INDEX_SLICE_UP,2) = 10
      CALL STEP_SET_RECVREGIONS(C, 1, STEP_RR_C)
      CALL STEP_REGISTER_ALLTOALL_PARTIAL(C, STEP_NBLOCKING_ALG, 
     &STEP_TAG_DEFAULT)
      CALL STEP_FLUSH

C BEGIN WORK
      CALL STEP_GET_RANK(STEP_COMM_RANK)
      IF (STEP_COMM_RANK.EQ.0) THEN

C     Print result matrix
         PRINT *, 
     &   '******************************************************'
         PRINT *, 'Result Matrix:'
         DO 50 I = 1, N
            DO 40 J = 1, N
               WRITE (*, 30) C(I,J)
30             FORMAT(2X,F8.2,$)
40             CONTINUE
            PRINT *, ' '
50          CONTINUE
         PRINT *, 
     &   '******************************************************'
         PRINT *, 'Done.'
      ENDIF
C END WORK
      CALL STEP_CONSTRUCT_END(STEP_MASTER)
!$omp end master
!$omp barrier
      END
###################### matmul/matmul.database/Src/Makefile ######################
#Default Makefile to compile generated files

BIN=a.out

FC=mpif77
CC=mpicc


FLAGS = -g -O2 -I$(DIR_STEP)

export COMPILER = gnu
export STEP_KIND = 4

ifeq ($(COMPILER) , gnu)
   OpenMP_FLAG = -fopenmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -Wall -Wno-line-truncation -Wno-unused-variable
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -fdefault-integer-8
   endif
   LDFLAGS =
endif

ifeq ($(COMPILER) , intel)
   OpenMP_FLAG = -openmp
   export CFLAGS = $(FLAGS) -Wall
   export FFLAGS = $(FLAGS) -warn all -warn notruncated_source -warn nounused
   ifeq ($(STEP_KIND), 8)
      FFLAGS += -i8
   endif
   LDFLAGS =
endif



CSOURCES= *.c
FSOURCES= *.f
OBJFILES= *.o

LIB_STEP=libstep.so
DIR_STEP=step_rt

all: gnu

$(BIN) : $(DIR_STEP)/$(LIB_STEP) compile_c compile_f
	if ls  >/dev/null 2>&1 *.o ; then $(FC) $(OBJFILES) $(OpenMP_FLAG) $(LDFLAGS) -lstep -L$(DIR_STEP) -Wl,-rpath=$(DIR_STEP) -o $@; fi

compile_c: $(DIR_STEP)/step_api.h
	if ls  >/dev/null 2>&1 *.c ; then $(CC) $(OpenMP_FLAG) $(CFLAGS) -c $(CSOURCES); fi

compile_f: $(DIR_STEP)/STEP.h
	if ls  >/dev/null 2>&1 *.f ; then $(FC) $(OpenMP_FLAG) $(FFLAGS) -c $(FSOURCES); fi

$(DIR_STEP)/$(LIB_STEP):
	$(MAKE) -C $(DIR_STEP) $(LIB_STEP) STEP.h critical_pcoord_program

clean:
	$(MAKE) -C $(DIR_STEP) $@
	rm -f *.o *~ *__genmod.*

clear: clean
	rm -f $(BIN)

gnu:	clear
	export OMPI_F77=gfortran; export OMPI_FC=gfortran; export OMPI_CC=gcc; export LANG=C;  $(MAKE) $(BIN) COMPILER=gnu

intel:	clear
	export OMPI_F77=ifort; export OMPI_FC=ifort; export OMPI_CC=icc; export LANG=C;  make $(BIN) COMPILER=intel

.IGNORE: clean clear
###################### matmul/matmul.database/Src/matmul.f ######################
      PROGRAM MATMUL
! MIL-STD-1753 Fortran extension not in PIPS
      implicit none
      INTEGER  N, I, J, K
      PARAMETER (N=10)
      REAL*8 A(N,N), B(N,N), C(N,N)
      CALL STEP_INIT_FORTRAN_ORDER
      CALL MATMUL_PAR_HYBRID(N, A, B, C, I, J, K)
      CALL STEP_FINALIZE

      END
###################### matmul/matmul.database/Src/step_rt ######################
