
"main" file

int main()
{
   
   /* initialize constants */
   
   t = 0.499975;
   t1 = 0.50025;
   t2 = 2.0;
   
   /* set values of module weights */
   
   n1 = 0*100000;
   n2 = 12*100000;
   n3 = 14*100000;
   n4 = 345*100000;
   n6 = 210*100000;
   n7 = 32*100000;
   n8 = 899*100000;
   n9 = 616*100000;
   n10 = 0*100000;
   n11 = 93*100000;
   
   /* MODULE 1:  simple identifiers */
   
   x1 = 1.0;
   x2 = x3 = x4 = -1.0;

   for(i = 1; i <= n1; i += 1) {
      x1 = (x1+x2+x3-x4)*t;
      x2 = (x1+x2-x3-x4)*t;
      x3 = (x1-x2+x3+x4)*t;
      x4 = (-x1+x2+x3+x4)*t;
   }
   
   
   
   
   
   /* MODULE 2:  array elements */
   
   e1[0] = 1.0;
   e1[1] = e1[2] = e1[3] = -1.0;

   for(i = 1; i <= n2; i += 1) {
      e1[0] = (e1[0]+e1[1]+e1[2]-e1[3])*t;
      e1[1] = (e1[0]+e1[1]-e1[2]+e1[3])*t;
      e1[2] = (e1[0]-e1[1]+e1[2]+e1[3])*t;
      e1[3] = (-e1[0]+e1[1]+e1[2]+e1[3])*t;
   }
   
   
   
   
   /* MODULE 3:  array as parameter */
   
   for(i = 1; i <= n3; i += 1)
      pa(e1);
   
   
   
   
   /* MODULE 4:  conditional jumps */
   
   j = 1;
   for(i = 1; i <= n4; i += 1) {
      if (j==1)
         j = 2;
      else
         j = 3;

      if (j>2)
         j = 0;
      else
         j = 1;

      if (j<1)
         j = 1;
      else
         j = 0;
   }
   
   
   
   
   /* MODULE 5:  omitted */
   
   /* MODULE 6:  integer arithmetic */
   
   j = 1;
   k = 2;
   l = 3;

   for(i = 1; i <= n6; i += 1) {
      j = j*(k-j)*(l-k);
      k = l*k-(l-j)*k;
      l = (l-k)*(k+j);

      e1[l-2] = j+k+l;
      /* C arrays are zero based */
      e1[k-2] = j*k*l;
   }
   
   
   
   
   /* MODULE 7:  trig. functions */
   
   x = y = 0.5;

   for(i = 1; i <= n7; i += 1) {
      x = t*atan(t2*sin(x)*cos(x)/(cos(x+y)+cos(x-y)-1.0));
      y = t*atan(t2*sin(y)*cos(y)/(cos(x+y)+cos(x-y)-1.0));
   }
   
   
   
   
   /* MODULE 8:  procedure calls */
   
   x = y = z = 1.0;

   for(i = 1; i <= n8; i += 1)
      // FI: to avoid problemes raised by an *anywhere* effect
      //created by this call site, comment it out
      p3(x, y, &z);
   
   
   
   
   /* MODULE9:  array references */
   
   j = 1;
   k = 2;
   l = 3;

   e1[0] = 1.0;
   e1[1] = 2.0;
   e1[2] = 3.0;

   for(i = 1; i <= n9; i += 1)
      p0();
   
   
   
   
   /* MODULE10:  integer arithmetic */
   
   j = 2;
   k = 3;

   for(i = 1; i <= n10; i += 1) {
      j = j+k;
      k = j+k;
      j = k-j;
      k = k-j-j;
   }
   
   
   
   
   /* MODULE11:  standard functions */
   
   x = 0.75;
   for(i = 1; i <= n11; i += 1)
      x = sqrt(exp(log(x)/t1));
}

"main" file with proper effects

int main()
{
//               <must be written>: t
   
   /* initialize constants */
   
   t = 0.499975;
//               <must be written>: t1
   t1 = 0.50025;
//               <must be written>: t2
   t2 = 2.0;
//               <must be written>: n1
   
   /* set values of module weights */
   
   n1 = 0*100000;
//               <must be written>: n2
   n2 = 12*100000;
//               <must be written>: n3
   n3 = 14*100000;
//               <must be written>: n4
   n4 = 345*100000;
//               <must be written>: n6
   n6 = 210*100000;
//               <must be written>: n7
   n7 = 32*100000;
//               <must be written>: n8
   n8 = 899*100000;
//               <must be written>: n9
   n9 = 616*100000;
//               <must be written>: n10
   n10 = 0*100000;
//               <must be written>: n11
   n11 = 93*100000;
//               <must be written>: x1
   
   /* MODULE 1:  simple identifiers */
   
   x1 = 1.0;
//               <must be written>: x2 x3 x4
   x2 = x3 = x4 = -1.0;
//               <must be read   >: n1
//               <must be written>: i

   for(i = 1; i <= n1; i += 1) {
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x1
      x1 = (x1+x2+x3-x4)*t;
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x2
      x2 = (x1+x2-x3-x4)*t;
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x3
      x3 = (x1-x2+x3+x4)*t;
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x4
      x4 = (-x1+x2+x3+x4)*t;
   }
//               <must be written>: e1[0]
   
   
   
   
   
   /* MODULE 2:  array elements */
   
   e1[0] = 1.0;
//               <must be written>: e1[1] e1[2] e1[3]
   e1[1] = e1[2] = e1[3] = -1.0;
//               <must be read   >: n2
//               <must be written>: i

   for(i = 1; i <= n2; i += 1) {
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[0]
      e1[0] = (e1[0]+e1[1]+e1[2]-e1[3])*t;
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[1]
      e1[1] = (e1[0]+e1[1]-e1[2]+e1[3])*t;
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[2]
      e1[2] = (e1[0]-e1[1]+e1[2]+e1[3])*t;
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[3]
      e1[3] = (-e1[0]+e1[1]+e1[2]+e1[3])*t;
   }
//               <must be read   >: n3
//               <must be written>: i
   
   
   
   
   /* MODULE 3:  array as parameter */
   
   for(i = 1; i <= n3; i += 1)
//               <may be read    >: t t2
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n3
//               <must be written>: e1[0] e1[1] e1[2] e1[3]
      pa(e1);
//               <must be written>: j
   
   
   
   
   /* MODULE 4:  conditional jumps */
   
   j = 1;
//               <must be read   >: n4
//               <must be written>: i
   for(i = 1; i <= n4; i += 1) {
//               <must be read   >: j n4
      if (j==1)
//               <must be read   >: n4
//               <must be written>: j
         j = 2;
      else
//               <must be read   >: n4
//               <must be written>: j
         j = 3;
//               <must be read   >: j n4

      if (j>2)
//               <must be read   >: n4
//               <must be written>: j
         j = 0;
      else
//               <must be read   >: n4
//               <must be written>: j
         j = 1;
//               <must be read   >: j n4

      if (j<1)
//               <must be read   >: n4
//               <must be written>: j
         j = 1;
      else
//               <must be read   >: n4
//               <must be written>: j
         j = 0;
   }
//               <must be written>: j
   
   
   
   
   /* MODULE 5:  omitted */
   
   /* MODULE 6:  integer arithmetic */
   
   j = 1;
//               <must be written>: k
   k = 2;
//               <must be written>: l
   l = 3;
//               <must be read   >: n6
//               <must be written>: i

   for(i = 1; i <= n6; i += 1) {
//               <must be read   >: j k l n6
//               <must be written>: j
      j = j*(k-j)*(l-k);
//               <must be read   >: j k l n6
//               <must be written>: k
      k = l*k-(l-j)*k;
//               <must be read   >: j k l n6
//               <must be written>: l
      l = (l-k)*(k+j);
//               <must be read   >: j k l n6
//               <must be written>: e1[l-2]

      e1[l-2] = j+k+l;
//               <must be read   >: j k l n6
//               <must be written>: e1[k-2]
      /* C arrays are zero based */
      e1[k-2] = j*k*l;
   }
//               <must be written>: x y
   
   
   
   
   /* MODULE 7:  trig. functions */
   
   x = y = 0.5;
//               <must be read   >: n7
//               <must be written>: i

   for(i = 1; i <= n7; i += 1) {
//               <must be read   >: n7 t t2 x y
//               <must be written>: x
      x = t*atan(t2*sin(x)*cos(x)/(cos(x+y)+cos(x-y)-1.0));
//               <must be read   >: n7 t t2 x y
//               <must be written>: y
      y = t*atan(t2*sin(y)*cos(y)/(cos(x+y)+cos(x-y)-1.0));
   }
//               <must be written>: x y z
   
   
   
   
   /* MODULE 8:  procedure calls */
   
   x = y = z = 1.0;
//               <must be read   >: n8
//               <must be written>: i

   for(i = 1; i <= n8; i += 1)
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: n8 t t2 x y
      // FI: to avoid problemes raised by an *anywhere* effect
      //created by this call site, comment it out
      p3(x, y, &z);
//               <must be written>: j
   
   
   
   
   /* MODULE9:  array references */
   
   j = 1;
//               <must be written>: k
   k = 2;
//               <must be written>: l
   l = 3;
//               <must be written>: e1[0]

   e1[0] = 1.0;
//               <must be written>: e1[1]
   e1[1] = 2.0;
//               <must be written>: e1[2]
   e1[2] = 3.0;
//               <must be read   >: n9
//               <must be written>: i

   for(i = 1; i <= n9; i += 1)
//               <may be read    >: e1[*]
//               <may be written >: e1[*]
//               <must be read   >: j k l n9
      p0();
//               <must be written>: j
   
   
   
   
   /* MODULE10:  integer arithmetic */
   
   j = 2;
//               <must be written>: k
   k = 3;
//               <must be read   >: n10
//               <must be written>: i

   for(i = 1; i <= n10; i += 1) {
//               <must be read   >: j k n10
//               <must be written>: j
      j = j+k;
//               <must be read   >: j k n10
//               <must be written>: k
      k = j+k;
//               <must be read   >: j k n10
//               <must be written>: j
      j = k-j;
//               <must be read   >: j k n10
//               <must be written>: k
      k = k-j-j;
   }
//               <must be written>: x
   
   
   
   
   /* MODULE11:  standard functions */
   
   x = 0.75;
//               <must be read   >: n11
//               <must be written>: i
   for(i = 1; i <= n11; i += 1)
//               <must be read   >: n11 t1 x
//               <must be written>: x
      x = sqrt(exp(log(x)/t1));
}

"main" file with cumulated effects

//               <may be read    >: e1[0] e1[1] e1[2] e1[3] e1[*] j k 
//                                  l t t1 t2 x x1 x2 x3 x4 y
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: n1 n10 n11 n2 n3 n4 n6 n7 n8 n9
int main()
{
//               <must be written>: t
   
   /* initialize constants */
   
   t = 0.499975;
//               <must be written>: t1
   t1 = 0.50025;
//               <must be written>: t2
   t2 = 2.0;
//               <must be written>: n1
   
   /* set values of module weights */
   
   n1 = 0*100000;
//               <must be written>: n2
   n2 = 12*100000;
//               <must be written>: n3
   n3 = 14*100000;
//               <must be written>: n4
   n4 = 345*100000;
//               <must be written>: n6
   n6 = 210*100000;
//               <must be written>: n7
   n7 = 32*100000;
//               <must be written>: n8
   n8 = 899*100000;
//               <must be written>: n9
   n9 = 616*100000;
//               <must be written>: n10
   n10 = 0*100000;
//               <must be written>: n11
   n11 = 93*100000;
//               <must be written>: x1
   
   /* MODULE 1:  simple identifiers */
   
   x1 = 1.0;
//               <must be written>: x2 x3 x4
   x2 = x3 = x4 = -1.0;
//               <may be read    >: t x1 x2 x3 x4
//               <may be written >: x1 x2 x3 x4
//               <must be read   >: n1
//               <must be written>: i

   for(i = 1; i <= n1; i += 1) {
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x1
      x1 = (x1+x2+x3-x4)*t;
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x2
      x2 = (x1+x2-x3-x4)*t;
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x3
      x3 = (x1-x2+x3+x4)*t;
//               <must be read   >: n1 t x1 x2 x3 x4
//               <must be written>: x4
      x4 = (-x1+x2+x3+x4)*t;
   }
//               <must be written>: e1[0]
   
   
   
   
   
   /* MODULE 2:  array elements */
   
   e1[0] = 1.0;
//               <must be written>: e1[1] e1[2] e1[3]
   e1[1] = e1[2] = e1[3] = -1.0;
//               <may be read    >: e1[0] e1[1] e1[2] e1[3] t
//               <may be written >: e1[0] e1[1] e1[2] e1[3]
//               <must be read   >: n2
//               <must be written>: i

   for(i = 1; i <= n2; i += 1) {
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[0]
      e1[0] = (e1[0]+e1[1]+e1[2]-e1[3])*t;
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[1]
      e1[1] = (e1[0]+e1[1]-e1[2]+e1[3])*t;
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[2]
      e1[2] = (e1[0]-e1[1]+e1[2]+e1[3])*t;
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n2 t
//               <must be written>: e1[3]
      e1[3] = (-e1[0]+e1[1]+e1[2]+e1[3])*t;
   }
//               <may be read    >: e1[0] e1[1] e1[2] e1[3] t t2
//               <may be written >: e1[0] e1[1] e1[2] e1[3]
//               <must be read   >: n3
//               <must be written>: i
   
   
   
   
   /* MODULE 3:  array as parameter */
   
   for(i = 1; i <= n3; i += 1)
//               <may be read    >: t t2
//               <must be read   >: e1[0] e1[1] e1[2] e1[3] n3
//               <must be written>: e1[0] e1[1] e1[2] e1[3]
      pa(e1);
//               <must be written>: j
   
   
   
   
   /* MODULE 4:  conditional jumps */
   
   j = 1;
//               <may be read    >: j
//               <may be written >: j
//               <must be read   >: n4
//               <must be written>: i
   for(i = 1; i <= n4; i += 1) {
//               <must be read   >: j n4
//               <must be written>: j
      if (j==1)
//               <must be read   >: n4
//               <must be written>: j
         j = 2;
      else
//               <must be read   >: n4
//               <must be written>: j
         j = 3;
//               <must be read   >: j n4
//               <must be written>: j

      if (j>2)
//               <must be read   >: n4
//               <must be written>: j
         j = 0;
      else
//               <must be read   >: n4
//               <must be written>: j
         j = 1;
//               <must be read   >: j n4
//               <must be written>: j

      if (j<1)
//               <must be read   >: n4
//               <must be written>: j
         j = 1;
      else
//               <must be read   >: n4
//               <must be written>: j
         j = 0;
   }
//               <must be written>: j
   
   
   
   
   /* MODULE 5:  omitted */
   
   /* MODULE 6:  integer arithmetic */
   
   j = 1;
//               <must be written>: k
   k = 2;
//               <must be written>: l
   l = 3;
//               <may be read    >: j k l
//               <may be written >: e1[*] j k l
//               <must be read   >: n6
//               <must be written>: i

   for(i = 1; i <= n6; i += 1) {
//               <must be read   >: j k l n6
//               <must be written>: j
      j = j*(k-j)*(l-k);
//               <must be read   >: j k l n6
//               <must be written>: k
      k = l*k-(l-j)*k;
//               <must be read   >: j k l n6
//               <must be written>: l
      l = (l-k)*(k+j);
//               <may be written >: e1[*]
//               <must be read   >: j k l n6

      e1[l-2] = j+k+l;
//               <may be written >: e1[*]
//               <must be read   >: j k l n6
      /* C arrays are zero based */
      e1[k-2] = j*k*l;
   }
//               <must be written>: x y
   
   
   
   
   /* MODULE 7:  trig. functions */
   
   x = y = 0.5;
//               <may be read    >: t t2 x y
//               <may be written >: x y
//               <must be read   >: n7
//               <must be written>: i

   for(i = 1; i <= n7; i += 1) {
//               <must be read   >: n7 t t2 x y
//               <must be written>: x
      x = t*atan(t2*sin(x)*cos(x)/(cos(x+y)+cos(x-y)-1.0));
//               <must be read   >: n7 t t2 x y
//               <must be written>: y
      y = t*atan(t2*sin(y)*cos(y)/(cos(x+y)+cos(x-y)-1.0));
   }
//               <must be written>: x y z
   
   
   
   
   /* MODULE 8:  procedure calls */
   
   x = y = z = 1.0;
//               <may be read    >: t t2 x y
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: n8

   for(i = 1; i <= n8; i += 1)
//               <may be written >: *ANY_MODULE*:*ANYWHERE*
//               <must be read   >: n8 t t2 x y
      // FI: to avoid problemes raised by an *anywhere* effect
      //created by this call site, comment it out
      p3(x, y, &z);
//               <must be written>: j
   
   
   
   
   /* MODULE9:  array references */
   
   j = 1;
//               <must be written>: k
   k = 2;
//               <must be written>: l
   l = 3;
//               <must be written>: e1[0]

   e1[0] = 1.0;
//               <must be written>: e1[1]
   e1[1] = 2.0;
//               <must be written>: e1[2]
   e1[2] = 3.0;
//               <may be read    >: e1[*] j k l
//               <may be written >: e1[*]
//               <must be read   >: n9
//               <must be written>: i

   for(i = 1; i <= n9; i += 1)
//               <may be read    >: e1[*]
//               <may be written >: e1[*]
//               <must be read   >: j k l n9
      p0();
//               <must be written>: j
   
   
   
   
   /* MODULE10:  integer arithmetic */
   
   j = 2;
//               <must be written>: k
   k = 3;
//               <may be read    >: j k
//               <may be written >: j k
//               <must be read   >: n10
//               <must be written>: i

   for(i = 1; i <= n10; i += 1) {
//               <must be read   >: j k n10
//               <must be written>: j
      j = j+k;
//               <must be read   >: j k n10
//               <must be written>: k
      k = j+k;
//               <must be read   >: j k n10
//               <must be written>: j
      j = k-j;
//               <must be read   >: j k n10
//               <must be written>: k
      k = k-j-j;
   }
//               <must be written>: x
   
   
   
   
   /* MODULE11:  standard functions */
   
   x = 0.75;
//               <may be read    >: t1 x
//               <may be written >: x
//               <must be read   >: n11
//               <must be written>: i
   for(i = 1; i <= n11; i += 1)
//               <must be read   >: n11 t1 x
//               <must be written>: x
      x = sqrt(exp(log(x)/t1));
}

"main" file with transformers


//  T(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j+k==5, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

int main()
{

//  T() {}

   
   /* initialize constants */
   
   t = 0.499975;

//  T() {}

   t1 = 0.50025;

//  T() {}

   t2 = 2.0;

//  T(n1) {n1==0}

   
   /* set values of module weights */
   
   n1 = 0*100000;

//  T(n2) {n2==1200000}

   n2 = 12*100000;

//  T(n3) {n3==1400000}

   n3 = 14*100000;

//  T(n4) {n4==34500000}

   n4 = 345*100000;

//  T(n6) {n6==21000000}

   n6 = 210*100000;

//  T(n7) {n7==3200000}

   n7 = 32*100000;

//  T(n8) {n8==89900000}

   n8 = 899*100000;

//  T(n9) {n9==61600000}

   n9 = 616*100000;

//  T(n10) {n10==0}

   n10 = 0*100000;

//  T(n11) {n11==9300000}

   n11 = 93*100000;

//  T() {}

   
   /* MODULE 1:  simple identifiers */
   
   x1 = 1.0;

//  T() {}

   x2 = x3 = x4 = -1.0;

//  T() {}


   for(i = 1; i <= n1; i += 1) {

//  T() {}

      x1 = (x1+x2+x3-x4)*t;

//  T() {}

      x2 = (x1+x2-x3-x4)*t;

//  T() {}

      x3 = (x1-x2+x3+x4)*t;

//  T() {}

      x4 = (-x1+x2+x3+x4)*t;
   }

//  T() {}

   
   
   
   
   
   /* MODULE 2:  array elements */
   
   e1[0] = 1.0;

//  T() {}

   e1[1] = e1[2] = e1[3] = -1.0;

//  T() {}


   for(i = 1; i <= n2; i += 1) {

//  T() {}

      e1[0] = (e1[0]+e1[1]+e1[2]-e1[3])*t;

//  T() {}

      e1[1] = (e1[0]+e1[1]-e1[2]+e1[3])*t;

//  T() {}

      e1[2] = (e1[0]-e1[1]+e1[2]+e1[3])*t;

//  T() {}

      e1[3] = (-e1[0]+e1[1]+e1[2]+e1[3])*t;
   }

//  T() {}

   
   
   
   
   /* MODULE 3:  array as parameter */
   
   for(i = 1; i <= n3; i += 1)

//  T() {}

      pa(e1);

//  T(j) {j==1}

   
   
   
   
   /* MODULE 4:  conditional jumps */
   
   j = 1;

//  T(j) {}

   for(i = 1; i <= n4; i += 1) {

//  T(j) {2<=j, j<=3}

      if (j==1)

//  T(j) {j==2}

         j = 2;
      else

//  T(j) {j==3}

         j = 3;

//  T(j) {0<=j, j<=1}


      if (j>2)

//  T(j) {j==0}

         j = 0;
      else

//  T(j) {j==1}

         j = 1;

//  T(j) {0<=j, j<=1}


      if (j<1)

//  T(j) {j==1}

         j = 1;
      else

//  T(j) {j==0}

         j = 0;
   }

//  T(j) {j==1}

   
   
   
   
   /* MODULE 5:  omitted */
   
   /* MODULE 6:  integer arithmetic */
   
   j = 1;

//  T(k) {k==2}

   k = 2;

//  T(l) {l==3}

   l = 3;

//  T(j,k,l) {}


   for(i = 1; i <= n6; i += 1) {

//  T(j) {}

      j = j*(k-j)*(l-k);

//  T(k) {}

      k = l*k-(l-j)*k;

//  T(l) {}

      l = (l-k)*(k+j);

//  T() {}


      e1[l-2] = j+k+l;

//  T() {}

      /* C arrays are zero based */
      e1[k-2] = j*k*l;
   }

//  T() {}

   
   
   
   
   /* MODULE 7:  trig. functions */
   
   x = y = 0.5;

//  T() {}


   for(i = 1; i <= n7; i += 1) {

//  T() {}

      x = t*atan(t2*sin(x)*cos(x)/(cos(x+y)+cos(x-y)-1.0));

//  T() {}

      y = t*atan(t2*sin(y)*cos(y)/(cos(x+y)+cos(x-y)-1.0));
   }

//  T() {}

   
   
   
   
   /* MODULE 8:  procedure calls */
   
   x = y = z = 1.0;

//  T() {}


   for(i = 1; i <= n8; i += 1)

//  T() {}

      // FI: to avoid problemes raised by an *anywhere* effect
      //created by this call site, comment it out
      p3(x, y, &z);

//  T(j) {j==1}

   
   
   
   
   /* MODULE9:  array references */
   
   j = 1;

//  T(k) {k==2}

   k = 2;

//  T(l) {l==3}

   l = 3;

//  T() {}


   e1[0] = 1.0;

//  T() {}

   e1[1] = 2.0;

//  T() {}

   e1[2] = 3.0;

//  T() {}


   for(i = 1; i <= n9; i += 1)

//  T() {}

      p0();

//  T(j) {j==2}

   
   
   
   
   /* MODULE10:  integer arithmetic */
   
   j = 2;

//  T(k) {k==3}

   k = 3;

//  T(j,k) {j+k==j#init+k#init}


   for(i = 1; i <= n10; i += 1) {

//  T(j) {j#init+k==j}

      j = j+k;

//  T(k) {j+k#init==k}

      k = j+k;

//  T(j) {j+j#init==k}

      j = k-j;

//  T(k) {2j+k==k#init}

      k = k-j-j;
   }

//  T() {}

   
   
   
   
   /* MODULE11:  standard functions */
   
   x = 0.75;

//  T() {}

   for(i = 1; i <= n11; i += 1)

//  T() {}

      x = sqrt(exp(log(x)/t1));
}

"main" file with preconditions


//  P() {}

int main()
{

//  P() {}

   
   /* initialize constants */
   
   t = 0.499975;

//  P() {}

   t1 = 0.50025;

//  P() {}

   t2 = 2.0;

//  P() {}

   
   /* set values of module weights */
   
   n1 = 0*100000;

//  P(n1) {n1==0}

   n2 = 12*100000;

//  P(n1,n2) {n1==0, n2==1200000}

   n3 = 14*100000;

//  P(n1,n2,n3) {n1==0, n2==1200000, n3==1400000}

   n4 = 345*100000;

//  P(n1,n2,n3,n4) {n1==0, n2==1200000, n3==1400000, n4==34500000}

   n6 = 210*100000;

//  P(n1,n2,n3,n4,n6) {n1==0, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000}

   n7 = 32*100000;

//  P(n1,n2,n3,n4,n6,n7) {n1==0, n2==1200000, n3==1400000,
//    n4==34500000, n6==21000000, n7==3200000}

   n8 = 899*100000;

//  P(n1,n2,n3,n4,n6,n7,n8) {n1==0, n2==1200000, n3==1400000,
//    n4==34500000, n6==21000000, n7==3200000, n8==89900000}

   n9 = 616*100000;

//  P(n1,n2,n3,n4,n6,n7,n8,n9) {n1==0, n2==1200000, n3==1400000,
//    n4==34500000, n6==21000000, n7==3200000, n8==89900000,
//    n9==61600000}

   n10 = 0*100000;

//  P(n1,n10,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n2==1200000,
//    n3==1400000, n4==34500000, n6==21000000, n7==3200000,
//    n8==89900000, n9==61600000}

   n11 = 93*100000;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

   
   /* MODULE 1:  simple identifiers */
   
   x1 = 1.0;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

   x2 = x3 = x4 = -1.0;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n1; i += 1) {

//  P() {0==-1}

      x1 = (x1+x2+x3-x4)*t;

//  P() {0==-1}

      x2 = (x1+x2-x3-x4)*t;

//  P() {0==-1}

      x3 = (x1-x2+x3+x4)*t;

//  P() {0==-1}

      x4 = (-x1+x2+x3+x4)*t;
   }

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   
   /* MODULE 2:  array elements */
   
   e1[0] = 1.0;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

   e1[1] = e1[2] = e1[3] = -1.0;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n2; i += 1) {

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

      e1[0] = (e1[0]+e1[1]+e1[2]-e1[3])*t;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

      e1[1] = (e1[0]+e1[1]-e1[2]+e1[3])*t;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

      e1[2] = (e1[0]-e1[1]+e1[2]+e1[3])*t;

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

      e1[3] = (-e1[0]+e1[1]+e1[2]+e1[3])*t;
   }

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE 3:  array as parameter */
   
   for(i = 1; i <= n3; i += 1)

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

      pa(e1);

//  P(n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE 4:  conditional jumps */
   
   j = 1;

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   for(i = 1; i <= n4; i += 1) {

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

      if (j==1)

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

         j = 2;
      else

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000}

         j = 3;

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000, 2<=j, j<=3}


      if (j>2)

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==3, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

         j = 0;
      else

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==2, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

         j = 1;

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000, 0<=j, j<=1}


      if (j<1)

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==0, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

         j = 1;
      else

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

         j = 0;
   }

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0, n11==9300000,
//    n2==1200000, n3==1400000, n4==34500000, n6==21000000,
//    n7==3200000, n8==89900000, n9==61600000, 0<=j, j<=1}

   
   
   
   
   /* MODULE 5:  omitted */
   
   /* MODULE 6:  integer arithmetic */
   
   j = 1;

//  P(j,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   k = 2;

//  P(j,k,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   l = 3;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n6; i += 1) {

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      j = j*(k-j)*(l-k);

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      k = l*k-(l-j)*k;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      l = (l-k)*(k+j);

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


      e1[l-2] = j+k+l;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      /* C arrays are zero based */
      e1[k-2] = j*k*l;
   }

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE 7:  trig. functions */
   
   x = y = 0.5;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n7; i += 1) {

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      x = t*atan(t2*sin(x)*cos(x)/(cos(x+y)+cos(x-y)-1.0));

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      y = t*atan(t2*sin(y)*cos(y)/(cos(x+y)+cos(x-y)-1.0));
   }

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE 8:  procedure calls */
   
   x = y = z = 1.0;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n8; i += 1)

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      // FI: to avoid problemes raised by an *anywhere* effect
      //created by this call site, comment it out
      p3(x, y, &z);

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE9:  array references */
   
   j = 1;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, n1==0, n10==0,
//    n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   k = 2;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   l = 3;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


   e1[0] = 1.0;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   e1[1] = 2.0;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   e1[2] = 3.0;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n9; i += 1)

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      p0();

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==1, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE10:  integer arithmetic */
   
   j = 2;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==2, k==2, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   k = 3;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==2, k==3, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}


   for(i = 1; i <= n10; i += 1) {

//  P() {0==-1}

      j = j+k;

//  P() {0==-1}

      k = j+k;

//  P() {0==-1}

      j = k-j;

//  P() {0==-1}

      k = k-j-j;
   }

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==2, k==3, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   
   
   
   
   /* MODULE11:  standard functions */
   
   x = 0.75;

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==2, k==3, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

   for(i = 1; i <= n11; i += 1)

//  P(j,k,l,n1,n10,n11,n2,n3,n4,n6,n7,n8,n9) {j==2, k==3, l==3, n1==0,
//    n10==0, n11==9300000, n2==1200000, n3==1400000, n4==34500000,
//    n6==21000000, n7==3200000, n8==89900000, n9==61600000}

      x = sqrt(exp(log(x)/t1));
}
after privatization
int main()
{
   
   /* initialize constants */
   
   t = 0.499975;
   t1 = 0.50025;
   t2 = 2.0;
   
   /* set values of module weights */
   
   n1 = 0*100000;
   n2 = 12*100000;
   n3 = 14*100000;
   n4 = 345*100000;
   n6 = 210*100000;
   n7 = 32*100000;
   n8 = 899*100000;
   n9 = 616*100000;
   n10 = 0*100000;
   n11 = 93*100000;
   
   /* MODULE 1:  simple identifiers */
   
   x1 = 1.0;
   x2 = x3 = x4 = -1.0;

#pragma omp parallel for 
   for(i = 1; i <= n1; i += 1) {
      x1 = (x1+x2+x3-x4)*t;
      x2 = (x1+x2-x3-x4)*t;
      x3 = (x1-x2+x3+x4)*t;
      x4 = (-x1+x2+x3+x4)*t;
   }
   
   
   
   
   
   /* MODULE 2:  array elements */
   
   e1[0] = 1.0;
   e1[1] = e1[2] = e1[3] = -1.0;

   for(i = 1; i <= n2; i += 1) {
      e1[0] = (e1[0]+e1[1]+e1[2]-e1[3])*t;
      e1[1] = (e1[0]+e1[1]-e1[2]+e1[3])*t;
      e1[2] = (e1[0]-e1[1]+e1[2]+e1[3])*t;
      e1[3] = (-e1[0]+e1[1]+e1[2]+e1[3])*t;
   }
   
   
   
   
   /* MODULE 3:  array as parameter */
   
   for(i = 1; i <= n3; i += 1)
      pa(e1);
   
   
   
   
   /* MODULE 4:  conditional jumps */
   
   j = 1;
   for(i = 1; i <= n4; i += 1) {
      if (j==1)
         j = 2;
      else
         j = 3;

      if (j>2)
         j = 0;
      else
         j = 1;

      if (j<1)
         j = 1;
      else
         j = 0;
   }
   
   
   
   
   /* MODULE 5:  omitted */
   
   /* MODULE 6:  integer arithmetic */
   
   j = 1;
   k = 2;
   l = 3;

   for(i = 1; i <= n6; i += 1) {
      j = j*(k-j)*(l-k);
      k = l*k-(l-j)*k;
      l = (l-k)*(k+j);

      e1[l-2] = j+k+l;
      /* C arrays are zero based */
      e1[k-2] = j*k*l;
   }
   
   
   
   
   /* MODULE 7:  trig. functions */
   
   x = y = 0.5;

   for(i = 1; i <= n7; i += 1) {
      x = t*atan(t2*sin(x)*cos(x)/(cos(x+y)+cos(x-y)-1.0));
      y = t*atan(t2*sin(y)*cos(y)/(cos(x+y)+cos(x-y)-1.0));
   }
   
   
   
   
   /* MODULE 8:  procedure calls */
   
   x = y = z = 1.0;

   for(i = 1; i <= n8; i += 1)
      // FI: to avoid problemes raised by an *anywhere* effect
      //created by this call site, comment it out
      p3(x, y, &z);
   
   
   
   
   /* MODULE9:  array references */
   
   j = 1;
   k = 2;
   l = 3;

   e1[0] = 1.0;
   e1[1] = 2.0;
   e1[2] = 3.0;

   for(i = 1; i <= n9; i += 1)
      p0();
   
   
   
   
   /* MODULE10:  integer arithmetic */
   
   j = 2;
   k = 3;

#pragma omp parallel for 
   for(i = 1; i <= n10; i += 1) {
      j = j+k;
      k = j+k;
      j = k-j;
      k = k-j-j;
   }
   
   
   
   
   /* MODULE11:  standard functions */
   
   x = 0.75;
   for(i = 1; i <= n11; i += 1)
      x = sqrt(exp(log(x)/t1));
}
