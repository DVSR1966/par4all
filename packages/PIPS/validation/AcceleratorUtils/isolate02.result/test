original code
void P4A_accel_free(void **ptr)
{
   free(*ptr);
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   *ptr = malloc(n);
}
void * P4A_copy_from_accel(void *dest, const void *src, size_t n)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      ((char *) dest)[i] = ((const char *) src)[i];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t n)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      ((char *) dest)[i] = ((const char *) src)[i];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t n)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      ((char *) dest)[i] = ((const char *) src)[i];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t n)
{
   size_t i;
   for(i = 0; i <= n-1; i += 1)
      ((char *) dest)[i] = ((const char *) src)[i];
   return dest;
}
void lonesome_cowboy()
{
   int i, a[12];
   for(i = 0; i <= 11; i += 1)
      a[i] = 1;
isolate:
   for(i = 1; i <= 10; i += 1)
      a[i] = 0;
   for(i = 0; i <= 11; i += 1)
      printf("%d", a[i]);
}
int main()
{
   lonesome_cowboy();
}
isolated code
void lonesome_cowboy()
{
   int i, a[12];
   //PIPS generated variable
   int i0;
   for(i = 0; i <= 11; i += 1)
      a[i] = 1;
   {
      //PIPS generated variable
      int a0[10];
      ;

isolate:
      for(i = 1; i <= 10; i += 1)
         a0[i-1] = 0;
      /* transfer loop generated by PIPS from a0 to a */
      for(i0 = 0; i0 <= 9; i0 += 1)
         a[1+i0] = a0[i0];
   }
   for(i = 0; i <= 11; i += 1)
      printf("%d", a[i]);
}
ok

