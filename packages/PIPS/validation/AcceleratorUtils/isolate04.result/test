original code
void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void * P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(l = 0; l <= size-1; l += 1)
         cdest[(i+d1_offset)*size+l] = csrc[i*size+l];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(j = 0; j <= d2_block_length-1; j += 1)
         for(l = 0; l <= size-1; l += 1)
            cdest[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l] = csrc[i*size*d2_block_length+j*size+l];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(l = 0; l <= size-1; l += 1)
         cdest[i*size+l] = csrc[(i+d1_offset)*size+l];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(j = 0; j <= d2_block_length-1; j += 1)
         for(l = 0; l <= size-1; l += 1)
            cdest[i*size*d2_block_length+j*size+l] = csrc[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l];
   return dest;
}
void lonesome_cowboy()
{
   int i, j, n = 12;
   int a[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 0;
   for(i = 1; i <= n-1-1; i += 1)
isolate:
      for(j = 1; j <= n-1-1; j += 1)
         a[i][j] = 1;
   j = 0;
   /* compute trace */
   for(i = 0; i <= n-1; i += 1)
      j += a[i][i];
   printf("%d", j);
}
int main()
{
   lonesome_cowboy();
   return 0;
}
isolated code
void lonesome_cowboy()
{
   int i, j, n = 12;
   int a[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 0;
   for(i = 1; i <= n-1-1; i += 1) {
      //PIPS generated variable
      int (*a0)[1][10] = (int (*)[1][10]) 0;
      P4A_accel_malloc((void **) &a0, sizeof(int)*10);

isolate:
      for(j = 1; j <= n-1-1; j += 1)
         (*a0)[i-i][j-1] = 1;
      P4A_copy_from_accel2d(&a[0][0], *a0, sizeof(int), n, n, i, 1, 1, 10);
      P4A_accel_free((void **) &a0);
   }
   j = 0;
   /* compute trace */
   for(i = 0; i <= n-1; i += 1)
      j += a[i][i];
   printf("%d", j);
}

