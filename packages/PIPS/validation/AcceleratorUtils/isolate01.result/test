original code
void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void * P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(l = 0; l <= size-1; l += 1)
         cdest[(i+d1_offset)*size+l] = csrc[i*size+l];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(j = 0; j <= d2_block_length-1; j += 1)
         for(l = 0; l <= size-1; l += 1)
            cdest[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l] = csrc[i*size*d2_block_length+j*size+l];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(l = 0; l <= size-1; l += 1)
         cdest[i*size+l] = csrc[(i+d1_offset)*size+l];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(j = 0; j <= d2_block_length-1; j += 1)
         for(l = 0; l <= size-1; l += 1)
            cdest[i*size*d2_block_length+j*size+l] = csrc[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l];
   return dest;
}
void alphablending(short src0[4][4], short src1[4][4], short result[4][4])
{
   unsigned int i, j;
   for(i = 0; i <= 3; i += 1)
      for(j = 0; j <= 3; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
int main(int argc, char *argv[])
{
   short a[4][4], b[4][4], c[4][4];
   int i, j;
   for(i = 0; i <= 3; i += 1)
      for(j = 0; j <= 3; j += 1)
         a[i][j] = b[i][j] = i*j;
   alphablending(a, b, c);
   for(i = 0; i <= 3; i += 1) {
      for(j = 0; j <= 3; j += 1)
         printf("%hd ", c[i][j]);
      puts("\n");
   }
   return 0;
}
tiled code
void alphablending(short src0[4][4], short src1[4][4], short result[4][4])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
l99998:
   for(i_t = 0; i_t <= 1; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 1; j_t += 1)
l99996:
         for(i = 2*i_t; i <= 2*i_t+1; i += 1)
l99997:
            for(j = 2*j_t; j <= 2*j_t+1; j += 1)
               result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
with r-w regions

//  <result[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3}>
//  <src0[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3}>
//  <src1[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3}>

void alphablending(short src0[4][4], short src1[4][4], short result[4][4])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;

//  <result[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3}>
//  <src0[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3}>
//  <src1[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3}>

l99998:
   for(i_t = 0; i_t <= 1; i_t += 1)

//  <result[PHI1][PHI2]-W-MAY-{2i_t<=PHI1, PHI1<=2i_t+1, 0<=PHI2,
//    PHI2<=3, 0<=i_t, i_t<=1}>
//  <src0[PHI1][PHI2]-R-MAY-{2i_t<=PHI1, PHI1<=2i_t+1, 0<=PHI2,
//    PHI2<=3, 0<=i_t, i_t<=1}>
//  <src1[PHI1][PHI2]-R-MAY-{2i_t<=PHI1, PHI1<=2i_t+1, 0<=PHI2,
//    PHI2<=3, 0<=i_t, i_t<=1}>

l99995:
      for(j_t = 0; j_t <= 1; j_t += 1)

//  <result[PHI1][PHI2]-W-MAY-{2i_t<=PHI1, PHI1<=2i_t+1, 2j_t<=PHI2,
//    PHI2<=2j_t+1, 0<=i_t, i_t<=1, 0<=j_t, j_t<=1}>
//  <src0[PHI1][PHI2]-R-MAY-{2i_t<=PHI1, PHI1<=2i_t+1, 2j_t<=PHI2,
//    PHI2<=2j_t+1, 0<=i_t, i_t<=1, 0<=j_t, j_t<=1}>
//  <src1[PHI1][PHI2]-R-MAY-{2i_t<=PHI1, PHI1<=2i_t+1, 2j_t<=PHI2,
//    PHI2<=2j_t+1, 0<=i_t, i_t<=1, 0<=j_t, j_t<=1}>

l99996:
         for(i = 2*i_t; i <= 2*i_t+1; i += 1)

//  <result[PHI1][PHI2]-W-MAY-{PHI1==i, 2j_t<=PHI2, PHI2<=2j_t+1,
//    2i_t<=i, i<=2i_t+1, 0<=i_t, i_t<=1, 0<=j_t, j_t<=1}>
//  <src0[PHI1][PHI2]-R-MAY-{PHI1==i, 2j_t<=PHI2, PHI2<=2j_t+1,
//    2i_t<=i, i<=2i_t+1, 0<=i_t, i_t<=1, 0<=j_t, j_t<=1}>
//  <src1[PHI1][PHI2]-R-MAY-{PHI1==i, 2j_t<=PHI2, PHI2<=2j_t+1,
//    2i_t<=i, i<=2i_t+1, 0<=i_t, i_t<=1, 0<=j_t, j_t<=1}>

l99997:
            for(j = 2*j_t; j <= 2*j_t+1; j += 1)

//  <result[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 2i_t<=i, i<=2i_t+1,
//    0<=i_t, i_t<=1, 2j_t<=j, j<=2j_t+1, 0<=j_t, j_t<=1}>
//  <src0[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 2i_t<=i, i<=2i_t+1,
//    0<=i_t, i_t<=1, 2j_t<=j, j<=2j_t+1, 0<=j_t, j_t<=1}>
//  <src1[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 2i_t<=i, i<=2i_t+1,
//    0<=i_t, i_t<=1, 2j_t<=j, j<=2j_t+1, 0<=j_t, j_t<=1}>

               result[i][j] = (40*src0[i][j]+60*src1[i][j])/100;
}
isolated code
void alphablending(short src0[4][4], short src1[4][4], short result[4][4])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int i_t, j_t;
l99998:
   for(i_t = 0; i_t <= 1; i_t += 1)
l99995:
      for(j_t = 0; j_t <= 1; j_t += 1) {
         //PIPS generated variable
         short (*src10)[2][2] = (short (*)[2][2]) 0, (*src00)[2][2] = (short (*)[2][2]) 0, (*result0)[2][2] = (short (*)[2][2]) 0;
         P4A_accel_malloc((void **) &result0, sizeof(short)*4);
         P4A_accel_malloc((void **) &src00, sizeof(short)*4);
         P4A_accel_malloc((void **) &src10, sizeof(short)*4);
         P4A_copy_to_accel2d(*src00, &src0[0][0], sizeof(short), 4, 4, 2*i_t, 2*j_t, 2, 2);
         P4A_copy_to_accel2d(*src10, &src1[0][0], sizeof(short), 4, 4, 2*i_t, 2*j_t, 2, 2);

l99996:
         for(i = 2*i_t; i <= 2*i_t+1; i += 1)
l99997:
            for(j = 2*j_t; j <= 2*j_t+1; j += 1)
               (*result0)[i-2*i_t][j-2*j_t] = (40*(*src00)[i-2*i_t][j-2*j_t]+60*(*src10)[i-2*i_t][j-2*j_t])/100;
         P4A_copy_from_accel2d(&result[0][0], *result0, sizeof(short), 4, 4, 2*i_t, 2*j_t, 2, 2);
         P4A_accel_free((void **) &result0);
         P4A_accel_free((void **) &src00);
         P4A_accel_free((void **) &src10);
      }
}

