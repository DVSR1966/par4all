delete acca-example02

setproperty ABORT_ON_USER_ERROR TRUE
setproperty MEMORY_EFFECTS_ONLY FALSE

create acca-example02 acca-example02.c

echo // DISPLAY compute FUNCTION
echo
display PRINTED_FILE[compute]

echo // DISPLAY main FUNCTION
echo
# display main function
display PRINTED_FILE[main]

echo // FUNCTION compute WITH PRECONDITIONS
echo 

activate PRINT_CODE_PRECONDITIONS
setproperty PRETTYPRINT_ANALYSES_WITH_LF FALSE
setproperty SEMANTICS_FILTERED_PRECONDITIONS TRUE

display PRINTED_FILE[compute]

echo // FUNCTION main WITH PRECONDITIONS
echo
display PRINTED_FILE[main]

echo // FUNCTION init_parameter WITH TRANSFORMERS
echo
activate PRINT_CODE_TRANSFORMERS
setproperty PRETTYPRINT_ANALYSES_WITH_LF FALSE
setproperty SEMANTICS_FILTERED_PRECONDITIONS TRUE

display PRINTED_FILE[init_parameter]

# Discard the useless test
echo // FUNCTION compute AFTER DISARDING THE USELESS TEST
echo

apply SUPPRESS_DEAD_CODE[compute]
activate PRINT_CODE
display PRINTED_FILE[compute]

echo // FUNCTION compute REMOVING RECURSIVE DEFINITION OF k
echo
# Remove recursive definition of k
# FI->MA: but the uses of k are not replaced by its definition:-(
apply INDUCTION_SUBSTITUTION[compute]

activate PRINT_CODE
display PRINTED_FILE[compute]

# Clean up the new definition of k
echo // FUNCTION compute AFTER CLEANING UP THE NEW DEFINITION OF k
echo
apply PARTIAL_EVAL[compute]

activate PRINT_CODE
display PRINTED_FILE[compute]

echo // PARALLELIZED FUNCTION compute
echo
# Look at the available parallelism

activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

echo // FUNCTION compute WITH SCALAR PRIVATIZATION
echo
# Go fo scalar privatixation

apply PRIVATIZE_MODULE[compute]
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

echo // FUNCTION compute WITH ARRAY REGIONS
echo
activate MUST_REGIONS

setproperty PRETTYPRINT_BLOCKS TRUE
activate PRINT_CODE_IN_REGIONS
display PRINTED_FILE[compute]

echo // FUNCTION compute WITH TRANSFORMERS
echo
setproperty PRETTYPRINT_BLOCKS FALSE

activate PRINT_CODE_TRANSFORMERS
setproperty PRETTYPRINT_BLOCKS TRUE
display PRINTED_FILE[compute]

echo // FUNCTION compute WITH SCALAR REGIONS
echo 
setproperty PRETTYPRINT_BLOCKS FALSE

activate PRINT_CODE_OUT_REGIONS
setproperty PRETTYPRINT_SCALAR_REGIONS TRUE
setproperty PRETTYPRINT_BLOCKS TRUE
display PRINTED_FILE[compute]

echo // PARALLELIZED FUNCTION compute WITH ARRAY PRIVATIZATION
echo
setproperty PRETTYPRINT_BLOCKS FALSE

apply ARRAY_PRIVATIZER[compute]
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

echo // PARALLELIZED FUNCTION compute WITH SCALARIZATION
echo
apply SCALARIZATION[compute] 
apply PRIVATIZE_MODULE[compute]
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

echo // FUNCTION compute AFTER SPURIOUS LOOP REMOVAL
echo
# Let's get rid of the spurious loop
activate PRINT_CODE_OUT_REGIONS
setproperty PRETTYPRINT_SCALAR_REGIONS TRUE
display PRINTED_FILE[compute]

echo // FUNCTION compute AFTER DEAD CODE ELIMINATION
echo
apply DEAD_CODE_ELIMINATION[compute]
activate PRINT_CODE
display PRINTED_FILE[compute]

echo // PARALLELIZED FUNCTION compute
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

close
open acca-example02

apply INTERNALIZE_PARALLEL_CODE[compute]
activate PRINT_CODE

close

quit
