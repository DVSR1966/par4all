void matrix_mul_matrix(size_t N, float C[N][N], float A[N][N], float B[N][N])
{
   size_t i, j, k;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= N-1; k += 1)
            C[i][j] += A[i][k]*B[k][j];
      }
}
void matrix_mul_matrix(size_t N, float C[N][N], float A[N][N], float B[N][N])
{
   size_t i, j;
   //PIPS generated variable
   int LU_IND0;
   //PIPS generated variable
   float RED0[1], RED1[4], F_04;
   //PIPS generated variable
   int LU_IB00, LU_NUB00;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         LU_NUB00 = N;
         RED0[0] = 0.000000;
         LU_IB00 = MOD(LU_NUB00, 4);
         for(LU_IND0 = 0; LU_IND0 <= LU_IB00-1; LU_IND0 += 1) {
            F_04 = A[i][LU_IND0]*B[LU_IND0][j];
            RED0[0] = RED0[0]+F_04;
         }
         C[i][j] = RED0[0]+C[i][j];
         RED1[0] = 0.000000;
         RED1[1] = 0.000000;
         RED1[2] = 0.000000;
         RED1[3] = 0.000000;
         SIMD_LOAD_V4SF(vec30_0, &RED1[0]);
         for(LU_IND0 = LU_IB00; LU_IND0 <= LU_NUB00-1; LU_IND0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_GENERIC_V4SF(vec20_0, B[LU_IND0][j], B[1+LU_IND0][j], B[2+LU_IND0][j], B[3+LU_IND0][j]);
            SIMD_LOAD_V4SF(vec10_0, &A[i][LU_IND0]);
            SIMD_MULPS(vec00_0, vec10_0, vec20_0);
            SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
         }
         SIMD_STORE_V4SF(vec30_0, &RED1[0]);
         C[i][j] = RED1[3]+RED1[2]+RED1[1]+RED1[0]+C[i][j];
      }
   ;
}
