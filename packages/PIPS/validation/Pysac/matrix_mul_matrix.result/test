void matrix_mul_matrix(size_t N, float C[N][N], float A[N][N], float B[N][N])
{
   size_t i, j, k;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= N-1; k += 1)
            C[i][j] += A[i][k]*B[k][j];
      }
}
void matrix_mul_matrix(size_t N, float C[N][N], float A[N][N], float B[N][N])
{
   size_t j, k;
   //PIPS generated variable
   float F_0, RED0[4], RED1[1];
   //PIPS generated variable
   size_t i0, k0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0;
   for(i0 = 0; i0 <= N-1; i0 += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i0][j] = 0;
         RED0[0] = 0.000000;
         RED0[1] = 0.000000;
         RED0[2] = 0.000000;
         RED0[3] = 0.000000;
         SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
         for(k0 = 0; k0 <= 4*(N/4)-1; k0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_GENERIC_V4SF(vec20_0, B[k0][j], B[1+k0][j], B[2+k0][j], B[3+k0][j]);
            SIMD_LOAD_V4SF(vec10_0, &A[i0][k0]);
            SIMD_MULPS(vec00_0, vec10_0, vec20_0);
            SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
         }
         SIMD_STORE_V4SF(vec30_0, &RED0[0]);
         C[i0][j] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+C[i0][j];
         RED1[0] = 0.000000;
         for(k = 4*(N/4); k <= N-1; k += 1) {
            F_0 = A[i0][k]*B[k][j];
            RED1[0] = RED1[0]+F_0;
         }
         C[i0][j] = RED1[0]+C[i0][j];
      }
   ;
}
