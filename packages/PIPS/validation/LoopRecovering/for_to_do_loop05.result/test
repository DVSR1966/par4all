void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;                                                               /*0003*/
   int j;                                                               /*0004*/
   int ki;                                                              /*0005*/
   int kj;                                                              /*0006*/

   for (i = 0;i<isi;i++)                                                /*0008*/
      for (j = 0;j<isj;j++)                                             /*0009*/
         new_image[i][j] = image[i][j];                                 /*0010*/
}

After for to do loop conversion

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;                                                               /*0003*/
   int j;                                                               /*0004*/
   int ki;                                                              /*0005*/
   int kj;                                                              /*0006*/

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];                                 /*0010*/
}

Proper effects for "convol"

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;                                                               /*0003*/
   int j;                                                               /*0004*/
   int ki;                                                              /*0005*/
   int kj;                                                              /*0006*/
//               <must be read   >: isi
//               <must be written>: i

   for(i = 0; i <= isi-1; i += 1)
//               <must be read   >: isi isj
//               <must be written>: j
      for(j = 0; j <= isj-1; j += 1)
//               <must be read   >: i image[i][j] isi isj j
//               <must be written>: new_image[i][j]
         new_image[i][j] = image[i][j];                                 /*0010*/
}

Cumulated effects for "convol"

//               <may be read    >: image[*][*]
//               <may be written >: new_image[*][*]
//               <must be read   >: isi isj ksi ksj
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;                                                               /*0003*/
   int j;                                                               /*0004*/
   int ki;                                                              /*0005*/
   int kj;                                                              /*0006*/
//               <may be read    >: i image[*][*] isj j
//               <may be written >: j new_image[*][*]
//               <must be read   >: isi
//               <must be written>: i

   for(i = 0; i <= isi-1; i += 1)
//               <may be read    >: i image[*][*] j
//               <may be written >: new_image[*][*]
//               <must be read   >: isi isj
//               <must be written>: j
      for(j = 0; j <= isj-1; j += 1)
//               <may be read    >: image[*][*]
//               <may be written >: new_image[*][*]
//               <must be read   >: i isi isj j
         new_image[i][j] = image[i][j];                                 /*0010*/
}

Transformers for "convol"


//  T() {}

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{

//  T(i) {}

   int i;                                                               /*0003*/

//  T(j) {}

   int j;                                                               /*0004*/

//  T(ki) {}

   int ki;                                                              /*0005*/

//  T(kj) {}

   int kj;                                                              /*0006*/

//  T(i,j) {0<=i}


   for(i = 0; i <= isi-1; i += 1)

//  T(j) {0<=i, i+1<=isi, 0<=j}

      for(j = 0; j <= isj-1; j += 1)

//  T() {0<=i, i+1<=isi, j+1<=isj, 0<=j}

         new_image[i][j] = image[i][j];                                 /*0010*/
}

Preconditions for "convol"


//  P() {}

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{

//  P() {}

   int i;                                                               /*0003*/

//  P(i) {}

   int j;                                                               /*0004*/

//  P(i,j) {}

   int ki;                                                              /*0005*/

//  P(i,j,ki) {}

   int kj;                                                              /*0006*/

//  P(i,j,ki,kj) {}


   for(i = 0; i <= isi-1; i += 1)

//  P(i,j,ki,kj) {0<=i, i+1<=isi}

      for(j = 0; j <= isj-1; j += 1)

//  P(i,j,ki,kj) {0<=i, i+1<=isi, j+1<=isj, 0<=j}

         new_image[i][j] = image[i][j];                                 /*0010*/
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   int i;                                                               /*0003*/
   int j;                                                               /*0004*/
   int ki;                                                              /*0005*/
   int kj;                                                              /*0006*/


#pragma omp parallel for 
   for(i = 0; i <= isi-1; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];                                 /*0010*/
}
