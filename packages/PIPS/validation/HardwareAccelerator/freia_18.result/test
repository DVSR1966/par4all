#
# SPOC
#

! initial function

freia_status freia_18(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   
   
   
   freia_data2d *u0 = freia_common_create_data(16, 128, 128), *u1 = freia_common_create_data(16, 128, 128), *u2 = freia_common_create_data(16, 128, 128), *u3 = freia_common_create_data(16, 128, 128), *t0 = freia_common_create_data(16, 128, 128);       /*0011*/
   
   // useless computations
   // u0 = i0 + i1
   // u1 = u0
   // u2 = u1 - i0
   // t0 = i0 & i1
   // o = t0 ^ i1
   // u3 = o | i1
   freia_aipo_add(u0, i0, i1);                                          /*0020*/
   freia_aipo_copy(u1, u0);                                             /*0021*/
   freia_aipo_sub(u2, u1, i0);                                          /*0022*/
   freia_aipo_and(t0, i0, i1);                                          /*0023*/
   freia_aipo_xor(o, t0, i1);                                           /*0024*/
   freia_aipo_or(u3, o, i1);                                            /*0025*/

   freia_common_destruct_data(u0);                                      /*0027*/
   freia_common_destruct_data(u1);                                      /*0028*/
   freia_common_destruct_data(u2);                                      /*0029*/
   freia_common_destruct_data(u3);                                      /*0030*/
   freia_common_destruct_data(t0);                                      /*0031*/

   return FREIA_OK;                                                     /*0033*/
}

! graphs

// graph for dag "dag_0" of module "freia_18" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "u2" [shape=circle];
  "o" [shape=circle];
  "u3" [shape=circle];

  // computation vertices
  "25 |" [shape=trapezium,orientation=270];
  "25 |" -> "u3";
  "24 ^" [shape=trapezium,orientation=270];
  "24 ^" -> "25 |" [label="o"];
  "24 ^" -> "o";
  "23 &" [shape=trapezium,orientation=270];
  "23 &" -> "24 ^" [label="t0"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "u2";
  "21 =" [shape=circle];
  "21 =" -> "22 -" [label="u1"];
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 =" [label="u0"];
  "i1" -> "25 |";
  "i1" -> "24 ^";
  "i1" -> "23 &";
  "i1" -> "20 +";
  "i0" -> "23 &";
  "i0" -> "22 -";
  "i0" -> "20 +";
}
// graph for dag "dag_cleaned_0" of module "freia_18" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "u2" [shape=circle];
  "o" [shape=circle];
  "u3" [shape=circle];

  // computation vertices
  "25 |" [shape=trapezium,orientation=270];
  "25 |" -> "u3";
  "24 ^" [shape=trapezium,orientation=270];
  "24 ^" -> "25 |" [label="o"];
  "24 ^" -> "o";
  "23 &" [shape=trapezium,orientation=270];
  "23 &" -> "24 ^" [label="t0"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "u2";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "22 -" [label="u0"];
  "i1" -> "25 |";
  "i1" -> "24 ^";
  "i1" -> "23 &";
  "i1" -> "20 +";
  "i0" -> "23 &";
  "i0" -> "22 -";
  "i0" -> "20 +";
}
// graph for dag "freia_18_helper_0_0" of module "freia_18" in dot format
digraph "freia_18_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "u2" [shape=circle];

  // computation vertices
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "u2";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "22 -" [label="u0"];
  "i1" -> "20 +";
  "i0" -> "22 -";
  "i0" -> "20 +";
}
// graph for dag "freia_18_helper_0_1" of module "freia_18" in dot format
digraph "freia_18_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];
  "u3" [shape=circle];

  // computation vertices
  "25 |" [shape=trapezium,orientation=270];
  "25 |" -> "u3";
  "24 ^" [shape=trapezium,orientation=270];
  "24 ^" -> "25 |" [label="o"];
  "24 ^" -> "o";
  "23 &" [shape=trapezium,orientation=270];
  "23 &" -> "24 ^" [label="t0"];
  "i1" -> "25 |";
  "i1" -> "24 ^";
  "i1" -> "23 &";
  "i0" -> "23 &";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_18
freia_status freia_18_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 20 add
  // nope
  // i1 [0 input 1] -> [0 alu] 20 add
  // nope
  // alu 20 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 1
  // i0 [0 input 0] -> [1 alu] 22 sub
  si.mux[0][0].op = SPOC_MUX_IN0;
  // i0 [1 input 0] -> [1 alu] 22 sub
  // nope
  // 0`u0 [0 alu] -> [1 alu] 22 sub
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`u0 [1 input 1] -> [1 alu] 22 sub
  // nope
  // alu 22 sub stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output image 0`u2 on 0
  // 0`u2 [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`u2 [1 output 0] -> [7 output 0] 0 null
  // 0`u2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`u2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`u2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`u2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`u2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`u2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_18
freia_status freia_18_helper_0_1_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 23 and
  // nope
  // i1 [0 input 1] -> [0 alu] 23 and
  // nope
  // alu 23 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // STAGE 1
  // 0`t0 [0 alu] -> [1 alu] 24 xor
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t0 [1 input 0] -> [1 alu] 24 xor
  // nope
  // i1 [0 input 1] -> [1 alu] 24 xor
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i1 [1 input 1] -> [1 alu] 24 xor
  // nope
  // alu 24 xor stage 1
  si.alu[1][0].op = SPOC_ALU_XOR_IN0_IN1;


  // STAGE 2
  // o [1 alu] -> [2 alu] 25 or
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [2 alu] 25 or
  // nope
  // i1 [1 poc 1] -> [2 alu] 25 or
  si.mux[1][3].op = SPOC_MUX_IN1;
  // i1 [2 input 1] -> [2 alu] 25 or
  // nope
  // alu 25 or stage 2
  si.alu[2][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image o on 0 and image 0`u3 on 1
  // o [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [2 output 0] -> [7 output 0] 0 null
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`u3 [2 alu] -> [2 output 1] 0 null
  si.mux[2][1].op = SPOC_MUX_IN1;
  si.mux[2][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`u3 [2 output 1] -> [7 output 1] 0 null
  // 0`u3 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`u3 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`u3 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`u3 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`u3 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

! updated function

freia_status freia_18(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   
   
   
   freia_data2d *u2 = freia_common_create_data(16, 128, 128), *u3 = freia_common_create_data(16, 128, 128);          /*0011*/
   
   // useless computations
   // u0 = i0 + i1
   // u1 = u0
   // u2 = u1 - i0
   // t0 = i0 & i1
   // o = t0 ^ i1
   // u3 = o | i1
   freia_18_helper_0_0_0(u2, i0, i1);                                   /*0020*/
   freia_18_helper_0_1_0(o, u3, i0, i1);                                /*0023*/

   freia_common_destruct_data(u2);                                      /*0029*/
   freia_common_destruct_data(u3);                                      /*0030*/

   return FREIA_OK;                                                     /*0033*/
}
#
# TERAPIX
#

! initial function

freia_status freia_18(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   
   
   
   freia_data2d *u0 = freia_common_create_data(16, 128, 128), *u1 = freia_common_create_data(16, 128, 128), *u2 = freia_common_create_data(16, 128, 128), *u3 = freia_common_create_data(16, 128, 128), *t0 = freia_common_create_data(16, 128, 128);       /*0011*/
   
   // useless computations
   // u0 = i0 + i1
   // u1 = u0
   // u2 = u1 - i0
   // t0 = i0 & i1
   // o = t0 ^ i1
   // u3 = o | i1
   freia_aipo_add(u0, i0, i1);                                          /*0020*/
   freia_aipo_copy(u1, u0);                                             /*0021*/
   freia_aipo_sub(u2, u1, i0);                                          /*0022*/
   freia_aipo_and(t0, i0, i1);                                          /*0023*/
   freia_aipo_xor(o, t0, i1);                                           /*0024*/
   freia_aipo_or(u3, o, i1);                                            /*0025*/

   freia_common_destruct_data(u0);                                      /*0027*/
   freia_common_destruct_data(u1);                                      /*0028*/
   freia_common_destruct_data(u2);                                      /*0029*/
   freia_common_destruct_data(u3);                                      /*0030*/
   freia_common_destruct_data(t0);                                      /*0031*/

   return FREIA_OK;                                                     /*0033*/
}

! graphs

// graph for dag "dag_0" of module "freia_18" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "u2" [shape=circle];
  "o" [shape=circle];
  "u3" [shape=circle];

  // computation vertices
  "25 |" [shape=trapezium,orientation=270];
  "25 |" -> "u3";
  "24 ^" [shape=trapezium,orientation=270];
  "24 ^" -> "25 |" [label="o"];
  "24 ^" -> "o";
  "23 &" [shape=trapezium,orientation=270];
  "23 &" -> "24 ^" [label="t0"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "u2";
  "21 =" [shape=circle];
  "21 =" -> "22 -" [label="u1"];
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "21 =" [label="u0"];
  "i1" -> "25 |";
  "i1" -> "24 ^";
  "i1" -> "23 &";
  "i1" -> "20 +";
  "i0" -> "23 &";
  "i0" -> "22 -";
  "i0" -> "20 +";
}
// graph for dag "dag_cleaned_0" of module "freia_18" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "u2" [shape=circle];
  "o" [shape=circle];
  "u3" [shape=circle];

  // computation vertices
  "25 |" [shape=trapezium,orientation=270];
  "25 |" -> "u3";
  "24 ^" [shape=trapezium,orientation=270];
  "24 ^" -> "25 |" [label="o"];
  "24 ^" -> "o";
  "23 &" [shape=trapezium,orientation=270];
  "23 &" -> "24 ^" [label="t0"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "u2";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "22 -" [label="u0"];
  "i1" -> "25 |";
  "i1" -> "24 ^";
  "i1" -> "23 &";
  "i1" -> "20 +";
  "i0" -> "23 &";
  "i0" -> "22 -";
  "i0" -> "20 +";
}
// graph for dag "freia_18_helper_0_0" of module "freia_18" in dot format
digraph "freia_18_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "u2" [shape=circle];
  "o" [shape=circle];
  "u3" [shape=circle];

  // computation vertices
  "25 |" [shape=trapezium,orientation=270];
  "25 |" -> "u3";
  "24 ^" [shape=trapezium,orientation=270];
  "24 ^" -> "25 |" [label="o"];
  "24 ^" -> "o";
  "23 &" [shape=trapezium,orientation=270];
  "23 &" -> "24 ^" [label="t0"];
  "22 -" [shape=trapezium,orientation=270];
  "22 -" -> "u2";
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "22 -" [label="u0"];
  "i1" -> "25 |";
  "i1" -> "24 ^";
  "i1" -> "23 &";
  "i1" -> "20 +";
  "i0" -> "23 &";
  "i0" -> "22 -";
  "i0" -> "20 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_18
 * 2 input images, 3 output images
 * 7 image operations in dag
 * dag length is 4, dag width is 3
 * cost is 20 cycles per imagelet row
 */
freia_status freia_18_helper_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * i0,
  freia_data2d * i1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  terapix_mcu_instr mcu_instr[5];

  // imagelets definitions:
  // - 3 computation imagelets
  // - 3 double buffer imagelets
  int imagelet_size = 170;
  int imagelet_1 = 0;
  int imagelet_2 = 170;
  int imagelet_3 = 340;
  int imagelet_4 = 510;
  int imagelet_5 = 680;
  int imagelet_6 = 850;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: +(1,2) -> 3
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_2;
  mcu_instr[0].macrocode.ymin2 = 0;
  mcu_instr[0].macrocode.xmin3 = imagelet_3;
  mcu_instr[0].macrocode.ymin3 = 0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_ADD;
  // 1: -(3,1) -> 3
  mcu_instr[1].macrocode.xmin1 = imagelet_3;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_1;
  mcu_instr[1].macrocode.ymin2 = 0;
  mcu_instr[1].macrocode.xmin3 = imagelet_3;
  mcu_instr[1].macrocode.ymin3 = 0;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_SUB;
  // 2: &(1,2) -> 1
  mcu_instr[2].macrocode.xmin1 = imagelet_1;
  mcu_instr[2].macrocode.ymin1 = 0;
  mcu_instr[2].macrocode.xmin2 = imagelet_2;
  mcu_instr[2].macrocode.ymin2 = 0;
  mcu_instr[2].macrocode.xmin3 = imagelet_1;
  mcu_instr[2].macrocode.ymin3 = 0;
  mcu_instr[2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[2].macrocode.iter2 = imagelet_size;
  mcu_instr[2].macrocode.addrStart = TERAPIX_UCODE_AND;
  // 3: ^(1,2) -> 1
  mcu_instr[3].macrocode.xmin1 = imagelet_1;
  mcu_instr[3].macrocode.ymin1 = 0;
  mcu_instr[3].macrocode.xmin2 = imagelet_2;
  mcu_instr[3].macrocode.ymin2 = 0;
  mcu_instr[3].macrocode.xmin3 = imagelet_1;
  mcu_instr[3].macrocode.ymin3 = 0;
  mcu_instr[3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[3].macrocode.iter2 = imagelet_size;
  mcu_instr[3].macrocode.addrStart = TERAPIX_UCODE_XOR;
  // 4: |(1,2) -> 1
  mcu_instr[4].macrocode.xmin1 = imagelet_1;
  mcu_instr[4].macrocode.ymin1 = 0;
  mcu_instr[4].macrocode.xmin2 = imagelet_2;
  mcu_instr[4].macrocode.ymin2 = 0;
  mcu_instr[4].macrocode.xmin3 = imagelet_1;
  mcu_instr[4].macrocode.ymin3 = 0;
  mcu_instr[4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[4].macrocode.iter2 = imagelet_size;
  mcu_instr[4].macrocode.addrStart = TERAPIX_UCODE_OR;

  // inputs:
  // - imagelet 1 is i0 for i0
  // - imagelet 2 is i1 for i1

  // outputs:
  // - imagelet 3 is o0 for u2
  // - imagelet 1 is o1 for o
  // - imagelet 1 is o2 for u3

  // double buffer management:
  // - buffer 1/4
  // - buffer 2/5
  // - buffer 3/6

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_2i_3o(&param, o0, o1, o2, i0, i1);


  return ret;
}


! updated function

freia_status freia_18(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   
   
   
   
   
   freia_data2d *u2 = freia_common_create_data(16, 128, 128), *u3 = freia_common_create_data(16, 128, 128);          /*0011*/
   
   // useless computations
   // u0 = i0 + i1
   // u1 = u0
   // u2 = u1 - i0
   // t0 = i0 & i1
   // o = t0 ^ i1
   // u3 = o | i1
   freia_18_helper_0_0(u2, o, u3, i0, i1);                              /*0020*/

   freia_common_destruct_data(u2);                                      /*0029*/
   freia_common_destruct_data(u3);                                      /*0030*/

   return FREIA_OK;                                                     /*0033*/
}
#
# FREIA COMPILATION DONE
#

