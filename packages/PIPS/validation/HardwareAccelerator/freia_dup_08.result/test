#
# SPOC
#

! initial function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max(i, &max1);                                     /*0007*/
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_08" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_08" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "freia_dup_08_helper_0_0" of module "freia_dup_08" in dot format
digraph "freia_dup_08_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_dup_08
freia_status freia_dup_08_helper_0_0_0(freia_data2d * i0,
  int32_t * po0,
  int32_t * po1,
  int32_t * po2,
  int32_t * po3)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;

  // i [0 measure 0] -> [0 measure 0] 0 undefined
  // nope


  // no output image

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 7 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 8 global_max_coord stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].maximum;
  *po2 = (uint32_t) reduc.measure[0][0].max_coord_x;
  *po3 = (uint32_t) reduc.measure[0][0].max_coord_y;

  return ret;
}

! updated function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_08_helper_0_0_0(i, &max1, &max2, &x, &y);                  /*0007*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# TERAPIX
#

! initial function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max(i, &max1);                                     /*0007*/
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_08" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_08" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}
// graph for dag "freia_dup_08_helper_0_0" of module "freia_dup_08" in dot format
digraph "freia_dup_08_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max!" [shape=diamond];
  "7 max" [shape=diamond];
  "i" -> "8 max!";
  "i" -> "7 max";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_dup_08
 * 1 input image, 0 output image
 * 3 image operations in dag
 * dag length is 2, dag width is 1
 * cost is 6 cycles per imagelet row
 */
freia_status freia_dup_08_helper_0_0(
  freia_data2d * i0,
  int32_t * po1,
  int32_t * po2,
  int32_t * po3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  terapix_mcu_instr mcu_instr[2];

  // imagelet definitions...
  int imagelet_size = 511;
  int imagelet_1 = 0;
  int imagelet_2 = 511;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // set measure max at 1023
  // 0: max(1)
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_MAX?;
  // set measure max! at 1022
  // 1: max!(1)
  mcu_instr[1].macrocode.xmin1 = imagelet_1;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_MAX_COORD?;
  // inputs:
  // - imagelet 1 is i0 for i

  // no output

  // double buffer management:
  // - buffer 1/2

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_1i_0o(&param, i0);

  // get measure max result from 1023
  // get measure max! result from 1022

  return ret;
}


! updated function

int freia_dup_08(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_08_helper_0_0(i, &max1, &max2, &x, &y);                    /*0007*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# FREIA COMPILATION DONE
#

