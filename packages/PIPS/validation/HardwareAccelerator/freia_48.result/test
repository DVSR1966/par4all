#
# AIPO
#

! initial function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128);          /*0008*/

   freia_aipo_copy(t0, in);                                             /*0010*/
   freia_aipo_mul_const(t0, t0, 3);                                     /*0011*/
   freia_aipo_mul_const(out, out, 4);                                   /*0012*/
   freia_aipo_add(out, out, t0);                                        /*0013*/
   freia_aipo_div_const(t1, out, 7);                                    /*0014*/
   freia_aipo_copy(out, t1);                                            /*0015*/

   freia_common_destruct_data(t0);                                      /*0017*/
   freia_common_destruct_data(t1);                                      /*0018*/
   return FREIA_OK;                                                     /*0019*/
}

! graphs

// graph for dag "dag_0" of module "freia_48" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "15 =" [shape=circle];
  "15 =" -> "out";
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "15 =" [label="t1"];
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "10 =" [shape=circle];
  "10 =" -> "11 *." [label="t0"];
  "in" -> "10 =";
}
// graph for dag "dag_cleaned_0" of module "freia_48" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "out";
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "in" -> "11 *.";
}

! updated function for

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128);           /*0008*/

   freia_aipo_mul_const(t0, in, 3);                                     /*0011*/
   freia_aipo_mul_const(out, out, 4);                                   /*0012*/
   freia_aipo_add(out, out, t0);                                        /*0013*/
   freia_aipo_div_const(out, out, 7);                                   /*0014*/

   freia_common_destruct_data(t0);                                      /*0017*/
   return FREIA_OK;                                                     /*0019*/
}
#
# SPOC
#

! initial function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128);          /*0008*/

   freia_aipo_copy(t0, in);                                             /*0010*/
   freia_aipo_mul_const(t0, t0, 3);                                     /*0011*/
   freia_aipo_mul_const(out, out, 4);                                   /*0012*/
   freia_aipo_add(out, out, t0);                                        /*0013*/
   freia_aipo_div_const(t1, out, 7);                                    /*0014*/
   freia_aipo_copy(out, t1);                                            /*0015*/

   freia_common_destruct_data(t0);                                      /*0017*/
   freia_common_destruct_data(t1);                                      /*0018*/
   return FREIA_OK;                                                     /*0019*/
}

! graphs

// graph for dag "dag_0" of module "freia_48" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "15 =" [shape=circle];
  "15 =" -> "out";
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "15 =" [label="t1"];
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "10 =" [shape=circle];
  "10 =" -> "11 *." [label="t0"];
  "in" -> "10 =";
}
// graph for dag "dag_cleaned_0" of module "freia_48" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "out";
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "in" -> "11 *.";
}
// graph for dag "freia_48_helper_0_0" of module "freia_48" in dot format
digraph "freia_48_helper_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "out";
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "in" -> "11 *.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_48
freia_status freia_48_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 alu] 11 mul_const
  // nope
  // alu 11 mul_const stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // out [0 input 1] -> [1 alu] 12 mul_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // out [1 input 1] -> [1 alu] 12 mul_const
  // nope
  // alu 12 mul_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_MUL_IN1_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`t0 [0 alu] -> [2 alu] 13 add
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t0 [1 input 0] -> [2 alu] 13 add
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t0 [2 input 0] -> [2 alu] 13 add
  // nope
  // out [1 alu] -> [2 alu] 13 add
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // out [2 input 1] -> [2 alu] 13 add
  // nope
  // alu 13 add stage 2
  si.alu[2][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 3
  // out [2 alu] -> [3 alu] 14 div_const
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // out [3 input 0] -> [3 alu] 14 div_const
  // nope
  // alu 14 div_const stage 3
  si.alu[3][0].op = SPOC_ALU_DIV_IN0_CONST;
  sp.alu[3][0].constant = pi2;


  // output image out on 0
  // out [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // out [3 output 0] -> [7 output 0] 0 null
  // out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   
   freia_48_helper_0_0_0(out, in, out, 3, 4, 7);                        /*0011*/

   return FREIA_OK;                                                     /*0019*/
}

! cleaned up function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   
   freia_48_helper_0_0_0(out, in, out, 3, 4, 7);                        /*0011*/

   return 0;                                                            /*0019*/
}
#
# TERAPIX
#

! initial function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128);          /*0008*/

   freia_aipo_copy(t0, in);                                             /*0010*/
   freia_aipo_mul_const(t0, t0, 3);                                     /*0011*/
   freia_aipo_mul_const(out, out, 4);                                   /*0012*/
   freia_aipo_add(out, out, t0);                                        /*0013*/
   freia_aipo_div_const(t1, out, 7);                                    /*0014*/
   freia_aipo_copy(out, t1);                                            /*0015*/

   freia_common_destruct_data(t0);                                      /*0017*/
   freia_common_destruct_data(t1);                                      /*0018*/
   return FREIA_OK;                                                     /*0019*/
}

! graphs

// graph for dag "dag_0" of module "freia_48" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "15 =" [shape=circle];
  "15 =" -> "out";
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "15 =" [label="t1"];
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "10 =" [shape=circle];
  "10 =" -> "11 *." [label="t0"];
  "in" -> "10 =";
}
// graph for dag "dag_cleaned_0" of module "freia_48" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "out";
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "in" -> "11 *.";
}
// graph for dag "freia_48_helper_0_0" of module "freia_48" in dot format
digraph "freia_48_helper_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "14 /." [shape=trapezium,orientation=270];
  "14 /." -> "out";
  "13 +" [shape=trapezium,orientation=270];
  "13 +" -> "14 /." [label="out"];
  "12 *." [shape=trapezium,orientation=270];
  "12 *." -> "13 +" [label="out"];
  "out" -> "12 *.";
  "11 *." [shape=trapezium,orientation=270];
  "11 *." -> "13 +" [label="t0"];
  "in" -> "11 *.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_48
 * 2 input images, 1 output image
 * 6 image operations in dag
 * dag length is 4, dag width is 2
 * cost is 13 cycles per imagelet row
 */
freia_status freia_48_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 2;
  const int32_t y_3 = 0;
  terapix_mcu_instr mcu_instr[4];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: *.(1) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_1;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_MUL_CONST;
  // 1: *.(2) -> 2
  mcu_instr[1].macrocode.xmin1 = imagelet_2;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_2;
  mcu_instr[1].macrocode.ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi4;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[1].macrocode.xmin3 = x_1;
  mcu_instr[1].macrocode.ymin3 = y_1;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_MUL_CONST;
  // 2: +(2,1) -> 2
  mcu_instr[2].macrocode.xmin1 = imagelet_2;
  mcu_instr[2].macrocode.ymin1 = 0;
  mcu_instr[2].macrocode.xmin2 = imagelet_1;
  mcu_instr[2].macrocode.ymin2 = 0;
  mcu_instr[2].macrocode.xmin3 = imagelet_2;
  mcu_instr[2].macrocode.ymin3 = 0;
  mcu_instr[2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[2].macrocode.iter2 = imagelet_size;
  mcu_instr[2].macrocode.addrStart = TERAPIX_UCODE_ADD;
  // 3: /.(2) -> 1
  mcu_instr[3].macrocode.xmin1 = imagelet_2;
  mcu_instr[3].macrocode.ymin1 = 0;
  mcu_instr[3].macrocode.xmin2 = imagelet_1;
  mcu_instr[3].macrocode.ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi5;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[3].macrocode.xmin3 = x_3;
  mcu_instr[3].macrocode.ymin3 = y_3;
  mcu_instr[3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[3].macrocode.iter2 = imagelet_size;
  mcu_instr[3].macrocode.addrStart = TERAPIX_UCODE_DIV_CONST;

  // inputs:
  // - imagelet 1 is i0 for in
  // - imagelet 2 is i1 for out

  // outputs:
  // - imagelet 1 is o0 for out

  // double buffer management:
  // - buffer 1/3
  // - buffer 2/4

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_2i_1o(&param, o0, i0, i1);


  return ret;
}


! updated function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   
   freia_48_helper_0_0(out, in, out, 3, 4, 7);                          /*0011*/

   return FREIA_OK;                                                     /*0019*/
}

! cleaned up function

freia_status freia_48(freia_data2d *out, freia_data2d *in)
{
   
   
   
   freia_48_helper_0_0(out, in, out, 3, 4, 7);                          /*0011*/

   return 0;                                                            /*0019*/
}
#
# FREIA COMPILATION DONE
#

