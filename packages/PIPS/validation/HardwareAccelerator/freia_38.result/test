#
# AIPO
#
#
# compile generated freia_38
#

! initial function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e, i, kern);                                     /*0010*/
   freia_aipo_dilate_8c(d, i, kern);                                    /*0011*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0013*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0014*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0016*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(d);                                       /*0022*/

   return FREIA_OK;                                                     /*0024*/
}

! graphs

// graph for dag "dag_0" of module "freia_38" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_38" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d_1"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e_1"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d_2"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e_2"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}

! updated function for

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   // hardware accelerator generated variable
   freia_data2d *d_1 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *e_1 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d_2 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *e_2 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e_2, i, kern);                                   /*0010*/
   freia_aipo_dilate_8c(d_2, i, kern);                                  /*0011*/

   freia_aipo_erode_8c(e_1, e_2, kern);                                 /*0013*/
   freia_aipo_dilate_8c(d_1, d_2, kern);                                /*0014*/

   freia_aipo_erode_8c(e, e_1, kern);                                   /*0016*/
   freia_aipo_dilate_8c(d, d_1, kern);                                  /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(e_1);
   freia_common_destruct_data(e_2);
   freia_common_destruct_data(d);                                       /*0022*/
   freia_common_destruct_data(d_1);
   freia_common_destruct_data(d_2);

   return FREIA_OK;                                                     /*0024*/
}
#
# SPOC
#

! initial function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e, i, kern);                                     /*0010*/
   freia_aipo_dilate_8c(d, i, kern);                                    /*0011*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0013*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0014*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0016*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(d);                                       /*0022*/

   return FREIA_OK;                                                     /*0024*/
}

! graphs

// graph for dag "dag_0" of module "freia_38" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_38" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "freia_38_helper_0_0" of module "freia_38" in dot format
digraph "freia_38_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d_1"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e_1"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d_2"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e_2"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 7 ops and 0 copies, optimized to 7 ops and 0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_38
freia_status freia_38_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 10 erode_8c
  // nope
  // poc 10 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // i [0 input 1] -> [0 poc 1] 11 dilate_8c
  // nope
  // poc 11 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`e_2 [0 poc 0] -> [1 poc 0] 13 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`e_2 [1 input 0] -> [1 poc 0] 13 erode_8c
  // nope
  // poc 13 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`d_2 [0 poc 1] -> [1 poc 1] 14 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`d_2 [1 input 1] -> [1 poc 1] 14 dilate_8c
  // nope
  // poc 14 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`e_1 [1 poc 0] -> [2 poc 0] 16 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`e_1 [2 input 0] -> [2 poc 0] 16 erode_8c
  // nope
  // poc 16 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`d_1 [1 poc 1] -> [2 poc 1] 17 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`d_1 [2 input 1] -> [2 poc 1] 17 dilate_8c
  // nope
  // poc 17 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];

  // 0`e [2 poc 0] -> [2 alu] 19 sub
  // nope
  // 0`d [2 poc 1] -> [2 alu] 19 sub
  // nope
  // alu 19 sub stage 2 flipped
  si.alu[2][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output image o on 0
  // o [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [2 output 0] -> [7 output 0] 0 null
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

! updated function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   
   // preschedule example for terapix tests
   
   freia_38_helper_0_0_0(o, i, kern);                                   /*0010*/
   
   
   
   
   
   return FREIA_OK;                                                     /*0024*/
}

! cleaned up function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   
   // preschedule example for terapix tests
   
   freia_38_helper_0_0_0(o, i, kern);                                   /*0010*/
   
   
   
   
   
   return 0;                                                            /*0024*/
}
#
# TERAPIX
#

! initial function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e, i, kern);                                     /*0010*/
   freia_aipo_dilate_8c(d, i, kern);                                    /*0011*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0013*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0014*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0016*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(d);                                       /*0022*/

   return FREIA_OK;                                                     /*0024*/
}

! graphs

// graph for dag "dag_0" of module "freia_38" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_38" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "freia_38_helper_0_0_0" of module "freia_38" in dot format
digraph "freia_38_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d_1"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e_1"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d_2"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e_2"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 7 ops and 0 copies, optimized to 7 ops and 0+0 copies

/* FREIA terapix helper function for module freia_38
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 7 image operations in dag
 * dag length is 5, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 94
 * - communication: 64
 */
freia_status freia_38_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][7];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(2) -> 1
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_2;
  mcu_macro[1][3].xmin2 = imagelet_2;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(1) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: -(1,3) -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_io_1_0;
  mcu_macro[1][6].xmin3 = imagelet_io_1_1;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_SUB3;


  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 7;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   
   // preschedule example for terapix tests
   
   freia_38_helper_0_0_0(o, i, kern);                                   /*0010*/
   
   
   
   
   
   return FREIA_OK;                                                     /*0024*/
}

! cleaned up function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   
   // preschedule example for terapix tests
   
   freia_38_helper_0_0_0(o, i, kern);                                   /*0010*/
   
   
   
   
   
   return 0;                                                            /*0024*/
}
#
# OPENCL
#

! initial function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e, i, kern);                                     /*0010*/
   freia_aipo_dilate_8c(d, i, kern);                                    /*0011*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0013*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0014*/

   freia_aipo_erode_8c(e, e, kern);                                     /*0016*/
   freia_aipo_dilate_8c(d, d, kern);                                    /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(d);                                       /*0022*/

   return FREIA_OK;                                                     /*0024*/
}

! graphs

// graph for dag "dag_0" of module "freia_38" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_38" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d_1"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e_1"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d_2"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e_2"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}
// graph for dag "freia_38_helper_0_0" of module "freia_38" in dot format
digraph "freia_38_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "19 -" [shape=trapezium,orientation=270];
  "19 -" -> "o";
  "17 D8" [shape=box];
  "17 D8" -> "19 -" [label="d"];
  "16 E8" [shape=box];
  "16 E8" -> "19 -" [label="e"];
  "14 D8" [shape=box];
  "14 D8" -> "17 D8" [label="d_1"];
  "13 E8" [shape=box];
  "13 E8" -> "16 E8" [label="e_1"];
  "11 D8" [shape=box];
  "11 D8" -> "14 D8" [label="d_2"];
  "10 E8" [shape=box];
  "10 E8" -> "13 E8" [label="e_2"];
  "i" -> "11 D8";
  "i" -> "10 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 7 ops and 0 copies, optimized to 7 ops and 0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_38

// opencl for dag 0

! updated function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   // hardware accelerator generated variable
   freia_data2d *d_1 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *e_1 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d_2 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *e_2 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e_2, i, kern);                                   /*0010*/
   freia_aipo_dilate_8c(d_2, i, kern);                                  /*0011*/

   freia_aipo_erode_8c(e_1, e_2, kern);                                 /*0013*/
   freia_aipo_dilate_8c(d_1, d_2, kern);                                /*0014*/

   freia_aipo_erode_8c(e, e_1, kern);                                   /*0016*/
   freia_aipo_dilate_8c(d, d_1, kern);                                  /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(e_1);
   freia_common_destruct_data(e_2);
   freia_common_destruct_data(d);                                       /*0022*/
   freia_common_destruct_data(d_1);
   freia_common_destruct_data(d_2);

   return FREIA_OK;                                                     /*0024*/
}

! cleaned up function

freia_status freia_38(freia_data2d *o, freia_data2d *i, int32_t *kern)
{
   
   
   freia_data2d *e = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);    /*0006*/
   // hardware accelerator generated variable
   freia_data2d *d_1 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *e_1 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *d_2 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa), *e_2 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);
   
   // preschedule example for terapix tests
   
   freia_aipo_erode_8c(e_2, i, kern);                                   /*0010*/
   freia_aipo_dilate_8c(d_2, i, kern);                                  /*0011*/

   freia_aipo_erode_8c(e_1, e_2, kern);                                 /*0013*/
   freia_aipo_dilate_8c(d_1, d_2, kern);                                /*0014*/

   freia_aipo_erode_8c(e, e_1, kern);                                   /*0016*/
   freia_aipo_dilate_8c(d, d_1, kern);                                  /*0017*/

   freia_aipo_sub(o, d, e);                                             /*0019*/

   freia_common_destruct_data(e);                                       /*0021*/
   freia_common_destruct_data(e_1);
   freia_common_destruct_data(e_2);
   freia_common_destruct_data(d);                                       /*0022*/
   freia_common_destruct_data(d_1);
   freia_common_destruct_data(d_2);

   return 0;                                                            /*0024*/
}
#
# FREIA COMPILATION DONE
#

