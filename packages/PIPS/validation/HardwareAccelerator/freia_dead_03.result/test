#
# AIPO
#

! initial function

freia_status freia_dead_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   int32_t v;                                                           /*0008*/
   v = freia_common_get(tmp, 12, 12);                                   /*0009*/
   freia_aipo_sub_const(o, i0, v);                                      /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 -." [shape=trapezium,orientation=270];
  "10 -." -> "o";
  "i0" -> "10 -.";
  "8 ?" [shape=none];
  "8 ?" -> "10 -." [arrowhead=empty,label="v"];
}
// graph for dag "dag_1" of module "freia_dead_03" in dot format
digraph "dag_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "tmp";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 -." [shape=trapezium,orientation=270];
  "10 -." -> "o";
  "i0" -> "10 -.";
  "8 ?" [shape=none];
  "8 ?" -> "10 -." [arrowhead=empty,label="v"];
}
// graph for dag "dag_cleaned_1" of module "freia_dead_03" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "tmp";
  "i1" -> "7 +";
  "i0" -> "7 +";
}

! updated function for

freia_status freia_dead_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   int32_t v;                                                           /*0008*/
   v = freia_common_get(tmp, 12, 12);                                   /*0009*/
   freia_aipo_sub_const(o, i0, v);                                      /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}
#
# SPOC
#

! initial function

freia_status freia_dead_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   int32_t v;                                                           /*0008*/
   v = freia_common_get(tmp, 12, 12);                                   /*0009*/
   freia_aipo_sub_const(o, i0, v);                                      /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 -." [shape=trapezium,orientation=270];
  "10 -." -> "o";
  "i0" -> "10 -.";
  "8 ?" [shape=none];
  "8 ?" -> "10 -." [arrowhead=empty,label="v"];
}
// graph for dag "dag_1" of module "freia_dead_03" in dot format
digraph "dag_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "tmp";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 -." [shape=trapezium,orientation=270];
  "10 -." -> "o";
  "i0" -> "10 -.";
  "8 ?" [shape=none];
  "8 ?" -> "10 -." [arrowhead=empty,label="v"];
}
// graph for dag "dag_cleaned_1" of module "freia_dead_03" in dot format
digraph "dag_cleaned_1" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "tmp";
  "i1" -> "7 +";
  "i0" -> "7 +";
}
// graph for dag "freia_dead_03_helper_0_0" of module "freia_dead_03" in dot format
digraph "freia_dead_03_helper_0_0" {
  // inputs

  // outputs

  // computation vertices
}
// graph for dag "freia_dead_03_helper_0_1" of module "freia_dead_03" in dot format
digraph "freia_dead_03_helper_0_1" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 -." [shape=trapezium,orientation=270];
  "10 -." -> "o";
  "i0" -> "10 -.";
}
// graph for dag "freia_dead_03_helper_1_0" of module "freia_dead_03" in dot format
digraph "freia_dead_03_helper_1_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "tmp" [shape=circle];

  // computation vertices
  "7 +" [shape=trapezium,orientation=270];
  "7 +" -> "tmp";
  "i1" -> "7 +";
  "i0" -> "7 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_dead_03
freia_status freia_dead_03_helper_0_1_0(freia_data2d * o0, freia_data2d * i0,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 10 sub_const
  // nope
  // alu 10 sub_const stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module freia_dead_03
freia_status freia_dead_03_helper_1_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 7 add
  // nope
  // i1 [0 input 1] -> [0 alu] 7 add
  // nope
  // alu 7 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image 0`tmp on 0
  // 0`tmp [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`tmp [0 output 0] -> [7 output 0] 0 null
  // 0`tmp [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tmp [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tmp [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tmp [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tmp [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tmp [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tmp [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_dead_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_dead_03_helper_1_0_0(tmp, i0, i1);                             /*0007*/
   int32_t v;                                                           /*0008*/
   v = freia_common_get(tmp, 12, 12);                                   /*0009*/
   freia_dead_03_helper_0_1_0(o, i0, v);                                /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_dead_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_dead_03_helper_1_0_0(tmp, i0, i1);                             /*0007*/
   int32_t v;                                                           /*0008*/
   v = freia_common_get(tmp, 12, 12);                                   /*0009*/
   freia_dead_03_helper_0_1_0(o, i0, v);                                /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return 0;                                                            /*0012*/
}
#
# TERAPIX
#

! initial function

freia_status freia_dead_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *tmp = freia_common_create_data(16, 128, 128);          /*0006*/
   freia_aipo_add(tmp, i0, i1);                                         /*0007*/
   int32_t v;                                                           /*0008*/
   v = freia_common_get(tmp, 12, 12);                                   /*0009*/
   freia_aipo_sub_const(o, i0, v);                                      /*0010*/
   freia_common_destruct_data(tmp);                                     /*0011*/
   return FREIA_OK;                                                     /*0012*/
}
