#
# AIPO
#
#
# compile generated my_cast
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
// DAG "dag_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! updated function for

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# SPOC
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
// DAG "dag_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 1+0+0 copies
// # SPOC calls: 0

! updated function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! cleaned up function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# TERAPIX
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
// DAG "dag_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 1+0+0 copies

! updated function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! cleaned up function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# OPENCL
#

! initial function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! graphs

// graph for dag "dag_0" of module "my_cast" in dot format
// DAG "dag_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "dag_cleaned_0" of module "my_cast" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}
// graph for dag "my_cast_opencl_helper_0_0" of module "my_cast" in dot format
// DAG "my_cast_opencl_helper_0_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "my_cast_opencl_helper_0_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "4 =()" [shape=circle];
  "4 =()" -> "o";
  "i0" -> "4 =()";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 0 ops and 1 copies, optimized to 0 ops and 1+0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function my_cast

// opencl for dag 0

! updated function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}

! cleaned up function

freia_status my_cast(freia_data2d *o, freia_data2d *i0)
{
   return freia_aipo_cast(o, i0);                                       /*0004*/
}
#
# FREIA COMPILATION DONE
#

