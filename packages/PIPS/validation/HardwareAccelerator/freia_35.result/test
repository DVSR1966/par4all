#
# AIPO
#
#
# compile generated freia_35
#

! initial function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   int32_t min;                                                         /*0007*/
   freia_aipo_add(t, i0, i1);                                           /*0008*/
   freia_aipo_sub(o, t, i1);                                            /*0009*/
   freia_aipo_global_min(o, &min);                                      /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_35" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_35" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}

! updated function for

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   int32_t min;                                                         /*0007*/
   freia_aipo_add(t, i0, i1);                                           /*0008*/
   freia_aipo_sub(o, t, i1);                                            /*0009*/
   freia_aipo_global_min(o, &min);                                      /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
   return FREIA_OK;                                                     /*0012*/
}
#
# SPOC
#

! initial function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   int32_t min;                                                         /*0007*/
   freia_aipo_add(t, i0, i1);                                           /*0008*/
   freia_aipo_sub(o, t, i1);                                            /*0009*/
   freia_aipo_global_min(o, &min);                                      /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_35" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_35" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_35_spoc_helper_0_0" of module "freia_35" in dot format
digraph "freia_35_spoc_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_35
freia_status freia_35_spoc_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 8 add
  // nope
  // i1 [0 input 1] -> [0 alu] 8 add
  // nope
  // alu 8 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 1
  // 0`t [0 alu] -> [1 alu] 9 sub
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t [1 input 0] -> [1 alu] 9 sub
  // nope
  // i1 [0 input 1] -> [1 alu] 9 sub
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i1 [1 input 1] -> [1 alu] 9 sub
  // nope
  // alu 9 sub stage 1
  si.alu[1][0].op = SPOC_ALU_SUB_IN0_IN1;

  // o [1 alu] -> [1 measure 0] 9 sub
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;


  // output image o on 0
  // o [1 measure 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 10 global_min stage 1 side 0
  *po0 = (int32_t) reduc.measure[1][0].minimum;

  return ret;
}

! updated function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   int32_t min;                                                         /*0007*/
   freia_35_spoc_helper_0_0_0(o, i0, i1, &min);                         /*0008*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   int32_t min;                                                         /*0007*/
   freia_35_spoc_helper_0_0_0(o, i0, i1, &min);                         /*0008*/
   return 0;                                                            /*0012*/
}
#
# TERAPIX
#

! initial function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   int32_t min;                                                         /*0007*/
   freia_aipo_add(t, i0, i1);                                           /*0008*/
   freia_aipo_sub(o, t, i1);                                            /*0009*/
   freia_aipo_global_min(o, &min);                                      /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_35" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_35" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_35_terapix_helper_0_0_0" of module "freia_35" in dot format
digraph "freia_35_terapix_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_35
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 11
 * - communication: 96
 */
freia_status freia_35_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 0;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 255;
  int imagelet_1 = 0;
  int imagelet_2 = 255;
  int imagelet_3 = 510;
  int imagelet_4 = 765;

  // memory for reductions
  int reduction_2 = 1023;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +(1,2) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_1_0;
  mcu_macro[1][0].xmin3 = imagelet_io_1_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD3;
  // 1: -(1,2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_SUB3;
  // 2: min(1)
  // initializing  2_val
  p_2_val[0] = INT16_MAX;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure min at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_MIN;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure min result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MIN;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po3 = (int32_t) red_2[0];

  return ret;
}


! updated function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   int32_t min;                                                         /*0007*/
   freia_35_terapix_helper_0_0_0(o, i0, i1, &min);                      /*0008*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   int32_t min;                                                         /*0007*/
   freia_35_terapix_helper_0_0_0(o, i0, i1, &min);                      /*0008*/
   return 0;                                                            /*0012*/
}
#
# OPENCL
#

! initial function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0006*/
   int32_t min;                                                         /*0007*/
   freia_aipo_add(t, i0, i1);                                           /*0008*/
   freia_aipo_sub(o, t, i1);                                            /*0009*/
   freia_aipo_global_min(o, &min);                                      /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
   return FREIA_OK;                                                     /*0012*/
}

! graphs

// graph for dag "dag_0" of module "freia_35" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "dag_cleaned_0" of module "freia_35" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_35_opencl_helper_0_0" of module "freia_35" in dot format
digraph "freia_35_opencl_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}
// graph for dag "freia_35_opencl_helper_0_0_0" of module "freia_35" in dot format
digraph "freia_35_opencl_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 min" [shape=diamond];
  "9 -" [shape=trapezium,orientation=270];
  "9 -" -> "10 min" [label="o"];
  "9 -" -> "o";
  "8 +" [shape=trapezium,orientation=270];
  "8 +" -> "9 -" [label="t"];
  "i1" -> "9 -";
  "i1" -> "8 +";
  "i0" -> "8 +";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for freia_35_opencl_helper_0_0_0
static cl_kernel freia_35_opencl_helper_0_0_0_kernel[2];

// compile kernels for freia_35_opencl_helper_0_0_0
static freia_status freia_35_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for freia_35_opencl_helper_0_0_0
  const char * freia_35_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_35_opencl_helper_0_0_0\n"
    "KERNEL void freia_35_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  int2 mmin = { PIXEL_MAX, 0 };\n"
    "  int2 mmax = { PIXEL_MIN, 0 };\n"
    "  int idy = get_global_id(0);\n"
    "\n"
    "  // thread's pixel loop\n"
    "  int gid = pitch*get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t8 = PIXEL_ADD(in0, in1);\n"
    "    PIXEL t9 = PIXEL_SUB(t8, in1);\n"
    "    PIXEL_MINIMUM(red10, t9);\n"
    "    // set output pixels\n"
    "    p0[i] = t9;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  redX[idy].min = mmin.x;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_35_opencl_helper_0_0_0_source, "freia_35_opencl_helper_0_0_0", "-DPIXEL8", &freia_35_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(freia_35_opencl_helper_0_0_0_source, "freia_35_opencl_helper_0_0_0", "-DPIXEL16", &freia_35_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function freia_35_opencl_helper_0_0_0
freia_status freia_35_opencl_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_35_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_35_opencl_helper_0_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel freia_35_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 1, o0, i0, i1, &redres);

  // return reduction results
  *po3 = redres.minimum;

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_35

// opencl for dag 0

// opencl function freia_35_opencl_helper_0_0_0
KERNEL void freia_35_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  GLOBAL TMeasure * redX)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;

  // reduction stuff is currently hardcoded...
  int vol = 0;
  int2 mmin = { PIXEL_MAX, 0 };
  int2 mmax = { PIXEL_MIN, 0 };
  int idy = get_global_id(0);

  // thread's pixel loop
  int gid = pitch*get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t8 = PIXEL_ADD(in0, in1);
    PIXEL t9 = PIXEL_SUB(t8, in1);
    PIXEL_MINIMUM(red10, t9);
    // set output pixels
    p0[i] = t9;
  }

  // reduction copy out
  redX[idy].min = mmin.x;
}

! updated function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   int32_t min;                                                         /*0007*/
   freia_35_opencl_helper_0_0_0(o, i0, i1, &min);                       /*0008*/
   return FREIA_OK;                                                     /*0012*/
}

! cleaned up function

freia_status freia_35(freia_data2d *o, freia_data2d *i0, freia_data2d *i1)
{
   int32_t min;                                                         /*0007*/
   freia_35_opencl_helper_0_0_0(o, i0, i1, &min);                       /*0008*/
   return 0;                                                            /*0012*/
}
#
# FREIA COMPILATION DONE
#

