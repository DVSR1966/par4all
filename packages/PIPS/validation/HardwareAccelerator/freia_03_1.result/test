
! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1, int32_t cst0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i1 [0 input 1] -> [0 alu] 28 addsat_const
  // nope
  // alu 28 addsat_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ADDSAT_IN1_CONST;
  sp.alu[0][0].constant = cst0;


  // output image 0`t2 on 0
  // 0`t2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t2 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_1(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1, int32_t cst0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 1] -> [0 alu] 27 add_const
  // nope
  // alu 27 add_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ADD_IN1_CONST;
  sp.alu[0][0].constant = cst0;


  // output image 0`t1 on 0
  // 0`t1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t1 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_2(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t1 [0 input 0] -> [0 alu] 29 add
  // nope
  // 0`t2 [0 input 1] -> [0 alu] 29 add
  // nope
  // alu 29 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image 0`t3 on 0
  // 0`t3 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t3 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_3(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1, int32_t cst0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t1 [0 input 0] -> [0 alu] 30 mul_const
  // nope
  // alu 30 mul_const stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[0][0].constant = cst0;


  // output image 0`t4 on 0
  // 0`t4 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t4 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_4(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1, int32_t cst0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t3 [0 input 0] -> [0 alu] 31 div_const
  // nope
  // alu 31 div_const stage 0
  si.alu[0][0].op = SPOC_ALU_DIV_IN0_CONST;
  sp.alu[0][0].constant = cst0;


  // output image 0`t5 on 0
  // 0`t5 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t5 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_5(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t4 [0 input 0] -> [0 alu] 32 and
  // nope
  // 0`t5 [0 input 1] -> [0 alu] 32 and
  // nope
  // alu 32 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`t6 on 0
  // 0`t6 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t6 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_6(freia_data2d * o0, freia_data2d * i0, int32_t cst0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // alu 33 set_constant stage 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[0][0].constant = cst0;


  // output image 0`t7 on 0
  // 0`t7 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t7 [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_7(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t6 [0 input 0] -> [0 alu] 34 mul
  // nope
  // 0`t7 [0 input 1] -> [0 alu] 34 mul
  // nope
  // alu 34 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [0 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_1(t1, t2, i0, c1);                               /*0027*/
   freia_03_helper_0_0_0(t2, i0, i1, c2);                               /*0028*/
   freia_03_helper_0_0_2(t3, t1, t2);                                   /*0029*/
   freia_03_helper_0_0_3(t4, t1, t3, c3);                               /*0030*/
   freia_03_helper_0_0_4(t5, t3, t4, c4);                               /*0031*/
   freia_03_helper_0_0_5(t6, t4, t5);                                   /*0032*/
   freia_03_helper_0_0_6(t7, t6, c5);                                   /*0033*/
   freia_03_helper_0_0_7(o, t6, t7);                                    /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}
