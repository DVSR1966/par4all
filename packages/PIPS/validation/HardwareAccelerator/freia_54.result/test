#
# AIPO
#
#
# compile generated freia_54
#

! initial function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   freia_data2d *tc = freia_common_create_data(16, 128, 128);           /*0006*/

   freia_aipo_dilate_8c(tb, in, freia_morpho_kernel_8c);                /*0008*/
   freia_aipo_inf_const(tc, tb, 255);                                   /*0009*/
   freia_aipo_erode_8c(tb, tb, freia_morpho_kernel_8c);                 /*0010*/
   freia_aipo_inf(out, tc, tb);                                         /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tc);                                      /*0014*/
   return FREIA_OK;                                                     /*0015*/
}

! graphs

// graph for dag "dag_0" of module "freia_54" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb"];
  "8 D8" -> "9 <_" [label="tb"];
  "in" -> "8 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_54" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb_1"];
  "8 D8" -> "9 <_" [label="tb_1"];
  "in" -> "8 D8";
}

! updated function for

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   freia_data2d *tc = freia_common_create_data(16, 128, 128);           /*0006*/

   freia_aipo_dilate_8c(tb, in, freia_morpho_kernel_8c);                /*0008*/
   freia_aipo_inf_const(tc, tb, 255);                                   /*0009*/
   freia_aipo_erode_8c(tb, tb, freia_morpho_kernel_8c);                 /*0010*/
   freia_aipo_inf(out, tc, tb);                                         /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tc);                                      /*0014*/
   return FREIA_OK;                                                     /*0015*/
}
#
# SPOC
#

! initial function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   freia_data2d *tc = freia_common_create_data(16, 128, 128);           /*0006*/

   freia_aipo_dilate_8c(tb, in, freia_morpho_kernel_8c);                /*0008*/
   freia_aipo_inf_const(tc, tb, 255);                                   /*0009*/
   freia_aipo_erode_8c(tb, tb, freia_morpho_kernel_8c);                 /*0010*/
   freia_aipo_inf(out, tc, tb);                                         /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tc);                                      /*0014*/
   return FREIA_OK;                                                     /*0015*/
}

! graphs

// graph for dag "dag_0" of module "freia_54" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb"];
  "8 D8" -> "9 <_" [label="tb"];
  "in" -> "8 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_54" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb"];
  "8 D8" -> "9 <_" [label="tb"];
  "in" -> "8 D8";
}
// graph for dag "freia_54_spoc_helper_0_0" of module "freia_54" in dot format
digraph "freia_54_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "8 D8" [shape=box];
  "8 D8" -> "9 <_" [label="tb_1"];
  "8 D8" -> "10 E8" [label="tb_1"];
  "in" -> "8 D8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_54
freia_status freia_54_spoc_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 poc 0] 8 dilate_8c
  // nope
  // poc 8 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`tb_1 [0 poc 0] -> [2 poc 0] 10 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`tb_1 [1 input 0] -> [2 poc 0] 10 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tb_1 [2 input 0] -> [2 poc 0] 10 erode_8c
  // nope
  // poc 10 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`tb_1 [1 poc 0] -> [1 alu] 9 inf_const
  // nope
  // alu 9 inf_const stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`tc [1 alu] -> [2 alu] 11 inf
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`tc [2 input 1] -> [2 alu] 11 inf
  // nope
  // 0`tb [2 poc 0] -> [2 alu] 11 inf
  // nope
  // alu 11 inf stage 2
  si.alu[2][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image out on 0
  // out [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // out [2 output 0] -> [7 output 0] 0 null
  // out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{

   freia_54_spoc_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);    /*0008*/

   return FREIA_OK;                                                     /*0015*/
}

! cleaned up function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{

   freia_54_spoc_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);    /*0008*/

   return 0;                                                            /*0015*/
}
#
# TERAPIX
#

! initial function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   freia_data2d *tc = freia_common_create_data(16, 128, 128);           /*0006*/

   freia_aipo_dilate_8c(tb, in, freia_morpho_kernel_8c);                /*0008*/
   freia_aipo_inf_const(tc, tb, 255);                                   /*0009*/
   freia_aipo_erode_8c(tb, tb, freia_morpho_kernel_8c);                 /*0010*/
   freia_aipo_inf(out, tc, tb);                                         /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tc);                                      /*0014*/
   return FREIA_OK;                                                     /*0015*/
}

! graphs

// graph for dag "dag_0" of module "freia_54" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb"];
  "8 D8" -> "9 <_" [label="tb"];
  "in" -> "8 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_54" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb"];
  "8 D8" -> "9 <_" [label="tb"];
  "in" -> "8 D8";
}
// graph for dag "freia_54_terapix_helper_0_0_0" of module "freia_54" in dot format
digraph "freia_54_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "8 D8" [shape=box];
  "8 D8" -> "9 <_" [label="tb_1"];
  "8 D8" -> "10 E8" [label="tb_1"];
  "in" -> "8 D8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_54
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 32
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 37
 * - communication: 64
 */
freia_status freia_54_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 341;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: <_(2) -> 2
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi3;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_INF_CONST;
  // 3: <(2,1) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_1_0;
  mcu_macro[1][3].xmin3 = imagelet_io_1_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_INF3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{

   freia_54_terapix_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);                /*0008*/

   return FREIA_OK;                                                     /*0015*/
}

! cleaned up function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{

   freia_54_terapix_helper_0_0_0(out, in, freia_morpho_kernel_8c, 255);                /*0008*/

   return 0;                                                            /*0015*/
}
#
# OPENCL
#

! initial function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   freia_data2d *tc = freia_common_create_data(16, 128, 128);           /*0006*/

   freia_aipo_dilate_8c(tb, in, freia_morpho_kernel_8c);                /*0008*/
   freia_aipo_inf_const(tc, tb, 255);                                   /*0009*/
   freia_aipo_erode_8c(tb, tb, freia_morpho_kernel_8c);                 /*0010*/
   freia_aipo_inf(out, tc, tb);                                         /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tc);                                      /*0014*/
   return FREIA_OK;                                                     /*0015*/
}

! graphs

// graph for dag "dag_0" of module "freia_54" in dot format
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb"];
  "8 D8" -> "9 <_" [label="tb"];
  "in" -> "8 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_54" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb_1"];
  "8 D8" -> "9 <_" [label="tb_1"];
  "in" -> "8 D8";
}
// graph for dag "freia_54_opencl_helper_0_0" of module "freia_54" in dot format
digraph "freia_54_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "10 E8" [shape=box];
  "10 E8" -> "11 <" [label="tb"];
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "8 D8" [shape=box];
  "8 D8" -> "10 E8" [label="tb_1"];
  "8 D8" -> "9 <_" [label="tb_1"];
  "in" -> "8 D8";
}
// graph for dag "freia_54_opencl_helper_0_0_1" of module "freia_54" in dot format
digraph "freia_54_opencl_helper_0_0_1" {
  // inputs
  "tb" [shape=circle];
  "tb_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 <" [shape=trapezium,orientation=270];
  "11 <" -> "out";
  "tb" -> "11 <";
  "9 <_" [shape=trapezium,orientation=270];
  "9 <_" -> "11 <" [label="tc"];
  "tb_1" -> "9 <_";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 4 ops and 0 copies, optimized to 4 ops and 0+0+0 copies

// hold kernels for freia_54_opencl_helper_0_0_1
static cl_kernel freia_54_opencl_helper_0_0_1_kernel[2];

// compile kernels for freia_54_opencl_helper_0_0_1
static freia_status freia_54_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for freia_54_opencl_helper_0_0_1
  const char * freia_54_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_54_opencl_helper_0_0_1\n"
    "KERNEL void freia_54_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width,\n"
    "  int pitch,\n"
    "  int c0)\n"
    "{\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1;\n"
    "\n"
    "  // thread's pixel loop\n"
    "  int gid = pitch*get_global_id(0);\n"
    "  int i;\n"
    "  for (i=gid; i < (gid+width); i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    // pixel computations\n"
    "    PIXEL t9 = PIXEL_INF(in1, c0);\n"
    "    PIXEL t11 = PIXEL_INF(t9, in0);\n"
    "    // set output pixels\n"
    "    p0[i] = t11;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_54_opencl_helper_0_0_1_source, "freia_54_opencl_helper_0_0_1", "-DPIXEL8", &freia_54_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(freia_54_opencl_helper_0_0_1_source, "freia_54_opencl_helper_0_0_1", "-DPIXEL16", &freia_54_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function freia_54_opencl_helper_0_0_1
freia_status freia_54_opencl_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_54_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_54_opencl_helper_0_0_1_kernel[bpp];

  // call kernel freia_54_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 1, 2, 1, 0, o0, i0, i1, c0);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_54

// opencl for dag 0

// opencl function freia_54_opencl_helper_0_0_1
KERNEL void freia_54_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width,
  int pitch,
  int c0)
{
  GLOBAL PIXEL * p0 = o0 + ofs_o0;
  GLOBAL PIXEL * j0 = i0 + ofs_i0;
  GLOBAL PIXEL * j1 = i1 + ofs_i1;

  // thread's pixel loop
  int gid = pitch*get_global_id(0);
  int i;
  for (i=gid; i < (gid+width); i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    // pixel computations
    PIXEL t9 = PIXEL_INF(in1, c0);
    PIXEL t11 = PIXEL_INF(t9, in0);
    // set output pixels
    p0[i] = t11;
  }
}

! updated function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   // hardware accelerator generated variable
   freia_data2d *tb_1 = freia_common_create_data(tb->bpp, tb->widthWa, tb->heightWa);

   freia_aipo_dilate_8c(tb_1, in, freia_morpho_kernel_8c);              /*0008*/
   freia_aipo_erode_8c(tb, tb_1, freia_morpho_kernel_8c);               /*0010*/
   freia_54_opencl_helper_0_0_1(out, tb, tb_1, 255);                    /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tb_1);
   return FREIA_OK;                                                     /*0015*/
}

! cleaned up function

freia_status freia_54(freia_data2d *out, freia_data2d *in)
{
   freia_data2d *tb = freia_common_create_data(16, 128, 128);           /*0005*/
   // hardware accelerator generated variable
   freia_data2d *tb_1 = freia_common_create_data(tb->bpp, tb->widthWa, tb->heightWa);

   freia_aipo_dilate_8c(tb_1, in, freia_morpho_kernel_8c);              /*0008*/
   freia_aipo_erode_8c(tb, tb_1, freia_morpho_kernel_8c);               /*0010*/
   freia_54_opencl_helper_0_0_1(out, tb, tb_1, 255);                    /*0011*/

   freia_common_destruct_data(tb);                                      /*0013*/
   freia_common_destruct_data(tb_1);
   return 0;                                                            /*0015*/
}
#
# FREIA COMPILATION DONE
#

