#
# AIPO
#
#
# compile generated freia_19
#

! initial function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{

   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(t, i);                                               /*0012*/
   freia_aipo_copy(o, t);                                               /*0013*/

   freia_common_destruct_data(t);                                       /*0015*/

   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_19" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "13 =" [shape=circle];
  "13 =" -> "o";
  "12 =" [shape=circle];
  "12 =" -> "13 =" [label="t"];
  "i" -> "12 =";
}
// graph for dag "dag_cleaned_0" of module "freia_19" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! updated function for

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0017*/
}
#
# SPOC
#

! initial function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{

   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(t, i);                                               /*0012*/
   freia_aipo_copy(o, t);                                               /*0013*/

   freia_common_destruct_data(t);                                       /*0015*/

   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_19" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "13 =" [shape=circle];
  "13 =" -> "o";
  "12 =" [shape=circle];
  "12 =" -> "13 =" [label="t"];
  "i" -> "12 =";
}
// graph for dag "dag_cleaned_0" of module "freia_19" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 2 copies, optimized to 0 ops and 0+1 copies
// # SPOC calls: 0

! updated function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return 0;                                                            /*0017*/
}
#
# TERAPIX
#

! initial function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{

   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(t, i);                                               /*0012*/
   freia_aipo_copy(o, t);                                               /*0013*/

   freia_common_destruct_data(t);                                       /*0015*/

   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_19" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "13 =" [shape=circle];
  "13 =" -> "o";
  "12 =" [shape=circle];
  "12 =" -> "13 =" [label="t"];
  "i" -> "12 =";
}
// graph for dag "dag_cleaned_0" of module "freia_19" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 2 copies, optimized to 0 ops and 0+1 copies

! updated function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return 0;                                                            /*0017*/
}
#
# OPENCL
#

! initial function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{

   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(t, i);                                               /*0012*/
   freia_aipo_copy(o, t);                                               /*0013*/

   freia_common_destruct_data(t);                                       /*0015*/

   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_19" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "13 =" [shape=circle];
  "13 =" -> "o";
  "12 =" [shape=circle];
  "12 =" -> "13 =" [label="t"];
  "i" -> "12 =";
}
// graph for dag "dag_cleaned_0" of module "freia_19" in dot format
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! acceleration function

// freia opencl includes

// dag 0: 0 ops and 2 copies, optimized to 0 ops and 0+1 copies
// freia opencl includes
// generated opencl for function freia_19

// opencl for dag 0

! updated function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_19(freia_data2d *o, freia_data2d *i)
{
   
   
   // one useless copy
   // t = i
   // o = t
   freia_aipo_copy(o, i);
   
   
   return 0;                                                            /*0017*/
}
#
# FREIA COMPILATION DONE
#

