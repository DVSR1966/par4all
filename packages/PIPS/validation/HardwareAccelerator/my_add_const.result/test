#
# SPOC
#

! initial function

freia_status my_add_const(freia_data2d *o, freia_data2d *i0, int32_t p0)
{
   return freia_aipo_add_const(o, i0, p0);                              /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_add_const" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 +." [shape=trapezium,orientation=270];
  "5 +." -> "o";
  "i0" -> "5 +.";
}
// graph for dag "dag_cleaned_0" of module "my_add_const" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 +." [shape=trapezium,orientation=270];
  "5 +." -> "o";
  "i0" -> "5 +.";
}
// graph for dag "my_add_const_helper_0_0" of module "my_add_const" in dot format
digraph "my_add_const_helper_0_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 +." [shape=trapezium,orientation=270];
  "5 +." -> "o";
  "i0" -> "5 +.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module my_add_const
freia_status my_add_const_helper_0_0_0(freia_data2d * o0, freia_data2d * i0,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i0 [0 input 0] -> [0 alu] 5 add_const
  // nope
  // alu 5 add_const stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

freia_status my_add_const(freia_data2d *o, freia_data2d *i0, int32_t p0)
{
   return my_add_const_helper_0_0_0(o, i0, p0);                         /*0005*/
}
#
# TERAPIX
#

! initial function

freia_status my_add_const(freia_data2d *o, freia_data2d *i0, int32_t p0)
{
   return freia_aipo_add_const(o, i0, p0);                              /*0005*/
}

! graphs

// graph for dag "dag_0" of module "my_add_const" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 +." [shape=trapezium,orientation=270];
  "5 +." -> "o";
  "i0" -> "5 +.";
}
// graph for dag "dag_cleaned_0" of module "my_add_const" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 +." [shape=trapezium,orientation=270];
  "5 +." -> "o";
  "i0" -> "5 +.";
}
// graph for dag "my_add_const_helper_0_0" of module "my_add_const" in dot format
digraph "my_add_const_helper_0_0" {
  // inputs
  "i0" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "5 +." [shape=trapezium,orientation=270];
  "5 +." -> "o";
  "i0" -> "5 +.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module my_add_const
 * 1 input image, 1 output image
 * 2 image operations in dag
 * dag length is 2, dag width is 1
 * cost is 3 cycles per imagelet row
 */
freia_status my_add_const_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  int32_t pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  terapix_mcu_instr mcu_instr[1];

  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 512;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: +.(1) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_1;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_ADD_CONST;

  // inputs:
  // - imagelet 1 is i0 for i0

  // outputs:
  // - imagelet 1 is o0 for o

  // double buffer management:
  // - buffer 1/2

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_1i_1o(&param, o0, i0);


  return ret;
}


! updated function

freia_status my_add_const(freia_data2d *o, freia_data2d *i0, int32_t p0)
{
   return my_add_const_helper_0_0(o, i0, p0);                           /*0005*/
}
#
# FREIA COMPILATION DONE
#

