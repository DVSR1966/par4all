#
# SPOC
#

! initial function

freia_status freia_scalar_05(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   
   
   
   
   
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);       /*0011*/
   int sA, sB, sC;                                                      /*0012*/
   
   // look for order issues when reusing a temporary image
   freia_aipo_global_max(i, &sA);                                       /*0015*/
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0016*/
   freia_aipo_erode_8c(X, i, k);                                        /*0017*/
   freia_aipo_global_min(X, &sB);                                       /*0018*/
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0019*/
   freia_aipo_add(tC2, tC, tC);                                         /*0020*/
   freia_aipo_dilate_8c(X, tB, k);                                      /*0021*/
   freia_aipo_global_vol(X, &sC);                                       /*0022*/
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0023*/
   freia_aipo_add(o, tC2, tD);                                          /*0024*/

   freia_common_destruct_data(X);                                       /*0026*/
   freia_common_destruct_data(tB);                                      /*0027*/
   freia_common_destruct_data(tC);                                      /*0028*/
   freia_common_destruct_data(tC2);                                     /*0029*/
   freia_common_destruct_data(tD);                                      /*0030*/
   return FREIA_OK;                                                     /*0031*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_05" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "24 +" [shape=trapezium,orientation=270];
  "24 +" -> "o";
  "23 thr" [shape=parallelogram];
  "23 thr" -> "24 +" [label="tD"];
  "22 vol" [shape=diamond];
  "22 vol" -> "23 thr" [arrowhead=empty,label="sC"];
  "21 D8" [shape=box];
  "21 D8" -> "23 thr" [label="X"];
  "21 D8" -> "22 vol" [label="X"];
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "24 +" [label="tC2"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "20 +" [label="tC"];
  "19 thr" -> "20 +" [label="tC"];
  "18 min" [shape=diamond];
  "18 min" -> "19 thr" [arrowhead=empty,label="sB"];
  "17 E8" [shape=box];
  "17 E8" -> "19 thr" [label="X"];
  "17 E8" -> "18 min" [label="X"];
  "16 thr" [shape=parallelogram];
  "16 thr" -> "21 D8" [label="tB"];
  "15 max" [shape=diamond];
  "15 max" -> "16 thr" [arrowhead=empty,label="sA"];
  "i" -> "17 E8";
  "i" -> "16 thr";
  "i" -> "15 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_05" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "24 +" [shape=trapezium,orientation=270];
  "24 +" -> "o";
  "23 thr" [shape=parallelogram];
  "23 thr" -> "24 +" [label="tD"];
  "22 vol" [shape=diamond];
  "22 vol" -> "23 thr" [arrowhead=empty,label="sC"];
  "21 D8" [shape=box];
  "21 D8" -> "23 thr" [label="X"];
  "21 D8" -> "22 vol" [label="X"];
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "24 +" [label="tC2"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "20 +" [label="tC"];
  "19 thr" -> "20 +" [label="tC"];
  "18 min" [shape=diamond];
  "18 min" -> "19 thr" [arrowhead=empty,label="sB"];
  "17 E8" [shape=box];
  "17 E8" -> "19 thr" [label="X"];
  "17 E8" -> "18 min" [label="X"];
  "16 thr" [shape=parallelogram];
  "16 thr" -> "21 D8" [label="tB"];
  "15 max" [shape=diamond];
  "15 max" -> "16 thr" [arrowhead=empty,label="sA"];
  "i" -> "17 E8";
  "i" -> "16 thr";
  "i" -> "15 max";
}
// graph for dag "freia_scalar_05_helper_0_0" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X" [shape=circle];

  // computation vertices
  "18 min" [shape=diamond];
  "17 E8" [shape=box];
  "17 E8" -> "18 min" [label="X"];
  "17 E8" -> "X";
  "15 max" [shape=diamond];
  "i" -> "17 E8";
  "i" -> "15 max";
}
// graph for dag "freia_scalar_05_helper_0_1" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_1" {
  // inputs
  "i" [shape=circle];

  // outputs
  "tC" [shape=circle];

  // computation vertices
  "19 thr" [shape=parallelogram];
  "19 thr" -> "tC";
  "22 vol" [shape=diamond];
  "21 D8" [shape=box];
  "21 D8" -> "19 thr" [label="X"];
  "21 D8" -> "22 vol" [label="X"];
  "16 thr" [shape=parallelogram];
  "16 thr" -> "21 D8" [label="tB"];
  "i" -> "16 thr";
}
// graph for dag "freia_scalar_05_helper_0_2" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_2" {
  // inputs
  "tC" [shape=circle];

  // outputs
  "tC2" [shape=circle];

  // computation vertices
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "tC2";
  "tC" -> "20 +";
  "tC" -> "20 +";
}
// graph for dag "freia_scalar_05_helper_0_3" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_3" {
  // inputs
  "X" [shape=circle];
  "tC2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "24 +" [shape=trapezium,orientation=270];
  "24 +" -> "o";
  "tC2" -> "24 +";
  "23 thr" [shape=parallelogram];
  "23 thr" -> "24 +" [label="tD"];
  "X" -> "23 thr";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_scalar_05
freia_status freia_scalar_05_helper_0_0_0(freia_data2d * o0, freia_data2d * i0,
  int32_t * po0,
  const int32_t * pi1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;


  // STAGE 1
  // i [0 measure 0] -> [1 poc 0] 17 erode_8c
  // i [1 input 0] -> [1 poc 0] 17 erode_8c
  // nope
  // poc 17 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];

  // 0`X [1 poc 0] -> [1 measure 0] 17 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;


  // output image 0`X on 0
  // 0`X [1 measure 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`X [1 output 0] -> [7 output 0] 0 null
  // 0`X [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`X [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`X [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`X [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`X [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`X [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 15 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 18 global_min stage 1 side 0
  *po2 = (int32_t) reduc.measure[1][0].minimum;

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_05
freia_status freia_scalar_05_helper_0_1_0(freia_data2d * o0, freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  const int32_t * pi3,
  int32_t * po4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 threshold 0] 16 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 16 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 1
  // 0`tB [0 threshold 0] -> [1 poc 0] 21 dilate_8c
  // 0`tB [1 input 0] -> [1 poc 0] 21 dilate_8c
  // nope
  // poc 21 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi3[i];

  // 0`X [1 poc 0] -> [1 measure 0] 21 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;


  // STAGE 2
  // 0`X [1 measure 0] -> [2 threshold 0] 19 threshold
  // 0`X [2 input 0] -> [2 threshold 0] 19 threshold
  si.mux[2][0].op = SPOC_MUX_IN0;
  // threshold 19 threshold stage 2 side 0
  si.th[2][0].op = pi7? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[2][0].boundmin = pi5;
  sp.th[2][0].boundmax = pi6;


  // output image 0`tC on 0
  // 0`tC [2 threshold 0] -> [2 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`tC [2 output 0] -> [7 output 0] 0 null
  // 0`tC [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tC [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tC [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tC [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tC [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 22 global_vol stage 1 side 0
  *po4 = (int32_t) reduc.measure[1][0].volume;

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_05
freia_status freia_scalar_05_helper_0_2_0(freia_data2d * o0, freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tC [0 input 0] -> [0 alu] 20 add
  // nope
  // 0`tC [0 input 1] -> [0 alu] 20 add
  // nope
  // alu 20 add stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image 0`tC2 on 0
  // 0`tC2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`tC2 [0 output 0] -> [7 output 0] 0 null
  // 0`tC2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tC2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tC2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tC2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tC2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tC2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tC2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_05
freia_status freia_scalar_05_helper_0_3_0(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`X [0 input 0] -> [0 threshold 0] 23 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 23 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 1
  // 0`tD [0 threshold 0] -> [1 alu] 24 add
  // 0`tD [1 input 0] -> [1 alu] 24 add
  // nope
  // 0`tC2 [0 input 1] -> [1 alu] 24 add
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`tC2 [1 input 1] -> [1 alu] 24 add
  // nope
  // alu 24 add stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image o on 0
  // o [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_scalar_05(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   
   
   
   
   
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);         /*0011*/
   int sA, sB, sC;                                                      /*0012*/
   
   // look for order issues when reusing a temporary image
   freia_scalar_05_helper_0_0_0(X, i, &sA, k, &sB);                     /*0015*/
   freia_scalar_05_helper_0_1_0(tC, i, sA-10, sA-1, false, k, &sC, sB-10, sB-1, false);               /*0016*/
   freia_scalar_05_helper_0_2_0(tC2, tC);                               /*0020*/
   freia_scalar_05_helper_0_3_0(o, X, tC2, sC-10, sC-1, false);         /*0023*/

   freia_common_destruct_data(X);                                       /*0026*/
   freia_common_destruct_data(tC);                                      /*0028*/
   freia_common_destruct_data(tC2);                                     /*0029*/
   return FREIA_OK;                                                     /*0031*/
}
#
# TERAPIX
#

! initial function

freia_status freia_scalar_05(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   
   
   
   
   
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);       /*0011*/
   int sA, sB, sC;                                                      /*0012*/
   
   // look for order issues when reusing a temporary image
   freia_aipo_global_max(i, &sA);                                       /*0015*/
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0016*/
   freia_aipo_erode_8c(X, i, k);                                        /*0017*/
   freia_aipo_global_min(X, &sB);                                       /*0018*/
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0019*/
   freia_aipo_add(tC2, tC, tC);                                         /*0020*/
   freia_aipo_dilate_8c(X, tB, k);                                      /*0021*/
   freia_aipo_global_vol(X, &sC);                                       /*0022*/
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0023*/
   freia_aipo_add(o, tC2, tD);                                          /*0024*/

   freia_common_destruct_data(X);                                       /*0026*/
   freia_common_destruct_data(tB);                                      /*0027*/
   freia_common_destruct_data(tC);                                      /*0028*/
   freia_common_destruct_data(tC2);                                     /*0029*/
   freia_common_destruct_data(tD);                                      /*0030*/
   return FREIA_OK;                                                     /*0031*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_05" in dot format
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "24 +" [shape=trapezium,orientation=270];
  "24 +" -> "o";
  "23 thr" [shape=parallelogram];
  "23 thr" -> "24 +" [label="tD"];
  "22 vol" [shape=diamond];
  "22 vol" -> "23 thr" [arrowhead=empty,label="sC"];
  "21 D8" [shape=box];
  "21 D8" -> "23 thr" [label="X"];
  "21 D8" -> "22 vol" [label="X"];
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "24 +" [label="tC2"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "20 +" [label="tC"];
  "19 thr" -> "20 +" [label="tC"];
  "18 min" [shape=diamond];
  "18 min" -> "19 thr" [arrowhead=empty,label="sB"];
  "17 E8" [shape=box];
  "17 E8" -> "19 thr" [label="X"];
  "17 E8" -> "18 min" [label="X"];
  "16 thr" [shape=parallelogram];
  "16 thr" -> "21 D8" [label="tB"];
  "15 max" [shape=diamond];
  "15 max" -> "16 thr" [arrowhead=empty,label="sA"];
  "i" -> "17 E8";
  "i" -> "16 thr";
  "i" -> "15 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_05" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "24 +" [shape=trapezium,orientation=270];
  "24 +" -> "o";
  "23 thr" [shape=parallelogram];
  "23 thr" -> "24 +" [label="tD"];
  "22 vol" [shape=diamond];
  "22 vol" -> "23 thr" [arrowhead=empty,label="sC"];
  "21 D8" [shape=box];
  "21 D8" -> "23 thr" [label="X"];
  "21 D8" -> "22 vol" [label="X"];
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "24 +" [label="tC2"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "20 +" [label="tC"];
  "19 thr" -> "20 +" [label="tC"];
  "18 min" [shape=diamond];
  "18 min" -> "19 thr" [arrowhead=empty,label="sB"];
  "17 E8" [shape=box];
  "17 E8" -> "19 thr" [label="X"];
  "17 E8" -> "18 min" [label="X"];
  "16 thr" [shape=parallelogram];
  "16 thr" -> "21 D8" [label="tB"];
  "15 max" [shape=diamond];
  "15 max" -> "16 thr" [arrowhead=empty,label="sA"];
  "i" -> "17 E8";
  "i" -> "16 thr";
  "i" -> "15 max";
}
// graph for dag "freia_scalar_05_helper_0_0" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_0" {
  // inputs
  "X" [shape=circle];
  "tC2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "24 +" [shape=trapezium,orientation=270];
  "24 +" -> "o";
  "tC2" -> "24 +";
  "23 thr" [shape=parallelogram];
  "23 thr" -> "24 +" [label="tD"];
  "X" -> "23 thr";
}
// graph for dag "freia_scalar_05_helper_0_1" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_1" {
  // inputs
  "i" [shape=circle];

  // outputs
  "tC2" [shape=circle];

  // computation vertices
  "20 +" [shape=trapezium,orientation=270];
  "20 +" -> "tC2";
  "19 thr" [shape=parallelogram];
  "19 thr" -> "20 +" [label="tC"];
  "19 thr" -> "20 +" [label="tC"];
  "22 vol" [shape=diamond];
  "21 D8" [shape=box];
  "21 D8" -> "19 thr" [label="X"];
  "21 D8" -> "22 vol" [label="X"];
  "16 thr" [shape=parallelogram];
  "16 thr" -> "21 D8" [label="tB"];
  "i" -> "16 thr";
}
// graph for dag "freia_scalar_05_helper_0_2" of module "freia_scalar_05" in dot format
digraph "freia_scalar_05_helper_0_2" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X" [shape=circle];

  // computation vertices
  "18 min" [shape=diamond];
  "17 E8" [shape=box];
  "17 E8" -> "18 min" [label="X"];
  "17 E8" -> "X";
  "15 max" [shape=diamond];
  "i" -> "17 E8";
  "i" -> "15 max";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_scalar_05
 * 2 input images, 1 output image
 * 4 image operations in dag
 * dag length is 3, dag width is 2
 * cost is 9 cycles per imagelet row
 */
freia_status freia_scalar_05_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  terapix_mcu_instr mcu_instr[2];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  int imagelet_size = 256;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: thr(1) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_1;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  p_0[1] = pi4;
  p_0[2] = pi5;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_THRESHOLD;
  // 1: +(2,1) -> 1
  mcu_instr[1].macrocode.xmin1 = imagelet_2;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_1;
  mcu_instr[1].macrocode.ymin2 = 0;
  mcu_instr[1].macrocode.xmin3 = imagelet_1;
  mcu_instr[1].macrocode.ymin3 = 0;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_ADD;

  // inputs:
  // - imagelet 1 is i0 for X
  // - imagelet 2 is i1 for tC2

  // outputs:
  // - imagelet 1 is o0 for o

  // double buffer management:
  // - buffer 1/3
  // - buffer 2/4

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_2i_1o(&param, o0, i0, i1);


  return ret;
}


/* FREIA terapix helper function for module freia_scalar_05
 * 1 input image, 1 output image
 * 6 image operations in dag
 * dag length is 5, dag width is 1
 * cost is 32 cycles per imagelet row
 */
freia_status freia_scalar_05_helper_0_1(
  freia_data2d * o0,
  freia_data2d * i0,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4,
  const int32_t * pi5,
  int32_t * po6,
  int32_t pi7,
  int32_t pi8,
  int32_t pi9)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 3 parameters
  int16_t p_3[3];
  const int32_t x_3 = 6;
  const int32_t y_3 = 0;
  terapix_mcu_instr mcu_instr[5];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 340;
  int imagelet_1 = 0;
  int imagelet_2 = 340;
  int imagelet_3 = 680;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: thr(1) -> 1
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_1;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  p_0[1] = pi3;
  p_0[2] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_THRESHOLD;
  // 1: D8(1) -> 2
  mcu_instr[1].macrocode.xmin1 = imagelet_1;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_2;
  mcu_instr[1].macrocode.ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[1].macrocode.xmin3 = x_1;
  mcu_instr[1].macrocode.ymin3 = y_1;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_DILATE_3_3;
  // set measure vol at 1022
  // 2: vol(2)
  mcu_instr[2].macrocode.xmin1 = imagelet_2;
  mcu_instr[2].macrocode.ymin1 = 0;
  mcu_instr[2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[2].macrocode.iter2 = imagelet_size;
  mcu_instr[2].macrocode.addrStart = TERAPIX_UCODE_VOL?;
  // 3: thr(2) -> 2
  mcu_instr[3].macrocode.xmin1 = imagelet_2;
  mcu_instr[3].macrocode.ymin1 = 0;
  mcu_instr[3].macrocode.xmin2 = imagelet_2;
  mcu_instr[3].macrocode.ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi7;
  p_3[1] = pi8;
  p_3[2] = pi9;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[3].macrocode.xmin3 = x_3;
  mcu_instr[3].macrocode.ymin3 = y_3;
  mcu_instr[3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[3].macrocode.iter2 = imagelet_size;
  mcu_instr[3].macrocode.addrStart = TERAPIX_UCODE_THRESHOLD;
  // 4: +(2,2) -> 1
  mcu_instr[4].macrocode.xmin1 = imagelet_2;
  mcu_instr[4].macrocode.ymin1 = 0;
  mcu_instr[4].macrocode.xmin2 = imagelet_2;
  mcu_instr[4].macrocode.ymin2 = 0;
  mcu_instr[4].macrocode.xmin3 = imagelet_1;
  mcu_instr[4].macrocode.ymin3 = 0;
  mcu_instr[4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[4].macrocode.iter2 = imagelet_size;
  mcu_instr[4].macrocode.addrStart = TERAPIX_UCODE_ADD;

  // inputs:
  // - imagelet 1 is i0 for i

  // outputs:
  // - imagelet 1 is o0 for tC2

  // double buffer management:
  // - buffer 1/3

  // output imagelet erosion:
  //   north: 1
  //   south: 1
  //    west: 1
  //    east: 1

  ret = freia_cg_template_process_1i_1o(&param, o0, i0);

  // get measure vol result from 1022

  return ret;
}


/* FREIA terapix helper function for module freia_scalar_05
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 3, dag width is 1
 * cost is 21 cycles per imagelet row
 */
freia_status freia_scalar_05_helper_0_2(
  freia_data2d * o0,
  freia_data2d * i0,
  int32_t * po2,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  terapix_mcu_instr mcu_instr[4];

  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  int imagelet_size = 340;
  int imagelet_1 = 0;
  int imagelet_2 = 340;
  int imagelet_3 = 680;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // set measure max at 1023
  // 0: max(1)
  mcu_instr[0].macrocode.xmin1 = imagelet_1;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_MAX?;
  // 1: E8(1) -> 2
  mcu_instr[1].macrocode.xmin1 = imagelet_1;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_2;
  mcu_instr[1].macrocode.ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi3[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[1].macrocode.xmin3 = x_1;
  mcu_instr[1].macrocode.ymin3 = y_1;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_ERODE_3_3;
  // set measure min at 1022
  // 2: min(2)
  mcu_instr[2].macrocode.xmin1 = imagelet_2;
  mcu_instr[2].macrocode.ymin1 = 0;
  mcu_instr[2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[2].macrocode.iter2 = imagelet_size;
  mcu_instr[2].macrocode.addrStart = TERAPIX_UCODE_MIN?;
  // copy 2 -> 1
  mcu_instr[3].macrocode.xmin1 = imagelet_2;
  mcu_instr[3].macrocode.ymin1 = 0;
  mcu_instr[3].macrocode.xmin2 = imagelet_1;
  mcu_instr[3].macrocode.ymin2 = 0;
  mcu_instr[3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[3].macrocode.iter2 = imagelet_size;
  mcu_instr[3].macrocode.addrStart = TERAPIX_UCODE_COPY;

  // inputs:
  // - imagelet 1 is i0 for i

  // outputs:
  // - imagelet 1 is o0 for X

  // double buffer management:
  // - buffer 1/3

  // output imagelet erosion:
  //   north: 1
  //   south: 1
  //    west: 1
  //    east: 1

  ret = freia_cg_template_process_1i_1o(&param, o0, i0);

  // get measure max result from 1023
  // get measure min result from 1022

  return ret;
}


! updated function

freia_status freia_scalar_05(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   
   
   
   
   
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);          /*0011*/
   int sA, sB, sC;                                                      /*0012*/
   
   // look for order issues when reusing a temporary image
   freia_scalar_05_helper_0_2(X, i, &sA, k, &sB);                       /*0015*/
   freia_scalar_05_helper_0_1(tC2, i, sA-10, sA-1, false, k, &sC, sB-10, sB-1, false);                /*0016*/
   freia_scalar_05_helper_0_0(o, X, tC2, sC-10, sC-1, false);           /*0023*/

   freia_common_destruct_data(X);                                       /*0026*/
   freia_common_destruct_data(tC2);                                     /*0029*/
   return FREIA_OK;                                                     /*0031*/
}
#
# FREIA COMPILATION DONE
#

