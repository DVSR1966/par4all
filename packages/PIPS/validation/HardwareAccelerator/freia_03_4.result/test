#
# SPOC
#

! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_0(freia_data2d * o0, freia_data2d * o1, freia_data2d * i0, freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i1 [0 input 1] -> [0 alu] 28 addsat_const
  // nope
  // alu 28 addsat_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_ADDSAT_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // i0 [0 input 0] -> [1 alu] 27 add_const
  si.mux[0][0].op = SPOC_MUX_IN0;
  // i0 [1 input 0] -> [1 alu] 27 add_const
  // nope
  // alu 27 add_const stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`t1 [1 alu] -> [2 alu] 29 add
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`t1 [2 input 0] -> [2 alu] 29 add
  // nope
  // 0`t2 [0 alu] -> [2 alu] 29 add
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`t2 [1 input 1] -> [2 alu] 29 add
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`t2 [2 input 1] -> [2 alu] 29 add
  // nope
  // alu 29 add stage 2
  si.alu[2][0].op = SPOC_ALU_ADD_IN0_IN1;


  // STAGE 3
  // 0`t1 [2 poc 0] -> [3 alu] 30 mul_const
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t1 [3 input 0] -> [3 alu] 30 mul_const
  // nope
  // alu 30 mul_const stage 3
  si.alu[3][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[3][0].constant = pi2;


  // output image 0`t4 on 0 and image 0`t3 on 1
  // 0`t4 [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t4 [3 output 0] -> [3 output 0] 0 null
  // nope

  // 0`t3 [2 alu] -> [3 output 1] 0 null
  si.mux[2][1].op = SPOC_MUX_IN1;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`t3 [3 input 1] -> [3 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`t3 [3 output 1] -> [3 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_03
freia_status freia_03_helper_0_0_1(freia_data2d * o0, freia_data2d * i0, freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  spoc_reduction reduc;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_reduction_results redres;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t3 [0 input 0] -> [0 alu] 31 div_const
  // nope
  // alu 31 div_const stage 0
  si.alu[0][0].op = SPOC_ALU_DIV_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`t5 [0 alu] -> [1 alu] 32 and
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t5 [1 input 0] -> [1 alu] 32 and
  // nope
  // 0`t4 [0 input 1] -> [1 alu] 32 and
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`t4 [1 input 1] -> [1 alu] 32 and
  // nope
  // alu 32 and stage 1
  si.alu[1][0].op = SPOC_ALU_AND_IN0_IN1;


  // STAGE 2
  // alu 33 set_constant stage 2
  si.alu[2][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[2][0].constant = pi1;


  // STAGE 3
  // 0`t6 [1 alu] -> [3 alu] 34 mul
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`t6 [2 input 0] -> [3 alu] 34 mul
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t6 [3 input 0] -> [3 alu] 34 mul
  // nope
  // 0`t7 [2 alu] -> [3 alu] 34 mul
  si.mux[2][1].op = SPOC_MUX_IN1;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`t7 [3 input 1] -> [3 alu] 34 mul
  // nope
  // alu 34 mul stage 3
  si.alu[3][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image o on 0
  // o [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [3 output 0] -> [3 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128);          /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0_0(t4, t3, i0, i1, c2, c1, c3);                   /*0027*/
   freia_03_helper_0_0_1(o, t3, t4, c4, c5);                            /*0031*/

   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/

   return FREIA_OK;                                                     /*0044*/
}
#
# TERAPIX
#

! initial function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   freia_data2d *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128), *t6 = freia_common_create_data(16, 128, 128), *t7 = freia_common_create_data(16, 128, 128);     /*0016*/
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_aipo_add_const(t1, i0, c1);                                    /*0027*/
   freia_aipo_addsat_const(t2, i1, c2);                                 /*0028*/
   freia_aipo_add(t3, t1, t2);                                          /*0029*/
   freia_aipo_mul_const(t4, t1, c3);                                    /*0030*/
   freia_aipo_div_const(t5, t3, c4);                                    /*0031*/
   freia_aipo_and(t6, t4, t5);                                          /*0032*/
   freia_aipo_set_constant(t7, c5);                                     /*0033*/
   freia_aipo_mul(o, t6, t7);                                           /*0034*/

   freia_common_destruct_data(t1);                                      /*0036*/
   freia_common_destruct_data(t2);                                      /*0037*/
   freia_common_destruct_data(t3);                                      /*0038*/
   freia_common_destruct_data(t4);                                      /*0039*/
   freia_common_destruct_data(t5);                                      /*0040*/
   freia_common_destruct_data(t6);                                      /*0041*/
   freia_common_destruct_data(t7);                                      /*0042*/

   return FREIA_OK;                                                     /*0044*/
}

! graphs

// graph for dag "dag_0" of module "freia_03" in dot format
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "dag_cleaned_0" of module "freia_03" in dot format
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
}
// graph for dag "freia_03_helper_0_0" of module "freia_03" in dot format
digraph "freia_03_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "34 *" [shape=trapezium,orientation=270];
  "34 *" -> "o";
  "32 &" [shape=trapezium,orientation=270];
  "32 &" -> "34 *" [label="t6"];
  "31 /." [shape=trapezium,orientation=270];
  "31 /." -> "32 &" [label="t5"];
  "30 *." [shape=trapezium,orientation=270];
  "30 *." -> "32 &" [label="t4"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "31 /." [label="t3"];
  "33 C" [shape=trapezium,orientation=270];
  "33 C" -> "34 *" [label="t7"];
  "27 +." [shape=trapezium,orientation=270];
  "27 +." -> "30 *." [label="t1"];
  "27 +." -> "29 +" [label="t1"];
  "i0" -> "27 +.";
  "28 +s." [shape=trapezium,orientation=270];
  "28 +s." -> "29 +" [label="t2"];
  "i1" -> "28 +s.";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

/* FREIA terapix helper function for module freia_03
 * 2 input images, 1 output image
 * 10 image operations in dag
 * dag length is 6, dag width is 2
 * cost is 26 cycles per imagelet row
 */
freia_status freia_03_helper_0_0(
  freia_data2d * o0,
  freia_data2d * i0,
  freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 2;
  const int32_t y_2 = 0;
  // operation 4 parameters
  int16_t p_4[1];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  // operation 5 parameters
  int16_t p_5[1];
  const int32_t x_5 = 4;
  const int32_t y_5 = 0;
  terapix_mcu_instr mcu_instr[8];

  // imagelet definitions...
  int imagelet_size = 204;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // subimage operation
  param.size = sizeof(mcu_instr);
  param.raw = (void*) mcu_instr;

  // dyn_param contents  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);
  // 0: +s.(2) -> 2
  mcu_instr[0].macrocode.xmin1 = imagelet_2;
  mcu_instr[0].macrocode.ymin1 = 0;
  mcu_instr[0].macrocode.xmin2 = imagelet_2;
  mcu_instr[0].macrocode.ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[0].macrocode.xmin3 = x_0;
  mcu_instr[0].macrocode.ymin3 = y_0;
  mcu_instr[0].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[0].macrocode.iter2 = imagelet_size;
  mcu_instr[0].macrocode.addrStart = TERAPIX_UCODE_ADDSAT_CONST?;
  // 1: +.(1) -> 1
  mcu_instr[1].macrocode.xmin1 = imagelet_1;
  mcu_instr[1].macrocode.ymin1 = 0;
  mcu_instr[1].macrocode.xmin2 = imagelet_1;
  mcu_instr[1].macrocode.ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi4;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[1].macrocode.xmin3 = x_1;
  mcu_instr[1].macrocode.ymin3 = y_1;
  mcu_instr[1].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[1].macrocode.iter2 = imagelet_size;
  mcu_instr[1].macrocode.addrStart = TERAPIX_UCODE_ADD_CONST;
  // 2: C() -> 3
  mcu_instr[2].macrocode.xmin??? = imagelet_3;
  mcu_instr[2].macrocode.ymin??? = 0;
  // copy of operation 2 parameters
  p_2[0] = pi5;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[2].macrocode.xmin3 = x_2;
  mcu_instr[2].macrocode.ymin3 = y_2;
  mcu_instr[2].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[2].macrocode.iter2 = imagelet_size;
  mcu_instr[2].macrocode.addrStart = TERAPIX_UCODE_SET_CONST?;
  // 3: +(1,2) -> 2
  mcu_instr[3].macrocode.xmin1 = imagelet_1;
  mcu_instr[3].macrocode.ymin1 = 0;
  mcu_instr[3].macrocode.xmin2 = imagelet_2;
  mcu_instr[3].macrocode.ymin2 = 0;
  mcu_instr[3].macrocode.xmin3 = imagelet_2;
  mcu_instr[3].macrocode.ymin3 = 0;
  mcu_instr[3].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[3].macrocode.iter2 = imagelet_size;
  mcu_instr[3].macrocode.addrStart = TERAPIX_UCODE_ADD;
  // 4: *.(1) -> 1
  mcu_instr[4].macrocode.xmin1 = imagelet_1;
  mcu_instr[4].macrocode.ymin1 = 0;
  mcu_instr[4].macrocode.xmin2 = imagelet_1;
  mcu_instr[4].macrocode.ymin2 = 0;
  // copy of operation 4 parameters
  p_4[0] = pi6;
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[4].macrocode.xmin3 = x_4;
  mcu_instr[4].macrocode.ymin3 = y_4;
  mcu_instr[4].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[4].macrocode.iter2 = imagelet_size;
  mcu_instr[4].macrocode.addrStart = TERAPIX_UCODE_MUL_CONST;
  // 5: /.(2) -> 2
  mcu_instr[5].macrocode.xmin1 = imagelet_2;
  mcu_instr[5].macrocode.ymin1 = 0;
  mcu_instr[5].macrocode.xmin2 = imagelet_2;
  mcu_instr[5].macrocode.ymin2 = 0;
  // copy of operation 5 parameters
  p_5[0] = pi7;
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_instr[5].macrocode.xmin3 = x_5;
  mcu_instr[5].macrocode.ymin3 = y_5;
  mcu_instr[5].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[5].macrocode.iter2 = imagelet_size;
  mcu_instr[5].macrocode.addrStart = TERAPIX_UCODE_DIV_CONST;
  // 6: &(1,2) -> 2
  mcu_instr[6].macrocode.xmin1 = imagelet_1;
  mcu_instr[6].macrocode.ymin1 = 0;
  mcu_instr[6].macrocode.xmin2 = imagelet_2;
  mcu_instr[6].macrocode.ymin2 = 0;
  mcu_instr[6].macrocode.xmin3 = imagelet_2;
  mcu_instr[6].macrocode.ymin3 = 0;
  mcu_instr[6].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[6].macrocode.iter2 = imagelet_size;
  mcu_instr[6].macrocode.addrStart = TERAPIX_UCODE_AND;
  // 7: *(2,3) -> 1
  mcu_instr[7].macrocode.xmin1 = imagelet_2;
  mcu_instr[7].macrocode.ymin1 = 0;
  mcu_instr[7].macrocode.xmin2 = imagelet_3;
  mcu_instr[7].macrocode.ymin2 = 0;
  mcu_instr[7].macrocode.xmin3 = imagelet_1;
  mcu_instr[7].macrocode.ymin3 = 0;
  mcu_instr[7].macrocode.iter1 = TERAPIX_PE_NUMBER;
  mcu_instr[7].macrocode.iter2 = imagelet_size;
  mcu_instr[7].macrocode.addrStart = TERAPIX_UCODE_MUL;

  // inputs:
  // - imagelet 1 is i0 for i0
  // - imagelet 2 is i1 for i1

  // outputs:
  // - imagelet 1 is o0 for o

  // double buffer management:
  // - buffer 1/4
  // - buffer 2/5

  // output imagelet erosion:
  //   north: 0
  //   south: 0
  //    west: 0
  //    east: 0

  ret = freia_cg_template_process_2i_1o(&param, o0, i0, i1);


  return ret;
}


! updated function

freia_status freia_03(freia_data2d *o, freia_data2d *i0, freia_data2d *i1, int32_t c1, int32_t c2, int32_t c3, int32_t c4, int32_t c5)
{
   
   
   
   
   
   
   
   
   // 1 pipeline call is enough
   // t1 = f(i0)
   // t2 = g(i1)
   // t3 = t1 + t2
   // t4 = h(t1)
   // t5 = i(t3)
   // t6 = t4 & t5
   // t7 = m()
   // o  = t6 * t7
   freia_03_helper_0_0(o, i0, i1, c2, c1, c5, c3, c4);                  /*0027*/
   
   
   return FREIA_OK;                                                     /*0044*/
}
#
# FREIA COMPILATION DONE
#

