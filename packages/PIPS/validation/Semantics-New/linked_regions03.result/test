
Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T(ii,jj,x0) {}

   int ii, jj, x0;

//  T() {}

   double x1;


//  T(N) {N==100}

   int N = 100;

//  T() {}

   double A[100][100];

//  T(ii,jj,x0) {ii<=N, 1<=ii}


   for(ii = 1; ii <= N; ii += 1)

//  T(jj,x0) {jj<=N, 1<=jj}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  T(x0) {}

         if (1) {

//  T(x0) {}

            x0 = ii*jj;

//  T() {}

            x1 = (double) N/2;

//  T() {}

            if (x0<x1)

//  T() {}

               if (1) {

//  T() {}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  T() {}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  T() {}

            if (ii==jj)

//  T() {}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  T(i) {}

      int i;

//  T(i) {i+1<=N, 0<=i}

      for(i = 0; i <= N-1; i += 1) {

//  T(j) {}

         int j;

//  T(j) {j+1<=N, 0<=j}

         for(j = 0; j <= N-1; j += 1)

//  T() {}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {main==0}

   return 0;
}

Preconditions for "main": first case


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P(ii,jj,x0) {}

   double x1;


//  P(ii,jj,x0) {}

   int N = 100;

//  P(N,ii,jj,x0) {N==100}

   double A[100][100];

//  P(N,ii,jj,x0) {N==100}


   for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

         if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

      int i;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99}

         int j;

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{0<=PHI1+1, PHI1<=99,
//    0<=127758332001PHI1+119988019900PHI2+11624349656801,
//    0<=12102843453PHI1+4775576750PHI2+226119939703,
//    0<=11897874453PHI1+4972507750PHI2+226513801703,
//    0<=9424601805PHI1+2499235102PHI2+221567256407,
//    0<=7455249051PHI1+9240912548PHI2+235050611299,
//    0<=4895900547PHI1+4711800947PHI2+9423601894,
//    0<=4880026995PHI1+6865591292PHI2+230299968787,
//    0<=4702001151PHI1+4513821151PHI2+9027642302,
//    0<=1912118187PHI1+6312475PHI2+123732359462,
//    0<=156187353PHI1+310799050PHI2+31551531728,
//    0<=148953426PHI1+189795179PHI2+5179640305,
//    0<=147964899PHI1+192609052PHI2+4804989251,
//    0<=121111152PHI1+2302774649PHI2+221174335501,
//    0<=118987599PHI1+26937799PHI2+2286543497,
//    0<=102274422PHI1+121072247PHI2+2691149569,
//    0<=97245426PHI1+120062251PHI2+2498990177,
//    0<=76239849PHI1+502375PHI2+7472547224,
//    0<=74082201PHI1+70082201PHI2+2372832301,
//    0<=52055598PHI1+48985897PHI2+5247446795,
//    0<=48925398PHI1+2440249PHI2+2237548397,
//    0<=48574851PHI1+46554851PHI2+93109702,
//    0<=48217699PHI1+2192799PHI2+2259605698,
//    0<=48059551PHI1+46079551PHI2+92159102,
//    0<=42615887PHI1+12372451PHI2+1760122238,
//    0<=38350743PHI1+78503675PHI2+15387225586,
//    0<=25452699PHI1+24992450PHI2+2282652799,
//    0<=25284851PHI1+25745100PHI2+2398299851,
//    0<=24963051PHI1+47779876PHI2+2354425427,
//    0<=24769751PHI1+25250000PHI2+2499289651,
//    0<=13124901PHI1+1249993825PHI2+244988006126,
//    0<=12394677PHI1+24996238PHI2+3662285765,
//    0<=12372549PHI1+24988862PHI2+3785748961,
//    0<=3875259PHI1+1004059PHI2+188815277,
//    0<=2747199PHI1+262399PHI2+120572297,
//    0<=2524497PHI1+1004750PHI2+49534747,
//    0<=2494403PHI1+1004750PHI2+48593653,
//    0<=2410248PHI1+47054401PHI2+4513879949,
//    0<=2024745PHI1+504998PHI2+48535243,
//    0<=2004549PHI1+504998PHI2+46574647,
//    0<=1994651PHI1+504998PHI2+47594149,
//    0<=1954461PHI1+984655PHI2+95137616,
//    0<=1757199PHI1+252499PHI2+72557099,
//    489751PHI2<=1530249PHI1+149456047,
//    0<=1504599PHI1+1984652PHI2+51494551,
//    0<=1494701PHI1+1965248PHI2+50514649,
//    0<=1493517PHI1+43561PHI2+140310128,
//    0<=1469459PHI1+33859PHI2+140756518,
//    0<=1384711PHI1+502375PHI2+60658586,
//    0<=1257249PHI1+252499PHI2+48039848,
//    0<=1232601PHI1+1717601PHI2+123482701,
//    227651PHI2<=1027173PHI1+95824772,
//    0<=1020197PHI1+980597PHI2+1961194,
//    232601PHI2<=1009799PHI1+96302398,
//    0<=1005051PHI1+1465300PHI2+48495251,
//    0<=1004851PHI1+24751PHI2+46074402,
//    0<=1004847PHI1+1484900PHI2+50495047,
//    0<=994949PHI1+1465496PHI2+49515145,
//    0<=985047PHI1+49490099PHI2+5047005346,
//    0<=982626PHI1+1227551PHI2+26702677,
//    0<=977576PHI1+1217651PHI2+26202727,
//    0<=975549PHI1+475300PHI2+950600,
//    0<=955149PHI1+494900PHI2+989800,
//    0<=747399PHI1+1222699PHI2+74497499,
//    494701PHI2<=525399PHI1+99470848,
//    494751PHI2<=515249PHI1+99465698,
//    0<=510042PHI1+461041PHI2+50407133, 0<=509901PHI1+50PHI2+504901,
//    0<=505190PHI1+514599PHI2+49005689,
//    0<=494900PHI1+504701PHI2+50984701, 0<=465198PHI1+4949PHI2+9898,
//    0<=250151PHI1+255100PHI2+25745151,
//    0<=247451PHI1+487526PHI2+24742477,
//    0<=133626PHI1+118825PHI2+2413008626,
//    0<=80283PHI1+20095PHI2+3911783,
//    0<=61888PHI1+118825PHI2+12186888,
//    0<=39891PHI1+58903PHI2+3989399, 0<=39309PHI1+58709PHI2+3929809,
//    0<=30813PHI1+29213PHI2+1068325, 0<=29694PHI1+39103PHI2+1009697,
//    0<=29310PHI1+39107PHI2+1048117, 0<=29108PHI1+38711PHI2+1028119,
//    0<=25251PHI1+5051PHI2+500053, 0<=24949PHI1+5149PHI2+470547,
//    0<=24648PHI1+504701PHI2+48534649,
//    0<=24452PHI1+494999PHI2+47574151,
//    0<=22223PHI1+742351PHI2+72777374, 0<=10298PHI1+299PHI2+460847,
//    0<=10203PHI1+9803PHI2+19606, 0<=10198PHI1+199PHI2+480647,
//    0<=10151PHI1+51PHI2+495002, 0<=10101PHI1+100PHI2+1009802,
//    0<=10049PHI1+149PHI2+485398, 0<=9701PHI1+98PHI2+4949,
//    0<=9498PHI1+97PHI2+194, 0<=5153PHI1+4753PHI2+9506,
//    0<=5149PHI1+5050PHI2+490349, 0<=5046PHI1+4949PHI2+480445,
//    0<=4998PHI1+5099PHI2+525197, 0<=4955PHI1+5151PHI2+1509855,
//    0<=4953PHI1+4753PHI2+1450253, 0<=4949PHI1+5149PHI2+1529849,
//    0<=4854PHI1+4753PHI2+499457, 0<=4852PHI1+4753PHI2+489755,
//    0<=2621PHI1+4949PHI2+718095, 0<=2526PHI1+4753PHI2+732354,
//    0<=1363PHI1+2525PHI2+491313, 0<=687PHI1+19699PHI2+1921586,
//    0<=489PHI1+9898PHI2+951287, 95PHI2<=309PHI1+29213,
//    97PHI2<=303PHI1+29209, 0<=301PHI1+2PHI2+101,
//    0<=293PHI1+196PHI2+9898, 0<=201PHI1+100PHI2+200,
//    0<=201PHI1+PHI2+101, 0<=199PHI1+100PHI2+200,
//    49PHI2<=151PHI1+14753, 0<=105PHI1+101PHI2+29605,
//    97PHI2<=105PHI1+19408, 97PHI2<=103PHI1+19406, 0<=102PHI1+PHI2+2,
//    0<=101PHI1+198PHI2+9999, 0<=100PHI1+PHI2+2,
//    0<=99PHI1+4753PHI2+485002, 49PHI2<=52PHI1+9803,
//    49PHI2<=51PHI1+9802, 6PHI2<=19PHI1+1831, 0<=3PHI1+PHI2+101,
//    0<=PHI1+PHI2+2, PHI1<=98PHI2+9997, PHI1+PHI2<=198,
//    47PHI1+49PHI2<=9704, 49PHI1<=50PHI2+504901,
//    93PHI1+97PHI2<=19210, 96PHI1<=PHI2+9605, 195PHI1<=PHI2+19505,
//    1451PHI1+1517PHI2<=303798, 3662PHI1<=25PHI2+365063,
//    4553PHI1+4751PHI2<=950996, 4647PHI1+4849PHI2<=970204,
//    4899PHI1<=50PHI2+490051, 9996PHI1<=PHI2+999605,
//    455199PHI1<=5050PHI2+45574751, 479451PHI1+499651PHI2<=98960998,
//    692853PHI1+717701PHI2<=143109746,
//    888225PHI1+916937PHI2<=184502738,
//    21136803PHI1+22057301PHI2<=4421221196,
//    22294551PHI1<=237650PHI2+2233143199, N==100}>


   for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1+PHI2<=198,
//    460249ii<=975549PHI1+475300PHI2+1410849,
//    460249ii<=955149PHI1+494900PHI2+1450049,
//    19109ii<=29007PHI1+19404PHI2+999011,
//    14849ii<=19899PHI1+9900PHI2+514799,
//    10199ii<=10101PHI1+100PHI2+1020001,
//    4949ii<=5049PHI1+4950PHI2+494999,
//    0<=489PHI1+9898PHI2+9409ii+10387, 101ii<=201PHI1+100PHI2+301,
//    99ii<=199PHI1+100PHI2+299, 0<=105PHI1+9506PHI2+10201ii+8811,
//    49PHI2<=51PHI1+100ii+4653, 2ii<=3PHI1+PHI2+103,
//    98PHI2<=3PHI1+101ii+9405, 49PHI2<=PHI1+50ii+4752,
//    PHI1<=98PHI2+99ii+97, 3PHI1<=98PHI2+101ii+95,
//    48PHI1+49PHI2<=ii+9603, 51PHI1<=49PHI2+100ii+4849,
//    51PHI1+50PHI2+ii<=10099, 99PHI1<=9702PHI2+295ii+960203,
//    5049PHI1<=485100PHI2+252499ii+24245051,
//    10197PHI1<=19404PHI2+20095ii+959807,
//    504951PHI1<=4900PHI2+500149ii+48980149,
//    0<=499851PHI1+252499ii+23274851, 0<=9999PHI1+20095ii+920999,
//    1<=99PHI1+ii, 97ii<=99PHI1+9799, ii<=PHI1+101, PHI1<=ii+97,
//    99PHI1<=101ii+9601, 99PHI1<=ii+9701, N==100, 1<=ii, ii<=100}>

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{9801ii<=19701PHI1+9900PHI2+200jj+9601,
//    4949ii+1<=5049PHI1+4950PHI2+4950jj,
//    49PHI2+49jj<=51PHI1+100ii+4702, 2ii+jj<=3PHI1+PHI2+104,
//    48PHI1+49PHI2<=ii+49jj+4703, 51PHI1+49jj<=49PHI2+100ii+4898,
//    99PHI1+9997<=9702PHI2+9801ii+196jj,
//    99PHI1+9997<=9702PHI2+295ii+9702jj,
//    5049PHI1+4950PHI2+99ii<=5050jj+494801, PHI1+PHI2<=jj+98,
//    1<=99PHI1+ii, 99PHI1<=ii+9701, N==100, 1<=ii, ii<=100, 1<=jj,
//    jj<=100}>

         if (1) {
            x0 = ii*jj;
            x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{ii+4899<=51PHI1+50PHI2+50jj,
//    49PHI2+49jj<=51PHI1+100ii+4702, 4803<=48PHI1+49PHI2+ii+49jj,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    48PHI1+49PHI2<=ii+49jj+4703, 51PHI1+49jj<=49PHI2+100ii+4898,
//    51PHI1+50PHI2+ii<=50jj+4999, 1<=99PHI1+ii, 99PHI1<=ii+9701,
//    N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}>

            if (x0<x1)

//  <A[PHI1][PHI2]-W-MAY-{ii+4899<=51PHI1+50PHI2+50jj,
//    49PHI2+49jj<=51PHI1+100ii+4702, 4803<=48PHI1+49PHI2+ii+49jj,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    48PHI1+49PHI2<=ii+49jj+4703, 51PHI1+49jj<=49PHI2+100ii+4898,
//    51PHI1+50PHI2+ii<=50jj+4999, 1<=99PHI1+ii, 99PHI1<=ii+9701,
//    N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}>

               if (1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                  A[N-ii-1][ii+jj-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100}>

               A[ii-1][jj-1] = 1.0;
         }
   {
      int i;

//  <A[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=99, N==100, ii==101,
//    jj==101, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}

Preconditions for "main": second case (after transformer refinement)


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P(ii,jj,x0) {}

   double x1;


//  P(ii,jj,x0) {}

   int N = 100;

//  P(N,ii,jj,x0) {N==100}

   double A[100][100];

//  P(N,ii,jj,x0) {N==100}


   for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

         if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100, x0<=100ii, ii<=x0}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      int i;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         int j;

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99, 100<=x0, x0<=10000}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

   return 0;
}

Regions for "main" after transformer refinement


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{N==100}>


   for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

         if (1) {
            x0 = ii*jj;
            x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

            if (x0<x1)

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

               if (1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[N-ii-1][ii+jj-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

               A[ii-1][jj-1] = 1.0;
         }
   {
      int i;

//  <A[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=99, N==100, ii==101,
//    jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}

Let us try again from scratch for the third case, when context are used to compute transformers


Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T(ii,jj,x0) {}

   int ii, jj, x0;

//  T() {}

   double x1;


//  T(N) {N==100}

   int N = 100;

//  T() {N==100}

   double A[100][100];

//  T(ii,jj,x0) {N==100, 1<=ii, ii<=100}


   for(ii = 1; ii <= N; ii += 1)

//  T(jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  T(x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

         if (1) {

//  T(x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            x0 = ii*jj;

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            x1 = (double) N/2;

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            if (x0<x1)

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

               if (1) {

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  T() {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100,
//    x0<=100jj, jj<=x0}

            if (ii==jj)

//  T() {N==100, ii==jj, 1<=ii, ii<=100, x0<=100ii, ii<=x0}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  T(i) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      int i;

//  T(i) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}

      for(i = 0; i <= N-1; i += 1) {

//  T(j) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}

         int j;

//  T(j) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j, j<=99, 100<=x0,
//    x0<=10000}

         for(j = 0; j <= N-1; j += 1)

//  T() {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j, j<=99, 100<=x0,
//    x0<=10000}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {N==100, ii==101, jj==101, main==0, 100<=x0, x0<=10000}

   return 0;
}

Preconditions for "main": third case


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P(ii,jj,x0) {}

   double x1;


//  P(ii,jj,x0) {}

   int N = 100;

//  P(N,ii,jj,x0) {N==100}

   double A[100][100];

//  P(N,ii,jj,x0) {N==100}


   for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

         if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[N-ii-1][ii+jj-1] = 1.0;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, x0<=100ii, ii<=x0, 1<=jj,
//    jj<=100, x0<=100jj, jj<=x0}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100, x0<=100ii, ii<=x0}

               A[ii-1][jj-1] = 1.0;
         }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      int i;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         int j;

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 100<=x0,
//    x0<=10000}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99, 100<=x0, x0<=10000}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101, 100<=x0, x0<=10000}

   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{N==100}>


   for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

      /* The region for A computed here contains the point N=100,
      	ii==1, jj==1, phi1==0, phi2==0 */
      for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{N==100, 0<=ii, ii<=100}>

         if (1) {
            x0 = ii*jj;
            x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

            if (x0<x1)

//  <A[PHI1][PHI2]-W-MAY-{490002<=4899PHI1+4999PHI2+100ii+4999jj,
//    ii+4899<=51PHI1+50PHI2+50jj, 49PHI2+51jj<=51PHI1+100ii+4902,
//    2ii+jj<=3PHI1+PHI2+104, 3PHI1+PHI2+2ii+jj<=496,
//    51PHI1+51jj<=49PHI2+100ii+5098, 51PHI1+50PHI2+ii<=50jj+4999,
//    4899PHI1+4999PHI2<=100ii+4999jj+480002,
//    x0+240150<=2400PHI1+2450PHI2+50ii+2550jj,
//    ii+4803<=48PHI1+49PHI2+49jj+2x0, 2ii+jj+96<=3PHI1+PHI2+2x0,
//    3PHI1+PHI2+2ii+jj<=2x0+296, 48PHI1+49PHI2+ii<=49jj+2x0+4703,
//    2400PHI1+2450PHI2+x0<=50ii+2550jj+235150, jj<=201PHI1+PHI2+102,
//    201PHI1+PHI2+jj<=19898, x0+4800<=150PHI1+50PHI2+50jj,
//    150PHI1+50PHI2+x0<=50jj+14800, N==100, ii<=100, x0<=100ii,
//    ii<=x0, jj<=100, x0<=100jj, jj<=x0}>

               if (1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[N-ii-1][ii+jj-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100,
//    ii<=100, x0<=100ii, ii<=x0, 1<=jj, jj<=100, x0<=100jj, jj<=x0}>

                  A[ii-1][N-ii-jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100, x0<=100ii, ii<=x0}>

               A[ii-1][jj-1] = 1.0;
         }
   {
      int i;

//  <A[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-MAY-{PHI1==i, 0<=PHI2, PHI2<=99, N==100, ii==101,
//    jj==101, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99, 100<=x0, x0<=10000}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }
   return 0;
}
