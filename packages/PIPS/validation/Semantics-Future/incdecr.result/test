
TRANSFORMERS


//  T() {}

void run()
{

//  T(i,s) {i==0, s==0}

   int s = 0, i = 0;

//  T(c1,c2) {c1==0, c2==0, i==0, s==0}

   int c1 = 0, c2 = 0;

//  T(c1,i) {c1==i, c1#init==i#init, c2==0, s==0, 0<=c1, c1#init<=c1}

   // compteurs pour la correction
   
   while (alea()) {

//  T(i) {c2==0, i==i#init+1, s==0}

      i++;

//  T(c1) {c1==c1#init+1, c2==0, s==0}

      c1++;
   }

//  T(s) {c1==i, c2==0, s==1, s#init==0, 0<=c1}

   s = 1;

//  T(c2,i) {c1+c2#init==c2+i, c2+i==c1, c1==i#init, s==1, 1<=c1,
//    c2+1<=c1, c2#init<=c2}

   while (i>=1) {

//  T(i) {i==i#init-1, s==1, 1<=c1, 0<=i}

      i--;

//  T(c2) {c2==c2#init+1, s==1, 1<=c1, 0<=i}

      c2++;
   }

//  T() {c1==c2, i==0, s==1, 0<=c1}

   if (c1!=c2)

//  T() {0==-1}

      error();

//  T() {c1==c2, i==0, s==1, 0<=c1}

   printf("i = %d\n", i);
}

PRECONDITIONS


//  P() {}

void run()
{

//  P() {}

   int s = 0, i = 0;

//  P(i,s) {i==0, s==0}

   int c1 = 0, c2 = 0;

//  P(c1,c2,i,s) {c1==0, c2==0, i==0, s==0}

   // compteurs pour la correction
   
   while (alea()) {

//  P(c1,c2,i,s) {c1==i, c2==0, s==0, 0<=c1}

      i++;

//  P(c1,c2,i,s) {c1==i-1, c2==0, s==0, 0<=c1}

      c1++;
   }

//  P(c1,c2,i,s) {c1==i, c2==0, s==0, 0<=c1}

   s = 1;

//  P(c1,c2,i,s) {c1==i, c2==0, s==1, 0<=c1}

   while (i>=1) {

//  P(c1,c2,i,s) {c2+i==c1, s==1, i<=c1, 1<=i}

      i--;

//  P(c1,c2,i,s) {c2+i==c1-1, s==1, 1<=c1, i+1<=c1, 0<=i}

      c2++;
   }

//  P(c1,c2,i,s) {c1==c2, i==0, s==1, 0<=c1}

   if (c1!=c2)

//  P() {0==-1}

      error();

//  P(c1,c2,i,s) {c1==c2, i==0, s==1, 0<=c1}

   printf("i = %d\n", i);
}

Code after partial evaluation

void run()
{
   int s = 0, i = 0;
   int c1 = 0, c2 = 0;
   // compteurs pour la correction
   
   while (alea()) {
      i++;
      c1++;
   }
   s = 1;
   while (i>=1) {
      i--;
      c2++;
   }
   if (c1!=c2)
      error();
   printf("i = %d\n", 0);
}

Code after dead_code_elimination

void run()
{
   {
   }
   {
   }
   // compteurs pour la correction
   
   while (alea())
      ;
   ;
   ;
   ;
   printf("i = %d\n", 0);
}

Code after code flattening

void run()
{
   //PIPS generated variable
   int s_0 = 0, i_0 = 0, c1_0 = 0, c2_0 = 0;
   // compteurs pour la correction
   
   while (alea())
      ;
   printf("i = %d\n", 0);
}

Code after suppress_dead_code [this last step should be useless]

void run()
{
   //PIPS generated variable
   int s_0 = 0, i_0 = 0, c1_0 = 0, c2_0 = 0;
   // compteurs pour la correction
   
   while (alea())
      ;
   printf("i = %d\n", 0);
   ;
}
