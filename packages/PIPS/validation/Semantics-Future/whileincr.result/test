
TRANSFORMERS


//  T() {}

void run(void)
{

//  T(a,i,n) {}

   int i, n, a;

//  T(i) {}


   i = rand();

//  T(n) {}

   n = rand();

//  T(a) {}

   a = rand();

//  T(i) {i#init<=i, n+1<=i}


   if (i<=n)

//  T(i) {a+i#init<=i, i<=a+n, n+1<=i}

      if (a<=0) {

//  T() {a<=0, i<=n}

         if (!(i<=n))

//  T() {0==-1}

            assert_error();

//  T(i) {a<=0, i<=i#init, i<=n}

         while (flip()) {

//  T(i) {a+i#init==i, a<=0, a+i#init<=n, i#init<=n}

            if (i<=n&&i+a<=n)

//  T(i) {a+i#init==i, a<=0, a+i#init<=n, i#init<=n}

               i += a;
            else

//  T() {a<=0, n+1<=i}

               while (1)

//  T() {a<=0, n+1<=i}

                  ;

//  T() {a<=0, i<=a+n, i<=n}

            if (!(i<=n))

//  T() {0==-1}

               assert_error();
         }

//  T(i) {a+i#init==i, a<=0, n+1<=a+i#init, i#init<=n}

         if (i<=n&&i+a>n)

//  T(i) {a+i#init==i, a<=0, n+1<=a+i#init, i#init<=n}

            i += a;
         else

//  T() {a<=0, a+i<=n, i<=n}

            while (1)

//  T() {a<=0, a+i<=n, i<=n}

               ;

//  T() {a<=0, i<=a+n, n+1<=i}

         if (!(i>n))

//  T() {0==-1}

            assert_error();

//  T() {a<=0, i<=a+n, n+1<=i}

         printf("not reachable\n");
      }
      else {

//  T() {1<=a, i<=n}

         if (!(i<=n))

//  T() {0==-1}

            assert_error();

//  T(i) {1<=a, i#init<=i, i<=n}

         while (flip()) {

//  T(i) {a+i#init==i, 1<=a, a+i#init<=n, i#init<=n}

            if (i<=n&&i+a<=n)

//  T(i) {a+i#init==i, 1<=a, a+i#init<=n, i#init<=n}

               i += a;
            else

//  T() {1<=a, n+1<=a+i}

               while (1)

//  T() {1<=a, n+1<=a+i}

                  ;

//  T() {1<=a, i<=a+n, i<=n}

            if (!(i<=n))

//  T() {0==-1}

               assert_error();
         }

//  T(i) {a+i#init==i, 1<=a, n+1<=a+i#init, i#init<=n}

         if (i<=n&&i+a>n)

//  T(i) {a+i#init==i, 1<=a, n+1<=a+i#init, i#init<=n}

            i += a;
         else

//  T() {1<=a}

            while (1)

//  T() {1<=a}

               ;

//  T() {1<=a, i<=a+n, n+1<=i}

         if (!(i>n))

//  T() {0==-1}

            assert_error();

//  T() {1<=a, i<=a+n, n+1<=i}

         printf("reachable\n");
      }
}

PRECONDITIONS


//  P() {}

void run(void)
{

//  P() {}

   int i, n, a;

//  P(a,i,n) {}


   i = rand();

//  P(a,i,n) {}

   n = rand();

//  P(a,i,n) {}

   a = rand();

//  P(a,i,n) {}


   if (i<=n)

//  P(a,i,n) {i<=n}

      if (a<=0) {

//  P(a,i,n) {a<=0, i<=n}

         if (!(i<=n))

//  P() {0==-1}

            assert_error();

//  P(a,i,n) {a<=0, i<=n}

         while (flip()) {

//  P(a,i,n) {a<=0, i<=n}

            if (i<=n&&i+a<=n)

//  P(a,i,n) {a<=0, a+i<=n, i<=n}

               i += a;
            else

//  P() {0==-1}

               while (1)

//  P() {0==-1}

                  ;

//  P(a,i,n) {a<=0, i<=a+n, i<=n}

            if (!(i<=n))

//  P() {0==-1}

               assert_error();
         }

//  P(a,i,n) {a<=0, i<=n}

         if (i<=n&&i+a>n)

//  P() {0==-1}

            i += a;
         else

//  P(a,i,n) {a<=0, a+i<=n, i<=n}

            while (1)

//  P(a,i,n) {a<=0, a+i<=n, i<=n}

               ;

//  P() {0==-1}

         if (!(i>n))

//  P() {0==-1}

            assert_error();

//  P() {0==-1}

         printf("not reachable\n");
      }
      else {

//  P(a,i,n) {1<=a, i<=n}

         if (!(i<=n))

//  P() {0==-1}

            assert_error();

//  P(a,i,n) {1<=a, i<=n}

         while (flip()) {

//  P(a,i,n) {1<=a, i<=n}

            if (i<=n&&i+a<=n)

//  P(a,i,n) {1<=a, a+i<=n, i<=n}

               i += a;
            else

//  P(a,i,n) {1<=a, n+1<=a+i, i<=n}

               while (1)

//  P(a,i,n) {1<=a, n+1<=a+i, i<=n}

                  ;

//  P(a,i,n) {1<=a, i<=a+n, i<=n}

            if (!(i<=n))

//  P() {0==-1}

               assert_error();
         }

//  P(a,i,n) {1<=a, i<=n}

         if (i<=n&&i+a>n)

//  P(a,i,n) {1<=a, n+1<=a+i, i<=n}

            i += a;
         else

//  P(a,i,n) {1<=a, a+i<=n, i<=n}

            while (1)

//  P(a,i,n) {1<=a, a+i<=n, i<=n}

               ;

//  P(a,i,n) {1<=a, i<=a+n, n+1<=i}

         if (!(i>n))

//  P() {0==-1}

            assert_error();

//  P(a,i,n) {1<=a, i<=a+n, n+1<=i}

         printf("reachable\n");
      }
}
