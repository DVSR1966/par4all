#! /bin/sh
# for debug, try: /bin/sh -vx
#
# $RCSfile: pips-makemake,v $ ($Date: 1996/08/22 10:54:16 $, )
# version $Revision$
#
# Automatic generation of Makefile for the PIPS project
#
# Remi Triolet, Bruno Baron
# Fabien Coelho, 08/95
#

script=`basename $0`
USAGE="$script [-hv] [-L|N|P] [-l|p|c|d] [-D|S]"
verbose=':'

MAKEFILE=Makefile
CONFIG_FILE=config.makefile

PIPSMKMK_OPTION=''

help()
{
  cat <<-END_OF_HELP
	$USAGE
	version $Revision$
	Builds $MAKEFILE from $CONFIG_FILE for PIPS.
	  -L|N|P: for Linear, Newgen or Pips.
	  -l|p|c|d: libraries|passes|compiled|default
	  -D|S: for Development|Production (Sources) directories
	  contextual defaults for all these first options...
	  -h: this help
	  -v: verbose
	Usefull macros in $CONFIG_FILE: 
	 - libraries/passes: LIB_{CFILES,HEADERS,OBJECTS}
	   and maybe DERIVED_{HEADERS,CFILES,FILES}
	 - default:
	   SOURCES (config.makefile need not be included)
	   SCRIPTS (runable files as shell scripts that must be chmoded)
	   INSTALL_{INC,LIB,BIN,DOC,HTM,SHR,UTL} files to be installed
	Many default macros are defined and may be overwritten.
	Many rules are also defined.
	END_OF_HELP
}

verb()
{ echo "$script" "$@";}

usage()
{
  echo "usage: $USAGE" >&2
  [ "$2" ] && echo "error: $2" >&2
  exit ${1:-1}
}

warning()
{ echo "$script: warning, $@" >&2 ;}

#
# what is to be done...

DIRSIDE=''
DIRTYPE=''
PART=''
ALL=''
ALL_RULE_TARGET=''

while getopts PLNlpcdDShv opt
do
  PIPSMKMK_OPTION="$PIPSMKMK_OPTION -$opt"
  case $opt in
    P) PART=PIPS ;;
    L) PART=LINEAR ;;
    N) PART=NEWGEN ;;
    l) DIRTYPE='Lib' ;;
    p) DIRTYPE='Passes' ;;
    c) DIRTYPE='Compiled' ;;
    d) DIRTYPE='Default' ;;
    D) unset production ;;
    S) production='yes' ;;
    h) help ; exit 0 ;;
    v) verbose=verb ;;
    *) usage 2 "invalid option ($opt)" ;;
  esac
done
shift `expr $OPTIND - 1`

[ $# -eq 0 ] || usage 3 "$# remaining parameters"

current_directory=`pwd`
cd_dirname=`dirname $current_directory`

# set defaults if necessary

[ "${PART}" ] ||
{
    PART=PIPS
    [ "`echo $current_directory | grep Linear`" ] && PART=LINEAR 
    [ "`echo $current_directory | grep Newgen`" ] && PART=NEWGEN
    $verbose "default PART computed: $PART"
}

[ "${DIRTYPE}" ] || 
{
    DIRTYPE=Default

    if [ $PART = LINEAR ] ;
    then 
	DIRTYPE=Lib ;
    else
        for f in Lib Passes ; do
	    [ "`echo $current_directory | grep $f`" ] && DIRTYPE=$f
        done
    fi

    $verbose "defaults DIRTYPE computed: $DIRTYPE"
}

$verbose "defining vars..."

case $DIRTYPE in
  Lib) ALL_RULE_TARGET='$(ARCH)/lib$(TARGET).a' ;;
  Passes)  ALL_RULE_TARGET='$(ARCH)/$(TARGET)' ;;
  Compiled) ALL_RULE_TARGET='' ;;
  Default) ALL_RULE_TARGET='.runable';;
  *) usage 5 "unexpected directory type $DIRTYPE"
esac

#
# Where to install files:

case $PART in
  PIPS) 
    install_inc_dir='$(PIPS_ROOT)/Include';
    install_lib_dir='$(PIPS_ROOT)/Lib';
    install_bin_dir='$(PIPS_ROOT)/Bin';
    install_src_dir='$(PIPS_ROOT)/Src';
    install_shr_dir='$(PIPS_ROOT)/Share';
    install_doc_dir='$(PIPS_ROOT)/Doc';
    install_htm_dir='$(PIPS_ROOT)/Doc/Html';
    install_rtm_dir='$(PIPS_ROOT)/Runtime' ;
    install_utl_dir='$(PIPS_ROOT)/Utils';;
  NEWGEN)
    install_src_dir='$(NEWGEN_ROOT)/Src';
    install_inc_dir='$(NEWGEN_ROOT)/Include' ;
    install_bin_dir='$(NEWGEN_ROOT)/Bin' ;
    install_doc_dir='$(NEWGEN_ROOT)/Doc' ;
    # install_htm_dir='$(NEWGEN_ROOT)/Doc/Html' ;
    install_htm_dir='$(PIPS_ROOT)/Doc/Html';
    install_utl_dir='$(NEWGEN_ROOT)/Share' ;
    install_lib_dir='$(NEWGEN_ROOT)/Lib' ;
    install_shr_dir='$(NEWGEN_ROOT)/Share' ;
    install_rtm_dir='$(NEWGEN_ROOT)/Runtime' ;;
  LINEAR)
    install_src_dir='$(LINEAR_ROOT)/Src';
    install_inc_dir='$(LINEAR_ROOT)/Include' ;
    install_bin_dir='$(LINEAR_ROOT)/Bin' ;
    install_lib_dir='$(LINEAR_ROOT)/Lib' ;
    install_doc_dir='$(LINEAR_ROOT)/Doc' ;
    # install_htm_dir='$(LINEAR_ROOT)/Doc/Html' ;
    install_htm_dir='$(PIPS_ROOT)/Doc/Html';
    install_utl_dir='$(LINEAR_ROOT)/Share' ;
    install_shr_dir='$(LINEAR_ROOT)/Share';
    install_rtm_dir='$(LINEAR_ROOT)/Runtime' ;;
  *) usage 6 "unexpected PART=$PART" ;;
esac

[ "${DIRSIDE}" ] || 
{
  if [ "`echo $current_directory | grep Development`" ]
  then
    DIRSIDE=`eval echo '$'"${PART}_DEVEDIR"` ;
  else
    production='yes' ;
    DIRSIDE=`eval echo '$'"${PART}_ROOT/Src"`;
  fi
  $verbose "default DIRSIDE computed: $DIRSIDE"
}

$verbose "PART: ${PART}"
$verbose "DIRSIDE: $DIRSIDE"
$verbose "DIRTYPE: $DIRTYPE"
$verbose "pwd: $current_directory"

[ -f $CONFIG_FILE ] || usage 6 "no $CONFIG_FILE in $current_directory" ;

# needed because of f.. - in directory names...
dir_real_name=`basename $current_directory`
dir_simple_name=`echo $dir_real_name | tr '-' '_'`

# type sed
target_dir=`echo "$current_directory" | 
    sed 's,.*/Development/,,;s,.*/Production/Src/,,;'`

echo "Making $DIRTYPE $PART $MAKEFILE in $dir_real_name ($DIRSIDE $target_dir)"

rm -f $MAKEFILE


##############################################################################

$verbose "common part"

cat >> $MAKEFILE <<%
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
#				    WARNING
#
#		  This makefile has been automatically generated
#
#                        ($RCSfile: pips-makemake,v $ version $Revision$)
#
#			       Do not modify it
#
#        You can modify the file $CONFIG_FILE in the same directory
#
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
# Copyright (C) Ecole des Mines De Paris
#               Centre de Recherche en Informatique
#
# This file is part of PIPS
#
# PIPS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY.  No author or distributor accepts responsibility to anyone for
# the consequences of using it or for whether it serves any particular
# purpose or works at all, unless he/she says so in writing.
#
# DEFAULTS, may be overwritten by the $CONFIG_FILE content.
#
TARGET=		${dir_real_name}
TARGET_DIR=	${install_src_dir}/${target_dir}
#
# default architecture is taken from PIPS_ARCH environment variable
# if set, and . is chosen otherwise.
ifdef PIPS_ARCH
ARCH =	$(PIPS_ARCH)
else
ARCH =	.
endif
#
# installation directories for quick-install
#
INSTALL_INC_DIR= ${install_inc_dir}
INSTALL_SHR_DIR= ${install_shr_dir}
INSTALL_DOC_DIR= ${install_doc_dir}
INSTALL_HTM_DIR= ${install_htm_dir}
INSTALL_UTL_DIR= ${install_utl_dir}
INSTALL_RTM_DIR= ${install_rtm_dir}
INSTALL_LIB_DIR= ${install_lib_dir}/$(ARCH)
INSTALL_BIN_DIR= ${install_bin_dir}/$(ARCH)
# (obsolete?)
MAIN=		main
#
# 
#
CONFIG_FILE=	${CONFIG_FILE}
MAKEFILE=	${MAKEFILE}
SHELL	=	/bin/sh
COPY	=	cp
MOVE	=	mv -f
GMKNODIR=	--no-print-directory
#
# default targets...
all: generate_makefile_if_necessary_and_possible
all: $(ARCH) $ALL_RULE_TARGET
#
recompile: depend header all
recompile: generate_makefile_if_necessary_and_possible
#
full-clean: clean clean-all-compiled
clean-all-compiled: 
	-for d in \`echo $(PIPS_ROOT)/Include/makefile_macros.* | \\
		sed 's,[-_a-zA-z0-9/]*/makefile_macros\.,,g'\`; do \\
	  test -d \$\$d && { \\
	    echo "cleaning \$\$d"; \\
	    $(RM) \$\$d/*.[oa] \$\$d/*pips Makefile.depend.\$\$d; \\
	    test "\`ls -A \$\$d\`" || rmdir \$\$d; } ; \\
	done
#
OLD:; mkdir OLD
SCCS:; mkdir SCCS
get:; sccs get SCCS
# .PHONY is a gnu extension...
.PHONY: install all depend header recompile clobber count info delta
.PHONY: generate_makefile_if_necessary_and_possible
# to override SUN/GNU default rule
.SCCS_GET:
# %:SCCS/s.%:
.SUFFIXED: .tex .dvi .ps .c .h .o .w .a .html .ftex .newgen .m4h .m4c .m4f
# .INIT is a SUN extension...
.INIT: 
check_install:
# is this appropriate?
# .DEFAULT:; @echo "$MAKEFILE [$(FWD_ROOT)] *** no rule for target $@!" >&2
#
$(ARCH):; mkdir $(ARCH)
#
include $(${PART}_ROOT)/Include/define_libraries.make
include $(${PART}_ROOT)/Include/makefile_macros.$(ARCH)
include $CONFIG_FILE
#
# prefixed objects:
LIB_OBJECTS:=$(addprefix $(ARCH)/, $(LIB_OBJECTS))
#
# {C,CPP,LD,L,Y}OPT macros allow to *add* things from the command line
# as gmake CPPOPT="-DFOO=bar" ... that will be added to the defaults
# a typical interesting example is to put -pg in {C,LD}OPT
#
PREPROC=	$(CC) -E $(CPPFLAGS) $(CPPOPT) $(TARGET_ARCH)
COMPILE=	$(CC) $(CFLAGS) $(COPT) $(CPPFLAGS) $(CPPOPT) $(TARGET_ARCH) -c
F77COMPILE=	$(FC) $(FFLAGS) $(FOPT) -c
LINK=		$(LD) $(LDFLAGS) $(LDOPT) -o
SCAN=		$(LEX) $(LFLAGS) $(LOPT) -t
TYPECHECK=      $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(LINT_LIBS)
PARSE=		$(YACC) $(YFLAGS) $(YOPT)
ARCHIVE=	$(AR) $(ARFLAGS)
# struct _iobuf -> FILE for sun headers that would not look nice.
PROTOIZE=	$(PROTO) $(PRFLAGS) -E "$(PREPROC)"
#
# Default rules
#
$(ARCH)/%.o:	%.c 
	$(COMPILE) \$< -o \$@
#
# if LATEX, MAKEIDX, LX2HTML, DVIPS RMAN and so are not avaible, 
# the following rules would not prevent compilation...
%.tex: %.ftex
	# building \$@ from \$<
	sed -f $(PIPS_ROOT)/Utils/accent.sed \$< > \$@
#
%.dvi: %.tex
	# building \$@ from \$<
	touch \$*.ind
	$(LATEX) \$<
	-grep '\\\\bibdata{' \$*.aux && { $(BIBTEX) \$* ; $(LATEX) \$< ;}
	test ! -f \$*.idx || { $(MAKEIDX) \$*.idx ; $(LATEX) \$< ;}
	$(LATEX) \$<
	touch \$@
#
%.ps: %.dvi
	# building \$@ from \$<
	$(DVIPS) -o \$@ \$<
	touch \$@
#
%.html: %.l
	# building \$@ from \$<
	$(NROFF) -man \$< | $(RMAN) -f html > \$@
	touch \$@
#
# Add the PIPS icon in the background of every page:
#?cd \$*; for f in *.html ; do \\
# sed 's,^<BODY,<BODY background="http://www.cri.ensmp.fr/pips/images/logo-pips-embossed-bright-small.jpg" ,' $$f > $$f.bg; \\
# mv $$f.bg $$f; done
%.html: %.tex
	# building \$@ from \$<
	$(RM) -r \$* \$@
	mkdir \$*
	$(LX2HTML) -link 8 \$<
	chmod -R a+r-wx \$*/*
	chmod a+rx,ug+w,o-w \$*
	ln -s \$*/\$@ \$@
#
%.newgen: %.tex
	# building \$@ from \$<
	$(RM) \$@
	remove-latex-comments \$<
	chmod a-w \$@
#
%.f: %.m4f
	# building \$@ from \$<
	$(M4) $(M4FLAGS) $(M4OPT) \$< > \$@
#
%.o: %.f
	$(F77COMPILE) \$< -o \$@
#
%.c: %.m4c
	# building \$@ from \$<
	$(M4) $(M4FLAGS) $(M4OPT) \$< > \$@
#
%.h: %.m4h
	# building \$@ from \$<
	$(M4) $(M4FLAGS) $(M4OPT) \$< > \$@
# MISC
.runable: $(SCRIPTS)
	# protected because only the owner can chmod files
	-[ ! "$(SCRIPTS)" ] || chmod a+rx $(SCRIPTS)
	touch .runable
#
quick-install: .runable
#
%



##############################################################################

$verbose "common to Lib and Passes"

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' ] && 
cat >> $MAKEFILE <<% 
#
LIB_TARGET=	$(ARCH)/lib$(TARGET).a
BIN_TARGET=	$(ARCH)/$(TARGET)
INC_TARGET=	$(TARGET).h
#
INSTALL_INC+=	$(INC_TARGET)
INSTALL_LIB+=	$(LIB_TARGET)
INSTALL_BIN+=	`if [ $DIRTYPE = 'Passes' ] ; then echo '$(BIN_TARGET)' ; fi`
#

.PRECIOUS: $(LIB_TARGET) $(BIN_TARGET)

# .INIT is a SUN extention...
# .INIT: check_os

check_install:
	@if test \`echo *.a | wc -w\` -gt 1 ; \\
	then \\
	  echo "install failed: additional local libraries prevent it" >&2;\\
	  exit 1;\\
	fi

$(LIB_TARGET): $(INC_TARGET) $(DERIVED_CFILES) $(DERIVED_HEADERS)

$(LIB_TARGET): $(LIB_OBJECTS) $(TARGET_OBJECTS)
	$(RM) $(LIB_TARGET)
	$(ARCHIVE) $(LIB_TARGET) $(LIB_OBJECTS) $(TARGET_OBJECTS)
	-$(RANLIB) $(LIB_TARGET)

%


##############################################################################

$verbose "specific to Lib"

[ $DIRTYPE = 'Lib' ] && cat >> $MAKEFILE <<% 

CFILES=		$(LIB_CFILES)
OBJECTS=	$(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES+= 	$(INCLUDES) $(CFILES) $(DOCS)
#

clean-compiled:
	$(RM) $(OBJECTS) $(LIB_TARGET) $(BIN_TARGET) \\
		$(ARCH)/pips $(ARCH)/[tw]pips

clean: generate_makefile_if_necessary_and_possible clean-compiled
	-$(RM) TAGS $(BIN_TARGET) $(DERIVED_HEADERS) $(DERIVED_CFILES) \\
		$(DERIVED_FILES) *.~[0-9]~ $(LIB_IFILES) $(INC_TARGET) core

INC_CFILES += $(LIB_CFILES)

%


##############################################################################

$verbose "specific to Lib for PIPS"

[ $DIRTYPE = 'Lib' -a $PART = PIPS ] && cat >> $MAKEFILE <<% 
#
CFILES+=	$(MAIN).c 
OBJECTS+=	$(MAIN).o 
#

test: all
	$(LINK) $(ARCH)/pips -lpips $(PIPS_LIBS) 
	@echo 

wtest: all
	$(LINK) $(ARCH)/wpips $(WPIPS_ADDED_LDFLAGS) -lwpips \\
		$(PIPS_LIBS) $(WPIPS_ADDED_LIBS)
	@echo 

ttest: all
	$(LINK) $(ARCH)/tpips -ltpips \\
		$(PIPS_LIBS) $(TPIPS_ADDED_LIBS)
	@echo 

# obsolete rule I guess. test is better. FC.
$(BIN_TARGET): $(LIB_TARGET) $(ARCH)/$(MAIN).o
	$(LINK) $(BIN_TARGET) $(ARCH)/$(MAIN).o \\
		$(LIB_TARGET) $(PIPS_LIBS)
	@echo 

clobber: clean
	-Delete *.database

%


##############################################################################

$verbose "specific to Passes"

[ $DIRTYPE = 'Passes' ] && cat >> $MAKEFILE <<% 
#
# a little bit rough...
#
$(ARCH)/$(TARGET): $(ARCH)/lib$(TARGET).a \\
	$(PIPS_ROOT)/Lib/$(ARCH)/*.a \\
	$(LINEAR_ROOT)/Lib/$(ARCH)/*.a \\
	$(NEWGEN_ROOT)/Lib/$(ARCH)/*.a
#
CFILES=		$(LIB_CFILES)
OBJECTS=	$(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES+= 	$(INCLUDES) $(CFILES) $(DOCS)
#

$(PIPS_BINDIR):
	mkdir $(PIPS_BINDIR)

$(BIN_TARGET): $(INC_TARGET) $(LIB_TARGET)
	$(LINK) $(BIN_TARGET) $(LIB_TARGET) $(TARGET_LIBS)
	@echo 

clean-compiled:
	$(RM) $(OBJECTS) $(LIB_TARGET) $(BIN_TARGET) 

clean: clean-compiled
	-$(RM) TAGS $(INC_TARGET) $(DERIVED_HEADERS) $(DERIVED_CFILES) \\
		$(DERIVED_FILES) *.~[0-9]~ core

INC_CFILES += $(LIB_CFILES)

%


##############################################################################

$verbose "specific to Default"

[ $DIRTYPE = 'Default' ] && cat >> $MAKEFILE <<% 

clean:
	$(RM) core *~ *.aux *.log *.toc *.idx *.ind *.ilg *.lof *.lot \
		*.bbl *.blg

%



##############################################################################

$verbose "specific to Production/Lib and Passes"

[ \( $DIRTYPE = 'Passes' -o $DIRTYPE = 'Lib' \) -a "$production" ] &&
cat >> $MAKEFILE <<%

.PRECIOUS: $(${PART}_ROOT)/Lib/$(LIB_TARGET) $(${PART}_ROOT)/Bin/$(BIN_TARGET)

$(${PART}_ROOT)/Include/$(TARGET).h: header
	@pips_install_file -f $(${PART}_INCLUDEDIR) $(TARGET).h

$(${PART}_ROOT)/Lib/$(LIB_TARGET): $(LIB_TARGET) 
	@pips_install_file -r $(RANLIB) $(${PART}_LIBDIR)/$(ARCH) $(LIB_TARGET)

$(LIB_OBJECTS): $(TARGET).h

recompile: $(${PART}_ROOT)/Include/$(TARGET).h $(${PART}_ROOT)/Lib/$(LIB_TARGET) 

%



##############################################################################

$verbose "specific to PIPS/Production/Passes"

[ $DIRTYPE = 'Passes' -a "$production" -a $PART = PIPS ] &&
cat >> $MAKEFILE <<%

$(TARGET_OBJECTS): $(TARGET).h

$(PIPS_ROOT)/Bin/$(ARCH):
	mkdir \$@

$(PIPS_ROOT)/Bin/$(BIN_TARGET): $(BIN_TARGET) $(PIPS_ROOT)/Bin/$(ARCH)
	@pips_install_file -x $(PIPS_ROOT)/Bin/$(ARCH) $(BIN_TARGET)

recompile: $(PIPS_ROOT)/Bin/$(BIN_TARGET)

%



##############################################################################
#
# Common to all: installation and Makefile generation
#

$verbose "common to all again"

cat >> $MAKEFILE <<%

ALL_SOURCES =	$(SOURCES) $(CONFIG_FILE)

$(TARGET_DIR):;	mkdir $(TARGET_DIR)

#check_os:
#	@if test -n "$(PIPS_CHECK_OS)"; \\
#	then echo "Cannot run make under this OS release"; \\
#	     echo "$(PIPS_CHECK_OS)"; exit 1; \\
#	fi

.quick-install: $(INSTALL_INC) $(INSTALL_LIB) $(INSTALL_BIN) $(INSTALL_SHR) \
	$(INSTALL_DOC) $(INSTALL_UTL) $(INSTALL_RTM) $(INSTALL_HTM) 
	#
	# installing files where needed
	# 
	# plain files
	@test ! "$(INSTALL_INC)" || \\
	    pips_install_file -f $(INSTALL_INC_DIR) $(INSTALL_INC) 
	@test ! "$(INSTALL_DOC)" || \\
	    pips_install_file -f $(INSTALL_DOC_DIR) $(INSTALL_DOC) 
	@test ! "$(INSTALL_HTM)" || \\
	    pips_install_file -f $(INSTALL_HTM_DIR) $(INSTALL_HTM) 
	@test ! "$(INSTALL_UTL)" || \\
	    pips_install_file -f $(INSTALL_UTL_DIR) $(INSTALL_UTL) 
	@test ! "$(INSTALL_SHR)" || \\
	    pips_install_file -f $(INSTALL_SHR_DIR) $(INSTALL_SHR)
	@test ! "$(INSTALL_RTM)" || \\
	    pips_install_file -f $(INSTALL_RTM_DIR) $(INSTALL_RTM)
	# libs...
	@test ! "$(INSTALL_LIB)" || \\
	    pips_install_file -r $(RANLIB) $(INSTALL_LIB_DIR) $(INSTALL_LIB)
	# executables...
	@test ! "$(INSTALL_BIN)" || \\
	    pips_install_file -x $(INSTALL_BIN_DIR) $(INSTALL_BIN)
	touch .quick-install

tar:
	$(TAR) cf $(TARGET).tar $(ALL_SOURCES) Makefile
	$(ZIP) $(TARGET).tar

quick-install: .quick-install

.makefile: $(PIPS_ROOT)/Utils/pips-makemake
	# 
	# regenerating Makefile
	#
	pips-makemake ${PIPSMKMK_OPTION}
	touch .makefile

generate_makefile_if_necessary_and_possible:
	@[ ! -x $(PIPS_ROOT)/Utils/pips-makemake ] || \\
	    $(MAKE) $(GMKNODIR) .makefile 

count:;	@wc -l $(ALL_SOURCES)

#
# some quick entries for SCCS:
info:; @sccs info

# try to delta all checked out files
delta:;	@test ! "\`sccs tell\`" || sccs delget \`sccs tell\`

%



##############################################################################
#

$verbose "specific to Production"

[ "$production" ] && cat >> $MAKEFILE <<%
#
# print out the files for a release...
FWD_ROOT=.
RELEASE+= $(ALL_SOURCES) $(DEDUCED_CFILES) $(DEDUCED_HEADERS) Makefile

release:; @for f in $(RELEASE) ; do echo $(FWD_ROOT)/\$\$f ; done
	    
%


##############################################################################
#
# partie specifique a Development
#

$verbose "specific to Development"

[ ! "$production" ] && cat >> $MAKEFILE <<%

check_sccs:
	@[ ! "\`sccs tell\`" ] || \\
	{ echo; echo "sccs files being edited, cannot install"; echo; \\
	  exit 1;}

# install installs sources, so depends on sources. FC
# to insure the library is compiled before hand, a make is added.
.install: $(ALL_SOURCES) check_install check_sccs
	$(MAKE) $(GMKNODIR) all $(TARGET_DIR) 
	@echo ""; echo; echo -n "Description of changes: " ; \\
	read comments ; \\
	install_pips_sources \\
		-rv -s \`pwd\` -t $(TARGET_DIR) -y "\$\$comments" \\
		$(ALL_SOURCES)
	-@cd $(TARGET_DIR) ; pips-makemake $PIPSMKMK_OPTION -S
	touch .install
	$(MAKE) quick-install

install:  .install

#
# diff between dev and prod sources:

diff:
	-@for f in $(ALL_SOURCES) ; \\
	do \\
	  echo "DIFFERENCES BETWEEN DEV AND PROD FOR \$\$f:" ; \\
	  $(DIFF) \$\$f $(TARGET_DIR)/\$\$f ; \\
	done

%



##############################################################################
#
# La partie commune aux bibliotheques et aux passes :

$verbose "common to Lib and Passes"

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' ] && 
cat >> $MAKEFILE <<%
#

$(${PART}_LIBDIR):
	mkdir $(${PART}_LIBDIR)

lint:
	$(TYPECHECK) $(CFILES) | 
		sed '/possible pointer alignment/d;/gen_alloc/d'

TAGS: $(INCLUDES) $(CFILES)
	etags $(INCLUDES) $(CFILES)
	ctags $(INCLUDES) $(CFILES)

$(TARGET)-local.h:
	[ -f $(TARGET)-local.h ] || touch $(TARGET)-local.h

# headers are not generated automatically, bacause it should be
# done each time a c file is touched, which is too much...
# thus it does depend only of the -local.h.
# header file reconstruction should be required explicitely
# with the header rule.
# some filtering is performed to avoid variations that depends on
# includes...

build-header-file:
	# 
	# building the header file...
	#
	$(COPY) $(TARGET)-local.h $(INC_TARGET);
	{ \\
	echo "/* header file built by $(PROTO) */";\\
	echo "#ifndef ${dir_simple_name}_header_included";\\
	echo "#define ${dir_simple_name}_header_included";\\
	cat $(TARGET)-local.h;\\
	$(PROTOIZE) $(INC_CFILES) | \\
	  sed 's/struct _iobuf/FILE/g;s/__const/const/g;/_BUFFER_STATE/d;' ;\\
	echo "#endif /* ${dir_simple_name}_header_included */";\\
	} > $(INC_TARGET).tmp
	$(MOVE) $(INC_TARGET).tmp $(INC_TARGET)

# .header carrie all dependencies for INC_TARGET:
.header: $(TARGET)-local.h $(DERIVED_HEADERS) $(INC_CFILES) 
	$(MAKE) $(GMKNODIR) build-header-file
	touch .header

# checks for the header file, and build if necessary...

# header: checks for INC_TARGET dependencies (.header) and for
# INC_TARGET existance !
header: .header $(INC_TARGET)

$(INC_TARGET): $(TARGET)-local.h 
	$(RM) .header
	$(MAKE) $(GMKNODIR) .header

%



##############################################################################

$verbose "all but Default"

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' -o $DIRTYPE = 'Compiled' ] && 
cat >> $MAKEFILE <<%
#

# indirect depend bacause I do not trust make for the inclusion of
# Makefile.depend if that very file does not exist.

.depend: $(CFILES) $(DERIVED_CFILES) $MAKEFILE.depend.$(ARCH)
	touch \$@

depend: .depend

# default rule if the dependence file is not there...
# forces the regeneration:
# - the dependences' generation needs the headers
# - the headers are generated thru the Makefile.
# - the Makefile needs the dependences.
# how to get out of this?
$MAKEFILE.depend.$(ARCH):
	# creates an empty dependence file, it is ok for going on and
	# will prevent any recursion for generating the same dependences.
	touch \$@ 
	# the headers are needed. 
	test ! "$(INC_TARGET)" -o -f "$(INC_TARGET)" || \\
	    $(MAKE) $(GMKNODIR) $(INC_TARGET)
	# may need the derived files
	test ! "$(DERIVED_CFILES)" || $(MAKE) $(GMKNODIR) $(DERIVED_CFILES)
	# now it's okay fo building all the dependences.
	test ! "$(CFILES)$(DERIVED_CFILES)" || \\
	        $(PREPROC) -M $(CFILES) $(DERIVED_CFILES) |\\
		sed 's,^\(.*\.o:\),\$\$(ARCH)/\1,' > \$@

#
# dependences are stored in another file which is simply included.
# the file differs for each "architectures"
include $MAKEFILE.depend.$(ARCH)
%



##############################################################################

touch .makefile

### force dependence list generation
rm -f $MAKEFILE.depend* .depend
${PIPS_MAKE:-gmake} depend

### end good case
echo

# end of $RCSfile: pips-makemake,v $
#
