#! /bin/sh
#! /bin/sh -vx
#
# $RCSfile: pips-makemake,v $ ($Date: 1994/12/09 09:03:40 $, )
# version $Revision$
# got on %D%, %T%
# %A%

# Automatic generation of Makefile for the PIPS project
#
# Options:
#  -l: makes makefile(s) for *library(ies)*
#  -p: makes makefile(s) for *pass(es)*
#  -D: makes makefile(s) for *development*
#  -P: makes makefile(s) for *production*
#  -c: makes a makefile in *current* directory
#  -a: makes one makefile in *all* possible directories according to other 
#      options (ie. with options -lDa: all libraries in development)
#
# Remi Triolet, Bruno Baron

# Modifications:
#   bb, 3.7.91:
# - MAIN_LIBS -> PIPS_LIBS
#   bb, 23.10.91:
# - entry "all" for libraries no more depends on $(BIN_TARGET)
# - entry $(TARGET)-local.h was created
# - $(INC_TARGET) now depends on $(TARGET)-local.h
# - install now depends on $(INC_TARGET). Corresponding building commands 
#   were suppressed. install for libraries no more depends on $(BIN_TARGET).
#   $(INC_TARGET), $(OBJECTS), $(LIB_TARGET) and $(BIN_TARGET) are no more
#   copied to $(TARGETDIR). 
# - quick-install: $(INC_TARGET) is now simply copied in $INCLUDEDIR . 
#   $BIN_TARGET is no more copied in $BINDIR for libraries.
# - entry "depend" now depends on $(INC_TARGET), in order to make sure that 
#   dependences are computed toward local $(INC_TARGET) (in contrary to 
#   $INCLUDEDIR/$(INC_TARGET) ).
#   bb, 4.02.91:
# - entry "depend": added "s/^		*\$\$//;" (double TAB) in front of
#   sed string. This way, lines only consisting of TABs are replaced by 
#   an empty line (for RS6000).
#   bb, 11.02.92:
# - impossible to install when redundant libraries in current directory,
#   to force people to remove symbolic links.
# - $CONFIG_FILE installed
# - "production-depend" created and "depend" changed to use production-depend.
# - at the end, make depend or make production-depend, depending on -D or -P
#   bb, 17.04.92
# - added entry $(BINDIR) for installation on new systems.
#   bb, 22.04.92
# - added entry .INIT
# - $(INC_TARGET) uses $(LIB_CFILES) instead of $(CFILES) to avoid
#   multiple declaration of main(), one per library; this is not to
#   good, because this part of pips-makemake is used by option -l and -p
#   fi, 18.07.92
# - $(INC_TARGET) uses $(TARGET_CFILES) instead of $(LIB_CFILES) with option -p
#   fi, rk, 18.01.93
# - use "cproto $(CPPFLAGS)" instead of "make-extern"; fi, 19.01.93
# - pipe cproto with sed command because cproto does not seem to handle varargs properly
#   fi, 20.01.93
# - use $(INC_TARGET).tmp as a temporary file because $(INC_TARGET) is used as an input
#   for itself via the inclde; this problem did not show up before because the pipes
#   introduce a long enough delay but for huge libraries like ri-util; fi, 02/02/93
# - add calls to SCCS to maintain a version history in Production; the return code
#   for "sccs deledit" is -1 although evrything works fine; this is corrected via
#   a dummy shell IF; FI, RK, 28.06.93
#	RK, 9/07/1993 :
#		Passage d'un Sed (?) en sed.
#		Rajout des tags pour vi aussi... :-)
#
#	Transformation des << cp deledit >> en << edit cp delta >> car sinon
#	on a des proble`mes de droit d'utilisateur. RK, 22/07/1993.
#
#	delta devient delget. RK.
# - add a bell at the end of the link, FC 23/07/93
# - $(INC_TARGET) for LIBRARY is now updated with the preprocessed versions of the 
#   files in $(LIB_CFILES), to take into account functions generated by macros.
#   for that purpose, I added two macro definitions : PREPROC and LIB_IFILES.
#   clean now removes $(LIB_IFILES).
#   BA, August 31, 1993.
# - $(INC_TARGET) for passes is now updated in the same way as $(INC_TARGET) 
#   for LIBRARY. For that purpose, I added one macro definition : TARGET_IFILES.
#   BA, september 1, 1993
# - add a bell at the end of the test link, FC 17/09/93
#
#	RK, 9/11/93 :
#	modification de make depend pour que $(INC_TARGET) de'pende des
#	$(TARGET_CFILES). E'vite ainsi de faire un touch a` la main...
#	De`s qu'on touche a` $(TARGET)-local.h, $(INC_TARGET) est refait.
#	Pour ne pas utiliser les macros conditionnelles spe'cifiques
#	a` Sun (RS/6000 au CEA :-) ) je suis oblige' de relancer un $(MAKE).
#	Mais ce n'est pas ge^nant !
#
#	RK, 12/11/93 :
#	suppression de :
#	# Pas necessaire, mais bon...
#	$(MAKEFILE): $(DERIVED_HEADERS) $(EXTERN)
#		$(MAKE) production-depend
#
# 	Par contre on pourrait rajouter une de'pendance entre Makefile et
#	config.makefile, non ?
#	Correction d'un bug dans make depend dans le cas des bibliothe`ques.
# - rajout d'un wtest. RK, 112/1994.
# - "/lib/cpp $(CFLAGS)" moved to "$(PREPROC)" in production-depend target
#   FC 21/02/94
# - rm -f -> $(RM) or -$(RM) FC 22/02/94
# - PROTOIZE macro added, but this should be in config.makefile... FC 07/03/94
#
# - rajout d' un -r à cp pour l'installation. Permet ainsi de copier des
#	directories. Reste à voir comment rendre ça compatible avec SCCS...
#	Bon, le rajout d'un find dans le do a amélioré les choses.
#	RK 17/06/1994.
# - cproto used without the .i intermediate generation, FC 28/08/94
# - Makefile is not considered as a source anymore, FC
# - the installation takes care of files that are removed from the SOURCES, FC
# - Avoid installing SCCS directory that confuse the SCCS production directory!
#	Ronan.Keryell@cri.ensmp.fr, 6/12/1994.
# - install rely on install_pips_sources, which is a shell script, FC 09/12/94
#
# wish:
#

USAGE="Usage: $0 -l|p [-D|P] [-c|a] (default -D -c)"

MAKEFILE=Makefile
CONFIG_FILE=config.makefile

LIBRARY=""
PASS=""
PRODUCTION=""
ALL=""

while getopts lpDPca opt
do
	case $opt in
	l)	LIBRARY=TRUE;;
	p)	PASS=Passes;;
	D)	PRODUCTION="";;
	P)	PRODUCTION=$PRODDIR/Src;;
	c)	ALL="";;
	a)	ALL=TRUE;;
	\?)	echo $USAGE >&2
		exit 2;;
	esac
done
shift `expr $OPTIND - 1`
if [ $# -ge 1 ]
then
	echo $USAGE >&2
	exit 2
fi

if [ \( -n "$LIBRARY" -a -n "$PASS" \) \
    -o \( -z "$LIBRARY" -a -z "$PASS" \) ]
then
	echo $USAGE >&2
	exit 2
fi

if [ -z "$ALL" ]
then
	DIRS="."
else
	DIRS="${PRODUCTION:-$DEVEDIR}/${PASS:-Lib}/*"
fi


### main loop
for dir in $DIRS
do
( cd $dir

if [ ! -f $CONFIG_FILE ] ; then
   echo "Error $0: cannot find $CONFIG_FILE in $dir; abandon" >&2
else
### good case
echo make $MAKEFILE in $dir

if [ -f $MAKEFILE ] ; then
   cp $MAKEFILE $MAKEFILE.old
   rm -f $MAKEFILE
fi

cat >> $MAKEFILE <<%
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
#				    Warning
#
#		  This makefile has been automatically generated
#
#			       Do not modify it
#
#        You can modify the file $CONFIG_FILE in the same directory
#
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
# Copyright (C) Ecole des Mines De Paris
#               Centre d'Automatique et Informatique
#               Section Informatique
#
# This file is part of PIPS
#
# PIPS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY.  No author or distributor accepts responsibility to anyone for
# the consequences of using it or for whether it serves any particular
# purpose or works at all, unless he says so in writing.
%


cat >> $MAKEFILE $CONFIG_FILE 

cat >> $MAKEFILE <<% 
#
PREPROC=	$(CC) -E $(CPPFLAGS) $(TARGET_ARCH)
COMPILE=	$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK=		$(LD) $(LDFLAGS) -o
SCAN=		$(LEX) $(LFLAGS) -t
TYPECHECK=      $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(LINT_LIBS)
PARSE=		$(YACC) $(YFLAGS)
ARCHIVE=	$(AR) $(ARFLAGS)
PROTOIZE=	$(PIPS_PROTOIZE) -e -E "$(PREPROC)"
#
CONFIG_FILE=	$CONFIG_FILE
MAKEFILE=	$MAKEFILE
#
LIB_TARGET=	lib$(TARGET).a
BIN_TARGET=	$(TARGET)
INC_TARGET=	$(TARGET).h
#
%

if [ "$LIBRARY" ] ;
then
  cat >> $MAKEFILE <<% 
#
CFILES=		$(MAIN).c $(LIB_CFILES)
OBJECTS=	$(MAIN).o $(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES)
#
TARGETDIR=	$(LIBSRCDIR)/$(TARGET)
#
all: $(LIB_TARGET)

.INIT:
	@if test -n "$(PIPS_CHECK_OS)"; \\
	then echo "Cannot run make under this OS release"; \\
	     echo "$(PIPS_CHECK_OS)"; exit 1; \\
	fi

test: all $(DEVEDIR)/Passes/pips/pips.o
	$(LINK) pips $(DEVEDIR)/Passes/pips/pips.o $(PIPS_LIBS)
	@echo 

WPIPS_DEVEDIR=$(DEVEDIR)/Passes/wpips
# Extrait ici le noms des .o et des bibliothèques necessaires à wpips. 
# C'est très crado :-) ! RK.
# Probablement que ce serait mieux de faire un make -n dans wpips pour
# avoir l'instruction exacate à utiliser...
wtest: all $(WPIPS_DEVEDIR)/wpips.o
	$(LINK) wpips -L$(WPIPS_DEVEDIR) -L$(OPENWINHOME)/lib \\
	\`perl -ne 'chop; if (\$\$trouve != 1) \\
		{ /TARGET_OBJECTS/ && do {\$\$trouve = 1; print;}} \\
		else { s/\x5c// && print || print && exit(0);};' \\
		$(WPIPS_DEVEDIR)/config.makefile \\
	| perl -ne 's/.*=//; s/[\\t\\r\\n \x5c]+/ /g; \\
		s,([^ ]+),$(WPIPS_DEVEDIR)/\$\$1,g; print' \` \\
	\`grep '^TARGET_LIB' $(WPIPS_DEVEDIR)/config.makefile \\
		| sed -e 's/.*=/echo /' -e 's/[()]//g' | sh \`
	@echo 

$(LIB_TARGET): $(LIB_OBJECTS)
	$(RM) $(LIB_TARGET)
	$(ARCHIVE) $(LIB_TARGET) \`lorder $(LIB_OBJECTS) | tsort\`
	ranlib $(LIB_TARGET)

$(BIN_TARGET): $(LIB_TARGET) $(MAIN).o
	$(LINK) $(TARGET) $(MAIN).o $(LIB_TARGET) $(PIPS_LIBS)
	@echo 

install: $(INC_TARGET) $(LIB_TARGET)
	@if test \`echo *.a | wc -w\` -gt 1 ; \\
	then \\
	  echo "install failed: additional local libraries prevent it" >&2;\\
	  exit 1;\\
	fi
	@echo ""; echo; echo -n "Description of changes: " ; \\
	read comments ;
	install_pips_sources \
		-v -s \`pwd\` -t $(TARGETDIR) -y "\$\$comments" \
		$(SOURCES)
	cp $(MAKEFILE) $(TARGETDIR)/Makefile
	cd $(TARGETDIR) ; $(MAKE) depend
	$(MAKE) quick-install

quick-install:
	cp -r $(INC_TARGET) $(INCLUDEDIR)/$(INC_TARGET)
	cp $(LIB_TARGET) $(LIBDIR)
	ranlib $(LIBDIR)/$(LIB_TARGET)

$(LIBDIR)/$(LIB_TARGET): $(LIB_TARGET) 
	cp $(LIB_TARGET) $(LIBDIR)
	ranlib $(LIBDIR)/$(LIB_TARGET)

clean:
	-$(RM) TAGS $(OBJECTS) $(INC_TARGET) $(LIB_TARGET) \\
		 $(BIN_TARGET) $(DERIVED_HEADERS) *.~[0-9]~ $(LIB_IFILES)

INC_CFILES = $(LIB_CFILES)

%

else
# ie. for Passes 

  cat >> $MAKEFILE <<% 
#
CFILES=		$(TARGET_CFILES)
OBJECTS=	$(TARGET_OBJECTS)
INCLUDES=	$(TARGET_HEADERS)
SOURCES= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES)
#
TARGETDIR=	$(BINSRCDIR)/$(TARGET)
#
TARGET_IFILES=	$(TARGET_CFILES:.c=.i)
#
.INIT:
	@if test -n "$(PIPS_CHECK_OS)"; \
	then echo "Cannot run make under this OS release"; \
	     echo "$(PIPS_CHECK_OS)"; exit 1; \
	fi

$(BIN_TARGET): $(OBJECTS) $(INC_TARGET)
	$(LINK) $(BIN_TARGET) $(OBJECTS) $(TARGET_LIBS)

install: $(INC_TARGET) $(BIN_TARGET)
	@touch _tmp_hack.a
	@test \`echo *.a | wc -w\` -eq 1 || \\
	{ \\
	  echo "install failed: local libraries prevent it" >&2;\\
	  $(RM) _tmp_hack.a ; \\
	  exit 1;\\
	}
	@$(RM) _tmp_hack.a
	@echo ""; echo; echo -n "Description of changes: " ; \\
	read comments ; 
	install_pips_sources \
		-v -s \`pwd\` -t $(TARGETDIR) -y "\$\$comments" \
		$(SOURCES)
	cp $(MAKEFILE) $(TARGETDIR)/Makefile
	cd $(TARGETDIR) ; $(MAKE) depend
	$(MAKE) quick-install

quick-install: $(BINDIR)
	cp $(INC_TARGET) $(INCLUDEDIR)/$(INC_TARGET)
	cp $(BIN_TARGET) $(BINDIR)

clean:
	-$(RM) TAGS $(OBJECTS) $(BIN_TARGET) \\
		$(INC_TARGET) $(DERIVED_HEADERS) *.~[0-9]~

INC_CFILES = $(TARGET_CFILES)

%

fi

#
# La partie commune aux bibliotheques et aux passes :

cat >> $MAKEFILE <<%
#
$(BINDIR)/$(BIN_TARGET): $(BIN_TARGET) $(BINDIR)
	cp $(BIN_TARGET) $(BINDIR)

$(BINDIR):
	mkdir $(BINDIR)

lint:
	$(TYPECHECK) $(CFILES) | 
		sed '/possible pointer alignment/d;/gen_alloc/d'

TAGS: $(INCLUDES) $(CFILES)
	etags $(INCLUDES) $(CFILES)
	ctage $(INCLUDES) $(CFILES)

$(TARGET)-local.h:
	if [ ! -f $(TARGET)-local.h ] ; then touch $(TARGET)-local.h ; fi

# Ici commence la partie parametree en lib/passe :
# INC_IFILES=	$(INC_CFILES:.c=.i)

#
# Pour eviter trop de compilations, $(INC_TARGET) ne depend pas 
#	de $(TARGET_CFILES) tout le temps :
$(INC_TARGET): $(TARGET)-local.h $(PIPS_MAKE_DEPEND_CFILES)
	$(PROTOIZE)  $(INC_CFILES) \\
		| sed -e 's,int .*__builtin_va_alist.*\([,\)]\),\1,' \\
		| cat $(TARGET)-local.h - > $(INC_TARGET).tmp
	mv $(INC_TARGET).tmp $(INC_TARGET)

depend: $(INC_TARGET) production-depend $(MAKEFILE)
# Relance une compilation de $(INC_TARGET) en rajoutant la dependance sur les
#	fichiers C :
	PIPS_MAKE_DEPEND_CFILES="$(INC_CFILES)" $(MAKE) $(INC_TARGET)


# Quand on cree le Makefile, il faut toujours le completer avec
#	les dependances d''include :
production-depend: $(DERIVED_HEADERS) $(EXTERN)
	sed -n -e 's/^		*\$\$//; 1,/^### DO NOT DELETE THIS LINE./p;' < $(MAKEFILE) > $(MAKEFILE).new
	-for file in $(CFILES) ; do $(PREPROC) -M \$\$file >> $(MAKEFILE).new; done;
	cp $(MAKEFILE).new $(MAKEFILE)
	$(RM) $(MAKEFILE).new

### DO NOT DELETE THIS LINE. USED FOR MAKE DEPEND
%

# Supprime le mode silencieux -s :
make -f $MAKEFILE ${PRODUCTION:+production-}depend

### end good case
fi	# [ ! -f $CONFIG_FILE ]

echo

)

### end main loop
done
