#! /bin/sh
# for debug, try:
#! /bin/sh -vx
#
# $RCSfile: pips-makemake,v $ ($Date: 1995/08/08 17:24:37 $, )
# version $Revision$
#
# Automatic generation of Makefile for the PIPS project
#
# Remi Triolet, Bruno Baron
# Fabien Coelho, 08/95
#

SCRIPT=`basename $0`
USAGE="$SCRIPT [-h (HELP!)] [-l|p|s|r] [-D|P] [-c|a] (default -c)"

help()
{
  cat <<-END_OF_HELP
	$USAGE
	version $Revision$
	builds a makefile from a config.makefile for pips
	  -l|p|s|r: libraries|passes|scripts|runtime
	  -D|P: for Development|Production directories
	  -c|a: for the current|all directory(ies)
	  -h: this help
	  default is contextual for the first and second options.
	END_OF_HELP
}

usage()
{
  echo "usage: $USAGE" >&2
  [ "$2" ] && echo "error: $2" >&2
  exit ${1:-1}
}

MAKEFILE=Makefile
CONFIG_FILE=config.makefile

DIRSIDE=''
DIRTYPE=''
DIRS='.'
ALL=''
ALL_RULE_TARGET=''

while getopts lpsrDPcah opt
do
  case $opt in
    l)	DIRTYPE='Lib' ;;
    p)	DIRTYPE='Passes' ;;
    s)  DIRTYPE='Scripts' ;;
    r)  DIRTYPE='Runtime' ;;
    D)	DIRSIDE="$PIPS_DEVEDIR" ;;
    P)	DIRSIDE="$PIPS_SRCDIR" ;;
    c)	DIRS='.';;
    a)	ALL='1' ;;
    h)  help ; exit 0 ;
    *)	usage 2 "invalid option ($opt)" ;;
  esac
done
shift `expr $OPTIND - 1`

[ $# -eq 0 ] || usage 3 "$# remaining parameters"

current_directory=`pwd`

#
# set defaults if necessary

[ "${DIRSIDE}${DIRTYPE}" ] ||
{
  cd_dirname=`dirname $current_directory`

  [ "${DIRTYPE}" ] || DIRTYPE=`basename $cd_dirname`
  [ "${DIRSIDE}" ] || DIRSIDE=`dirname $cd_dirname`
}

# delayed here to ensure that DIRTYPE is available

[ "$ALL" ] && DIRS=${DIRSIDE}/${DIRTYPE}/*

# directories for quick-install:
#
# install_file_dir for usual files
# install_lib_dir for library files
# install_exe_dir for executable files

install_file_dir=$PIPS_INCLUDEDIR
install_lib_dir=$PIPS_LIBDIR
install_exe_dir=$PIPS_BINDIR

case $DIRTYPE in
  Lib) ALL_RULE_TARGET='lib$(TARGET).a' ;;
  Passes) ALL_RULE_TARGET='$(TARGET)' ;;
  Scripts) ALL_RULE_TARGET='.runable' ;
           install_file_dir=$PIPS_UTILDIR ;
           install_lib_dir=$PIPS_UTILDIR ;
           install_exe_dir=$PIPS_UTILDIR ;;
  Runtime) ALL_RULE_TARGET='' ;
           install_file_dir=$PIPS_EXTEDIR ;
           install_exe_dir=$PIPS_EXTEDIR ;
           install_lib_dir=$PIPS_EXTEDIR ;;
  *) usage 5 "unexpected directory type $DIRTYPE"
esac

### main loop
for dir in $DIRS
do
  [ -d $dir ] || continue
  cd $current_directory
  cd $dir
  
  [ -f $CONFIG_FILE ] || usage 6 "no $CONFIG_FILE in $dir" ;

  # needed because of f.. - in directory names...
  dir_real_name=`basename \`pwd\``
  dir_simple_name=`echo $dir_real_name | tr '-' '_'`
    
  echo making $DIRTYPE $MAKEFILE in $dir_real_name

  [ -f $MAKEFILE ] && 
  {
    rm -f $MAKEFILE.old ;
    mv $MAKEFILE $MAKEFILE.old;
  }
    
  cat >> $MAKEFILE <<%
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
#				    Warning
#
#		  This makefile has been automatically generated
#
#			       Do not modify it
#
#        You can modify the file $CONFIG_FILE in the same directory
#
#	---------------------------------------------------------------
#	---------------------------------------------------------------
#
# Copyright (C) Ecole des Mines De Paris
#               Centre d'Automatique et Informatique
#               Section Informatique
#
# This file is part of PIPS
#
# PIPS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY.  No author or distributor accepts responsibility to anyone for
# the consequences of using it or for whether it serves any particular
# purpose or works at all, unless he says so in writing.
#
# DEFAULTS, may be overwritten by the $CONFIG_FILE content.
#
TARGET=		${dir_real_name}
TARGETDIR=	$(SRCDIR)/${DIRTYPE}/$(TARGET)
#
# installation directories for quick-install
#
INSTALL_FILE_DIR= ${install_file_dir}
INSTALL_LIB_DIR=  ${install_lib_dir}
INSTALL_EXE_DIR=  ${install_exe_dir}
# (obsolete?)
MAIN=		main
#
AR=             $(PIPS_AR)
ARFLAGS=        $(PIPS_ARFLAGS)
CC=             $(PIPS_CC)
CFLAGS=         $(PIPS_CFLAGS)
CPPFLAGS=       $(PIPS_CPPFLAGS)
LD=             $(PIPS_LD)
LDFLAGS=        $(PIPS_LDFLAGS)
LEX=            $(PIPS_LEX)
LFLAGS=         $(PIPS_LFLAGS)
LINT=           $(PIPS_LINT)
LINTFLAGS=      $(PIPS_LINTFLAGS)
YACC=           $(PIPS_YACC)
YFLAGS=         $(PIPS_YFLAGS)
TAR=		$(PIPS_TAR)
ZIP=		$(PIPS_ZIP)
# 
#
CONFIG_FILE=	${CONFIG_FILE}
MAKEFILE=	${MAKEFILE}
#
all: $ALL_RULE_TARGET
# to override sun's default rule
.SCCS_GET:
#
# begin of $CONFIG_FILE inclusion
#
%

cat >> $MAKEFILE $CONFIG_FILE <<%
#
# end of $CONFIG_FILE inclusion
#
%

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' ] && cat >> $MAKEFILE <<% 
#
PREPROC=	$(CC) -E $(CPPFLAGS) $(TARGET_ARCH)
COMPILE=	$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK=		$(LD) $(LDFLAGS) -o
SCAN=		$(LEX) $(LFLAGS) -t
TYPECHECK=      $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(LINT_LIBS)
PARSE=		$(YACC) $(YFLAGS)
ARCHIVE=	$(AR) $(ARFLAGS)
PROTOIZE=	$(PIPS_PROTOIZE) -e -E "$(PREPROC)"
#
LIB_TARGET=	lib$(TARGET).a
BIN_TARGET=	$(TARGET)
INC_TARGET=	$(TARGET).h
#
INSTALL_FILE=	$(INC_TARGET)
INSTALL_LIB=	$(LIB_TARGET)
INSTALL_EXE=	`if [ $DIRTYPE = 'Passes' ] ; then echo '$(BIN_TARGET)' ; fi`
#

.INIT: $MAKEFILE check_os

check_install:
	@if test \`echo *.a | wc -w\` -gt 1 ; \\
	then \\
	  echo "install failed: additional local libraries prevent it" >&2;\\
	  exit 1;\\
	fi

$(LIB_TARGET): $(LIB_OBJECTS) $(TARGET_OBJECTS)
	$(RM) $(LIB_TARGET)
	$(ARCHIVE) $(LIB_TARGET) \\
		\`lorder $(LIB_OBJECTS) $(TARGET_OBJECTS)| tsort\`
	ranlib $(LIB_TARGET)

%

[ $DIRTYPE = 'Scripts' ] && cat >> $MAKEFILE <<%

SOURCES=	$(SCRIPTS) $(FILES) $(SFILES) $(CONFIG_FILE)
INSTALL_FILE=	$(FILES)
INSTALL_LIB=
INSTALL_EXE=	$(SCRIPTS) $(RFILES)

all: .runable

.runable: $(SCRIPTS)
	-[ "$(SCRIPTS)" ] && chmod a+x $(SCRIPTS)
	touch .runable

check_install:

.quick-install: .runable $(RFILES)

.INIT: $(MAKEFILE)

%

[ $DIRTYPE = 'Lib' ] && cat >> $MAKEFILE <<% 
#
CFILES=		$(MAIN).c $(LIB_CFILES)
OBJECTS=	$(MAIN).o $(LIB_OBJECTS)
INCLUDES=	$(LIB_HEADERS)
SOURCES= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES)
#
# TARGETDIR=	$(PIPS_LIBSRCDIR)/$(TARGET)
#
all: $(LIB_TARGET)

test: $(LIB_TARGET)
	$(LINK) pips -lpips $(PIPS_LIBS)
	@echo 

wtest: $(LIB_TARGET) 
	$(LINK) wpips $(WPIPS_ADDED_LDFLAGS) -lwpips \\
		$(PIPS_LIBS) $(WPIPS_ADDED_LIBS)
	@echo 

ttest: $(LIB_TARGET)
	$(LINK) tpips -ltpips $(PIPS_LIBS)
	@echo 

# obsolete rule I guess. test is better. FC.
$(BIN_TARGET): $(LIB_TARGET) $(MAIN).o
	$(LINK) $(TARGET) $(MAIN).o $(LIB_TARGET) $(PIPS_LIBS)
	@echo 

$(PIPS_LIBDIR)/$(LIB_TARGET): $(LIB_TARGET) 
	cp $(LIB_TARGET) $(PIPS_LIBDIR)
	ranlib $(PIPS_LIBDIR)/$(LIB_TARGET)

clean:
	-$(RM) TAGS $(OBJECTS) $(INC_TARGET) $(LIB_TARGET) \\
		 $(BIN_TARGET) $(DERIVED_HEADERS) *.~[0-9]~ $(LIB_IFILES)

clobber: clean
	-Delete *.database

INC_CFILES = $(LIB_CFILES)

%

[ $DIRTYPE = 'Passes' ] && cat >> $MAKEFILE <<% 
#
CFILES=		$(TARGET_CFILES)
OBJECTS=	$(TARGET_OBJECTS)
INCLUDES=	$(TARGET_HEADERS)
SOURCES= 	$(CONFIG_FILE) $(INCLUDES) $(CFILES)
#
# TARGETDIR=	$(PIPS_BINSRCDIR)/$(TARGET)
#
INSTALL_TARGETS=	$(INSTALL_FILE) $(INSTALL_LIB) $(INSTALL_EXE)

$(BIN_TARGET): $(INC_TARGET) $(LIB_TARGET)
	$(LINK) $(BIN_TARGET) $(LIB_TARGET) $(TARGET_LIBS)
	@echo 

clean:
	-$(RM) TAGS $(OBJECTS) $(BIN_TARGET) $(LIB_TARGET) \\
		$(INC_TARGET) $(DERIVED_HEADERS) *.~[0-9]~

INC_CFILES = $(TARGET_CFILES)

%


###
#
# Common to all: installation and Makefile generation
#

cat >> $MAKEFILE <<%

$(TARGETDIR):
	mkdir $(TARGETDIR)

check_os:
	@if test -n "$(PIPS_CHECK_OS)"; \\
	then echo "Cannot run make under this OS release"; \\
	     echo "$(PIPS_CHECK_OS)"; exit 1; \\
	fi

# install installs sources, so depends on sources. FC
# to insure the library is compiled before hand, a make is added.
.install: $(SOURCES) 
	$(MAKE) check_install $(INSTALL_TARGETS) $(TARGETDIR)
	@echo ""; echo; echo -n "Description of changes: " ; \\
	read comments ; \\
	install_pips_sources \\
		-v -s \`pwd\` -t $(TARGETDIR) -y "\$\$comments" \\
		$(SOURCES)
	@pips_install_file $(TARGETDIR) $(MAKEFILE)
	touch .install
	$(MAKE) quick-install

.quick-install: $(INSTALL_FILE) $(INSTALL_LIB) $(INSTALL_EXE)
	@pips_install_file -f $(INSTALL_FILE_DIR) $(INSTALL_FILE)
	@pips_install_file -l $(INSTALL_LIB_DIR) $(INSTALL_LIB)
	@pips_install_file -x $(INSTALL_EXE_DIR) $(INSTALL_EXE)
	touch .quick-install

tar:
	$(TAR) cf $(TARGET).tar $(SOURCES)
	$(ZIP) $(TARGET).tar

install:  .install
quick-install: .quick-install

$MAKEFILE: $(CONFIG_FILE) $(PIPS_UTILDIR)/pips-makemake
	@pips-makemake

%

#
# La partie commune aux bibliotheques et aux passes :

[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' ] && cat >> $MAKEFILE <<%
#
$(PIPS_BINDIR)/$(BIN_TARGET): $(BIN_TARGET) $(BINDIR)
	cp $(BIN_TARGET) $(BINDIR)

$(PIPS_BINDIR):
	mkdir $(BINDIR)

lint:
	$(TYPECHECK) $(CFILES) | 
		sed '/possible pointer alignment/d;/gen_alloc/d'

TAGS: $(INCLUDES) $(CFILES)
	etags $(INCLUDES) $(CFILES)
	ctags $(INCLUDES) $(CFILES)

$(TARGET)-local.h:
	[ -f $(TARGET)-local.h ] || touch $(TARGET)-local.h

# Ici commence la partie parametree en lib/passe :

# Pour eviter trop de compilations, $(INC_TARGET) ne depend pas 
#	de $(TARGET_CFILES) tout le temps :
# Work around the /*...*/ for protoize with stdarg.h. RK, 14/06/1995.
# protection against multiple reads. FC, 02/08/95
# header entry added to allow forcing the .h generation with make header
# without having to touch the sources.

$(INC_TARGET): $(TARGET)-local.h $(PIPS_MAKE_DEPEND_CFILES)
	$(MAKE) header
	
header:
	{ \\
	echo "#ifndef ${dir_simple_name}_header_included" ;\\
	echo "#define ${dir_simple_name}_header_included" ;\\
	cat $(TARGET)-local.h ;\\
	$(PROTOIZE)  $(INC_CFILES) \\
		| sed 's|,[ 	]*/\*\.\.\.\*/|, ...|g;s,int .*__builtin_va_alist.*\([,\)]\),\1,' ;\\
	echo "#endif" ; \\
	} > $(INC_TARGET).tmp
	mv $(INC_TARGET).tmp $(INC_TARGET)

depend: $(INC_TARGET) production-depend $(MAKEFILE)

# Relance une compilation de $(INC_TARGET) en rajoutant la dependance sur les
#	fichiers C :
	PIPS_MAKE_DEPEND_CFILES="$(INC_CFILES)" $(MAKE) $(INC_TARGET)


# Quand on cree le Makefile, il faut toujours le completer avec
#	les dependances d'include :
production-depend: $(DERIVED_HEADERS) $(EXTERN)
	{ sed -n 's/^		*\$\$//; 1,/^### DO NOT DELETE THIS LINE./p;' \\
		$(MAKEFILE) ;\\
	$(PREPROC) -M $(CFILES) ;\\
	} > $(MAKEFILE).new
	$(RM) $(MAKEFILE) ; mv $(MAKEFILE).new $(MAKEFILE)

### DO NOT DELETE THIS LINE. USED FOR MAKE DEPEND
%

# Supprime le mode silencieux -s :
#
[ $DIRTYPE = 'Lib' -o $DIRTYPE = 'Passes' ] &&
if [ $DIRSIDE = $PIPS_DEVEDIR ]
then 
  make -f $MAKEFILE depend
else
  make -f $MAKEFILE production-depend
fi

### end good case

echo

### end main loop
done

