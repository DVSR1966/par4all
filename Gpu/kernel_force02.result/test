void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void * P4A_copy_from_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(l = 0; l <= size-1; l += 1)
         cdest[(i+d1_offset)*size+l] = csrc[i*size+l];
   return dest;
}
void * P4A_copy_from_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(j = 0; j <= d2_block_length-1; j += 1)
         for(l = 0; l <= size-1; l += 1)
            cdest[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l] = csrc[i*size*d2_block_length+j*size+l];
   return dest;
}
void * P4A_copy_to_accel(void *dest, const void *src, size_t size, size_t d1_length, size_t d1_offset, size_t d1_block_length)
{
   size_t i, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(l = 0; l <= size-1; l += 1)
         cdest[i*size+l] = csrc[(i+d1_offset)*size+l];
   return dest;
}
void * P4A_copy_to_accel2d(void *dest, const void *src, size_t size, size_t d1_length, size_t d2_length, size_t d1_offset, size_t d2_offset, size_t d1_block_length, size_t d2_block_length)
{
   size_t i, j, l;

   char *cdest = (char *) dest, *csrc = (char *) src;
   for(i = 0; i <= d1_block_length-1; i += 1)
      for(j = 0; j <= d2_block_length-1; j += 1)
         for(l = 0; l <= size-1; l += 1)
            cdest[i*size*d2_block_length+j*size+l] = csrc[(i+d1_offset)*size*d2_length+(j+d2_offset)*size+l];
   return dest;
}
int main()
{

   int a[100] = {0};
   int b[100] = {1};
   {
      //PIPS generated variable
      int (*b0)[100] = (int (*)[100]) 0, (*a0)[100] = (int (*)[100]) 0;
      P4A_accel_malloc((void **) &a0, sizeof(int)*100);
      P4A_accel_malloc((void **) &b0, sizeof(int)*100);
      P4A_copy_to_accel(*a0, &a[0], sizeof(int), 100, 0, 100);


      myKernel((*a0), (*b0));
      P4A_copy_from_accel(&b[0], *b0, sizeof(int), 100, 0, 100);
      P4A_accel_free((void **) &a0);
      P4A_accel_free((void **) &b0);
   }

   return 0;
}
void myKernel(int a[100], int b[100])
{
   int i;
   for(i = 50; i <= 99; i += 1)
      b[i] = a[i];
}
