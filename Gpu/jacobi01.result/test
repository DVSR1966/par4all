
//  <save[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>
//  <save[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>
//  <space[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>
//  <space[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>

void compute(float_t space[501][501], float_t save[501][501])
{
   int t;                                                               /*0106*/

//  <save[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>
//  <save[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>
//  <space[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>
//  <space[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>

   
   /* Apply the relaxation T times: */
   for(t = 0; t <= 399; t += 1)

//  <save[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500, 0<=t, t<=399}>
//  <save[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2, PHI2<=499,
//    0<=t, t<=399}>
//  <space[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500, 0<=t, t<=399}>
//  <space[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499, 0<=t, t<=399}>

      iteration(space, save);                                           /*0110*/
}

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>

void get_data(char filename[])
{
   int i, j, nx, ny;                                                    /*0017*/
   unsigned char c;                                                     /*0018*/
   FILE *fp;                                                            /*0019*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <filename[PHI1]-R-MAY-{}>
//  <fp-W-EXACT-{}>
//  <stderr-R-MAY-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>

   if ((fp = fopen(filename, "r"))==(void *) 0) {                       /*0021*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==2}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==2}>
//  <stderr-R-EXACT-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>

      perror("Error loading file");                                     /*0022*/
      exit(0);                                                          /*0023*/
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   
   /* Get *.pgm file type */
   c = fgetc(fp);                                                       /*0027*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   c = fgetc(fp);                                                       /*0028*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   do {                                                                 /*0033*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

      while ((c = fgetc(fp))!='\n')                                     /*0032*/
         ;                                                              /*0032*/
   }
   while ((c = fgetc(fp))=='#');                                        /*0033*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   
   /* Put back good char */
   ungetc(c, fp);                                                       /*0036*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   
   /* Get image dimensions */
   fscanf(fp, "%d %d\n", &nx, &ny);                                     /*0039*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   /* Get grey levels */
   fscanf(fp, "%d", &i);                                                /*0041*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   /* Get ONE carriage return */
   fgetc(fp);                                                           /*0043*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>

   printf("Input image  : x=%d y=%d grey=%d\n", nx, ny, i);             /*0044*/

//  <space[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=500, 0<=PHI2,
//    PHI2<=500}>

   
   /* Erase the memory, in case the image is not big enough: */
   for(i = 0; i <= 500; i += 1)

//  <space[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=500, 0<=i,
//    i<=500}>

      for(j = 0; j <= 500; j += 1)

//  <space[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=500, 0<=j,
//    j<=500}>

         space[i][j] = 0;                                               /*0049*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0, i==501, 1<=ny}>
//  <fp[PHI1]-W-MAY-{PHI1==0, i==501, 1<=ny}>
//  <space[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=500, PHI1+1<=nx, 0<=PHI2,
//    PHI2<=500, PHI2+1<=ny, i==501}>

   
   /* Read the pixel grey value: */
   for(j = 0; j <= ny-1; j += 1)

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0, 0<=j, j+1<=ny}>
//  <fp[PHI1]-W-MAY-{PHI1==0, 0<=j, j+1<=ny}>
//  <space[PHI1][PHI2]-W-MAY-{PHI2==j, 0<=PHI1, PHI1<=500, PHI1+1<=nx,
//    0<=j, j<=500, j+1<=ny}>

      for(i = 0; i <= nx-1; i += 1) {

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

         c = fgetc(fp);                                                 /*0054*/

//  <space[PHI1][PHI2]-W-MAY-{PHI1==i, PHI2==j, 0<=i, i<=500, i+1<=nx,
//    0<=j, j<=500, j+1<=ny}>

         /* Truncate the image if too big: */
         if (i<501&&j<501)                                              /*0056*/

//  <space[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=500,
//    i+1<=nx, 0<=j, j<=500, j+1<=ny}>

            space[i][j] = c;                                            /*0057*/
      }

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>


   fclose(fp);                                                          /*0060*/
}

//  <save[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>
//  <save[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>
//  <space[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>
//  <space[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>

void iteration(float_t space[501][501], float_t save[501][501])
{
   int i, j;                                                            /*0087*/

//  <save[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499}>
//  <space[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500}>

   
   /* Use 2 arrays in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   for(i = 0; i <= 498; i += 1)

//  <save[PHI1][PHI2]-W-EXACT-{PHI1==i+1, 1<=PHI2, PHI2<=499, 0<=i,
//    i<=498}>
//  <space[PHI1][PHI2]-R-MAY-{i+1<=PHI1+PHI2, PHI2+i<=PHI1+499,
//    PHI1<=PHI2+i+1, PHI1+PHI2<=i+501, i<=PHI1, PHI1<=i+2, 0<=i,
//    i<=498}>

      for(j = 0; j <= 498; j += 1)

//  <save[PHI1][PHI2]-W-EXACT-{PHI1==i+1, PHI2==j+1, 0<=i, i<=498,
//    0<=j, j<=498}>
//  <space[PHI1][PHI2]-R-MAY-{i+j+1<=PHI1+PHI2, PHI2+i<=PHI1+j+1,
//    PHI1+j<=PHI2+i+1, PHI1+PHI2<=i+j+3, 0<=i, i<=498, 0<=j, j<=498}>


         save[i+1][j+1] = 0.25*(space[i+1-1][j+1]+space[i+1+1][j+1]+space[i+1][j+1-1]+space[i+1][j+1+1]);            /*0094*/

//  <save[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500, j==499}>
//  <space[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499, j==499}>


   for(i = 0; i <= 498; i += 1)

//  <save[PHI1][PHI2]-R-MAY-{i+1<=PHI1+PHI2, PHI2+i<=PHI1+499,
//    PHI1<=PHI2+i+1, PHI1+PHI2<=i+501, i<=PHI1, PHI1<=i+2, 0<=i,
//    i<=498}>
//  <space[PHI1][PHI2]-W-EXACT-{PHI1==i+1, 1<=PHI2, PHI2<=499, 0<=i,
//    i<=498}>

      for(j = 0; j <= 498; j += 1)

//  <save[PHI1][PHI2]-R-MAY-{i+j+1<=PHI1+PHI2, PHI2+i<=PHI1+j+1,
//    PHI1+j<=PHI2+i+1, PHI1+PHI2<=i+j+3, 0<=i, i<=498, 0<=j, j<=498}>
//  <space[PHI1][PHI2]-W-EXACT-{PHI1==i+1, PHI2==j+1, 0<=i, i<=498,
//    0<=j, j<=498}>


         space[i+1][j+1] = 0.25*(save[i+1-1][j+1]+save[i+1+1][j+1]+save[i+1][j+1-1]+save[i+1][j+1+1]);               /*0100*/
}

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>

void write_data(char filename[])
{
   int i, j;                                                            /*0065*/
   unsigned char c;                                                     /*0066*/
   FILE *fp;                                                            /*0067*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <filename[PHI1]-R-MAY-{}>
//  <fp-W-EXACT-{}>
//  <stderr-R-MAY-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>

   if ((fp = fopen(filename, "w"))==(void *) 0) {                       /*0069*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==2}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==2}>
//  <stderr-R-EXACT-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>

      perror("Error opening file");                                     /*0070*/
      exit(0);                                                          /*0071*/
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   
   /* Write the PGM header: */
   fprintf(fp, "P5\n%d %d\n255\n", 501, 501);                           /*0075*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>
//  <space[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=500, 0<=PHI2,
//    PHI2<=500}>


   for(j = 0; j <= 500; j += 1)

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0, 0<=j, j<=500}>
//  <fp[PHI1]-W-MAY-{PHI1==0, 0<=j, j<=500}>
//  <space[PHI1][PHI2]-R-EXACT-{PHI2==j, 0<=PHI1, PHI1<=500, 0<=j,
//    j<=500}>

      for(i = 0; i <= 500; i += 1) {

//  <space[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=500, 0<=j,
//    j<=500}>

         c = space[i][j];                                               /*0079*/

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

         fputc(c, fp);                                                  /*0080*/
      }

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <fp-R-EXACT-{}>
//  <fp[PHI1]-R-MAY-{PHI1==0}>
//  <fp[PHI1]-W-MAY-{PHI1==0}>

   fclose(fp);                                                          /*0082*/
}

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>

int main(int argc, char *argv[])
{
   int i;                                                               /*0116*/

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==2}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==2}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>


   if (argc!=2) {                                                       /*0118*/

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==2}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==2}>
//  <stderr-R-EXACT-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>

      
      
      fprintf(stderr, "%s needs only one argument that is the PGM image input file\n", argv[0]);      /*0121*/
      exit(0);                                                          /*0122*/
   }

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>

   get_data(argv[1]);                                                   /*0124*/

//  <save[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=500, 0<=PHI2, PHI2<=500,
//    argc==2}>

   
   /* Initialize the border of the destination image, since it is used but
        never written to: */
   for(i = 0; i <= 500; i += 1)

//  <save[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=500, i<=PHI1+PHI2,
//    PHI1+PHI2<=i+500, 0<=PHI2, PHI2<=500, argc==2, 0<=i, i<=500}>

      save[i][0] = save[0][i] = save[i][501-1] = save[501-1][i] = 0;    /*0129*/

//  <save[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500, i==501, argc==2}>
//  <save[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2, PHI2<=499,
//    i==501, argc==2}>
//  <space[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=500, 1<=PHI1+PHI2,
//    PHI2<=PHI1+499, PHI1<=PHI2+499, PHI1+PHI2<=999, 0<=PHI2,
//    PHI2<=500, i==501, argc==2}>
//  <space[PHI1][PHI2]-W-EXACT-{1<=PHI1, PHI1<=499, 1<=PHI2,
//    PHI2<=499, i==501, argc==2}>


   compute(space, save);                                                /*0131*/

//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>


   write_data("output.pgm");                                            /*0133*/

   return 0;                                                            /*0135*/
}
void compute(float_t space[501][501], float_t save[501][501])
{
   int t;                                                               /*0106*/
   
   /* Apply the relaxation T times: */
   for(t = 0; t <= 399; t += 1)
      iteration(space, save);                                           /*0110*/
}
void get_data(char filename[])
{
   int i, j, nx, ny;                                                    /*0017*/
   unsigned char c;                                                     /*0018*/
   FILE *fp;                                                            /*0019*/
   if ((fp = fopen(filename, "r"))==(void *) 0) {                       /*0021*/
      perror("Error loading file");                                     /*0022*/
      exit(0);                                                          /*0023*/
   }
   
   /* Get *.pgm file type */
   c = fgetc(fp);                                                       /*0027*/
   c = fgetc(fp);                                                       /*0028*/
   do {                                                                 /*0033*/
      while ((c = fgetc(fp))!='\n')                                     /*0032*/
         ;                                                              /*0032*/
   }
   while ((c = fgetc(fp))=='#');                                        /*0033*/
   
   /* Put back good char */
   ungetc(c, fp);                                                       /*0036*/
   
   /* Get image dimensions */
   fscanf(fp, "%d %d\n", &nx, &ny);                                     /*0039*/
   /* Get grey levels */
   fscanf(fp, "%d", &i);                                                /*0041*/
   /* Get ONE carriage return */
   fgetc(fp);                                                           /*0043*/
   printf("Input image  : x=%d y=%d grey=%d\n", nx, ny, i);             /*0044*/
   
   /* Erase the memory, in case the image is not big enough: */
#pragma omp parallel for private(j)
   for(i = 0; i <= 500; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 500; j += 1)
         space[i][j] = 0;                                               /*0049*/
   
   /* Read the pixel grey value: */
   for(j = 0; j <= ny-1; j += 1)
      for(i = 0; i <= nx-1; i += 1) {
         c = fgetc(fp);                                                 /*0054*/
         /* Truncate the image if too big: */
         if (i<501&&j<501)                                              /*0056*/
            space[i][j] = c;                                            /*0057*/
      }

   fclose(fp);                                                          /*0060*/
}
void iteration(float_t space[501][501], float_t save[501][501])
{
   int i, j;                                                            /*0087*/
   
   /* Use 2 arrays in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
#pragma omp parallel for private(j)
   for(i = 0; i <= 498; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 498; j += 1)

         save[i+1][j+1] = 0.25*(space[i+1-1][j+1]+space[i+1+1][j+1]+space[i+1][j+1-1]+space[i+1][j+1+1]);            /*0094*/

#pragma omp parallel for private(j)
   for(i = 0; i <= 498; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 498; j += 1)

         space[i+1][j+1] = 0.25*(save[i+1-1][j+1]+save[i+1+1][j+1]+save[i+1][j+1-1]+save[i+1][j+1+1]);               /*0100*/
}
void write_data(char filename[])
{
   int i, j;                                                            /*0065*/
   unsigned char c;                                                     /*0066*/
   FILE *fp;                                                            /*0067*/
   if ((fp = fopen(filename, "w"))==(void *) 0) {                       /*0069*/
      perror("Error opening file");                                     /*0070*/
      exit(0);                                                          /*0071*/
   }
   
   /* Write the PGM header: */
   fprintf(fp, "P5\n%d %d\n255\n", 501, 501);                           /*0075*/

   for(j = 0; j <= 500; j += 1)
      for(i = 0; i <= 500; i += 1) {
         c = space[i][j];                                               /*0079*/
         fputc(c, fp);                                                  /*0080*/
      }
   fclose(fp);                                                          /*0082*/
}
int main(int argc, char *argv[])
{
   int i;                                                               /*0116*/

   if (argc!=2) {                                                       /*0118*/
      
      
      fprintf(stderr, "%s needs only one argument that is the PGM image input file\n", argv[0]);      /*0121*/
      exit(0);                                                          /*0122*/
   }
   get_data(argv[1]);                                                   /*0124*/
   
   /* Initialize the border of the destination image, since it is used but
        never written to: */
   for(i = 0; i <= 500; i += 1)
      save[i][0] = save[0][i] = save[i][501-1] = save[501-1][i] = 0;    /*0129*/

   compute(space, save);                                                /*0131*/

   write_data("output.pgm");                                            /*0133*/

   return 0;                                                            /*0135*/
}
void compute(float_t space[501][501], float_t save[501][501])
{
   int t;                                                               /*0106*/
   
   /* Apply the relaxation T times: */
   for(t = 0; t <= 399; t += 1)
      iteration(space, save);                                           /*0110*/
}
void get_data(char filename[])
{
   int i, j, nx, ny;                                                    /*0017*/
   unsigned char c;                                                     /*0018*/
   FILE *fp;                                                            /*0019*/
   if ((fp = fopen(filename, "r"))==(void *) 0) {                       /*0021*/
      perror("Error loading file");                                     /*0022*/
      exit(0);                                                          /*0023*/
   }
   
   /* Get *.pgm file type */
   c = fgetc(fp);                                                       /*0027*/
   c = fgetc(fp);                                                       /*0028*/
   do {                                                                 /*0033*/
      while ((c = fgetc(fp))!='\n')                                     /*0032*/
         ;                                                              /*0032*/
   }
   while ((c = fgetc(fp))=='#');                                        /*0033*/
   
   /* Put back good char */
   ungetc(c, fp);                                                       /*0036*/
   
   /* Get image dimensions */
   fscanf(fp, "%d %d\n", &nx, &ny);                                     /*0039*/
   /* Get grey levels */
   fscanf(fp, "%d", &i);                                                /*0041*/
   /* Get ONE carriage return */
   fgetc(fp);                                                           /*0043*/
   printf("Input image  : x=%d y=%d grey=%d\n", nx, ny, i);             /*0044*/
   
   /* Erase the memory, in case the image is not big enough: */
   p4a_kernel_launcher_0(space);
   
   /* Read the pixel grey value: */
   for(j = 0; j <= ny-1; j += 1)
      for(i = 0; i <= nx-1; i += 1) {
         c = fgetc(fp);                                                 /*0054*/
         /* Truncate the image if too big: */
         if (i<501&&j<501)                                              /*0056*/
            space[i][j] = c;                                            /*0057*/
      }

   fclose(fp);                                                          /*0060*/
}
void iteration(float_t space[501][501], float_t save[501][501])
{
   int i, j;                                                            /*0087*/
   
   /* Use 2 arrays in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
   p4a_kernel_launcher_1(save, space);

   p4a_kernel_launcher_2(save, space);
}
void write_data(char filename[])
{
   int i, j;                                                            /*0065*/
   unsigned char c;                                                     /*0066*/
   FILE *fp;                                                            /*0067*/
   if ((fp = fopen(filename, "w"))==(void *) 0) {                       /*0069*/
      perror("Error opening file");                                     /*0070*/
      exit(0);                                                          /*0071*/
   }
   
   /* Write the PGM header: */
   fprintf(fp, "P5\n%d %d\n255\n", 501, 501);                           /*0075*/

   for(j = 0; j <= 500; j += 1)
      for(i = 0; i <= 500; i += 1) {
         c = space[i][j];                                               /*0079*/
         fputc(c, fp);                                                  /*0080*/
      }
   fclose(fp);                                                          /*0082*/
}
int main(int argc, char *argv[])
{
   int i;                                                               /*0116*/

   if (argc!=2) {                                                       /*0118*/
      
      
      fprintf(stderr, "%s needs only one argument that is the PGM image input file\n", argv[0]);      /*0121*/
      exit(0);                                                          /*0122*/
   }
   get_data(argv[1]);                                                   /*0124*/
   
   /* Initialize the border of the destination image, since it is used but
        never written to: */
   for(i = 0; i <= 500; i += 1)
      save[i][0] = save[0][i] = save[i][501-1] = save[501-1][i] = 0;    /*0129*/

   compute(space, save);                                                /*0131*/

   write_data("output.pgm");                                            /*0133*/

   return 0;                                                            /*0135*/
}
void p4a_kernel_launcher_2(float_t save[501][501], float_t space[501][501])
{
   //PIPS generated variable
   int i, j;                                                            /*0004*/

   for(i = 0; i <= 498; i += 1)
      for(j = 0; j <= 498; j += 1)
         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         
         p4a_kernel_wrapper_2(i, j, save, space);                       /*0011*/
}
void p4a_kernel_launcher_0(float_t space[501][501])
{
   //PIPS generated variable
   int i, j;                                                            /*0004*/
   
   /* Erase the memory, in case the image is not big enough: */
   for(i = 0; i <= 500; i += 1)
      for(j = 0; j <= 500; j += 1)
         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         p4a_kernel_wrapper_0(space, i, j);                             /*0011*/
}
void p4a_kernel_launcher_1(float_t save[501][501], float_t space[501][501])
{
   //PIPS generated variable
   int i, j;                                                            /*0004*/
   
   /* Use 2 arrays in flip-flop to have dataparallel forall semantics. I
           could use also a flip-flop dimension instead... */
   for(i = 0; i <= 498; i += 1)
      for(j = 0; j <= 498; j += 1)
         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         
         p4a_kernel_wrapper_1(i, j, save, space);                       /*0013*/
}
void p4a_kernel_launcher_2(float_t save[501][501], float_t space[501][501])
{
   //PIPS generated variable
   int i, j;                                                            /*0004*/

   for(i = 0; i <= 498; i += 1)
      for(j = 0; j <= 498; j += 1)
         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         
         p4a_kernel_wrapper_2(i, j, save, space);                       /*0011*/
}
void p4a_kernel_launcher_0(float_t space[501][501])
{
   //PIPS generated variable
   int i, j;                                                            /*0004*/
   
   /* Erase the memory, in case the image is not big enough: */
   for(i = 0; i <= 500; i += 1)
      for(j = 0; j <= 500; j += 1)
         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         p4a_kernel_wrapper_0(space, i, j);                             /*0011*/
}
void p4a_kernel_launcher_1(float_t save[501][501], float_t space[501][501])
{
   //PIPS generated variable
   int i, j;                                                            /*0004*/
   
   /* Use 2 arrays in flip-flop to have dataparallel forall semantics. I
           could use also a flip-flop dimension instead... */
   for(i = 0; i <= 498; i += 1)
      for(j = 0; j <= 498; j += 1)
         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         
         p4a_kernel_wrapper_1(i, j, save, space);                       /*0013*/
}
void p4a_kernel_wrapper_2(int i, int j, float_t save[501][501], float_t space[501][501])
{
   // To be assigned to a call to P4A_vp_0: i
   // To be assigned to a call to P4A_vp_1: j
   
   
   space[i+1][j+1] = 0.25*(save[i+1-1][j+1]+save[i+1+1][j+1]+save[i+1][j+1-1]+save[i+1][j+1+1]);      /*0008*/
   /*0004*/
   ;
}
void p4a_kernel_wrapper_0(float_t space[501][501], int i, int j)
{
   // To be assigned to a call to P4A_vp_0: i
   // To be assigned to a call to P4A_vp_1: j
   space[i][j] = 0;                                                     /*0006*/
   /*0003*/
   ;
}
void p4a_kernel_wrapper_1(int i, int j, float_t save[501][501], float_t space[501][501])
{
   // To be assigned to a call to P4A_vp_0: i
   // To be assigned to a call to P4A_vp_1: j
   
   
   save[i+1][j+1] = 0.25*(space[i+1-1][j+1]+space[i+1+1][j+1]+space[i+1][j+1-1]+space[i+1][j+1+1]);   /*0008*/
   /*0004*/
   ;
}
