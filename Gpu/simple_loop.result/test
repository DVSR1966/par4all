
"After COARSE_GRAIN_PARALLELIZATION"

int main()
{
   int i;

#pragma omp parallel for 
   for(i = 0; i <= 9999; i += 1)
      a[i] = b[i]+c[i];

   return 0;
}

"After GPU_IFY"

int main()
{
   int i;

   p4a_kernel_launcher_0(N, a, b, c);

   return 0;
}
void p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N])
{
   //PIPS generated variable
   int i;

   for(i = 0; i <= 9999; i += 1)
      // To be assigned to a call to P4A_vp_0: i
      p4a_kernel_wrapper_0(N, a, b, c, i);
}
void p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_0(N, a, b, c, i);
}
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}

"After KERNEL_LOAD_STORE"

int main()
{
   int i;

   p4a_kernel_launcher_0(N, a, b, c);

   return 0;
}
void p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N])
{
   //PIPS generated variable
   int i;

   for(i = 0; i <= 9999; i += 1)
      // To be assigned to a call to P4A_vp_0: i
      p4a_kernel_wrapper_0(N, a, b, c, i);
}
void p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_0(N, a, b, c, i);
}
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
[after unsplit and recovering]
/*
 * file for simple_loop.c
 */
enum {N=10000};

double a[N], b[N], c[N];

int main();
//PIPS generated variable
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i), p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i), p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N]);
void p4a_kernel_launcher_0(int N, double a[N], double b[N], double c[N])
{
   //PIPS generated variable
   int i;

   for(i = 0; i <= 9999; i += 1)
      // To be assigned to a call to P4A_vp_0: i
      p4a_kernel_wrapper_0(N, a, b, c, i);
}
void p4a_kernel_wrapper_0(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_0(N, a, b, c, i);
}
void p4a_kernel_0(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
int main()
{
   int i;

   p4a_kernel_launcher_0(N, a, b, c);

   return 0;
}
